
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35730/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
var app = (function () {

    function noop$2() { }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    let src_url_equal_anchor;
    function src_url_equal(element_src, url) {
        if (!src_url_equal_anchor) {
            src_url_equal_anchor = document.createElement('a');
        }
        src_url_equal_anchor.href = url;
        return element_src === src_url_equal_anchor.href;
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function append(target, node) {
        target.appendChild(node);
    }
    function insert$1(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function svg_element(name) {
        return document.createElementNS('http://www.w3.org/2000/svg', name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function empty() {
        return text('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_input_value(input, value) {
        input.value = value == null ? '' : value;
    }
    function set_style(node, key, value, important) {
        if (value === null) {
            node.style.removeProperty(key);
        }
        else {
            node.style.setProperty(key, value, important ? 'important' : '');
        }
    }
    function custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, bubbles, cancelable, detail);
        return e;
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    function onDestroy(fn) {
        get_current_component().$$.on_destroy.push(fn);
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    function add_flush_callback(fn) {
        flush_callbacks.push(fn);
    }
    // flush() calls callbacks in this order:
    // 1. All beforeUpdate callbacks, in order: parents before children
    // 2. All bind:this callbacks, in reverse order: children before parents.
    // 3. All afterUpdate callbacks, in order: parents before children. EXCEPT
    //    for afterUpdates called during the initial onMount, which are called in
    //    reverse order: children before parents.
    // Since callbacks might update component values, which could trigger another
    // call to flush(), the following steps guard against this:
    // 1. During beforeUpdate, any updated components will be added to the
    //    dirty_components array and will cause a reentrant call to flush(). Because
    //    the flush index is kept outside the function, the reentrant call will pick
    //    up where the earlier call left off and go through all dirty components. The
    //    current_component value is saved and restored so that the reentrant call will
    //    not interfere with the "parent" flush() call.
    // 2. bind:this callbacks cannot trigger new flush() calls.
    // 3. During afterUpdate, any updated components will NOT have their afterUpdate
    //    callback called a second time; the seen_callbacks set, outside the flush()
    //    function, guarantees this behavior.
    const seen_callbacks = new Set();
    let flushidx = 0; // Do *not* move this inside the flush() function
    function flush() {
        const saved_component = current_component;
        do {
            // first, call beforeUpdate functions
            // and update components
            while (flushidx < dirty_components.length) {
                const component = dirty_components[flushidx];
                flushidx++;
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            flushidx = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        seen_callbacks.clear();
        set_current_component(saved_component);
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
        else if (callback) {
            callback();
        }
    }

    const globals = (typeof window !== 'undefined'
        ? window
        : typeof globalThis !== 'undefined'
            ? globalThis
            : global);

    function destroy_block(block, lookup) {
        block.d(1);
        lookup.delete(block.key);
    }
    function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {
        let o = old_blocks.length;
        let n = list.length;
        let i = o;
        const old_indexes = {};
        while (i--)
            old_indexes[old_blocks[i].key] = i;
        const new_blocks = [];
        const new_lookup = new Map();
        const deltas = new Map();
        i = n;
        while (i--) {
            const child_ctx = get_context(ctx, list, i);
            const key = get_key(child_ctx);
            let block = lookup.get(key);
            if (!block) {
                block = create_each_block(key, child_ctx);
                block.c();
            }
            else if (dynamic) {
                block.p(child_ctx, dirty);
            }
            new_lookup.set(key, new_blocks[i] = block);
            if (key in old_indexes)
                deltas.set(key, Math.abs(i - old_indexes[key]));
        }
        const will_move = new Set();
        const did_move = new Set();
        function insert(block) {
            transition_in(block, 1);
            block.m(node, next);
            lookup.set(block.key, block);
            next = block.first;
            n--;
        }
        while (o && n) {
            const new_block = new_blocks[n - 1];
            const old_block = old_blocks[o - 1];
            const new_key = new_block.key;
            const old_key = old_block.key;
            if (new_block === old_block) {
                // do nothing
                next = new_block.first;
                o--;
                n--;
            }
            else if (!new_lookup.has(old_key)) {
                // remove old block
                destroy(old_block, lookup);
                o--;
            }
            else if (!lookup.has(new_key) || will_move.has(new_key)) {
                insert(new_block);
            }
            else if (did_move.has(old_key)) {
                o--;
            }
            else if (deltas.get(new_key) > deltas.get(old_key)) {
                did_move.add(new_key);
                insert(new_block);
            }
            else {
                will_move.add(old_key);
                o--;
            }
        }
        while (o--) {
            const old_block = old_blocks[o];
            if (!new_lookup.has(old_block.key))
                destroy(old_block, lookup);
        }
        while (n)
            insert(new_blocks[n - 1]);
        return new_blocks;
    }
    function validate_each_keys(ctx, list, get_context, get_key) {
        const keys = new Set();
        for (let i = 0; i < list.length; i++) {
            const key = get_key(get_context(ctx, list, i));
            if (keys.has(key)) {
                throw new Error('Cannot have duplicate keys in a keyed each');
            }
            keys.add(key);
        }
    }

    function bind$2(component, name, callback) {
        const index = component.$$.props[name];
        if (index !== undefined) {
            component.$$.bound[index] = callback;
            callback(component.$$.ctx[index]);
        }
    }
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = on_mount.map(run).filter(is_function);
                if (on_destroy) {
                    on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop$2,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false,
            root: options.target || parent_component.$$.root
        };
        append_styles && append_styles($$.root);
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop$2;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.49.0' }, detail), { bubbles: true }));
    }
    function append_dev(target, node) {
        dispatch_dev('SvelteDOMInsert', { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev('SvelteDOMInsert', { target, node, anchor });
        insert$1(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev('SvelteDOMRemove', { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
        const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
        else
            dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
    }
    function prop_dev(node, property, value) {
        node[property] = value;
        dispatch_dev('SvelteDOMSetProperty', { node, property, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.wholeText === data)
            return;
        dispatch_dev('SvelteDOMSetData', { node: text, data });
        text.data = data;
    }
    function validate_each_argument(arg) {
        if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
            let msg = '{#each} only iterates over array-like objects.';
            if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
                msg += ' You can use a spread to convert this iterable into an array.';
            }
            throw new Error(msg);
        }
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    /**
     * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
     */
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error("'target' is a required option");
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn('Component was already destroyed'); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    !function(n){var r={};function o(t){if(r[t])return r[t].exports;var e=r[t]={i:t,l:!1,exports:{}};return n[t].call(e.exports,e,e.exports,o),e.l=!0,e.exports}o.m=n,o.c=r,o.d=function(t,e,n){o.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n});},o.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0});},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)o.d(n,r,function(t){return e[t]}.bind(null,r));return n},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,"a",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p="",o(o.s=193);}([function(n,t,e){!function(t){function e(t){return t&&t.Math==Math&&t}n.exports=e("object"==typeof globalThis&&globalThis)||e("object"==typeof window&&window)||e("object"==typeof self&&self)||e("object"==typeof t&&t)||function(){return this}()||Function("return this")();}.call(this,e(154));},function(t,e,n){var n=n(60),r=Function.prototype,o=r.bind,i=r.call,a=n&&o.bind(i,i);t.exports=n?function(t){return t&&a(t)}:function(t){return t&&function(){return i.apply(t,arguments)}};},function(t,e){t.exports=function(t){try{return !!t()}catch(t){return !0}};},function(t,e,n){var u=n(0),l=n(42).f,f=n(45),d=n(37),p=n(98),h=n(126),v=n(81);t.exports=function(t,e){var n,r,o,i=t.target,a=t.global,c=t.stat,s=a?u:c?u[i]||p(i,{}):(u[i]||{}).prototype;if(s)for(n in e){if(r=e[n],o=t.noTargetGet?(o=l(s,n))&&o.value:s[n],!v(a?n:i+(c?".":"#")+n,t.forced)&&void 0!==o){if(typeof r==typeof o)continue;h(r,o);}(t.sham||o&&o.sham)&&f(r,"sham",!0),d(s,n,r,t);}};},function(t,e,n){var r=n(105),o=n(37),n=n(158);r||o(Object.prototype,"toString",n,{unsafe:!0});},function(t,e,n){var r=n(30),o=n(89),i=n(68),a=n(49),c=n(22).f,s=n(109),u=n(54),n=n(17),l="Array Iterator",f=a.set,d=a.getterFor(l),a=(t.exports=s(Array,"Array",function(t,e){f(this,{type:l,target:r(t),index:0,kind:e});},function(){var t=d(this),e=t.target,n=t.kind,r=t.index++;return !e||r>=e.length?{value:t.target=void 0,done:!0}:"keys"==n?{value:r,done:!1}:"values"==n?{value:e[r],done:!1}:{value:[r,e[r]],done:!1}},"values"),i.Arguments=i.Array);if(o("keys"),o("values"),o("entries"),!u&&n&&"values"!==a.name)try{c(a,"name",{value:"values"});}catch(t){}},function(t,e,n){var r=n(137).charAt,o=n(23),i=n(49),n=n(109),a="String Iterator",c=i.set,s=i.getterFor(a);n(String,"String",function(t){c(this,{type:a,string:o(t),index:0});},function(){var t=s(this),e=t.string,n=t.index;return n>=e.length?{value:void 0,done:!0}:(e=r(e,n),t.index+=e.length,{value:e,done:!1})});},function(N,R,t){function r(t,e){var n=P[t]=g(T);return ft(n,{type:x,tag:t,description:e}),u||(n.description=e),n}function o(t,e,n){return t===E&&o(M,e,n),h(t),e=y(e),h(n),d(P,e)?(n.enumerable?(d(t,S)&&t[S][e]&&(t[S][e]=!1),n=g(n,{enumerable:m(0,!1)})):(d(t,S)||D(t,S,m(1,{})),t[S][e]=!0),bt(t,e,n)):D(t,e,n)}function n(e,t){h(e);var n=v(t),t=Q(n).concat(a(n));return C(t,function(t){u&&!s(i,n,t)||o(e,t,n[t]);}),e}function i(t){var t=y(t),e=s(yt,this,t);return !(this===E&&d(P,t)&&!d(M,t))&&(!(e||!d(this,t)||!d(P,t)||d(this,S)&&this[S][t])||e)}function B(t,e){var n,t=v(t),e=y(e);if(t!==E||!d(P,e)||d(M,e))return !(n=ht(t,e))||!d(P,e)||d(t,S)&&t[S][e]||(n.enumerable=!0),n}function H(t){var t=vt(v(t)),e=[];return C(t,function(t){d(P,t)||d(it,t)||mt(e,t);}),e}function a(t){var e=t===E,t=vt(e?M:v(t)),n=[];return C(t,function(t){!d(P,t)||e&&!d(E,t)||mt(n,P[t]);}),n}var F,e=t(3),c=t(0),V=t(43),Y=t(84),s=t(21),W=t(1),z=t(54),u=t(17),l=t(96),f=t(2),d=t(20),U=t(86),q=t(14),K=t(19),$=t(44),p=t(73),h=t(18),X=t(36),v=t(30),y=t(72),G=t(23),m=t(61),g=t(50),Q=t(66),Z=t(55),J=t(107),b=t(103),tt=t(42),et=t(22),nt=t(132),rt=t(70),ot=t(106),_=t(37),w=t(77),O=t(79),it=t(63),at=t(78),ct=t(12),st=t(133),ut=t(134),lt=t(87),k=t(49),C=t(56).forEach,S=O("hidden"),x="Symbol",t="prototype",O=ct("toPrimitive"),ft=k.set,dt=k.getterFor(x),E=Object[t],j=c.Symbol,T=j&&j[t],pt=c.TypeError,k=c.QObject,A=V("JSON","stringify"),ht=tt.f,D=et.f,vt=J.f,yt=rt.f,mt=W([].push),P=w("symbols"),M=w("op-symbols"),I=w("string-to-symbol-registry"),L=w("symbol-to-string-registry"),c=w("wks"),gt=!k||!k[t]||!k[t].findChild,bt=u&&f(function(){return 7!=g(D({},"a",{get:function(){return D(this,"a",{value:7}).a}})).a})?function(t,e,n){var r=ht(E,e);r&&delete E[e],D(t,e,n),r&&t!==E&&D(E,e,r);}:D;l||(_(T=(j=function(){if($(T,this))throw pt("Symbol is not a constructor");var t=arguments.length&&void 0!==arguments[0]?G(arguments[0]):void 0,e=at(t),n=function(t){this===E&&s(n,M,t),d(this,S)&&d(this[S],e)&&(this[S][e]=!1),bt(this,e,m(1,t));};return u&&gt&&bt(E,e,{configurable:!0,set:n}),r(e,t)})[t],"toString",function(){return dt(this).tag}),_(j,"withoutSetter",function(t){return r(at(t),t)}),rt.f=i,et.f=o,nt.f=n,tt.f=B,Z.f=J.f=H,b.f=a,st.f=function(t){return r(ct(t),t)},u&&(D(T,"description",{configurable:!0,get:function(){return dt(this).description}}),z||_(E,"propertyIsEnumerable",i,{unsafe:!0}))),e({global:!0,wrap:!0,forced:!l,sham:!l},{Symbol:j}),C(Q(c),function(t){ut(t);}),e({target:x,stat:!0,forced:!l},{for:function(t){t=G(t);if(d(I,t))return I[t];var e=j(t);return I[t]=e,L[e]=t,e},keyFor:function(t){if(!p(t))throw pt(t+" is not a symbol");if(d(L,t))return L[t]},useSetter:function(){gt=!0;},useSimple:function(){gt=!1;}}),e({target:"Object",stat:!0,forced:!l,sham:!u},{create:function(t,e){return void 0===e?g(t):n(g(t),e)},defineProperty:o,defineProperties:n,getOwnPropertyDescriptor:B}),e({target:"Object",stat:!0,forced:!l},{getOwnPropertyNames:H,getOwnPropertySymbols:a}),e({target:"Object",stat:!0,forced:f(function(){b.f(1);})},{getOwnPropertySymbols:function(t){return b.f(X(t))}}),A&&e({target:"JSON",stat:!0,forced:!l||f(function(){var t=j();return "[null]"!=A([t])||"{}"!=A({a:t})||"{}"!=A(Object(t))})},{stringify:function(t,e,n){var r=ot(arguments),o=e;if((K(e)||void 0!==t)&&!p(t))return U(e)||(e=function(t,e){if(q(o)&&(e=s(o,this,t,e)),!p(e))return e}),r[1]=e,Y(A,null,r)}}),T[O]||(F=T.valueOf,_(T,O,function(t){return s(F,this)})),lt(j,x),it[S]=!0;},function(t,e,n){function r(e,t){if(e){if(e[l]!==d)try{u(e,l,d);}catch(t){e[l]=d;}if(e[f]||u(e,f,t),a[t])for(var n in s)if(e[n]!==s[n])try{u(e,n,s[n]);}catch(t){e[n]=s[n];}}}var o,i=n(0),a=n(138),c=n(139),s=n(5),u=n(45),n=n(12),l=n("iterator"),f=n("toStringTag"),d=s.values;for(o in a)r(i[o]&&i[o].prototype,o);r(c,"DOMTokenList");},function(t,e,n){function r(e){if(e&&e.forEach!==s)try{u(e,"forEach",s);}catch(t){e.forEach=s;}}var o,i=n(0),a=n(138),c=n(139),s=n(168),u=n(45);for(o in a)a[o]&&r(i[o]&&i[o].prototype);r(c);},function(t,e,n){var r,o,i,a,c,s,u,l=n(3),f=n(17),d=n(0),p=n(1),h=n(20),v=n(14),y=n(44),m=n(23),g=n(22).f,n=n(126),b=d.Symbol,_=b&&b.prototype;!f||!v(b)||"description"in _&&void 0===b().description||(r={},n(d=function(){var t=arguments.length<1||void 0===arguments[0]?void 0:m(arguments[0]),e=y(_,this)?new b(t):void 0===t?b():b(t);return ""===t&&(r[e]=!0),e},b),(d.prototype=_).constructor=d,o="Symbol(test)"==String(b("test")),i=p(_.toString),a=p(_.valueOf),c=/^Symbol\((.*)\)[^)]+$/,s=p("".replace),u=p("".slice),g(_,"description",{configurable:!0,get:function(){var t=a(this),e=i(t);if(h(r,t))return "";t=o?u(e,7,-1):s(e,c,"$1");return ""===t?void 0:t}}),l({global:!0,forced:!0},{Symbol:d}));},function(t,e,n){n(134)("iterator");},function(t,e,n){var r=n(0),o=n(77),i=n(20),a=n(78),c=n(96),s=n(123),u=o("wks"),l=r.Symbol,f=l&&l.for,d=s?l:l&&l.withoutSetter||a;t.exports=function(t){var e;return i(u,t)&&(c||"string"==typeof u[t])||(e="Symbol."+t,c&&i(l,t)?u[t]=l[t]:u[t]=(s&&f?f:d)(e)),u[t]};},function(t,e,n){var r=n(3),o=n(36),i=n(66);r({target:"Object",stat:!0,forced:n(2)(function(){i(1);})},{keys:function(t){return i(o(t))}});},function(t,e){t.exports=function(t){return "function"==typeof t};},function(t,e,n){var r=n(3),o=n(56).filter;r({target:"Array",proto:!0,forced:!n(94)("filter")},{filter:function(t){return o(this,t,1<arguments.length?arguments[1]:void 0)}});},function(t,e,n){var r=n(3),n=n(90);r({target:"RegExp",proto:!0,forced:/./.exec!==n},{exec:n});},function(t,e,n){n=n(2);t.exports=!n(function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]});},function(t,e,n){var r=n(0),o=n(19),i=r.String,a=r.TypeError;t.exports=function(t){if(o(t))return t;throw a(i(t)+" is not an object")};},function(t,e,n){var r=n(14);t.exports=function(t){return "object"==typeof t?null!==t:r(t)};},function(t,e,n){var r=n(1),o=n(36),i=r({}.hasOwnProperty);t.exports=Object.hasOwn||function(t,e){return i(o(t),e)};},function(t,e,n){var n=n(60),r=Function.prototype.call;t.exports=n?r.bind(r):function(){return r.apply(r,arguments)};},function(t,e,n){var r=n(0),o=n(17),i=n(124),a=n(125),c=n(18),s=n(72),u=r.TypeError,l=Object.defineProperty,f=Object.getOwnPropertyDescriptor,d="enumerable",p="configurable",h="writable";e.f=o?a?function(t,e,n){var r;return c(t),e=s(e),c(n),"function"==typeof t&&"prototype"===e&&"value"in n&&h in n&&!n[h]&&((r=f(t,e))&&r[h]&&(t[e]=n.value,n={configurable:(p in n?n:r)[p],enumerable:(d in n?n:r)[d],writable:!1})),l(t,e,n)}:l:function(t,e,n){if(c(t),e=s(e),c(n),i)try{return l(t,e,n)}catch(t){}if("get"in n||"set"in n)throw u("Accessors not supported");return "value"in n&&(t[e]=n.value),t};},function(t,e,n){var r=n(0),o=n(83),i=r.String;t.exports=function(t){if("Symbol"===o(t))throw TypeError("Cannot convert a Symbol value to a string");return i(t)};},function(t,e,n){var r=n(3),o=n(2),i=n(30),a=n(42).f,n=n(17),o=o(function(){a(1);});r({target:"Object",stat:!0,forced:!n||o,sham:!n},{getOwnPropertyDescriptor:function(t,e){return a(i(t),e)}});},function(t,e,n){var r=n(3),o=n(17),s=n(127),u=n(30),l=n(42),f=n(67);r({target:"Object",stat:!0,sham:!o},{getOwnPropertyDescriptors:function(t){for(var e,n,r=u(t),o=l.f,i=s(r),a={},c=0;i.length>c;)void 0!==(n=o(r,e=i[c++]))&&f(a,e,n);return a}});},function(t,e,n){var r=n(3),o=n(0),i=n(2),u=n(86),l=n(19),f=n(36),d=n(46),p=n(67),h=n(135),a=n(94),c=n(12),n=n(74),v=c("isConcatSpreadable"),y=9007199254740991,m="Maximum allowed index exceeded",g=o.TypeError,c=51<=n||!i(function(){var t=[];return t[v]=!1,t.concat()[0]!==t}),o=a("concat");r({target:"Array",proto:!0,forced:!c||!o},{concat:function(t){for(var e,n,r,o=f(this),i=h(o,0),a=0,c=-1,s=arguments.length;c<s;c++)if(function(t){if(!l(t))return !1;var e=t[v];return void 0!==e?!!e:u(t)}(r=-1===c?o:arguments[c])){if(n=d(r),y<a+n)throw g(m);for(e=0;e<n;e++,a++)e in r&&p(i,a,r[e]);}else {if(y<=a)throw g(m);p(i,a++,r);}return i.length=a,i}});},function(t,e,n){var r=n(3),o=n(0),u=n(86),l=n(85),f=n(19),d=n(101),p=n(46),h=n(30),v=n(67),i=n(12),a=n(94),y=n(106),n=a("slice"),m=i("species"),g=o.Array,b=Math.max;r({target:"Array",proto:!0,forced:!n},{slice:function(t,e){var n,r,o,i=h(this),a=p(i),c=d(t,a),s=d(void 0===e?a:e,a);if(u(i)&&(n=i.constructor,(n=l(n)&&(n===g||u(n.prototype))||f(n)&&null===(n=n[m])?void 0:n)===g||void 0===n))return y(i,c,s);for(r=new(void 0===n?g:n)(b(s-c,0)),o=0;c<s;c++,o++)c in i&&v(r,o,i[c]);return r.length=o,r}});},function(t,e,n){var r=n(3),o=n(56).find,n=n(89),i="find",a=!0;i in[]&&Array(1)[i](function(){a=!1;}),r({target:"Array",proto:!0,forced:a},{find:function(t){return o(this,t,1<arguments.length?arguments[1]:void 0)}}),n(i);},function(t,e,n){n(3)({target:"Object",stat:!0},{setPrototypeOf:n(104)});},function(t,e,n){var r=n(71),o=n(39);t.exports=function(t){return r(o(t))};},function(t,e,n){var r=n(3),o=n(2),i=n(36),a=n(82),n=n(130);r({target:"Object",stat:!0,forced:o(function(){a(1);}),sham:!n},{getPrototypeOf:function(t){return a(i(t))}});},function(t,e,n){var r=n(3),o=n(43),i=n(84),a=n(159),c=n(131),s=n(18),u=n(19),l=n(50),n=n(2),f=o("Reflect","construct"),d=Object.prototype,p=[].push,h=n(function(){function t(){}return !(f(function(){},[],t)instanceof t)}),v=!n(function(){f(function(){});}),o=h||v;r({target:"Reflect",stat:!0,forced:o,sham:o},{construct:function(t,e){c(t),s(e);var n=arguments.length<3?t:c(arguments[2]);if(v&&!h)return f(t,e,n);if(t==n){switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3])}var r=[null];return i(p,r,e),new(i(a,t,r))}r=n.prototype,n=l(u(r)?r:d),r=i(t,n,e);return u(r)?r:n}});},function(t,e,n){var r=n(3),o=n(129).includes,n=n(89);r({target:"Array",proto:!0},{includes:function(t){return o(this,t,1<arguments.length?arguments[1]:void 0)}}),n("includes");},function(t,e,n){var r=n(17),o=n(0),i=n(1),a=n(81),c=n(37),s=n(20),u=n(117),l=n(44),f=n(73),d=n(122),p=n(2),h=n(55).f,v=n(42).f,y=n(22).f,m=n(167),g=n(92).trim,n="Number",b=o[n],_=b.prototype,w=o.TypeError,O=i("".slice),k=i("".charCodeAt),C=function(t){var e,n,r,o,i,a,c,s=d(t,"number");if(f(s))throw w("Cannot convert a Symbol value to a number");if("string"==typeof s&&2<s.length)if(s=g(s),43===(t=k(s,0))||45===t){if(88===(e=k(s,2))||120===e)return NaN}else if(48===t){switch(k(s,1)){case 66:case 98:n=2,r=49;break;case 79:case 111:n=8,r=55;break;default:return +s}for(i=(o=O(s,2)).length,a=0;a<i;a++)if((c=k(o,a))<48||r<c)return NaN;return parseInt(o,n)}return +s};if(a(n,!b(" 0o1")||!b("0b1")||b("+0x1"))){for(var S,x=function(t){var t=arguments.length<1?0:b(function(t){t=d(t,"number");return "bigint"==typeof t?t:C(t)}(t)),e=this;return l(_,e)&&p(function(){m(e);})?u(Object(t),e,x):t},E=r?h(b):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,isFinite,isInteger,isNaN,isSafeInteger,parseFloat,parseInt,fromString,range".split(","),j=0;E.length>j;j++)s(b,S=E[j])&&!s(x,S)&&y(x,S,v(b,S));c(o,n,(x.prototype=_).constructor=x);}},function(t,e,n){var r=n(3),o=n(174);r({target:"Array",stat:!0,forced:!n(152)(function(t){Array.from(t);})},{from:o});},function(t,e,n){var r=n(0),o=n(39),i=r.Object;t.exports=function(t){return i(o(t))};},function(t,e,n){var s=n(0),u=n(14),l=n(20),f=n(45),d=n(98),r=n(100),o=n(49),p=n(64).CONFIGURABLE,i=o.get,h=o.enforce,v=String(String).split("String");(t.exports=function(t,e,n,r){var o,i=!!r&&!!r.unsafe,a=!!r&&!!r.enumerable,c=!!r&&!!r.noTargetGet,r=r&&void 0!==r.name?r.name:e;u(n)&&("Symbol("===String(r).slice(0,7)&&(r="["+String(r).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),(!l(n,"name")||p&&n.name!==r)&&f(n,"name",r),(o=h(n)).source||(o.source=v.join("string"==typeof r?r:""))),t===s?a?t[e]=n:d(e,n):(i?!c&&t[e]&&(a=!0):delete t[e],a?t[e]=n:f(t,e,n));})(Function.prototype,"toString",function(){return u(this)&&i(this).source||r(this)});},function(t,e,n){var l=n(84),f=n(21),r=n(1),o=n(112),d=n(115),m=n(18),p=n(39),g=n(164),b=n(113),_=n(65),w=n(23),i=n(53),O=n(108),k=n(114),C=n(90),a=n(111),n=n(2),S=a.UNSUPPORTED_Y,x=4294967295,E=Math.min,j=[].push,T=r(/./.exec),A=r(j),D=r("".slice);o("split",function(o,h,v){var y="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||1<".".split(/()()/).length||"".split(/.?/).length?function(t,e){var n=w(p(this)),r=void 0===e?x:e>>>0;if(0==r)return [];if(void 0===t)return [n];if(!d(t))return f(h,n,t,r);for(var o,i,a,c=[],e=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),s=0,u=new RegExp(t.source,e+"g");(o=f(C,u,n))&&!(s<(i=u.lastIndex)&&(A(c,D(n,s,o.index)),1<o.length&&o.index<n.length&&l(j,c,O(o,1)),a=o[0].length,s=i,r<=c.length));)u.lastIndex===o.index&&u.lastIndex++;return s===n.length?!a&&T(u,"")||A(c,""):A(c,D(n,s)),r<c.length?O(c,0,r):c}:"0".split(void 0,0).length?function(t,e){return void 0===t&&0===e?[]:f(h,this,t,e)}:h;return [function(t,e){var n=p(this),r=null==t?void 0:i(t,o);return r?f(r,t,n,e):f(y,w(n),t,e)},function(t,e){var n=m(this),r=w(t),t=v(y,n,r,e,y!==h);if(t.done)return t.value;var t=g(n,RegExp),o=n.unicode,i=(n.ignoreCase?"i":"")+(n.multiline?"m":"")+(n.unicode?"u":"")+(S?"g":"y"),a=new t(S?"^(?:"+n.source+")":n,i),c=void 0===e?x:e>>>0;if(0==c)return [];if(0===r.length)return null===k(a,r)?[r]:[];for(var s=0,u=0,l=[];u<r.length;){a.lastIndex=S?0:u;var f,d=k(a,S?D(r,u):r);if(null===d||(f=E(_(a.lastIndex+(S?u:0)),r.length))===s)u=b(r,u,o);else {if(A(l,D(r,s,u)),l.length===c)return l;for(var p=1;p<=d.length-1;p++)if(A(l,d[p]),l.length===c)return l;u=s=f;}}return A(l,D(r,s)),l}]},!!n(function(){var t=/(?:)/,e=t.exec,t=(t.exec=function(){return e.apply(this,arguments)},"ab".split(t));return 2!==t.length||"a"!==t[0]||"b"!==t[1]}),S);},function(t,e,n){var r=n(0).TypeError;t.exports=function(t){if(null==t)throw r("Can't call method on "+t);return t};},function(t,e,n){var r=n(1),o=n(64).PROPER,i=n(37),a=n(18),c=n(44),s=n(23),u=n(2),n=n(110),l="toString",f=RegExp.prototype,d=f[l],p=r(n),r=u(function(){return "/a/b"!=d.call({source:"a",flags:"b"})}),n=o&&d.name!=l;(r||n)&&i(RegExp.prototype,l,function(){var t=a(this),e=s(t.source),n=t.flags;return "/"+e+"/"+s(void 0!==n||!c(f,t)||"flags"in f?n:p(t))},{unsafe:!0});},function(t,e,n){var r=n(17),o=n(64).EXISTS,i=n(1),n=n(22).f,a=Function.prototype,c=i(a.toString),s=/function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/,u=i(s.exec);r&&!o&&n(a,"name",{configurable:!0,get:function(){try{return u(s,c(this))[1]}catch(t){return ""}}});},function(t,e,n){var r=n(17),o=n(21),i=n(70),a=n(61),c=n(30),s=n(72),u=n(20),l=n(124),f=Object.getOwnPropertyDescriptor;e.f=r?f:function(t,e){if(t=c(t),e=s(e),l)try{return f(t,e)}catch(t){}if(u(t,e))return a(!o(i.f,t,e),t[e])};},function(t,e,n){var r=n(0),o=n(14);t.exports=function(t,e){return arguments.length<2?(n=r[t],o(n)?n:void 0):r[t]&&r[t][e];var n;};},function(t,e,n){n=n(1);t.exports=n({}.isPrototypeOf);},function(t,e,n){var r=n(17),o=n(22),i=n(61);t.exports=r?function(t,e,n){return o.f(t,e,i(1,n))}:function(t,e,n){return t[e]=n,t};},function(t,e,n){var r=n(65);t.exports=function(t){return r(t.length)};},function(t,e,n){var O=n(84),o=n(21),r=n(1),i=n(112),a=n(2),k=n(18),C=n(14),S=n(80),x=n(65),E=n(23),c=n(39),j=n(113),s=n(53),T=n(173),A=n(114),u=n(12)("replace"),D=Math.max,P=Math.min,M=r([].concat),I=r([].push),L=r("".indexOf),N=r("".slice),n="$0"==="a".replace(/./,"$0"),l=!!/./[u]&&""===/./[u]("a","$0");i("replace",function(t,b,_){var w=l?"$":"$0";return [function(t,e){var n=c(this),r=null==t?void 0:s(t,u);return r?o(r,t,n,e):o(b,E(n),t,e)},function(t,e){var n=k(this),r=E(t);if("string"==typeof e&&-1===L(e,w)&&-1===L(e,"$<")){t=_(b,n,r,e);if(t.done)return t.value}for(var o,i=C(e),a=(i||(e=E(e)),n.global),c=(a&&(o=n.unicode,n.lastIndex=0),[]);null!==(d=A(n,r))&&(I(c,d),a);)""===E(d[0])&&(n.lastIndex=j(r,x(n.lastIndex),o));for(var s,u="",l=0,f=0;f<c.length;f++){for(var d,p=E((d=c[f])[0]),h=D(P(S(d.index),r.length),0),v=[],y=1;y<d.length;y++)I(v,void 0===(s=d[y])?s:String(s));var m=d.groups,g=i?(g=M([p],v,h,r),void 0!==m&&I(g,m),E(O(e,void 0,g))):T(p,r,h,v,m,e);l<=h&&(u+=N(r,l,h)+g,l=h+p.length);}return u+N(r,l)}]},!!a(function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")})||!n||l);},function(t,e,n){var n=n(1),r=n({}.toString),o=n("".slice);t.exports=function(t){return o(r(t),8,-1)};},function(t,e,n){var r,o,i,a,c,s,u,l,f=n(156),d=n(0),p=n(1),h=n(19),v=n(45),y=n(20),m=n(97),g=n(79),n=n(63),b="Object already initialized",_=d.TypeError,d=d.WeakMap;u=f||m.state?(r=m.state||(m.state=new d),o=p(r.get),i=p(r.has),a=p(r.set),c=function(t,e){if(i(r,t))throw new _(b);return e.facade=t,a(r,t,e),e},s=function(t){return o(r,t)||{}},function(t){return i(r,t)}):(n[l=g("state")]=!0,c=function(t,e){if(y(t,l))throw new _(b);return e.facade=t,v(t,l,e),e},s=function(t){return y(t,l)?t[l]:{}},function(t){return y(t,l)}),t.exports={set:c,get:s,has:u,enforce:function(t){return u(t)?s(t):c(t,{})},getterFor:function(e){return function(t){if(h(t)&&(t=s(t)).type===e)return t;throw _("Incompatible receiver, "+e+" required")}}};},function(t,e,n){function r(){}function o(t){t.write(v("")),t.close();var e=t.parentWindow.Object;return t=null,e}var i,a=n(18),c=n(132),s=n(102),u=n(63),l=n(160),f=n(99),n=n(79),d="prototype",p="script",h=n("IE_PROTO"),v=function(t){return "<"+p+">"+t+"</"+p+">"},y=function(){try{i=new ActiveXObject("htmlfile");}catch(t){}y="undefined"==typeof document||document.domain&&i?o(i):(t=f("iframe"),e="java"+p+":",t.style.display="none",l.appendChild(t),t.src=String(e),(e=t.contentWindow.document).open(),e.write(v("document.F=Object")),e.close(),e.F);for(var t,e,n=s.length;n--;)delete y[d][s[n]];return y()};u[h]=!0,t.exports=Object.create||function(t,e){var n;return null!==t?(r[d]=a(t),n=new r,r[d]=null,n[h]=t):n=y(),void 0===e?n:c.f(n,e)};},function(t,e,n){var r=n(3),o=n(1),i=n(142),a=n(39),c=n(23),n=n(143),s=o("".indexOf);r({target:"String",proto:!0,forced:!n("includes")},{includes:function(t){return !!~s(c(a(this)),c(i(t)),1<arguments.length?arguments[1]:void 0)}});},function(N,R,t){var e=t(17),n=t(0),r=t(1),o=t(81),u=t(117),l=t(45),i=t(22).f,a=t(55).f,f=t(44),d=t(115),p=t(23),c=t(110),s=t(111),h=t(37),v=t(2),y=t(20),m=t(49).enforce,g=t(144),b=t(12),_=t(140),w=t(141),O=b("match"),k=n.RegExp,C=k.prototype,S=n.SyntaxError,x=r(c),B=r(C.exec),E=r("".charAt),j=r("".replace),T=r("".indexOf),H=r("".slice),F=/^\?<[^\s\d!#%&*+<=>@^][^\s!#%&*+<=>@^]*>/,A=/a/g,D=/a/g,t=new k(A)!==A,P=s.MISSED_STICKY,V=s.UNSUPPORTED_Y,b=e&&(!t||P||_||w||v(function(){return D[O]=!1,k(A)!=A||k(D)==D||"/a/i"!=k(A,"i")})),Y=function(t){for(var e,n=t.length,r=0,o="",i=!1;r<=n;r++)"\\"===(e=E(t,r))?o+=e+E(t,++r):i||"."!==e?("["===e?i=!0:"]"===e&&(i=!1),o+=e):o+="[\\s\\S]";return o},W=function(t){for(var e,n=t.length,r=0,o="",i=[],a={},c=!1,s=!1,u=0,l="";r<=n;r++){if("\\"===(e=E(t,r)))e+=E(t,++r);else if("]"===e)c=!1;else if(!c)switch(!0){case"["===e:c=!0;break;case"("===e:B(F,H(t,r+1))&&(r+=2,s=!0),o+=e,u++;continue;case">"===e&&s:if(""===l||y(a,l))throw new S("Invalid capture group name");a[l]=!0,s=!(i[i.length]=[l,u]),l="";continue}s?l+=e:o+=e;}return [o,i]};if(o("RegExp",b)){for(var M=function(t,e){var n,r,o=f(C,this),i=d(t),a=void 0===e,c=[],s=t;if(!o&&i&&a&&t.constructor===M)return t;if((i||f(C,t))&&(t=t.source,a&&(e="flags"in s?s.flags:x(s))),t=void 0===t?"":p(t),e=void 0===e?"":p(e),s=t,i=e=_&&"dotAll"in A&&(n=!!e&&-1<T(e,"s"))?j(e,/s/g,""):e,P&&"sticky"in A&&(r=!!e&&-1<T(e,"y"))&&V&&(e=j(e,/y/g,"")),w&&(t=(a=W(t))[0],c=a[1]),a=u(k(t,e),o?this:C,M),(n||r||c.length)&&(e=m(a),n&&(e.dotAll=!0,e.raw=M(Y(t),i)),r&&(e.sticky=!0),c.length&&(e.groups=c)),t!==s)try{l(a,"source",""===s?"(?:)":s);}catch(t){}return a},I=a(k),L=0;I.length>L;)!function(e){e in M||i(M,e,{configurable:!0,get:function(){return k[e]},set:function(t){k[e]=t;}});}(I[L++]);(C.constructor=M).prototype=C,h(n,"RegExp",M);}g("RegExp");},function(t,e,n){var r=n(62);t.exports=function(t,e){t=t[e];return null==t?void 0:r(t)};},function(t,e){t.exports=!1;},function(t,e,n){var r=n(128),o=n(102).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return r(t,o)};},function(t,e,n){function r(d){var p=1==d,h=2==d,v=3==d,y=4==d,m=6==d,g=7==d,b=5==d||m;return function(t,e,n,r){for(var o,i,a=O(t),c=w(a),s=_(e,n),u=k(c),l=0,e=r||C,f=p?e(t,u):h||g?e(t,0):void 0;l<u;l++)if((b||l in c)&&(i=s(o=c[l],l,a),d))if(p)f[l]=i;else if(i)switch(d){case 3:return !0;case 5:return o;case 6:return l;case 2:S(f,o);}else switch(d){case 4:return !1;case 7:S(f,o);}return m?-1:v||y?y:f}}var _=n(88),o=n(1),w=n(71),O=n(36),k=n(46),C=n(135),S=o([].push);t.exports={forEach:r(0),map:r(1),filter:r(2),some:r(3),every:r(4),find:r(5),findIndex:r(6),filterReject:r(7)};},function(t,e,n){var r=n(3),o=n(1),i=n(42).f,a=n(65),c=n(23),s=n(142),u=n(39),l=n(143),n=n(54),f=o("".startsWith),d=o("".slice),p=Math.min,o=l("startsWith");r({target:"String",proto:!0,forced:!!(n||o||(!(l=i(String.prototype,"startsWith"))||l.writable))&&!o},{startsWith:function(t){var e=c(u(this)),n=(s(t),a(p(1<arguments.length?arguments[1]:void 0,e.length))),t=c(t);return f?f(e,t,n):d(e,n,n+t.length)===t}});},function(t,e,n){var r=n(3),o=n(56).map;r({target:"Array",proto:!0,forced:!n(94)("map")},{map:function(t){return o(this,t,1<arguments.length?arguments[1]:void 0)}});},function(t,e,n){var r=n(3),i=n(21),a=n(19),c=n(18),s=n(179),u=n(42),l=n(82);r({target:"Reflect",stat:!0},{get:function t(e,n){var r,o=arguments.length<3?e:arguments[2];return c(e)===o?e[n]:(r=u.f(e,n))?s(r)?r.value:void 0===r.get?void 0:i(r.get,o):a(r=l(e))?t(r,n,o):void 0}});},function(t,e,n){n=n(2);t.exports=!n(function(){var t=function(){}.bind();return "function"!=typeof t||t.hasOwnProperty("prototype")});},function(t,e){t.exports=function(t,e){return {enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}};},function(t,e,n){var r=n(0),o=n(14),i=n(76),a=r.TypeError;t.exports=function(t){if(o(t))return t;throw a(i(t)+" is not a function")};},function(t,e){t.exports={};},function(t,e,n){var r=n(17),n=n(20),o=Function.prototype,i=r&&Object.getOwnPropertyDescriptor,n=n(o,"name"),a=n&&"something"===function(){}.name,r=n&&(!r||i(o,"name").configurable);t.exports={EXISTS:n,PROPER:a,CONFIGURABLE:r};},function(t,e,n){var r=n(80),o=Math.min;t.exports=function(t){return 0<t?o(r(t),9007199254740991):0};},function(t,e,n){var r=n(128),o=n(102);t.exports=Object.keys||function(t){return r(t,o)};},function(t,e,n){var r=n(72),o=n(22),i=n(61);t.exports=function(t,e,n){e=r(e);e in t?o.f(t,e,i(0,n)):t[e]=n;};},function(t,e){t.exports={};},function(t,e,n){var o=n(21),r=n(112),u=n(18),l=n(65),f=n(23),i=n(39),a=n(53),d=n(113),p=n(114);r("match",function(r,c,s){return [function(t){var e=i(this),n=null==t?void 0:a(t,r);return n?o(n,t,e):new RegExp(t)[r](f(e))},function(t){var e=u(this),n=f(t),t=s(c,e,n);if(t.done)return t.value;if(!e.global)return p(e,n);for(var r=e.unicode,o=[],i=e.lastIndex=0;null!==(a=p(e,n));){var a=f(a[0]);""===(o[i]=a)&&(e.lastIndex=d(n,l(e.lastIndex),r)),i++;}return 0===i?null:o}]});},function(t,e,n){var r={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,i=o&&!r.call({1:2},1);e.f=i?function(t){t=o(this,t);return !!t&&t.enumerable}:r;},function(t,e,n){var r=n(0),o=n(1),i=n(2),a=n(48),c=r.Object,s=o("".split);t.exports=i(function(){return !c("z").propertyIsEnumerable(0)})?function(t){return "String"==a(t)?s(t,""):c(t)}:c;},function(t,e,n){var r=n(122),o=n(73);t.exports=function(t){t=r(t,"string");return o(t)?t:t+""};},function(t,e,n){var r=n(0),o=n(43),i=n(14),a=n(44),n=n(123),c=r.Object;t.exports=n?function(t){return "symbol"==typeof t}:function(t){var e=o("Symbol");return i(e)&&a(e.prototype,c(t))};},function(t,e,n){var r,o,i=n(0),n=n(75),a=i.process,i=i.Deno,a=a&&a.versions||i&&i.version,i=a&&a.v8;!(o=i?0<(r=i.split("."))[0]&&r[0]<4?1:+(r[0]+r[1]):o)&&n&&(!(r=n.match(/Edge\/(\d+)/))||74<=r[1])&&(r=n.match(/Chrome\/(\d+)/))&&(o=+r[1]),t.exports=o;},function(t,e,n){n=n(43);t.exports=n("navigator","userAgent")||"";},function(t,e,n){var r=n(0).String;t.exports=function(t){try{return r(t)}catch(t){return "Object"}};},function(t,e,n){var r=n(54),o=n(97);(t.exports=function(t,e){return o[t]||(o[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.21.1",mode:r?"pure":"global",copyright:"© 2014-2022 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.21.1/LICENSE",source:"https://github.com/zloirock/core-js"});},function(t,e,n){var n=n(1),r=0,o=Math.random(),i=n(1..toString);t.exports=function(t){return "Symbol("+(void 0===t?"":t)+")_"+i(++r+o,36)};},function(t,e,n){var r=n(77),o=n(78),i=r("keys");t.exports=function(t){return i[t]||(i[t]=o(t))};},function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){t=+t;return t!=t||0==t?0:(0<t?r:n)(t)};},function(t,e,n){function r(t,e){return (t=s[c(t)])==l||t!=u&&(i(e)?o(e):!!e)}var o=n(2),i=n(14),a=/#|\.prototype\./,c=r.normalize=function(t){return String(t).replace(a,".").toLowerCase()},s=r.data={},u=r.NATIVE="N",l=r.POLYFILL="P";t.exports=r;},function(t,e,n){var r=n(0),o=n(20),i=n(14),a=n(36),c=n(79),n=n(130),s=c("IE_PROTO"),u=r.Object,l=u.prototype;t.exports=n?u.getPrototypeOf:function(t){t=a(t);if(o(t,s))return t[s];var e=t.constructor;return i(e)&&t instanceof e?e.prototype:t instanceof u?l:null};},function(t,e,n){var r=n(0),o=n(105),i=n(14),a=n(48),c=n(12)("toStringTag"),s=r.Object,u="Arguments"==a(function(){return arguments}());t.exports=o?a:function(t){var e;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(e=function(t,e){try{return t[e]}catch(t){}}(t=s(t),c))?e:u?a(t):"Object"==(e=a(t))&&i(t.callee)?"Arguments":e};},function(t,e,n){var n=n(60),r=Function.prototype,o=r.apply,i=r.call;t.exports="object"==typeof Reflect&&Reflect.apply||(n?i.bind(o):function(){return i.apply(o,arguments)});},function(t,e,n){function r(){}function o(t){if(!s(t))return !1;try{return p(r,d,t),!0}catch(t){return !1}}function i(t){if(!s(t))return !1;switch(u(t)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return !1}try{return y||!!v(h,f(t))}catch(t){return !0}}var a=n(1),c=n(2),s=n(14),u=n(83),l=n(43),f=n(100),d=[],p=l("Reflect","construct"),h=/^\s*(?:class|function)\b/,v=a(h.exec),y=!h.exec(r);i.sham=!0,t.exports=!p||c(function(){var t;return o(o.call)||!o(Object)||!o(function(){t=!0;})||t})?i:o;},function(t,e,n){var r=n(48);t.exports=Array.isArray||function(t){return "Array"==r(t)};},function(t,e,n){var r=n(22).f,o=n(20),i=n(12)("toStringTag");t.exports=function(t,e,n){(t=t&&!n?t.prototype:t)&&!o(t,i)&&r(t,i,{configurable:!0,value:e});};},function(t,e,n){var r=n(1),o=n(62),i=n(60),a=r(r.bind);t.exports=function(t,e){return o(t),void 0===e?t:i?a(t,e):function(){return t.apply(e,arguments)}};},function(t,e,n){var r=n(12),o=n(50),n=n(22),i=r("unscopables"),a=Array.prototype;null==a[i]&&n.f(a,i,{configurable:!0,value:o(null)}),t.exports=function(t){a[i][t]=!0;};},function(t,e,n){var h=n(21),r=n(1),v=n(23),y=n(110),o=n(111),i=n(77),m=n(50),g=n(49).get,a=n(140),n=n(141),b=i("native-string-replace",String.prototype.replace),_=RegExp.prototype.exec,w=_,O=r("".charAt),k=r("".indexOf),C=r("".replace),S=r("".slice),x=(i=/b*/g,h(_,r=/a/,"a"),h(_,i,"a"),0!==r.lastIndex||0!==i.lastIndex),E=o.BROKEN_CARET,j=void 0!==/()??/.exec("")[1];(x||j||E||a||n)&&(w=function(t){var e,n,r,o,i,a,c=this,s=g(c),t=v(t),u=s.raw;if(u)return u.lastIndex=c.lastIndex,f=h(w,u,t),c.lastIndex=u.lastIndex,f;var l=s.groups,u=E&&c.sticky,f=h(y,c),s=c.source,d=0,p=t;if(u&&(f=C(f,"y",""),-1===k(f,"g")&&(f+="g"),p=S(t,c.lastIndex),0<c.lastIndex&&(!c.multiline||c.multiline&&"\n"!==O(t,c.lastIndex-1))&&(s="(?: "+s+")",p=" "+p,d++),e=new RegExp("^(?:"+s+")",f)),j&&(e=new RegExp("^"+s+"$(?!\\s)",f)),x&&(n=c.lastIndex),r=h(_,u?e:c,p),u?r?(r.input=S(r.input,d),r[0]=S(r[0],d),r.index=c.lastIndex,c.lastIndex+=r[0].length):c.lastIndex=0:x&&r&&(c.lastIndex=c.global?r.index+r[0].length:n),j&&r&&1<r.length&&h(b,r[0],e,function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(r[o]=void 0);}),r&&l)for(r.groups=i=m(null),o=0;o<l.length;o++)i[(a=l[o])[0]]=r[a[1]];return r}),t.exports=w;},function(t,e,n){var r=n(3),o=n(92).trim;r({target:"String",proto:!0,forced:n(165)("trim")},{trim:function(){return o(this)}});},function(t,e,n){function r(e){return function(t){t=a(i(t));return 1&e&&(t=c(t,s,"")),t=2&e?c(t,u,""):t}}var o=n(1),i=n(39),a=n(23),n=n(93),c=o("".replace),o="["+n+"]",s=RegExp("^"+o+o+"*"),u=RegExp(o+o+"*$");t.exports={start:r(1),end:r(2),trim:r(3)};},function(t,e){t.exports="\t\n\v\f\r                　\u2028\u2029\ufeff";},function(t,e,n){var r=n(2),o=n(12),i=n(74),a=o("species");t.exports=function(e){return 51<=i||!r(function(){var t=[];return (t.constructor={})[a]=function(){return {foo:1}},1!==t[e](Boolean).foo})};},function(t,e,n){var r=n(3),o=n(1),i=n(71),a=n(30),n=n(118),c=o([].join),o=i!=Object,i=n("join",",");r({target:"Array",proto:!0,forced:o||!i},{join:function(t){return c(a(this),void 0===t?",":t)}});},function(t,e,n){var r=n(74),n=n(2);t.exports=!!Object.getOwnPropertySymbols&&!n(function(){var t=Symbol();return !String(t)||!(Object(t)instanceof Symbol)||!Symbol.sham&&r&&r<41});},function(t,e,n){var r=n(0),n=n(98),o="__core-js_shared__",r=r[o]||n(o,{});t.exports=r;},function(t,e,n){var r=n(0),o=Object.defineProperty;t.exports=function(e,n){try{o(r,e,{value:n,configurable:!0,writable:!0});}catch(t){r[e]=n;}return n};},function(t,e,n){var r=n(0),n=n(19),o=r.document,i=n(o)&&n(o.createElement);t.exports=function(t){return i?o.createElement(t):{}};},function(t,e,n){var r=n(1),o=n(14),n=n(97),i=r(Function.toString);o(n.inspectSource)||(n.inspectSource=function(t){return i(t)}),t.exports=n.inspectSource;},function(t,e,n){var r=n(80),o=Math.max,i=Math.min;t.exports=function(t,e){t=r(t);return t<0?o(t+e,0):i(t,e)};},function(t,e){t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"];},function(t,e){e.f=Object.getOwnPropertySymbols;},function(t,e,n){var o=n(1),i=n(18),a=n(157);t.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var n,r=!1,t={};try{(n=o(Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set))(t,[]),r=t instanceof Array;}catch(t){}return function(t,e){return i(t),a(e),r?n(t,e):t.__proto__=e,t}}():void 0);},function(t,e,n){var r={};r[n(12)("toStringTag")]="z",t.exports="[object z]"===String(r);},function(t,e,n){n=n(1);t.exports=n([].slice);},function(t,e,n){var r=n(48),o=n(30),i=n(55).f,a=n(108),c="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){if(!c||"Window"!=r(t))return i(o(t));try{return i(t)}catch(t){return a(c)}};},function(t,e,n){var r=n(0),s=n(101),u=n(46),l=n(67),f=r.Array,d=Math.max;t.exports=function(t,e,n){for(var r=u(t),o=s(e,r),i=s(void 0===n?r:n,r),a=f(d(i-o,0)),c=0;o<i;o++,c++)l(a,c,t[o]);return a.length=c,a};},function(t,e,n){function v(){return this}var y=n(3),m=n(21),g=n(54),r=n(64),b=n(14),_=n(163),w=n(82),O=n(104),k=n(87),C=n(45),S=n(37),o=n(12),x=n(68),n=n(136),E=r.PROPER,j=r.CONFIGURABLE,T=n.IteratorPrototype,A=n.BUGGY_SAFARI_ITERATORS,D=o("iterator"),P="values",M="entries";t.exports=function(t,e,n,r,o,i,a){_(n,e,r);function c(t){if(t===o&&p)return p;if(!A&&t in f)return f[t];switch(t){case"keys":case P:case M:return function(){return new n(this,t)}}return function(){return new n(this)}}var s,u,r=e+" Iterator",l=!1,f=t.prototype,d=f[D]||f["@@iterator"]||o&&f[o],p=!A&&d||c(o),h="Array"==e&&f.entries||d;if(h&&(h=w(h.call(new t)))!==Object.prototype&&h.next&&(g||w(h)===T||(O?O(h,T):b(h[D])||S(h,D,v)),k(h,r,!0,!0),g&&(x[r]=v)),E&&o==P&&d&&d.name!==P&&(!g&&j?C(f,"name",P):(l=!0,p=function(){return m(d,this)})),o)if(s={values:c(P),keys:i?p:c("keys"),entries:c(M)},a)for(u in s)!A&&!l&&u in f||S(f,u,s[u]);else y({target:e,proto:!0,forced:A||l},s);return g&&!a||f[D]===p||S(f,D,p,{name:o}),x[e]=p,s};},function(t,e,n){var r=n(18);t.exports=function(){var t=r(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.dotAll&&(e+="s"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e};},function(t,e,n){var r=n(2),o=n(0).RegExp,n=r(function(){var t=o("a","y");return t.lastIndex=2,null!=t.exec("abcd")}),i=n||r(function(){return !o("a","y").sticky}),r=n||r(function(){var t=o("^r","gy");return t.lastIndex=2,null!=t.exec("str")});t.exports={BROKEN_CARET:r,MISSED_STICKY:i,UNSUPPORTED_Y:n};},function(t,e,n){n(16);var s=n(1),u=n(37),l=n(90),f=n(2),d=n(12),p=n(45),h=d("species"),v=RegExp.prototype;t.exports=function(n,t,e,r){var a,o=d(n),c=!f(function(){var t={};return t[o]=function(){return 7},7!=""[n](t)}),i=c&&!f(function(){var t=!1,e=/a/;return "split"===n&&((e={constructor:{}}).constructor[h]=function(){return e},e.flags="",e[o]=/./[o]),e.exec=function(){return t=!0,null},e[o](""),!t});c&&i&&!e||(a=s(/./[o]),i=t(o,""[n],function(t,e,n,r,o){var t=s(t),i=e.exec;return i===l||i===v.exec?c&&!o?{done:!0,value:a(e,n,r)}:{done:!0,value:t(n,e,r)}:{done:!1}}),u(String.prototype,n,i[0]),u(v,o,i[1])),r&&p(v[o],"sham",!0);};},function(t,e,n){var r=n(137).charAt;t.exports=function(t,e,n){return e+(n?r(t,e).length:1)};},function(t,e,n){var r=n(0),o=n(21),i=n(18),a=n(14),c=n(48),s=n(90),u=r.TypeError;t.exports=function(t,e){var n=t.exec;if(a(n))return null!==(n=o(n,t,e))&&i(n),n;if("RegExp"===c(t))return o(s,t,e);throw u("RegExp#exec called on incompatible receiver")};},function(t,e,n){var r=n(19),o=n(48),i=n(12)("match");t.exports=function(t){var e;return r(t)&&(void 0!==(e=t[i])?!!e:"RegExp"==o(t))};},function(t,e,n){var r=n(3),n=n(166);r({target:"Number",stat:!0,forced:Number.parseFloat!=n},{parseFloat:n});},function(t,e,n){var r=n(14),o=n(19),i=n(104);t.exports=function(t,e,n){return i&&r(e=e.constructor)&&e!==n&&o(e=e.prototype)&&e!==n.prototype&&i(t,e),t};},function(t,e,n){var r=n(2);t.exports=function(t,e){var n=[][t];return !!n&&r(function(){n.call(null,e||function(){return 1},1);})};},function(t,e,n){n(145)("Set",function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}},n(153));},function(t,e,n){var r=n(83),o=n(53),i=n(68),a=n(12)("iterator");t.exports=function(t){if(null!=t)return o(t,a)||o(t,"@@iterator")||i[r(t)]};},function(t,e,n){var r=n(3),n=n(178);r({target:"Number",stat:!0,forced:Number.parseInt!=n},{parseInt:n});},function(t,e,n){var r=n(0),o=n(21),i=n(19),a=n(73),c=n(53),s=n(155),n=n(12),u=r.TypeError,l=n("toPrimitive");t.exports=function(t,e){if(!i(t)||a(t))return t;var n=c(t,l);if(n){if(n=o(n,t,e=void 0===e?"default":e),!i(n)||a(n))return n;throw u("Can't convert object to primitive value")}return s(t,e=void 0===e?"number":e)};},function(t,e,n){n=n(96);t.exports=n&&!Symbol.sham&&"symbol"==typeof Symbol.iterator;},function(t,e,n){var r=n(17),o=n(2),i=n(99);t.exports=!r&&!o(function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a});},function(t,e,n){var r=n(17),n=n(2);t.exports=r&&n(function(){return 42!=Object.defineProperty(function(){},"prototype",{value:42,writable:!1}).prototype});},function(t,e,n){var s=n(20),u=n(127),l=n(42),f=n(22);t.exports=function(t,e,n){for(var r=u(e),o=f.f,i=l.f,a=0;a<r.length;a++){var c=r[a];s(t,c)||n&&s(n,c)||o(t,c,i(e,c));}};},function(t,e,n){var r=n(43),o=n(1),i=n(55),a=n(103),c=n(18),s=o([].concat);t.exports=r("Reflect","ownKeys")||function(t){var e=i.f(c(t)),n=a.f;return n?s(e,n(t)):e};},function(t,e,n){var r=n(1),a=n(20),c=n(30),s=n(129).indexOf,u=n(63),l=r([].push);t.exports=function(t,e){var n,r=c(t),o=0,i=[];for(n in r)!a(u,n)&&a(r,n)&&l(i,n);for(;e.length>o;)!a(r,n=e[o++])||~s(i,n)||l(i,n);return i};},function(t,e,n){function r(c){return function(t,e,n){var r,o=s(t),i=l(o),a=u(n,i);if(c&&e!=e){for(;a<i;)if((r=o[a++])!=r)return !0}else for(;a<i;a++)if((c||a in o)&&o[a]===e)return c||a||0;return !c&&-1}}var s=n(30),u=n(101),l=n(46);t.exports={includes:r(!0),indexOf:r(!1)};},function(t,e,n){n=n(2);t.exports=!n(function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype});},function(t,e,n){var r=n(0),o=n(85),i=n(76),a=r.TypeError;t.exports=function(t){if(o(t))return t;throw a(i(t)+" is not a constructor")};},function(t,e,n){var r=n(17),o=n(125),c=n(22),s=n(18),u=n(30),l=n(66);e.f=r&&!o?Object.defineProperties:function(t,e){s(t);for(var n,r=u(e),o=l(e),i=o.length,a=0;a<i;)c.f(t,n=o[a++],r[n]);return t};},function(t,e,n){n=n(12);e.f=n;},function(t,e,n){var r=n(161),o=n(20),i=n(133),a=n(22).f;t.exports=function(t){var e=r.Symbol||(r.Symbol={});o(e,t)||a(e,t,{value:i.f(t)});};},function(t,e,n){var r=n(162);t.exports=function(t,e){return new(r(t))(0===e?0:e)};},function(t,e,n){var r,o,i=n(2),a=n(14),c=n(50),s=n(82),u=n(37),l=n(12),n=n(54),f=l("iterator"),l=!1;[].keys&&("next"in(o=[].keys())?(s=s(s(o)))!==Object.prototype&&(r=s):l=!0),null==r||i(function(){var t={};return r[f].call(t)!==t})?r={}:n&&(r=c(r)),a(r[f])||u(r,f,function(){return this}),t.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:l};},function(t,e,n){function r(o){return function(t,e){var n,t=a(c(t)),e=i(e),r=t.length;return e<0||r<=e?o?"":void 0:(n=u(t,e))<55296||56319<n||e+1===r||(r=u(t,e+1))<56320||57343<r?o?s(t,e):n:o?l(t,e,e+2):r-56320+(n-55296<<10)+65536}}var o=n(1),i=n(80),a=n(23),c=n(39),s=o("".charAt),u=o("".charCodeAt),l=o("".slice);t.exports={codeAt:r(!1),charAt:r(!0)};},function(t,e){t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0};},function(t,e,n){n=n(99)("span").classList,n=n&&n.constructor&&n.constructor.prototype;t.exports=n===Object.prototype?void 0:n;},function(t,e,n){var r=n(2),o=n(0).RegExp;t.exports=r(function(){var t=o(".","s");return !(t.dotAll&&t.exec("\n")&&"s"===t.flags)});},function(t,e,n){var r=n(2),o=n(0).RegExp;t.exports=r(function(){var t=o("(?<a>b)","g");return "b"!==t.exec("b").groups.a||"bc"!=="b".replace(t,"$<a>c")});},function(t,e,n){var r=n(0),o=n(115),i=r.TypeError;t.exports=function(t){if(o(t))throw i("The method doesn't accept regular expressions");return t};},function(t,e,n){var r=n(12)("match");t.exports=function(e){var n=/./;try{"/./"[e](n);}catch(t){try{return n[r]=!1,"/./"[e](n)}catch(t){}}return !1};},function(t,e,n){var r=n(43),o=n(22),i=n(12),a=n(17),c=i("species");t.exports=function(t){var t=r(t),e=o.f;a&&t&&!t[c]&&e(t,c,{configurable:!0,get:function(){return this}});};},function(t,e,n){var y=n(3),m=n(0),g=n(1),b=n(81),_=n(37),w=n(146),O=n(147),k=n(151),C=n(14),S=n(19),x=n(2),E=n(152),j=n(87),T=n(117);t.exports=function(t,e,n){function r(t){var n=g(p[t]);_(p,t,"add"==t?function(t){return n(this,0===t?0:t),this}:"delete"==t?function(t){return !(l&&!S(t))&&n(this,0===t?0:t)}:"get"==t?function(t){return l&&!S(t)?void 0:n(this,0===t?0:t)}:"has"==t?function(t){return !(l&&!S(t))&&n(this,0===t?0:t)}:function(t,e){return n(this,0===t?0:t,e),this});}var o,i,a,c,s,u=-1!==t.indexOf("Map"),l=-1!==t.indexOf("Weak"),f=u?"set":"add",d=m[t],p=d&&d.prototype,h=d,v={};return b(t,!C(d)||!(l||p.forEach&&!x(function(){(new d).entries().next();})))?(h=n.getConstructor(e,t,u,f),w.enable()):b(t,!0)&&(i=(o=new h)[f](l?{}:-0,1)!=o,a=x(function(){o.has(1);}),c=E(function(t){new d(t);}),s=!l&&x(function(){for(var t=new d,e=5;e--;)t[f](e,e);return !t.has(-0)}),c||(((h=e(function(t,e){k(t,p);t=T(new d,t,h);return null!=e&&O(e,t[f],{that:t,AS_ENTRIES:u}),t})).prototype=p).constructor=h),(a||s)&&(r("delete"),r("has"),u&&r("get")),(s||i)&&r(f),l&&p.clear&&delete p.clear),v[t]=h,y({global:!0,forced:h!=d},v),j(h,t),l||n.setStrong(h,t,u),h};},function(t,e,n){function r(t){u(t,y,{value:{objectID:"O"+m++,weakData:{}}});}var a=n(3),c=n(1),o=n(63),i=n(19),s=n(20),u=n(22).f,l=n(55),f=n(107),d=n(169),p=n(78),h=n(171),v=!1,y=p("meta"),m=0,g=t.exports={enable:function(){g.enable=function(){},v=!0;var o=l.f,i=c([].splice),t={};t[y]=1,o(t).length&&(l.f=function(t){for(var e=o(t),n=0,r=e.length;n<r;n++)if(e[n]===y){i(e,n,1);break}return e},a({target:"Object",stat:!0,forced:!0},{getOwnPropertyNames:f.f}));},fastKey:function(t,e){if(!i(t))return "symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!s(t,y)){if(!d(t))return "F";if(!e)return "E";r(t);}return t[y].objectID},getWeakData:function(t,e){if(!s(t,y)){if(!d(t))return !0;if(!e)return !1;r(t);}return t[y].weakData},onFreeze:function(t){return h&&v&&d(t)&&!s(t,y)&&r(t),t}};o[y]=!0;},function(t,e,n){function y(t,e){this.stopped=t,this.result=e;}var r=n(0),m=n(88),g=n(21),b=n(18),_=n(76),w=n(148),O=n(46),k=n(44),C=n(149),S=n(120),x=n(150),E=r.TypeError,j=y.prototype;t.exports=function(t,e,n){function r(t){return i&&x(i,"normal",t),new y(!0,t)}function o(t){return d?(b(t),h?v(t[0],t[1],r):v(t[0],t[1])):h?v(t,r):v(t)}var i,a,c,s,u,l,f=n&&n.that,d=!(!n||!n.AS_ENTRIES),p=!(!n||!n.IS_ITERATOR),h=!(!n||!n.INTERRUPTED),v=m(e,f);if(p)i=t;else {if(!(n=S(t)))throw E(_(t)+" is not iterable");if(w(n)){for(a=0,c=O(t);a<c;a++)if((s=o(t[a]))&&k(j,s))return s;return new y(!1)}i=C(t,n);}for(u=i.next;!(l=g(u,i)).done;){try{s=o(l.value);}catch(t){x(i,"throw",t);}if("object"==typeof s&&s&&k(j,s))return s}return new y(!1)};},function(t,e,n){var r=n(12),o=n(68),i=r("iterator"),a=Array.prototype;t.exports=function(t){return void 0!==t&&(o.Array===t||a[i]===t)};},function(t,e,n){var r=n(0),o=n(21),i=n(62),a=n(18),c=n(76),s=n(120),u=r.TypeError;t.exports=function(t,e){var n=arguments.length<2?s(t):e;if(i(n))return a(o(n,t));throw u(c(t)+" is not iterable")};},function(t,e,n){var i=n(21),a=n(18),c=n(53);t.exports=function(t,e,n){var r,o;a(t);try{if(!(r=c(t,"return"))){if("throw"===e)throw n;return n}r=i(r,t);}catch(t){o=!0,r=t;}if("throw"===e)throw n;if(o)throw r;return a(r),n};},function(t,e,n){var r=n(0),o=n(44),i=r.TypeError;t.exports=function(t,e){if(o(e,t))return t;throw i("Incorrect invocation")};},function(t,e,n){var o=n(12)("iterator"),i=!1;try{var r=0,a={next:function(){return {done:!!r++}},return:function(){i=!0;}};a[o]=function(){return this},Array.from(a,function(){throw 2});}catch(t){}t.exports=function(t,e){if(!e&&!i)return !1;var n=!1;try{var r={};r[o]=function(){return {next:function(){return {done:n=!0}}}},t(r);}catch(t){}return n};},function(t,e,n){var u=n(22).f,l=n(50),f=n(172),d=n(88),p=n(151),h=n(147),a=n(109),c=n(144),v=n(17),y=n(146).fastKey,n=n(49),m=n.set,g=n.getterFor;t.exports={getConstructor:function(t,n,r,o){function i(t,e,n){var r,o=s(t),i=a(t,e);return i?i.value=n:(o.last=i={index:r=y(e,!0),key:e,value:n,previous:e=o.last,next:void 0,removed:!1},o.first||(o.first=i),e&&(e.next=i),v?o.size++:t.size++,"F"!==r&&(o.index[r]=i)),t}function a(t,e){var n,t=s(t),r=y(e);if("F"!==r)return t.index[r];for(n=t.first;n;n=n.next)if(n.key==e)return n}var t=t(function(t,e){p(t,c),m(t,{type:n,index:l(null),first:void 0,last:void 0,size:0}),v||(t.size=0),null!=e&&h(e,t[o],{that:t,AS_ENTRIES:r});}),c=t.prototype,s=g(n);return f(c,{clear:function(){for(var t=s(this),e=t.index,n=t.first;n;)n.removed=!0,n.previous&&(n.previous=n.previous.next=void 0),delete e[n.index],n=n.next;t.first=t.last=void 0,v?t.size=0:this.size=0;},delete:function(t){var e,n,r=s(this),t=a(this,t);return t&&(e=t.next,n=t.previous,delete r.index[t.index],t.removed=!0,n&&(n.next=e),e&&(e.previous=n),r.first==t&&(r.first=e),r.last==t&&(r.last=n),v?r.size--:this.size--),!!t},forEach:function(t){for(var e,n=s(this),r=d(t,1<arguments.length?arguments[1]:void 0);e=e?e.next:n.first;)for(r(e.value,e.key,this);e&&e.removed;)e=e.previous;},has:function(t){return !!a(this,t)}}),f(c,r?{get:function(t){t=a(this,t);return t&&t.value},set:function(t,e){return i(this,0===t?0:t,e)}}:{add:function(t){return i(this,t=0===t?0:t,t)}}),v&&u(c,"size",{get:function(){return s(this).size}}),t},setStrong:function(t,e,n){var r=e+" Iterator",o=g(e),i=g(r);a(t,e,function(t,e){m(this,{type:r,target:t,state:o(t),kind:e,last:void 0});},function(){for(var t=i(this),e=t.kind,n=t.last;n&&n.removed;)n=n.previous;return t.target&&(t.last=n=n?n.next:t.state.first)?"keys"==e?{value:n.key,done:!1}:"values"==e?{value:n.value,done:!1}:{value:[n.key,n.value],done:!1}:{value:t.target=void 0,done:!0}},n?"entries":"values",!n,!0),c(e);}};},function(t,e){var n=function(){return this}();try{n=n||new Function("return this")();}catch(t){"object"==typeof window&&(n=window);}t.exports=n;},function(t,e,n){var r=n(0),o=n(21),i=n(14),a=n(19),c=r.TypeError;t.exports=function(t,e){var n,r;if("string"===e&&i(n=t.toString)&&!a(r=o(n,t)))return r;if(i(n=t.valueOf)&&!a(r=o(n,t)))return r;if("string"!==e&&i(n=t.toString)&&!a(r=o(n,t)))return r;throw c("Can't convert object to primitive value")};},function(t,e,n){var r=n(0),o=n(14),n=n(100),r=r.WeakMap;t.exports=o(r)&&/native code/.test(n(r));},function(t,e,n){var r=n(0),o=n(14),i=r.String,a=r.TypeError;t.exports=function(t){if("object"==typeof t||o(t))return t;throw a("Can't set "+i(t)+" as a prototype")};},function(t,e,n){var r=n(105),o=n(83);t.exports=r?{}.toString:function(){return "[object "+o(this)+"]"};},function(t,e,n){var r=n(0),o=n(1),i=n(62),l=n(19),f=n(20),d=n(106),n=n(60),p=r.Function,h=o([].concat),v=o([].join),y={};t.exports=n?p.bind:function(a){var c=i(this),t=c.prototype,s=d(arguments,1),u=function(){var t=h(s,d(arguments));if(this instanceof u){var e=c,n=t.length,r=t;if(!f(y,n)){for(var o=[],i=0;i<n;i++)o[i]="a["+i+"]";y[n]=p("C,a","return new C("+v(o,",")+")");}return y[n](e,r)}return c.apply(a,t)};return l(t)&&(u.prototype=t),u};},function(t,e,n){n=n(43);t.exports=n("document","documentElement");},function(t,e,n){n=n(0);t.exports=n;},function(t,e,n){var r=n(0),o=n(86),i=n(85),a=n(19),c=n(12)("species"),s=r.Array;t.exports=function(t){var e;return o(t)&&(e=t.constructor,(i(e)&&(e===s||o(e.prototype))||a(e)&&null===(e=e[c]))&&(e=void 0)),void 0===e?s:e};},function(t,e,n){function o(){return this}var i=n(136).IteratorPrototype,a=n(50),c=n(61),s=n(87),u=n(68);t.exports=function(t,e,n,r){e+=" Iterator";return t.prototype=a(i,{next:c(+!r,n)}),s(t,e,!1,!0),u[e]=o,t};},function(t,e,n){var r=n(18),o=n(131),i=n(12)("species");t.exports=function(t,e){var t=r(t).constructor;return void 0===t||null==(t=r(t)[i])?e:o(t)};},function(t,e,n){var r=n(64).PROPER,o=n(2),i=n(93);t.exports=function(t){return o(function(){return !!i[t]()||"​᠎"!=="​᠎"[t]()||r&&i[t].name!==t})};},function(t,e,n){var r=n(0),o=n(2),i=n(1),a=n(23),c=n(92).trim,n=n(93),s=i("".charAt),u=r.parseFloat,i=r.Symbol,l=i&&i.iterator,r=1/u(n+"-0")!=-1/0||l&&!o(function(){u(Object(l));});t.exports=r?function(t){var t=c(a(t)),e=u(t);return 0===e&&"-"==s(t,0)?-0:e}:u;},function(t,e,n){n=n(1);t.exports=n(1..valueOf);},function(t,e,n){var r=n(56).forEach,n=n(118)("forEach");t.exports=n?[].forEach:function(t){return r(this,t,1<arguments.length?arguments[1]:void 0)};},function(t,e,n){var r=n(2),o=n(19),i=n(48),a=n(170),c=Object.isExtensible,n=r(function(){});t.exports=n||a?function(t){return !!o(t)&&((!a||"ArrayBuffer"!=i(t))&&(!c||c(t)))}:c;},function(t,e,n){n=n(2);t.exports=n(function(){var t;"function"==typeof ArrayBuffer&&(t=new ArrayBuffer(8),Object.isExtensible(t)&&Object.defineProperty(t,"a",{value:8}));});},function(t,e,n){n=n(2);t.exports=!n(function(){return Object.isExtensible(Object.preventExtensions({}))});},function(t,e,n){var o=n(37);t.exports=function(t,e,n){for(var r in e)o(t,r,e[r],n);return t};},function(t,e,n){var r=n(1),o=n(36),d=Math.floor,p=r("".charAt),h=r("".replace),v=r("".slice),y=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,m=/\$([$&'`]|\d{1,2})/g;t.exports=function(i,a,c,s,u,t){var l=c+i.length,f=s.length,e=m;return void 0!==u&&(u=o(u),e=y),h(t,e,function(t,e){var n;switch(p(e,0)){case"$":return "$";case"&":return i;case"`":return v(a,0,c);case"'":return v(a,l);case"<":n=u[v(e,1,-1)];break;default:var r,o=+e;if(0==o)return t;if(f<o)return 0!==(r=d(o/10))&&r<=f?void 0===s[r-1]?p(e,1):s[r-1]+p(e,1):t;n=s[o-1];}return void 0===n?"":n})};},function(t,e,n){var r=n(0),d=n(88),p=n(21),h=n(36),v=n(175),y=n(148),m=n(85),g=n(46),b=n(67),_=n(149),w=n(120),O=r.Array;t.exports=function(t){var e,n,r,o,i,a,c=h(t),t=m(this),s=arguments.length,u=1<s?arguments[1]:void 0,l=void 0!==u,s=(l&&(u=d(u,2<s?arguments[2]:void 0)),w(c)),f=0;if(!s||this==O&&y(s))for(e=g(c),n=t?new this(e):O(e);f<e;f++)a=l?u(c[f],f):c[f],b(n,f,a);else for(i=(o=_(c,s)).next,n=t?new this:[];!(r=p(i,o)).done;f++)a=l?v(o,u,[r.value,f],!0):r.value,b(n,f,a);return n.length=f,n};},function(t,e,n){var o=n(18),i=n(150);t.exports=function(e,t,n,r){try{return r?t(o(n)[0],n[1]):t(n)}catch(t){i(e,"throw",t);}};},function(t,e,n){var r=n(3),o=n(2),n=n(107).f;r({target:"Object",stat:!0,forced:o(function(){return !Object.getOwnPropertyNames(1)})},{getOwnPropertyNames:n});},function(t,e,n){n(145)("Map",function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}},n(153));},function(t,e,n){var r=n(0),o=n(2),i=n(1),a=n(23),c=n(92).trim,n=n(93),s=r.parseInt,r=r.Symbol,u=r&&r.iterator,l=/^[+-]?0x/i,f=i(l.exec),r=8!==s(n+"08")||22!==s(n+"0x16")||u&&!o(function(){s(Object(u));});t.exports=r?function(t,e){t=c(a(t));return s(t,e>>>0||(f(l,t)?16:10))}:s;},function(t,e,n){var r=n(20);t.exports=function(t){return void 0!==t&&(r(t,"value")||r(t,"writable"))};},function(t,e,n){var r=n(3),o=n(1),c=n(62),s=n(36),u=n(46),l=n(23),i=n(2),f=n(181),a=n(118),d=n(182),p=n(183),h=n(74),v=n(184),y=[],m=o(y.sort),g=o(y.push),n=i(function(){y.sort(void 0);}),o=i(function(){y.sort(null);}),a=a("sort"),b=!i(function(){if(h)return h<70;if(!(d&&3<d)){if(p)return !0;if(v)return v<603;for(var t,e,n,r="",o=65;o<76;o++){switch(t=String.fromCharCode(o),o){case 66:case 69:case 70:case 72:e=3;break;case 68:case 71:e=4;break;default:e=2;}for(n=0;n<47;n++)y.push({k:t+n,v:e});}for(y.sort(function(t,e){return e.v-t.v}),n=0;n<y.length;n++)t=y[n].k.charAt(0),r.charAt(r.length-1)!==t&&(r+=t);return "DGBEFHACIJK"!==r}});r({target:"Array",proto:!0,forced:n||!o||!a||!b},{sort:function(t){void 0!==t&&c(t);var e=s(this);if(b)return void 0===t?m(e):m(e,t);for(var n,r,o=[],i=u(e),a=0;a<i;a++)a in e&&g(o,e[a]);for(f(o,(r=t,function(t,e){return void 0===e?-1:void 0===t?1:void 0!==r?+r(t,e)||0:l(t)>l(e)?1:-1})),n=o.length,a=0;a<n;)e[a]=o[a++];for(;a<i;)delete e[a++];return e}});},function(t,e,n){function g(t,e){var n=t.length,r=_(n/2);if(n<8){for(var o,i,a=t,c=e,s=a.length,u=1;u<s;){for(o=a[i=u];i&&0<c(a[i-1],o);)a[i]=a[--i];i!==u++&&(a[i]=o);}return a}for(var l=t,f=g(b(t,0,r),e),d=g(b(t,r),e),p=e,h=f.length,v=d.length,y=0,m=0;y<h||m<v;)l[y+m]=y<h&&m<v?p(f[y],d[m])<=0?f[y++]:d[m++]:y<h?f[y++]:d[m++];return l}var b=n(108),_=Math.floor;t.exports=g;},function(t,e,n){n=n(75).match(/firefox\/(\d+)/i);t.exports=!!n&&+n[1];},function(t,e,n){n=n(75);t.exports=/MSIE|Trident/.test(n);},function(t,e,n){n=n(75).match(/AppleWebKit\/(\d+)\./);t.exports=!!n&&+n[1];},function(t,e,n){var r=n(3),n=n(186);r({target:"Object",stat:!0,forced:Object.assign!==n},{assign:n});},function(t,e,n){var d=n(17),r=n(1),p=n(21),o=n(2),h=n(66),v=n(103),y=n(70),m=n(36),g=n(71),i=Object.assign,a=Object.defineProperty,b=r([].concat);t.exports=!i||o(function(){if(d&&1!==i({b:1},i(a({},"a",{enumerable:!0,get:function(){a(this,"b",{value:3,enumerable:!1});}}),{b:2})).b)return !0;var t={},e={},n=Symbol(),r="abcdefghijklmnopqrst";return t[n]=7,r.split("").forEach(function(t){e[t]=t;}),7!=i({},t)[n]||h(i({},e)).join("")!=r})?function(t,e){for(var n=m(t),r=arguments.length,o=1,i=v.f,a=y.f;o<r;)for(var c,s=g(arguments[o++]),u=i?b(h(s),i(s)):h(s),l=u.length,f=0;f<l;)c=u[f++],d&&!p(a,s,c)||(n[c]=s[c]);return n}:i;},function(t,e,n){var r=n(3),o=n(56).findIndex,n=n(89),i="findIndex",a=!0;i in[]&&Array(1)[i](function(){a=!1;}),r({target:"Array",proto:!0,forced:a},{findIndex:function(t){return o(this,t,1<arguments.length?arguments[1]:void 0)}}),n(i);},function(t,e,n){n(3)({target:"Number",stat:!0},{isNaN:function(t){return t!=t}});},function(t,e,n){var r=n(3),o=n(190).values;r({target:"Object",stat:!0},{values:function(t){return o(t)}});},function(t,e,n){function r(c){return function(t){for(var e,n=l(t),r=u(n),o=r.length,i=0,a=[];i<o;)e=r[i++],s&&!f(n,e)||d(a,c?[e,n[e]]:n[e]);return a}}var s=n(17),o=n(1),u=n(66),l=n(30),f=o(n(70).f),d=o([].push);t.exports={entries:r(!0),values:r(!1)};},function(t,e,n){var n=n(3),r=Math.ceil,o=Math.floor;n({target:"Math",stat:!0},{trunc:function(t){return (0<t?o:r)(t)}});},,function(N,R,t){t.r(R);var i={};t.r(i),t.d(i,"top",function(){return E}),t.d(i,"bottom",function(){return j}),t.d(i,"right",function(){return T}),t.d(i,"left",function(){return A}),t.d(i,"auto",function(){return Lt}),t.d(i,"basePlacements",function(){return Nt}),t.d(i,"start",function(){return Rt}),t.d(i,"end",function(){return Bt}),t.d(i,"clippingParents",function(){return Ht}),t.d(i,"viewport",function(){return Ft}),t.d(i,"popper",function(){return Vt}),t.d(i,"reference",function(){return Yt}),t.d(i,"variationPlacements",function(){return Wt}),t.d(i,"placements",function(){return zt}),t.d(i,"beforeRead",function(){return Ut}),t.d(i,"read",function(){return qt}),t.d(i,"afterRead",function(){return Kt}),t.d(i,"beforeMain",function(){return $t}),t.d(i,"main",function(){return Xt}),t.d(i,"afterMain",function(){return Gt}),t.d(i,"beforeWrite",function(){return Qt}),t.d(i,"write",function(){return Zt}),t.d(i,"afterWrite",function(){return Jt}),t.d(i,"modifierPhases",function(){return te}),t.d(i,"applyStyles",function(){return oe}),t.d(i,"arrow",function(){return Oe}),t.d(i,"computeStyles",function(){return xe}),t.d(i,"eventListeners",function(){return je}),t.d(i,"flip",function(){return Ye}),t.d(i,"hide",function(){return Ue}),t.d(i,"offset",function(){return qe}),t.d(i,"popperOffsets",function(){return Ke}),t.d(i,"preventOverflow",function(){return $e}),t.d(i,"popperGenerator",function(){return Je}),t.d(i,"detectOverflow",function(){return Ve}),t.d(i,"createPopperBase",function(){return tn}),t.d(i,"createPopper",function(){return en}),t.d(i,"createPopperLite",function(){return nn}),t(29),t(31),t(4),t(32),t(7),t(10),t(11),t(5),t(6),t(8),t(16),t(69),t(33),t(51),t(57),t(38),t(91),t(116),t(34),t(9),t(13),t(52),t(40),t(26);function B(t){return (B="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function H(t){return (t=et(t))&&document.querySelector(t)?t:null}function F(t){return (t=et(t))?document.querySelector(t):null}function V(t){t.dispatchEvent(new Event(tt));}function Y(t){return nt(t)?t.jquery?t[0]:t:"string"==typeof t&&0<t.length?document.querySelector(t):null}function W(r,o,i){Object.keys(i).forEach(function(t){var e=i[t],n=o[t],n=n&&nt(n)?"element":null==(n=n)?"".concat(n):{}.toString.call(n).match(/\s([a-z]+)/i)[1].toLowerCase();if(!new RegExp(e).test(n))throw new TypeError("".concat(r.toUpperCase(),': Option "').concat(t,'" provided type "').concat(n,'" but expected type "').concat(e,'".'))});}function z(t){return !(!nt(t)||0===t.getClientRects().length)&&"visible"===getComputedStyle(t).getPropertyValue("visibility")}function U(t){return !t||t.nodeType!==Node.ELEMENT_NODE||(!!t.classList.contains("disabled")||(void 0!==t.disabled?t.disabled:t.hasAttribute("disabled")&&"false"!==t.getAttribute("disabled")))}function q(t){return document.documentElement.attachShadow?"function"==typeof t.getRootNode?(e=t.getRootNode())instanceof ShadowRoot?e:null:t instanceof ShadowRoot?t:t.parentNode?q(t.parentNode):null:null;var e;}function K(){}function $(t){t.offsetHeight;}function X(){var t=window.jQuery;return t&&!document.body.hasAttribute("data-bs-no-jquery")?t:null}function a(){return "rtl"===document.documentElement.dir}function e(r){var t;t=function(){var t,e,n=X();n&&(t=r.NAME,e=n.fn[t],n.fn[t]=r.jQueryInterface,n.fn[t].Constructor=r,n.fn[t].noConflict=function(){return n.fn[t]=e,r.jQueryInterface});},"loading"===document.readyState?(rt.length||document.addEventListener("DOMContentLoaded",function(){rt.forEach(function(t){return t()});}),rt.push(t)):t();}function G(t){"function"==typeof t&&t();}function Q(n,r){var t,o;2<arguments.length&&void 0!==arguments[2]&&!arguments[2]?G(n):(t=function(t){if(!t)return 0;var t=window.getComputedStyle(t),e=t.transitionDuration,t=t.transitionDelay,n=Number.parseFloat(e),r=Number.parseFloat(t);return n||r?(e=e.split(",")[0],t=t.split(",")[0],(Number.parseFloat(e)+Number.parseFloat(t))*J):0}(r)+5,o=!1,r.addEventListener(tt,function t(e){e.target===r&&(o=!0,r.removeEventListener(tt,t),G(n));}),setTimeout(function(){o||V(r);},t));}function Z(t,e,n,r){if(-1===(e=t.indexOf(e)))return t[!n&&r?t.length-1:0];var o=t.length;return e+=n?1:-1,r&&(e=(e+o)%o),t[Math.max(0,Math.min(e,o-1))]}var J=1e3,tt="transitionend",et=function(t){var e=t.getAttribute("data-bs-target");if(!e||"#"===e){t=t.getAttribute("href");if(!t||!t.includes("#")&&!t.startsWith("."))return null;e=(t=t.includes("#")&&!t.startsWith("#")?"#".concat(t.split("#")[1]):t)&&"#"!==t?t.trim():null;}return e},nt=function(t){return !(!t||"object"!==B(t))&&void 0!==(t=void 0!==t.jquery?t[0]:t).nodeType},rt=[];t(119),t(47),t(27),t(41),t(35);function ot(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var r,o,i=[],a=!0,c=!1;try{for(n=n.call(t);!(a=(r=n.next()).done)&&(i.push(r.value),!e||i.length!==e);a=!0);}catch(t){c=!0,o=t;}finally{try{a||null==n.return||n.return();}finally{if(c)throw o}}return i}}(t,e)||function(t,e){if(t){if("string"==typeof t)return it(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return "Map"===(n="Object"===n&&t.constructor?t.constructor.name:n)||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?it(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function it(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}var at=/[^.]*(?=\..*)\.|.*/,ct=/\..*/,st=/::\d+$/,ut={},lt=1,ft={mouseenter:"mouseover",mouseleave:"mouseout"},dt=/^(mouseenter|mouseleave)/i,pt=new Set(["click","dblclick","mouseup","mousedown","contextmenu","mousewheel","DOMMouseScroll","mouseover","mouseout","mousemove","selectstart","selectend","keydown","keypress","keyup","orientationchange","touchstart","touchmove","touchend","touchcancel","pointerdown","pointermove","pointerup","pointerleave","pointercancel","gesturestart","gesturechange","gestureend","focus","blur","change","reset","select","submit","focusin","focusout","load","unload","beforeunload","resize","move","DOMContentLoaded","readystatechange","error","abort","scroll"]);function ht(t,e){return e&&"".concat(e,"::").concat(lt++)||t.uidEvent||lt++}function vt(t){var e=ht(t);return t.uidEvent=e,ut[e]=ut[e]||{},ut[e]}function yt(t,e,n){for(var r=2<arguments.length&&void 0!==n?n:null,o=Object.keys(t),i=0,a=o.length;i<a;i++){var c=t[o[i]];if(c.originalHandler===e&&c.delegationSelector===r)return c}return null}function mt(t,e,n){var r="string"==typeof e,n=r?n:e,e=_t(t);return [r,n,e=pt.has(e)?e:t]}function gt(t,e,n,r,o){var i,a,c,s,u,l,f,d,p,h;"string"==typeof e&&t&&(n||(n=r,r=null),dt.test(e)&&(c=function(e){return function(t){if(!t.relatedTarget||t.relatedTarget!==t.delegateTarget&&!t.delegateTarget.contains(t.relatedTarget))return e.call(this,t)}},r?r=c(r):n=c(n)),i=(c=ot(mt(e,n,r),3))[0],a=c[1],c=c[2],(u=yt(s=(s=vt(t))[c]||(s[c]={}),a,i?n:null))?u.oneOff=u.oneOff&&o:(u=ht(a,e.replace(at,"")),(e=i?(d=t,p=n,h=r,function t(e){for(var n=d.querySelectorAll(p),r=e.target;r&&r!==this;r=r.parentNode)for(var o=n.length;o--;)if(n[o]===r)return e.delegateTarget=r,t.oneOff&&wt.off(d,e.type,p,h),h.apply(r,[e]);return null}):(l=t,f=n,function t(e){return e.delegateTarget=l,t.oneOff&&wt.off(l,e.type,f),f.apply(l,[e])})).delegationSelector=i?n:null,e.originalHandler=a,e.oneOff=o,s[e.uidEvent=u]=e,t.addEventListener(c,e,i)));}function bt(t,e,n,r,o){r=yt(e[n],r,o);r&&(t.removeEventListener(n,r,Boolean(o)),delete e[n][r.uidEvent]);}function _t(t){return t=t.replace(ct,""),ft[t]||t}var wt={on:function(t,e,n,r){gt(t,e,n,r,!1);},one:function(t,e,n,r){gt(t,e,n,r,!0);},off:function(a,c,t,e){if("string"==typeof c&&a){var e=ot(mt(c,t,e),3),n=e[0],r=e[1],o=e[2],i=o!==c,s=vt(a),e=c.startsWith(".");if(void 0!==r)return s&&s[o]?void bt(a,s,o,r,n?t:null):void 0;e&&Object.keys(s).forEach(function(t){var e,n,r,o,i;e=a,n=s,r=t,o=c.slice(1),i=n[r]||{},Object.keys(i).forEach(function(t){t.includes(o)&&(t=i[t],bt(e,n,r,t.originalHandler,t.delegationSelector));});});var u=s[o]||{};Object.keys(u).forEach(function(t){var e=t.replace(st,"");i&&!c.includes(e)||(e=u[t],bt(a,s,o,e.originalHandler,e.delegationSelector));});}},trigger:function(t,e,n){if("string"!=typeof e||!t)return null;var r,o=X(),i=_t(e),a=e!==i,c=pt.has(i),s=!0,u=!0,l=!1,f=null;return a&&o&&(r=o.Event(e,n),o(t).trigger(r),s=!r.isPropagationStopped(),u=!r.isImmediatePropagationStopped(),l=r.isDefaultPrevented()),c?(f=document.createEvent("HTMLEvents")).initEvent(i,s,!0):f=new CustomEvent(e,{bubbles:s,cancelable:!0}),void 0!==n&&Object.keys(n).forEach(function(t){Object.defineProperty(f,t,{get:function(){return n[t]}});}),l&&f.preventDefault(),u&&t.dispatchEvent(f),f.defaultPrevented&&void 0!==r&&r.preventDefault(),f}},d=wt,Ot=(t(176),t(177),new Map),kt=function(t,e,n){Ot.has(t)||Ot.set(t,new Map);t=Ot.get(t);t.has(e)||0===t.size?t.set(e,n):console.error("Bootstrap doesn't allow more than one instance per element. Bound instance: ".concat(Array.from(t.keys())[0],"."));},Ct=function(t,e){return Ot.has(t)&&Ot.get(t).get(e)||null},St=function(t,e){var n;Ot.has(t)&&((n=Ot.get(t)).delete(e),0===n.size&&Ot.delete(t));};function xt(t){return (xt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Et(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r);}}var c=function(){function e(t){if(!(this instanceof e))throw new TypeError("Cannot call a class as a function");(t=Y(t))&&(this._element=t,kt(this._element,this.constructor.DATA_KEY,this));}var t,n,r;return t=e,r=[{key:"getInstance",value:function(t){return Ct(Y(t),this.DATA_KEY)}},{key:"getOrCreateInstance",value:function(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};return this.getInstance(t)||new this(t,"object"===xt(e)?e:null)}},{key:"VERSION",get:function(){return "5.1.3"}},{key:"NAME",get:function(){throw new Error('You have to implement the static method "NAME", for each component!')}},{key:"DATA_KEY",get:function(){return "bs.".concat(this.NAME)}},{key:"EVENT_KEY",get:function(){return ".".concat(this.DATA_KEY)}}],(n=[{key:"dispose",value:function(){var e=this;St(this._element,this.constructor.DATA_KEY),d.off(this._element,this.constructor.EVENT_KEY),Object.getOwnPropertyNames(this).forEach(function(t){e[t]=null;});}},{key:"_queueCallback",value:function(t,e){Q(t,e,!(2<arguments.length&&void 0!==arguments[2])||arguments[2]);}}])&&Et(t.prototype,n),r&&Et(t,r),Object.defineProperty(t,"prototype",{writable:!1}),e}();function jt(t){return (jt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Tt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r);}}function At(t,e){return (At=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Dt(n){var r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(t){return !1}}();return function(){var t,e=Pt(n),e=(t=r?(t=Pt(this).constructor,Reflect.construct(e,arguments,t)):e.apply(this,arguments),this);if(t&&("object"===jt(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");if(void 0!==e)return e;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}}function Pt(t){return (Pt=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var R=".".concat("bs.button"),Mt='[data-bs-toggle="button"]',R="click".concat(R).concat(".data-api"),It=function(){var t=o,e=c;if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&At(t,e);var n,r=Dt(o);function o(){var t=this,e=o;if(t instanceof e)return r.apply(this,arguments);throw new TypeError("Cannot call a class as a function")}return t=o,e=[{key:"NAME",get:function(){return "button"}},{key:"jQueryInterface",value:function(e){return this.each(function(){var t=o.getOrCreateInstance(this);"toggle"===e&&t[e]();})}}],(n=[{key:"toggle",value:function(){this._element.setAttribute("aria-pressed",this._element.classList.toggle("active"));}}])&&Tt(t.prototype,n),e&&Tt(t,e),Object.defineProperty(t,"prototype",{writable:!1}),o}(),R=(d.on(document,R,Mt,function(t){t.preventDefault();t=t.target.closest(Mt);It.getOrCreateInstance(t).toggle();}),e(It),It),E=(t(28),t(58),t(121),t(15),t(59),t(24),t(25),"top"),j="bottom",T="right",A="left",Lt="auto",Nt=[E,j,T,A],Rt="start",Bt="end",Ht="clippingParents",Ft="viewport",Vt="popper",Yt="reference",Wt=Nt.reduce(function(t,e){return t.concat([e+"-"+Rt,e+"-"+Bt])},[]),zt=[].concat(Nt,[Lt]).reduce(function(t,e){return t.concat([e,e+"-"+Rt,e+"-"+Bt])},[]),Ut="beforeRead",qt="read",Kt="afterRead",$t="beforeMain",Xt="main",Gt="afterMain",Qt="beforeWrite",Zt="write",Jt="afterWrite",te=[Ut,qt,Kt,$t,Xt,Gt,Qt,Zt,Jt];function ee(t){return t?(t.nodeName||"").toLowerCase():null}function b(t){return null==t?window:"[object Window]"!==t.toString()?(e=t.ownerDocument)&&e.defaultView||window:t;var e;}function ne(t){return t instanceof b(t).Element||t instanceof Element}function s(t){return t instanceof b(t).HTMLElement||t instanceof HTMLElement}function re(t){if("undefined"!=typeof ShadowRoot)return t instanceof b(t).ShadowRoot||t instanceof ShadowRoot}var oe={name:"applyStyles",enabled:!0,phase:"write",fn:function(t){var o=t.state;Object.keys(o.elements).forEach(function(t){var e=o.styles[t]||{},n=o.attributes[t]||{},r=o.elements[t];s(r)&&ee(r)&&(Object.assign(r.style,e),Object.keys(n).forEach(function(t){var e=n[t];!1===e?r.removeAttribute(t):r.setAttribute(t,!0===e?"":e);}));});},effect:function(t){var r=t.state,o={popper:{position:r.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(r.elements.popper.style,o.popper),r.styles=o,r.elements.arrow&&Object.assign(r.elements.arrow.style,o.arrow),function(){Object.keys(r.elements).forEach(function(t){var e=r.elements[t],n=r.attributes[t]||{},t=Object.keys((r.styles.hasOwnProperty(t)?r.styles:o)[t]).reduce(function(t,e){return t[e]="",t},{});s(e)&&ee(e)&&(Object.assign(e.style,t),Object.keys(n).forEach(function(t){e.removeAttribute(t);}));});}},requires:["computeStyles"]};function ie(t){return t.split("-")[0]}var ae=Math.max,ce=Math.min,se=Math.round;function ue(t,e){void 0===e&&(e=!1);var n=t.getBoundingClientRect(),r=1,o=1;return s(t)&&e&&(e=t.offsetHeight,0<(t=t.offsetWidth)&&(r=se(n.width)/t||1),0<e&&(o=se(n.height)/e||1)),{width:n.width/r,height:n.height/o,top:n.top/o,right:n.right/r,bottom:n.bottom/o,left:n.left/r,x:n.left/r,y:n.top/o}}function le(t){var e=ue(t),n=t.offsetWidth,r=t.offsetHeight;return Math.abs(e.width-n)<=1&&(n=e.width),Math.abs(e.height-r)<=1&&(r=e.height),{x:t.offsetLeft,y:t.offsetTop,width:n,height:r}}function fe(t,e){var n=e.getRootNode&&e.getRootNode();if(t.contains(e))return !0;if(n&&re(n)){var r=e;do{if(r&&t.isSameNode(r))return !0}while(r=r.parentNode||r.host)}return !1}function de(t){return b(t).getComputedStyle(t)}function pe(t){return ((ne(t)?t.ownerDocument:t.document)||window.document).documentElement}function he(t){return "html"===ee(t)?t:t.assignedSlot||t.parentNode||(re(t)?t.host:null)||pe(t)}function ve(t){return s(t)&&"fixed"!==de(t).position?t.offsetParent:null}function ye(t){for(var e,n=b(t),r=ve(t);r&&(e=r,0<=["table","td","th"].indexOf(ee(e)))&&"static"===de(r).position;)r=ve(r);return (!r||"html"!==ee(r)&&("body"!==ee(r)||"static"!==de(r).position))&&(r||function(t){var e=-1!==navigator.userAgent.toLowerCase().indexOf("firefox"),n=-1!==navigator.userAgent.indexOf("Trident");if(n&&s(t)&&"fixed"===de(t).position)return null;var r=he(t);for(re(r)&&(r=r.host);s(r)&&["html","body"].indexOf(ee(r))<0;){var o=de(r);if("none"!==o.transform||"none"!==o.perspective||"paint"===o.contain||-1!==["transform","perspective"].indexOf(o.willChange)||e&&"filter"===o.willChange||e&&o.filter&&"none"!==o.filter)return r;r=r.parentNode;}return null}(t))||n}function me(t){return 0<=["top","bottom"].indexOf(t)?"x":"y"}function ge(t,e,n){return ae(t,ce(e,n))}function be(){return {top:0,right:0,bottom:0,left:0}}function _e(t){return Object.assign({},be(),t)}function we(n,t){return t.reduce(function(t,e){return t[e]=n,t},{})}var Oe={name:"arrow",enabled:!0,phase:"main",fn:function(t){var e,n,r,o,i=t.state,a=t.name,t=t.options,c=i.elements.arrow,s=i.modifiersData.popperOffsets,u=me(l=ie(i.placement)),l=0<=[A,T].indexOf(l)?"height":"width";c&&s&&(t=t.padding,n=i,n=_e("number"!=typeof(t="function"==typeof t?t(Object.assign({},n.rects,{placement:n.placement})):t)?t:we(t,Nt)),t=le(c),o="y"===u?E:A,r="y"===u?j:T,e=i.rects.reference[l]+i.rects.reference[u]-s[u]-i.rects.popper[l],s=s[u]-i.rects.reference[u],c=(c=ye(c))?"y"===u?c.clientHeight||0:c.clientWidth||0:0,o=n[o],n=c-t[l]-n[r],o=ge(o,r=c/2-t[l]/2+(e/2-s/2),n),i.modifiersData[a]=((c={})[u]=o,c.centerOffset=o-r,c));},effect:function(t){var e=t.state;null!=(t=void 0===(t=t.options.element)?"[data-popper-arrow]":t)&&("string"!=typeof t||(t=e.elements.popper.querySelector(t)))&&fe(e.elements.popper,t)&&(e.elements.arrow=t);},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};function ke(t){return t.split("-")[1]}var Ce={top:"auto",right:"auto",bottom:"auto",left:"auto"};function Se(t){var e,n,r,o=t.popper,i=t.popperRect,a=t.placement,c=t.variation,s=t.offsets,u=t.position,l=t.gpuAcceleration,f=t.adaptive,d=t.roundOffsets,t=t.isFixed,p=s.x,p=void 0===p?0:p,h=s.y,h=void 0===h?0:h,v="function"==typeof d?d({x:p,y:h}):{x:p,y:h},v=(p=v.x,h=v.y,s.hasOwnProperty("x")),s=s.hasOwnProperty("y"),y=A,m=E,g=window,o=(f&&(n="clientHeight",e="clientWidth",(r=ye(o))===b(o)&&"static"!==de(r=pe(o)).position&&"absolute"===u&&(n="scrollHeight",e="scrollWidth"),a!==E&&(a!==A&&a!==T||c!==Bt)||(m=j,h=(h-((t&&r===g&&g.visualViewport?g.visualViewport.height:r[n])-i.height))*(l?1:-1)),a!==A&&(a!==E&&a!==j||c!==Bt)||(y=T,p=(p-((t&&r===g&&g.visualViewport?g.visualViewport.width:r[e])-i.width))*(l?1:-1))),Object.assign({position:u},f&&Ce)),t=!0===d?(a=(n={x:p,y:h}).x,n=n.y,c=window.devicePixelRatio||1,{x:se(a*c)/c||0,y:se(n*c)/c||0}):{x:p,y:h};return p=t.x,h=t.y,l?Object.assign({},o,((r={})[m]=s?"0":"",r[y]=v?"0":"",r.transform=(g.devicePixelRatio||1)<=1?"translate("+p+"px, "+h+"px)":"translate3d("+p+"px, "+h+"px, 0)",r)):Object.assign({},o,((e={})[m]=s?h+"px":"",e[y]=v?p+"px":"",e.transform="",e))}var xe={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(t){var e=t.state,t=t.options,n=void 0===(n=t.gpuAcceleration)||n,r=void 0===(r=t.adaptive)||r,t=void 0===(t=t.roundOffsets)||t,n={placement:ie(e.placement),variation:ke(e.placement),popper:e.elements.popper,popperRect:e.rects.popper,gpuAcceleration:n,isFixed:"fixed"===e.options.strategy};null!=e.modifiersData.popperOffsets&&(e.styles.popper=Object.assign({},e.styles.popper,Se(Object.assign({},n,{offsets:e.modifiersData.popperOffsets,position:e.options.strategy,adaptive:r,roundOffsets:t})))),null!=e.modifiersData.arrow&&(e.styles.arrow=Object.assign({},e.styles.arrow,Se(Object.assign({},n,{offsets:e.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:t})))),e.attributes.popper=Object.assign({},e.attributes.popper,{"data-popper-placement":e.placement});},data:{}},Ee={passive:!0};var je={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(t){var e=t.state,n=t.instance,r=(t=t.options).scroll,o=void 0===r||r,i=void 0===(r=t.resize)||r,a=b(e.elements.popper),c=[].concat(e.scrollParents.reference,e.scrollParents.popper);return o&&c.forEach(function(t){t.addEventListener("scroll",n.update,Ee);}),i&&a.addEventListener("resize",n.update,Ee),function(){o&&c.forEach(function(t){t.removeEventListener("scroll",n.update,Ee);}),i&&a.removeEventListener("resize",n.update,Ee);}},data:{}},Te={left:"right",right:"left",bottom:"top",top:"bottom"};function Ae(t){return t.replace(/left|right|bottom|top/g,function(t){return Te[t]})}var De={start:"end",end:"start"};function Pe(t){return t.replace(/start|end/g,function(t){return De[t]})}function Me(t){t=b(t);return {scrollLeft:t.pageXOffset,scrollTop:t.pageYOffset}}function Ie(t){return ue(pe(t)).left+Me(t).scrollLeft}function Le(t){var t=de(t),e=t.overflow,n=t.overflowX,t=t.overflowY;return /auto|scroll|overlay|hidden/.test(e+t+n)}function Ne(t,e){void 0===e&&(e=[]);var n=function t(e){return 0<=["html","body","#document"].indexOf(ee(e))?e.ownerDocument.body:s(e)&&Le(e)?e:t(he(e))}(t),t=n===(null==(t=t.ownerDocument)?void 0:t.body),r=b(n),r=t?[r].concat(r.visualViewport||[],Le(n)?n:[]):n,n=e.concat(r);return t?n:n.concat(Ne(he(r)))}function Re(t){return Object.assign({},t,{left:t.x,top:t.y,right:t.x+t.width,bottom:t.y+t.height})}function Be(t,e){return e===Ft?Re((r=b(n=t),o=pe(n),r=r.visualViewport,i=o.clientWidth,o=o.clientHeight,c=a=0,r&&(i=r.width,o=r.height,/^((?!chrome|android).)*safari/i.test(navigator.userAgent)||(a=r.offsetLeft,c=r.offsetTop)),{width:i,height:o,x:a+Ie(n),y:c})):ne(e)?((i=ue(r=e)).top=i.top+r.clientTop,i.left=i.left+r.clientLeft,i.bottom=i.top+r.clientHeight,i.right=i.left+r.clientWidth,i.width=r.clientWidth,i.height=r.clientHeight,i.x=i.left,i.y=i.top,i):Re((o=pe(t),a=pe(o),n=Me(o),c=null==(c=o.ownerDocument)?void 0:c.body,e=ae(a.scrollWidth,a.clientWidth,c?c.scrollWidth:0,c?c.clientWidth:0),t=ae(a.scrollHeight,a.clientHeight,c?c.scrollHeight:0,c?c.clientHeight:0),o=-n.scrollLeft+Ie(o),n=-n.scrollTop,"rtl"===de(c||a).direction&&(o+=ae(a.clientWidth,c?c.clientWidth:0)-e),{width:e,height:t,x:o,y:n}));var n,r,o,i,a,c;}function He(n,t,e){var r,o="clippingParents"===t?(i=Ne(he(o=n)),ne(r=0<=["absolute","fixed"].indexOf(de(o).position)&&s(o)?ye(o):o)?i.filter(function(t){return ne(t)&&fe(t,r)&&"body"!==ee(t)}):[]):[].concat(t),i=[].concat(o,[e]),t=i[0],e=i.reduce(function(t,e){e=Be(n,e);return t.top=ae(e.top,t.top),t.right=ce(e.right,t.right),t.bottom=ce(e.bottom,t.bottom),t.left=ae(e.left,t.left),t},Be(n,t));return e.width=e.right-e.left,e.height=e.bottom-e.top,e.x=e.left,e.y=e.top,e}function Fe(t){var e,n=t.reference,r=t.element,t=t.placement,o=t?ie(t):null,t=t?ke(t):null,i=n.x+n.width/2-r.width/2,a=n.y+n.height/2-r.height/2;switch(o){case E:e={x:i,y:n.y-r.height};break;case j:e={x:i,y:n.y+n.height};break;case T:e={x:n.x+n.width,y:a};break;case A:e={x:n.x-r.width,y:a};break;default:e={x:n.x,y:n.y};}var c=o?me(o):null;if(null!=c){var s="y"===c?"height":"width";switch(t){case Rt:e[c]=e[c]-(n[s]/2-r[s]/2);break;case Bt:e[c]=e[c]+(n[s]/2-r[s]/2);}}return e}function Ve(t,e){var r,e=e=void 0===e?{}:e,n=e.placement,n=void 0===n?t.placement:n,o=e.boundary,o=void 0===o?Ht:o,i=e.rootBoundary,i=void 0===i?Ft:i,a=e.elementContext,a=void 0===a?Vt:a,c=e.altBoundary,c=void 0!==c&&c,e=e.padding,e=void 0===e?0:e,e=_e("number"!=typeof e?e:we(e,Nt)),s=t.rects.popper,c=t.elements[c?a===Vt?Yt:Vt:a],c=He(ne(c)?c:c.contextElement||pe(t.elements.popper),o,i),o=ue(t.elements.reference),i=Fe({reference:o,element:s,strategy:"absolute",placement:n}),s=Re(Object.assign({},s,i)),i=a===Vt?s:o,u={top:c.top-i.top+e.top,bottom:i.bottom-c.bottom+e.bottom,left:c.left-i.left+e.left,right:i.right-c.right+e.right},s=t.modifiersData.offset;return a===Vt&&s&&(r=s[n],Object.keys(u).forEach(function(t){var e=0<=[T,j].indexOf(t)?1:-1,n=0<=[E,j].indexOf(t)?"y":"x";u[t]+=r[n]*e;})),u}var Ye={name:"flip",enabled:!0,phase:"main",fn:function(t){var f=t.state,e=t.options,t=t.name;if(!f.modifiersData[t]._skip){for(var n=e.mainAxis,r=void 0===n||n,n=e.altAxis,o=void 0===n||n,n=e.fallbackPlacements,d=e.padding,p=e.boundary,h=e.rootBoundary,i=e.altBoundary,a=e.flipVariations,v=void 0===a||a,y=e.allowedAutoPlacements,a=f.options.placement,e=ie(a),n=n||(e===a||!v?[Ae(a)]:function(t){if(ie(t)===Lt)return [];var e=Ae(t);return [Pe(t),e,Pe(e)]}(a)),c=[a].concat(n).reduce(function(t,e){return t.concat(ie(e)===Lt?(n=f,r=(t=t=void 0===(t={placement:e,boundary:p,rootBoundary:h,padding:d,flipVariations:v,allowedAutoPlacements:y})?{}:t).placement,o=t.boundary,i=t.rootBoundary,a=t.padding,c=t.flipVariations,s=void 0===(t=t.allowedAutoPlacements)?zt:t,u=ke(r),t=u?c?Wt:Wt.filter(function(t){return ke(t)===u}):Nt,l=(r=0===(r=t.filter(function(t){return 0<=s.indexOf(t)})).length?t:r).reduce(function(t,e){return t[e]=Ve(n,{placement:e,boundary:o,rootBoundary:i,padding:a})[ie(e)],t},{}),Object.keys(l).sort(function(t,e){return l[t]-l[e]})):e);var n,r,o,i,a,c,s,u,l;},[]),s=f.rects.reference,u=f.rects.popper,l=new Map,m=!0,g=c[0],b=0;b<c.length;b++){var _=c[b],w=ie(_),O=ke(_)===Rt,k=0<=[E,j].indexOf(w),C=k?"width":"height",S=Ve(f,{placement:_,boundary:p,rootBoundary:h,altBoundary:i,padding:d}),k=k?O?T:A:O?j:E,O=(s[C]>u[C]&&(k=Ae(k)),Ae(k)),C=[];if(r&&C.push(S[w]<=0),o&&C.push(S[k]<=0,S[O]<=0),C.every(function(t){return t})){g=_,m=!1;break}l.set(_,C);}if(m)for(var x=v?3:1;0<x;x--)if("break"===function(e){var t=c.find(function(t){t=l.get(t);if(t)return t.slice(0,e).every(function(t){return t})});if(t)return g=t,"break"}(x))break;f.placement!==g&&(f.modifiersData[t]._skip=!0,f.placement=g,f.reset=!0);}},requiresIfExists:["offset"],data:{_skip:!1}};function We(t,e,n){return {top:t.top-e.height-(n=void 0===n?{x:0,y:0}:n).y,right:t.right-e.width+n.x,bottom:t.bottom-e.height+n.y,left:t.left-e.width-n.x}}function ze(e){return [E,T,j,A].some(function(t){return 0<=e[t]})}var Ue={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(t){var e=t.state,t=t.name,n=e.rects.reference,r=e.rects.popper,o=e.modifiersData.preventOverflow,i=Ve(e,{elementContext:"reference"}),a=Ve(e,{altBoundary:!0}),i=We(i,n),n=We(a,r,o),a=ze(i),r=ze(n);e.modifiersData[t]={referenceClippingOffsets:i,popperEscapeOffsets:n,isReferenceHidden:a,hasPopperEscaped:r},e.attributes.popper=Object.assign({},e.attributes.popper,{"data-popper-reference-hidden":a,"data-popper-escaped":r});}};var qe={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(t){var a=t.state,e=t.options,t=t.name,c=void 0===(e=e.offset)?[0,0]:e,e=zt.reduce(function(t,e){var n,r,o,i;return t[e]=(e=e,n=a.rects,r=c,o=ie(e),i=0<=[A,E].indexOf(o)?-1:1,e=(n="function"==typeof r?r(Object.assign({},n,{placement:e})):r)[0]||0,r=(n[1]||0)*i,0<=[A,T].indexOf(o)?{x:r,y:e}:{x:e,y:r}),t},{}),n=(r=e[a.placement]).x,r=r.y;null!=a.modifiersData.popperOffsets&&(a.modifiersData.popperOffsets.x+=n,a.modifiersData.popperOffsets.y+=r),a.modifiersData[t]=e;}};var Ke={name:"popperOffsets",enabled:!0,phase:"read",fn:function(t){var e=t.state,t=t.name;e.modifiersData[t]=Fe({reference:e.rects.reference,element:e.rects.popper,strategy:"absolute",placement:e.placement});},data:{}};var $e={name:"preventOverflow",enabled:!0,phase:"main",fn:function(t){var e,n,r,o,i,a,c,s,u,l=t.state,f=t.options,t=t.name,d=void 0===(d=f.mainAxis)||d,p=void 0!==(p=f.altAxis)&&p,h=f.boundary,v=f.rootBoundary,y=f.altBoundary,m=f.padding,g=void 0===(g=f.tether)||g,f=void 0===(f=f.tetherOffset)?0:f,h=Ve(l,{boundary:h,rootBoundary:v,padding:m,altBoundary:y}),v=ie(l.placement),y=!(m=ke(l.placement)),b=me(v),_="x"===b?"y":"x",w=l.modifiersData.popperOffsets,O=l.rects.reference,k=l.rects.popper,f="number"==typeof(f="function"==typeof f?f(Object.assign({},l.rects,{placement:l.placement})):f)?{mainAxis:f,altAxis:f}:Object.assign({mainAxis:0,altAxis:0},f),C=l.modifiersData.offset?l.modifiersData.offset[l.placement]:null,S={x:0,y:0};w&&(d&&(d="y"===b?"height":"width",a=(c=w[b])+h[n="y"===b?E:A],s=c-h[u="y"===b?j:T],e=g?-k[d]/2:0,o=(m===Rt?O:k)[d],m=m===Rt?-k[d]:-O[d],i=l.elements.arrow,i=g&&i?le(i):{width:0,height:0},n=(r=l.modifiersData["arrow#persistent"]?l.modifiersData["arrow#persistent"].padding:be())[n],r=r[u],u=ge(0,O[d],i[d]),i=y?O[d]/2-e-u-n-f.mainAxis:o-u-n-f.mainAxis,o=y?-O[d]/2+e+u+r+f.mainAxis:m+u+r+f.mainAxis,y=(n=l.elements.arrow&&ye(l.elements.arrow))?"y"===b?n.clientTop||0:n.clientLeft||0:0,m=c+o-(e=null!=(d=null==C?void 0:C[b])?d:0),u=ge(g?ce(a,c+i-e-y):a,c,g?ae(s,m):s),w[b]=u,S[b]=u-c),p&&(r="y"==_?"height":"width",o=(n=w[_])+h["x"===b?E:A],d=n-h["x"===b?j:T],i=-1!==[E,A].indexOf(v),y=null!=(e=null==C?void 0:C[_])?e:0,a=i?o:n-O[r]-k[r]-y+f.altAxis,m=i?n+O[r]+k[r]-y-f.altAxis:d,c=g&&i?(s=ge(s=a,n,u=m),u<s?u:s):ge(g?a:o,n,g?m:d),w[_]=c,S[_]=c-n),l.modifiersData[t]=S);},requiresIfExists:["offset"]};function Xe(t,e,n){void 0===n&&(n=!1);var r=s(e),o=s(e)&&(a=(o=e).getBoundingClientRect(),i=se(a.width)/o.offsetWidth||1,a=se(a.height)/o.offsetHeight||1,1!==i||1!==a),i=pe(e),a=ue(t,o),t={scrollLeft:0,scrollTop:0},c={x:0,y:0};return !r&&n||("body"===ee(e)&&!Le(i)||(t=(r=e)!==b(r)&&s(r)?{scrollLeft:r.scrollLeft,scrollTop:r.scrollTop}:Me(r)),s(e)?((c=ue(e,!0)).x+=e.clientLeft,c.y+=e.clientTop):i&&(c.x=Ie(i))),{x:a.left+t.scrollLeft-c.x,y:a.top+t.scrollTop-c.y,width:a.width,height:a.height}}function Ge(t){var n=new Map,r=new Set,o=[];return t.forEach(function(t){n.set(t.name,t);}),t.forEach(function(t){r.has(t.name)||!function e(t){r.add(t.name),[].concat(t.requires||[],t.requiresIfExists||[]).forEach(function(t){r.has(t)||(t=n.get(t))&&e(t);}),o.push(t);}(t);}),o}var Qe={placement:"bottom",modifiers:[],strategy:"absolute"};function Ze(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return !e.some(function(t){return !(t&&"function"==typeof t.getBoundingClientRect)})}function Je(t){var t=t=void 0===t?{}:t,e=t.defaultModifiers,f=void 0===e?[]:e,e=t.defaultOptions,d=void 0===e?Qe:e;return function(r,o,e){void 0===e&&(e=d);var n,i,a={placement:"bottom",orderedModifiers:[],options:Object.assign({},Qe,d),modifiersData:{},elements:{reference:r,popper:o},attributes:{},styles:{}},c=[],s=!1,u={state:a,setOptions:function(t){var n,e,t="function"==typeof t?t(a.options):t,t=(l(),a.options=Object.assign({},d,a.options,t),a.scrollParents={reference:ne(r)?Ne(r):r.contextElement?Ne(r.contextElement):[],popper:Ne(o)},t=[].concat(f,a.options.modifiers),e=t.reduce(function(t,e){var n=t[e.name];return t[e.name]=n?Object.assign({},n,e,{options:Object.assign({},n.options,e.options),data:Object.assign({},n.data,e.data)}):e,t},{}),t=Object.keys(e).map(function(t){return e[t]}),n=Ge(t),te.reduce(function(t,e){return t.concat(n.filter(function(t){return t.phase===e}))},[]));return a.orderedModifiers=t.filter(function(t){return t.enabled}),a.orderedModifiers.forEach(function(t){var e=t.name,n=t.options,t=t.effect;"function"==typeof t&&(t=t({state:a,name:e,instance:u,options:void 0===n?{}:n}),c.push(t||function(){}));}),u.update()},forceUpdate:function(){if(!s){var t=a.elements,e=t.reference,t=t.popper;if(Ze(e,t)){a.rects={reference:Xe(e,ye(t),"fixed"===a.options.strategy),popper:le(t)},a.reset=!1,a.placement=a.options.placement,a.orderedModifiers.forEach(function(t){return a.modifiersData[t.name]=Object.assign({},t.data)});for(var n,r,o,i=0;i<a.orderedModifiers.length;i++)!0===a.reset?(a.reset=!1,i=-1):(n=(o=a.orderedModifiers[i]).fn,r=o.options,o=o.name,"function"==typeof n&&(a=n({state:a,options:void 0===r?{}:r,name:o,instance:u})||a));}}},update:(n=function(){return new Promise(function(t){u.forceUpdate(),t(a);})},function(){return i=i||new Promise(function(t){Promise.resolve().then(function(){i=void 0,t(n());});})}),destroy:function(){l(),s=!0;}};return Ze(r,o)&&u.setOptions(e).then(function(t){!s&&e.onFirstUpdate&&e.onFirstUpdate(t);}),u;function l(){c.forEach(function(t){return t()}),c=[];}}}var tn=Je(),en=Je({defaultModifiers:[je,Ke,xe,oe,qe,Ye,$e,Oe,Ue]}),nn=Je({defaultModifiers:[je,Ke,xe,oe]});function rn(t){return "true"===t||"false"!==t&&(t===Number(t).toString()?Number(t):""===t||"null"===t?null:t)}function on(t){return t.replace(/[A-Z]/g,function(t){return "-".concat(t.toLowerCase())})}var f={setDataAttribute:function(t,e,n){t.setAttribute("data-bs-".concat(on(e)),n);},removeDataAttribute:function(t,e){t.removeAttribute("data-bs-".concat(on(e)));},getDataAttributes:function(n){if(!n)return {};var r={};return Object.keys(n.dataset).filter(function(t){return t.startsWith("bs")}).forEach(function(t){var e=(e=t.replace(/^bs/,"")).charAt(0).toLowerCase()+e.slice(1,e.length);r[e]=rn(n.dataset[t]);}),r},getDataAttribute:function(t,e){return rn(t.getAttribute("data-bs-".concat(on(e))))},offset:function(t){t=t.getBoundingClientRect();return {top:t.top+window.pageYOffset,left:t.left+window.pageXOffset}},position:function(t){return {top:t.offsetTop,left:t.offsetLeft}}};t(95);function an(t){return function(t){if(Array.isArray(t))return cn(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,e){if(t){if("string"==typeof t)return cn(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return "Map"===(n="Object"===n&&t.constructor?t.constructor.name:n)||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?cn(t,e):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function cn(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}var p={find:function(t){var e,n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:document.documentElement;return (e=[]).concat.apply(e,an(Element.prototype.querySelectorAll.call(n,t)))},findOne:function(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:document.documentElement;return Element.prototype.querySelector.call(e,t)},children:function(t,e){var n;return (n=[]).concat.apply(n,an(t.children)).filter(function(t){return t.matches(e)})},parents:function(t,e){for(var n=[],r=t.parentNode;r&&r.nodeType===Node.ELEMENT_NODE&&3!==r.nodeType;)r.matches(e)&&n.push(r),r=r.parentNode;return n},prev:function(t,e){for(var n=t.previousElementSibling;n;){if(n.matches(e))return [n];n=n.previousElementSibling;}return []},next:function(t,e){for(var n=t.nextElementSibling;n;){if(n.matches(e))return [n];n=n.nextElementSibling;}return []},focusableChildren:function(t){var e=["a","button","input","textarea","select","details","[tabindex]",'[contenteditable="true"]'].map(function(t){return "".concat(t,':not([tabindex^="-"])')}).join(", ");return this.find(e,t).filter(function(t){return !U(t)&&z(t)})}};function sn(t){return (sn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function un(e,t){var n,r=Object.keys(e);return Object.getOwnPropertySymbols&&(n=Object.getOwnPropertySymbols(e),t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)),r}function ln(r){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?un(Object(o),!0).forEach(function(t){var e,n;e=r,n=o[t=t],t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n;}):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(o)):un(Object(o)).forEach(function(t){Object.defineProperty(r,t,Object.getOwnPropertyDescriptor(o,t));});}return r}function fn(t){return function(t){if(Array.isArray(t))return dn(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,e){if(t){if("string"==typeof t)return dn(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return "Map"===(n="Object"===n&&t.constructor?t.constructor.name:n)||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?dn(t,e):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function dn(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function pn(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r);}}function hn(){return (hn="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=mn(t)););return t}(t,e);if(r)return r=Object.getOwnPropertyDescriptor(r,e),r.get?r.get.call(arguments.length<3?t:n):r.value}).apply(this,arguments)}function vn(t,e){return (vn=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function yn(n){var r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(t){return !1}}();return function(){var t,e=mn(n),e=(t=r?(t=mn(this).constructor,Reflect.construct(e,arguments,t)):e.apply(this,arguments),this);if(t&&("object"===sn(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");if(void 0!==e)return e;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}}function mn(t){return (mn=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var gn="dropdown",n=".".concat("bs.dropdown"),bn=".data-api",_n="Escape",wn="ArrowUp",On="ArrowDown",kn=new RegExp("".concat(wn,"|").concat(On,"|").concat(_n)),Cn="hide".concat(n),Sn="hidden".concat(n),xn="show".concat(n),En="shown".concat(n),jn="click".concat(n).concat(bn),r="keydown".concat(n).concat(bn),n="keyup".concat(n).concat(bn),Tn="show",An='[data-bs-toggle="dropdown"]',Dn=".dropdown-menu",Pn=a()?"top-end":"top-start",Mn=a()?"top-start":"top-end",In=a()?"bottom-end":"bottom-start",Ln=a()?"bottom-start":"bottom-end",Nn=a()?"left-start":"right-start",Rn=a()?"right-start":"left-start",Bn={offset:[0,2],boundary:"clippingParents",reference:"toggle",display:"dynamic",popperConfig:null,autoClose:!0},Hn={offset:"(array|string|function)",boundary:"(string|element)",reference:"(string|element|object)",display:"string",popperConfig:"(null|object|function)",autoClose:"(boolean|string)"},Fn=function(){var t=s,e=c;if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&vn(t,e);var n,r=yn(s);function s(t,e){if(this instanceof s)return (t=r.call(this,t))._popper=null,t._config=t._getConfig(e),t._menu=t._getMenuElement(),t._inNavbar=t._detectNavbar(),t;throw new TypeError("Cannot call a class as a function")}return t=s,e=[{key:"Default",get:function(){return Bn}},{key:"DefaultType",get:function(){return Hn}},{key:"NAME",get:function(){return gn}},{key:"jQueryInterface",value:function(e){return this.each(function(){var t=s.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError('No method named "'.concat(e,'"'));t[e]();}})}},{key:"clearMenus",value:function(t){if(!t||2!==t.button&&("keyup"!==t.type||"Tab"===t.key))for(var e=p.find(An),n=0,r=e.length;n<r;n++){var o=s.getInstance(e[n]);if(o&&!1!==o._config.autoClose&&o._isShown()){var i={relatedTarget:o._element};if(t){var a=t.composedPath(),c=a.includes(o._menu);if(a.includes(o._element)||"inside"===o._config.autoClose&&!c||"outside"===o._config.autoClose&&c)continue;if(o._menu.contains(t.target)&&("keyup"===t.type&&"Tab"===t.key||/input|select|option|textarea|form/i.test(t.target.tagName)))continue;"click"===t.type&&(i.clickEvent=t);}o._completeHide(i);}}}},{key:"getParentFromElement",value:function(t){return F(t)||t.parentNode}},{key:"dataApiKeydownHandler",value:function(t){if(/input|textarea/i.test(t.target.tagName)?!("Space"===t.key||t.key!==_n&&(t.key!==On&&t.key!==wn||t.target.closest(Dn))):kn.test(t.key)){var e=this.classList.contains(Tn);if((e||t.key!==_n)&&(t.preventDefault(),t.stopPropagation(),!U(this))){var n=this.matches(An)?this:p.prev(this,An)[0],n=s.getOrCreateInstance(n);if(t.key!==_n)return t.key===wn||t.key===On?(e||n.show(),void n._selectMenuItem(t)):void(e&&"Space"!==t.key||s.clearMenus());n.hide();}}}}],(n=[{key:"toggle",value:function(){return this._isShown()?this.hide():this.show()}},{key:"show",value:function(){var t,e;U(this._element)||this._isShown(this._menu)||(t={relatedTarget:this._element},d.trigger(this._element,xn,t).defaultPrevented||(e=s.getParentFromElement(this._element),this._inNavbar?f.setDataAttribute(this._menu,"popper","none"):this._createPopper(e),"ontouchstart"in document.documentElement&&!e.closest(".navbar-nav")&&(e=[]).concat.apply(e,fn(document.body.children)).forEach(function(t){return d.on(t,"mouseover",K)}),this._element.focus(),this._element.setAttribute("aria-expanded",!0),this._menu.classList.add(Tn),this._element.classList.add(Tn),d.trigger(this._element,En,t)));}},{key:"hide",value:function(){var t;!U(this._element)&&this._isShown(this._menu)&&(t={relatedTarget:this._element},this._completeHide(t));}},{key:"dispose",value:function(){this._popper&&this._popper.destroy(),hn(mn(s.prototype),"dispose",this).call(this);}},{key:"update",value:function(){this._inNavbar=this._detectNavbar(),this._popper&&this._popper.update();}},{key:"_completeHide",value:function(t){var e;d.trigger(this._element,Cn,t).defaultPrevented||("ontouchstart"in document.documentElement&&(e=[]).concat.apply(e,fn(document.body.children)).forEach(function(t){return d.off(t,"mouseover",K)}),this._popper&&this._popper.destroy(),this._menu.classList.remove(Tn),this._element.classList.remove(Tn),this._element.setAttribute("aria-expanded","false"),f.removeDataAttribute(this._menu,"popper"),d.trigger(this._element,Sn,t));}},{key:"_getConfig",value:function(t){if(t=ln(ln(ln({},this.constructor.Default),f.getDataAttributes(this._element)),t),W(gn,t,this.constructor.DefaultType),"object"!==sn(t.reference)||nt(t.reference)||"function"==typeof t.reference.getBoundingClientRect)return t;throw new TypeError("".concat(gn.toUpperCase(),': Option "reference" provided type "object" without a required "getBoundingClientRect" method.'))}},{key:"_createPopper",value:function(t){if(void 0===i)throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");var e=this._element,t=("parent"===this._config.reference?e=t:nt(this._config.reference)?e=Y(this._config.reference):"object"===sn(this._config.reference)&&(e=this._config.reference),this._getPopperConfig()),n=t.modifiers.find(function(t){return "applyStyles"===t.name&&!1===t.enabled});this._popper=en(e,this._menu,t),n&&f.setDataAttribute(this._menu,"popper","static");}},{key:"_isShown",value:function(){return (0<arguments.length&&void 0!==arguments[0]?arguments[0]:this._element).classList.contains(Tn)}},{key:"_getMenuElement",value:function(){return p.next(this._element,Dn)[0]}},{key:"_getPlacement",value:function(){var t=this._element.parentNode;if(t.classList.contains("dropend"))return Nn;if(t.classList.contains("dropstart"))return Rn;var e="end"===getComputedStyle(this._menu).getPropertyValue("--bs-position").trim();return t.classList.contains("dropup")?e?Mn:Pn:e?Ln:In}},{key:"_detectNavbar",value:function(){return null!==this._element.closest(".".concat("navbar"))}},{key:"_getOffset",value:function(){var e=this,n=this._config.offset;return "string"==typeof n?n.split(",").map(function(t){return Number.parseInt(t,10)}):"function"==typeof n?function(t){return n(t,e._element)}:n}},{key:"_getPopperConfig",value:function(){var t={placement:this._getPlacement(),modifiers:[{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"offset",options:{offset:this._getOffset()}}]};return "static"===this._config.display&&(t.modifiers=[{name:"applyStyles",enabled:!1}]),ln(ln({},t),"function"==typeof this._config.popperConfig?this._config.popperConfig(t):this._config.popperConfig)}},{key:"_selectMenuItem",value:function(t){var e=t.key,t=t.target,n=p.find(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",this._menu).filter(z);n.length&&Z(n,t,e===On,!n.includes(t)).focus();}}])&&pn(t.prototype,n),e&&pn(t,e),Object.defineProperty(t,"prototype",{writable:!1}),s}(),bn=(d.on(document,r,An,Fn.dataApiKeydownHandler),d.on(document,r,Dn,Fn.dataApiKeydownHandler),d.on(document,jn,Fn.clearMenus),d.on(document,n,Fn.clearMenus),d.on(document,jn,An,function(t){t.preventDefault(),Fn.getOrCreateInstance(this).toggle();}),e(Fn),Fn);function Vn(t){return (Vn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Yn(e,t){var n,r=Object.keys(e);return Object.getOwnPropertySymbols&&(n=Object.getOwnPropertySymbols(e),t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)),r}function Wn(r){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?Yn(Object(o),!0).forEach(function(t){var e,n;e=r,n=o[t=t],t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n;}):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(o)):Yn(Object(o)).forEach(function(t){Object.defineProperty(r,t,Object.getOwnPropertyDescriptor(o,t));});}return r}function zn(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r);}}function Un(t,e){return (Un=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function qn(n){var r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(t){return !1}}();return function(){var t,e=Kn(n),e=(t=r?(t=Kn(this).constructor,Reflect.construct(e,arguments,t)):e.apply(this,arguments),this);if(t&&("object"===Vn(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");if(void 0!==e)return e;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}}function Kn(t){return (Kn=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var $n="collapse",Xn="bs.collapse",r=".".concat(Xn),Gn={toggle:!0,parent:null},Qn={toggle:"boolean",parent:"(null|element)"},Zn="show".concat(r),Jn="shown".concat(r),tr="hide".concat(r),er="hidden".concat(r),n="click".concat(r).concat(".data-api"),nr="show",rr="collapse",or="collapsing",ir="collapsed",ar=":scope .".concat(rr," .").concat(rr),cr='[data-bs-toggle="collapse"]',sr=function(){var t=l,e=c;if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Un(t,e);var n,u=qn(l);function l(t,e){var n;if(!(this instanceof l))throw new TypeError("Cannot call a class as a function");(n=u.call(this,t))._isTransitioning=!1,n._config=n._getConfig(e),n._triggerArray=[];for(var r=p.find(cr),o=0,i=r.length;o<i;o++){var a=r[o],c=H(a),s=p.find(c).filter(function(t){return t===n._element});null!==c&&s.length&&(n._selector=c,n._triggerArray.push(a));}return n._initializeChildren(),n._config.parent||n._addAriaAndCollapsedClass(n._triggerArray,n._isShown()),n._config.toggle&&n.toggle(),n}return t=l,e=[{key:"Default",get:function(){return Gn}},{key:"NAME",get:function(){return $n}},{key:"jQueryInterface",value:function(e){return this.each(function(){var t={},t=("string"==typeof e&&/show|hide/.test(e)&&(t.toggle=!1),l.getOrCreateInstance(this,t));if("string"==typeof e){if(void 0===t[e])throw new TypeError('No method named "'.concat(e,'"'));t[e]();}})}}],(n=[{key:"toggle",value:function(){this._isShown()?this.hide():this.show();}},{key:"show",value:function(){var t=this;if(!this._isTransitioning&&!this._isShown()){var e,n,r=[],o=(this._config.parent&&(e=p.find(ar,this._config.parent),r=p.find(".collapse.show, .collapse.collapsing",this._config.parent).filter(function(t){return !e.includes(t)})),p.findOne(this._selector));if(r.length){var i,a=r.find(function(t){return o!==t});if((i=a?l.getInstance(a):null)&&i._isTransitioning)return}d.trigger(this._element,Zn).defaultPrevented||(r.forEach(function(t){o!==t&&l.getOrCreateInstance(t,{toggle:!1}).hide(),i||kt(t,Xn,null);}),n=this._getDimension(),this._element.classList.remove(rr),this._element.classList.add(or),this._element.style[n]=0,this._addAriaAndCollapsedClass(this._triggerArray,!0),this._isTransitioning=!0,a=n[0].toUpperCase()+n.slice(1),r="scroll".concat(a),this._queueCallback(function(){t._isTransitioning=!1,t._element.classList.remove(or),t._element.classList.add(rr,nr),t._element.style[n]="",d.trigger(t._element,Jn);},this._element,!0),this._element.style[n]="".concat(this._element[r],"px"));}}},{key:"hide",value:function(){var t=this;if(!this._isTransitioning&&this._isShown()){var e=d.trigger(this._element,tr);if(!e.defaultPrevented){for(var e=this._getDimension(),n=(this._element.style[e]="".concat(this._element.getBoundingClientRect()[e],"px"),$(this._element),this._element.classList.add(or),this._element.classList.remove(rr,nr),this._triggerArray.length),r=0;r<n;r++){var o=this._triggerArray[r],i=F(o);i&&!this._isShown(i)&&this._addAriaAndCollapsedClass([o],!1);}this._isTransitioning=!0;this._element.style[e]="",this._queueCallback(function(){t._isTransitioning=!1,t._element.classList.remove(or),t._element.classList.add(rr),d.trigger(t._element,er);},this._element,!0);}}}},{key:"_isShown",value:function(){return (0<arguments.length&&void 0!==arguments[0]?arguments[0]:this._element).classList.contains(nr)}},{key:"_getConfig",value:function(t){return (t=Wn(Wn(Wn({},Gn),f.getDataAttributes(this._element)),t)).toggle=Boolean(t.toggle),t.parent=Y(t.parent),W($n,t,Qn),t}},{key:"_getDimension",value:function(){return this._element.classList.contains("collapse-horizontal")?"width":"height"}},{key:"_initializeChildren",value:function(){var e,n=this;this._config.parent&&(e=p.find(ar,this._config.parent),p.find(cr,this._config.parent).filter(function(t){return !e.includes(t)}).forEach(function(t){var e=F(t);e&&n._addAriaAndCollapsedClass([t],n._isShown(e));}));}},{key:"_addAriaAndCollapsedClass",value:function(t,e){t.length&&t.forEach(function(t){e?t.classList.remove(ir):t.classList.add(ir),t.setAttribute("aria-expanded",e);});}}])&&zn(t.prototype,n),e&&zn(t,e),Object.defineProperty(t,"prototype",{writable:!1}),l}(),jn=(d.on(document,n,cr,function(t){("A"===t.target.tagName||t.delegateTarget&&"A"===t.delegateTarget.tagName)&&t.preventDefault();t=H(this);p.find(t).forEach(function(t){sr.getOrCreateInstance(t,{toggle:!1}).toggle();});}),e(sr),sr);function ur(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r);}}var lr=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",fr=".sticky-top",dr=function(){function t(){if(!(this instanceof t))throw new TypeError("Cannot call a class as a function");this._element=document.body;}var e,n;return e=t,(n=[{key:"getWidth",value:function(){var t=document.documentElement.clientWidth;return Math.abs(window.innerWidth-t)}},{key:"hide",value:function(){var e=this.getWidth();this._disableOverFlow(),this._setElementAttributes(this._element,"paddingRight",function(t){return t+e}),this._setElementAttributes(lr,"paddingRight",function(t){return t+e}),this._setElementAttributes(fr,"marginRight",function(t){return t-e});}},{key:"_disableOverFlow",value:function(){this._saveInitialAttribute(this._element,"overflow"),this._element.style.overflow="hidden";}},{key:"_setElementAttributes",value:function(t,n,r){var o=this,i=this.getWidth();this._applyManipulationCallback(t,function(t){var e;t!==o._element&&window.innerWidth>t.clientWidth+i||(o._saveInitialAttribute(t,n),e=window.getComputedStyle(t)[n],t.style[n]="".concat(r(Number.parseFloat(e)),"px"));});}},{key:"reset",value:function(){this._resetElementAttributes(this._element,"overflow"),this._resetElementAttributes(this._element,"paddingRight"),this._resetElementAttributes(lr,"paddingRight"),this._resetElementAttributes(fr,"marginRight");}},{key:"_saveInitialAttribute",value:function(t,e){var n=t.style[e];n&&f.setDataAttribute(t,e,n);}},{key:"_resetElementAttributes",value:function(t,n){this._applyManipulationCallback(t,function(t){var e=f.getDataAttribute(t,n);void 0===e?t.style.removeProperty(n):(f.removeDataAttribute(t,n),t.style[n]=e);});}},{key:"_applyManipulationCallback",value:function(t,e){nt(t)?e(t):p.find(t,this._element).forEach(e);}},{key:"isOverflowing",value:function(){return 0<this.getWidth()}}])&&ur(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function pr(t){return (pr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function hr(e,t){var n,r=Object.keys(e);return Object.getOwnPropertySymbols&&(n=Object.getOwnPropertySymbols(e),t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)),r}function vr(r){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?hr(Object(o),!0).forEach(function(t){var e,n;e=r,n=o[t=t],t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n;}):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(o)):hr(Object(o)).forEach(function(t){Object.defineProperty(r,t,Object.getOwnPropertyDescriptor(o,t));});}return r}function yr(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r);}}var mr={className:"modal-backdrop",isVisible:!0,isAnimated:!1,rootElement:"body",clickCallback:null},gr={className:"string",isVisible:"boolean",isAnimated:"boolean",rootElement:"(element|string)",clickCallback:"(function|null)"},br="backdrop",_r="mousedown.bs.".concat(br),wr=function(){function e(t){if(!(this instanceof e))throw new TypeError("Cannot call a class as a function");this._config=this._getConfig(t),this._isAppended=!1,this._element=null;}var t,n;return t=e,(n=[{key:"show",value:function(t){this._config.isVisible?(this._append(),this._config.isAnimated&&$(this._getElement()),this._getElement().classList.add("show"),this._emulateAnimation(function(){G(t);})):G(t);}},{key:"hide",value:function(t){var e=this;this._config.isVisible?(this._getElement().classList.remove("show"),this._emulateAnimation(function(){e.dispose(),G(t);})):G(t);}},{key:"_getElement",value:function(){var t;return this._element||((t=document.createElement("div")).className=this._config.className,this._config.isAnimated&&t.classList.add("fade"),this._element=t),this._element}},{key:"_getConfig",value:function(t){return (t=vr(vr({},mr),"object"===pr(t)?t:{})).rootElement=Y(t.rootElement),W(br,t,gr),t}},{key:"_append",value:function(){var t=this;this._isAppended||(this._config.rootElement.append(this._getElement()),d.on(this._getElement(),_r,function(){G(t._config.clickCallback);}),this._isAppended=!0);}},{key:"dispose",value:function(){this._isAppended&&(d.off(this._element,_r),this._element.remove(),this._isAppended=!1);}},{key:"_emulateAnimation",value:function(t){Q(t,this._getElement(),this._config.isAnimated);}}])&&yr(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function Or(t){return (Or="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function kr(e,t){var n,r=Object.keys(e);return Object.getOwnPropertySymbols&&(n=Object.getOwnPropertySymbols(e),t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)),r}function Cr(r){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?kr(Object(o),!0).forEach(function(t){var e,n;e=r,n=o[t=t],t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n;}):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(o)):kr(Object(o)).forEach(function(t){Object.defineProperty(r,t,Object.getOwnPropertyDescriptor(o,t));});}return r}function Sr(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r);}}function xr(e){var n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:"hide",t="click.dismiss".concat(e.EVENT_KEY),r=e.NAME;d.on(document,t,'[data-bs-dismiss="'.concat(r,'"]'),function(t){["A","AREA"].includes(this.tagName)&&t.preventDefault(),U(this)||(t=F(this)||this.closest(".".concat(r)),e.getOrCreateInstance(t)[n]());});}var Er={trapElement:null,autofocus:!0},jr={trapElement:"element",autofocus:"boolean"},Tr=".".concat("bs.focustrap"),Ar="focusin".concat(Tr),Dr="keydown.tab".concat(Tr),Pr="backward",Mr=function(){function e(t){if(!(this instanceof e))throw new TypeError("Cannot call a class as a function");this._config=this._getConfig(t),this._isActive=!1,this._lastTabNavDirection=null;}var t,n;return t=e,(n=[{key:"activate",value:function(){var e=this,t=this._config,n=t.trapElement,t=t.autofocus;this._isActive||(t&&n.focus(),d.off(document,Tr),d.on(document,Ar,function(t){return e._handleFocusin(t)}),d.on(document,Dr,function(t){return e._handleKeydown(t)}),this._isActive=!0);}},{key:"deactivate",value:function(){this._isActive&&(this._isActive=!1,d.off(document,Tr));}},{key:"_handleFocusin",value:function(t){var t=t.target,e=this._config.trapElement;t===document||t===e||e.contains(t)||(0===(t=p.focusableChildren(e)).length?e:this._lastTabNavDirection===Pr?t[t.length-1]:t[0]).focus();}},{key:"_handleKeydown",value:function(t){"Tab"===t.key&&(this._lastTabNavDirection=t.shiftKey?Pr:"forward");}},{key:"_getConfig",value:function(t){return t=Cr(Cr({},Er),"object"===Or(t)?t:{}),W("focustrap",t,jr),t}}])&&Sr(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function Ir(t){return (Ir="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Lr(e,t){var n,r=Object.keys(e);return Object.getOwnPropertySymbols&&(n=Object.getOwnPropertySymbols(e),t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)),r}function Nr(r){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?Lr(Object(o),!0).forEach(function(t){var e,n;e=r,n=o[t=t],t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n;}):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(o)):Lr(Object(o)).forEach(function(t){Object.defineProperty(r,t,Object.getOwnPropertyDescriptor(o,t));});}return r}function Rr(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r);}}function Br(){return (Br="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=Vr(t)););return t}(t,e);if(r)return r=Object.getOwnPropertyDescriptor(r,e),r.get?r.get.call(arguments.length<3?t:n):r.value}).apply(this,arguments)}function Hr(t,e){return (Hr=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Fr(n){var r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(t){return !1}}();return function(){var t,e=Vr(n),e=(t=r?(t=Vr(this).constructor,Reflect.construct(e,arguments,t)):e.apply(this,arguments),this);if(t&&("object"===Ir(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");if(void 0!==e)return e;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}}function Vr(t){return (Vr=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var Yr="offcanvas",r=".".concat("bs.offcanvas"),n=".data-api",o="load".concat(r).concat(n),Wr={backdrop:!0,keyboard:!0,scroll:!1},zr={backdrop:"boolean",keyboard:"boolean",scroll:"boolean"},Ur=".offcanvas.show",qr="show".concat(r),Kr="shown".concat(r),$r="hide".concat(r),Xr="hidden".concat(r),n="click".concat(r).concat(n),Gr="keydown.dismiss".concat(r),Qr=function(){var t=o,e=c;if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Hr(t,e);var n,r=Fr(o);function o(t,e){if(this instanceof o)return (t=r.call(this,t))._config=t._getConfig(e),t._isShown=!1,t._backdrop=t._initializeBackDrop(),t._focustrap=t._initializeFocusTrap(),t._addEventListeners(),t;throw new TypeError("Cannot call a class as a function")}return t=o,e=[{key:"NAME",get:function(){return Yr}},{key:"Default",get:function(){return Wr}},{key:"jQueryInterface",value:function(e){return this.each(function(){var t=o.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError('No method named "'.concat(e,'"'));t[e](this);}})}}],(n=[{key:"toggle",value:function(t){return this._isShown?this.hide():this.show(t)}},{key:"show",value:function(t){var e=this;this._isShown||d.trigger(this._element,qr,{relatedTarget:t}).defaultPrevented||(this._isShown=!0,this._element.style.visibility="visible",this._backdrop.show(),this._config.scroll||(new dr).hide(),this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.classList.add("show"),this._queueCallback(function(){e._config.scroll||e._focustrap.activate(),d.trigger(e._element,Kr,{relatedTarget:t});},this._element,!0));}},{key:"hide",value:function(){var t=this;this._isShown&&!d.trigger(this._element,$r).defaultPrevented&&(this._focustrap.deactivate(),this._element.blur(),this._isShown=!1,this._element.classList.remove("show"),this._backdrop.hide(),this._queueCallback(function(){t._element.setAttribute("aria-hidden",!0),t._element.removeAttribute("aria-modal"),t._element.removeAttribute("role"),t._element.style.visibility="hidden",t._config.scroll||(new dr).reset(),d.trigger(t._element,Xr);},this._element,!0));}},{key:"dispose",value:function(){this._backdrop.dispose(),this._focustrap.deactivate(),Br(Vr(o.prototype),"dispose",this).call(this);}},{key:"_getConfig",value:function(t){return t=Nr(Nr(Nr({},Wr),f.getDataAttributes(this._element)),"object"===Ir(t)?t:{}),W(Yr,t,zr),t}},{key:"_initializeBackDrop",value:function(){var t=this;return new wr({className:"offcanvas-backdrop",isVisible:this._config.backdrop,isAnimated:!0,rootElement:this._element.parentNode,clickCallback:function(){return t.hide()}})}},{key:"_initializeFocusTrap",value:function(){return new Mr({trapElement:this._element})}},{key:"_addEventListeners",value:function(){var e=this;d.on(this._element,Gr,function(t){e._config.keyboard&&"Escape"===t.key&&e.hide();});}}])&&Rr(t.prototype,n),e&&Rr(t,e),Object.defineProperty(t,"prototype",{writable:!1}),o}(),r=(d.on(document,n,'[data-bs-toggle="offcanvas"]',function(t){var e=this,n=F(this);["A","AREA"].includes(this.tagName)&&t.preventDefault(),U(this)||(d.one(n,Xr,function(){z(e)&&e.focus();}),(t=p.findOne(Ur))&&t!==n&&Qr.getInstance(t).hide(),Qr.getOrCreateInstance(n).toggle(this));}),d.on(window,o,function(){return p.find(Ur).forEach(function(t){return Qr.getOrCreateInstance(t).show()})}),xr(Qr),e(Qr),Qr);function Zr(t){return (Zr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Jr(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r);}}function to(t,e){return (to=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function eo(n){var r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(t){return !1}}();return function(){var t,e=no(n),e=(t=r?(t=no(this).constructor,Reflect.construct(e,arguments,t)):e.apply(this,arguments),this);if(t&&("object"===Zr(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");if(void 0!==e)return e;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}}function no(t){return (no=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var n=".".concat("bs.alert"),ro="close".concat(n),oo="closed".concat(n),o=function(){var t=o,e=c;if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&to(t,e);var n,r=eo(o);function o(){var t=this,e=o;if(t instanceof e)return r.apply(this,arguments);throw new TypeError("Cannot call a class as a function")}return t=o,e=[{key:"NAME",get:function(){return "alert"}},{key:"jQueryInterface",value:function(e){return this.each(function(){var t=o.getOrCreateInstance(this);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError('No method named "'.concat(e,'"'));t[e](this);}})}}],(n=[{key:"close",value:function(){var t,e=this;d.trigger(this._element,ro).defaultPrevented||(this._element.classList.remove("show"),t=this._element.classList.contains("fade"),this._queueCallback(function(){return e._destroyElement()},this._element,t));}},{key:"_destroyElement",value:function(){this._element.remove(),d.trigger(this._element,oo),this.dispose();}}])&&Jr(t.prototype,n),e&&Jr(t,e),Object.defineProperty(t,"prototype",{writable:!1}),o}(),n=(xr(o,"close"),e(o),o);function io(t){return (io="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function ao(e,t){var n,r=Object.keys(e);return Object.getOwnPropertySymbols&&(n=Object.getOwnPropertySymbols(e),t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)),r}function co(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ao(Object(n),!0).forEach(function(t){po(e,t,n[t]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ao(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t));});}return e}function so(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r);}}function uo(t,e){return (uo=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function lo(n){var r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(t){return !1}}();return function(){var t,e=fo(n),e=(t=r?(t=fo(this).constructor,Reflect.construct(e,arguments,t)):e.apply(this,arguments),this);if(t&&("object"===io(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");if(void 0!==e)return e;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}}function fo(t){return (fo=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function po(t,e,n){e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n;}var ho="carousel",o=".".concat("bs.carousel"),vo=".data-api",yo={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0,touch:!0},mo={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean",touch:"boolean"},go="next",bo="prev",_o="left",wo="right",Oo=(po(Io={},"ArrowLeft",wo),po(Io,"ArrowRight",_o),Io),ko="slide".concat(o),Co="slid".concat(o),So="keydown".concat(o),xo="mouseenter".concat(o),Eo="mouseleave".concat(o),jo="touchstart".concat(o),To="touchmove".concat(o),Ao="touchend".concat(o),Do="pointerdown".concat(o),Po="pointerup".concat(o),Mo="dragstart".concat(o),Io="load".concat(o).concat(vo),o="click".concat(o).concat(vo),Lo="active",No=".active.carousel-item",Ro=function(){var t=o,e=c;if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&uo(t,e);var n,r=lo(o);function o(t,e){if(this instanceof o)return (t=r.call(this,t))._items=null,t._interval=null,t._activeElement=null,t._isPaused=!1,t._isSliding=!1,t.touchTimeout=null,t.touchStartX=0,t.touchDeltaX=0,t._config=t._getConfig(e),t._indicatorsElement=p.findOne(".carousel-indicators",t._element),t._touchSupported="ontouchstart"in document.documentElement||0<navigator.maxTouchPoints,t._pointerEvent=Boolean(window.PointerEvent),t._addEventListeners(),t;throw new TypeError("Cannot call a class as a function")}return t=o,e=[{key:"Default",get:function(){return yo}},{key:"NAME",get:function(){return ho}},{key:"carouselInterface",value:function(t,e){var t=o.getOrCreateInstance(t,e),n=t._config,r=("object"===io(e)&&(n=co(co({},n),e)),"string"==typeof e?e:n.slide);if("number"==typeof e)t.to(e);else if("string"==typeof r){if(void 0===t[r])throw new TypeError('No method named "'.concat(r,'"'));t[r]();}else n.interval&&n.ride&&(t.pause(),t.cycle());}},{key:"jQueryInterface",value:function(t){return this.each(function(){o.carouselInterface(this,t);})}},{key:"dataApiClickHandler",value:function(t){var e,n,r=F(this);r&&r.classList.contains("carousel")&&(e=co(co({},f.getDataAttributes(r)),f.getDataAttributes(this)),(n=this.getAttribute("data-bs-slide-to"))&&(e.interval=!1),o.carouselInterface(r,e),n&&o.getInstance(r).to(n),t.preventDefault());}}],(n=[{key:"next",value:function(){this._slide(go);}},{key:"nextWhenVisible",value:function(){!document.hidden&&z(this._element)&&this.next();}},{key:"prev",value:function(){this._slide(bo);}},{key:"pause",value:function(t){t||(this._isPaused=!0),p.findOne(".carousel-item-next, .carousel-item-prev",this._element)&&(V(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null;}},{key:"cycle",value:function(t){t||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config&&this._config.interval&&!this._isPaused&&(this._updateInterval(),this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval));}},{key:"to",value:function(t){var e=this,n=(this._activeElement=p.findOne(No,this._element),this._getItemIndex(this._activeElement));if(!(t>this._items.length-1||t<0))if(this._isSliding)d.one(this._element,Co,function(){return e.to(t)});else {if(n===t)return this.pause(),void this.cycle();this._slide(n<t?go:bo,this._items[t]);}}},{key:"_getConfig",value:function(t){return t=co(co(co({},yo),f.getDataAttributes(this._element)),"object"===io(t)?t:{}),W(ho,t,mo),t}},{key:"_handleSwipe",value:function(){var t=Math.abs(this.touchDeltaX);t<=40||(t=t/this.touchDeltaX,this.touchDeltaX=0,t&&this._slide(0<t?wo:_o));}},{key:"_addEventListeners",value:function(){var e=this;this._config.keyboard&&d.on(this._element,So,function(t){return e._keydown(t)}),"hover"===this._config.pause&&(d.on(this._element,xo,function(t){return e.pause(t)}),d.on(this._element,Eo,function(t){return e.cycle(t)})),this._config.touch&&this._touchSupported&&this._addTouchEventListeners();}},{key:"_addTouchEventListeners",value:function(){function t(t){r(t)?n.touchStartX=t.clientX:n._pointerEvent||(n.touchStartX=t.touches[0].clientX);}function e(t){r(t)&&(n.touchDeltaX=t.clientX-n.touchStartX),n._handleSwipe(),"hover"===n._config.pause&&(n.pause(),n.touchTimeout&&clearTimeout(n.touchTimeout),n.touchTimeout=setTimeout(function(t){return n.cycle(t)},500+n._config.interval));}var n=this,r=function(t){return n._pointerEvent&&("pen"===t.pointerType||"touch"===t.pointerType)};p.find(".carousel-item img",this._element).forEach(function(t){d.on(t,Mo,function(t){return t.preventDefault()});}),this._pointerEvent?(d.on(this._element,Do,t),d.on(this._element,Po,e),this._element.classList.add("pointer-event")):(d.on(this._element,jo,t),d.on(this._element,To,function(t){t=t,n.touchDeltaX=t.touches&&1<t.touches.length?0:t.touches[0].clientX-n.touchStartX;}),d.on(this._element,Ao,e));}},{key:"_keydown",value:function(t){var e;/input|textarea/i.test(t.target.tagName)||(e=Oo[t.key])&&(t.preventDefault(),this._slide(e));}},{key:"_getItemIndex",value:function(t){return this._items=t&&t.parentNode?p.find(".carousel-item",t.parentNode):[],this._items.indexOf(t)}},{key:"_getItemByOrder",value:function(t,e){return Z(this._items,e,t===go,this._config.wrap)}},{key:"_triggerSlideEvent",value:function(t,e){var n=this._getItemIndex(t),r=this._getItemIndex(p.findOne(No,this._element));return d.trigger(this._element,ko,{relatedTarget:t,direction:e,from:r,to:n})}},{key:"_setActiveIndicatorElement",value:function(t){if(this._indicatorsElement)for(var e=p.findOne(".active",this._indicatorsElement),n=(e.classList.remove(Lo),e.removeAttribute("aria-current"),p.find("[data-bs-target]",this._indicatorsElement)),r=0;r<n.length;r++)if(Number.parseInt(n[r].getAttribute("data-bs-slide-to"),10)===this._getItemIndex(t)){n[r].classList.add(Lo),n[r].setAttribute("aria-current","true");break}}},{key:"_updateInterval",value:function(){var t=this._activeElement||p.findOne(No,this._element);t&&((t=Number.parseInt(t.getAttribute("data-bs-interval"),10))?(this._config.defaultInterval=this._config.defaultInterval||this._config.interval,this._config.interval=t):this._config.interval=this._config.defaultInterval||this._config.interval);}},{key:"_slide",value:function(t,e){var n,r=this,t=this._directionToOrder(t),o=p.findOne(No,this._element),i=this._getItemIndex(o),a=e||this._getItemByOrder(t,o),c=this._getItemIndex(a),e=Boolean(this._interval),s=t===go,u=s?"carousel-item-start":"carousel-item-end",l=s?"carousel-item-next":"carousel-item-prev",f=this._orderToDirection(t);a&&a.classList.contains(Lo)?this._isSliding=!1:this._isSliding||this._triggerSlideEvent(a,f).defaultPrevented||o&&a&&(this._isSliding=!0,e&&this.pause(),this._setActiveIndicatorElement(a),this._activeElement=a,n=function(){d.trigger(r._element,Co,{relatedTarget:a,direction:f,from:i,to:c});},this._element.classList.contains("slide")?(a.classList.add(l),$(a),o.classList.add(u),a.classList.add(u),this._queueCallback(function(){a.classList.remove(u,l),a.classList.add(Lo),o.classList.remove(Lo,l,u),r._isSliding=!1,setTimeout(n,0);},o,!0)):(o.classList.remove(Lo),a.classList.add(Lo),this._isSliding=!1,n()),e&&this.cycle());}},{key:"_directionToOrder",value:function(t){return [wo,_o].includes(t)?a()?t===_o?bo:go:t===_o?go:bo:t}},{key:"_orderToDirection",value:function(t){return [go,bo].includes(t)?a()?t===bo?_o:wo:t===bo?wo:_o:t}}])&&so(t.prototype,n),e&&so(t,e),Object.defineProperty(t,"prototype",{writable:!1}),o}(),vo=(d.on(document,o,"[data-bs-slide], [data-bs-slide-to]",Ro.dataApiClickHandler),d.on(window,Io,function(){for(var t=p.find('[data-bs-ride="carousel"]'),e=0,n=t.length;e<n;e++)Ro.carouselInterface(t[e],Ro.getInstance(t[e]));}),e(Ro),Ro);function Bo(t){return (Bo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Ho(e,t){var n,r=Object.keys(e);return Object.getOwnPropertySymbols&&(n=Object.getOwnPropertySymbols(e),t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)),r}function Fo(r){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?Ho(Object(o),!0).forEach(function(t){var e,n;e=r,n=o[t=t],t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n;}):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(o)):Ho(Object(o)).forEach(function(t){Object.defineProperty(r,t,Object.getOwnPropertyDescriptor(o,t));});}return r}function Vo(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r);}}function Yo(){return (Yo="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=Uo(t)););return t}(t,e);if(r)return r=Object.getOwnPropertyDescriptor(r,e),r.get?r.get.call(arguments.length<3?t:n):r.value}).apply(this,arguments)}function Wo(t,e){return (Wo=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function zo(n){var r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(t){return !1}}();return function(){var t,e=Uo(n),e=(t=r?(t=Uo(this).constructor,Reflect.construct(e,arguments,t)):e.apply(this,arguments),this);if(t&&("object"===Bo(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");if(void 0!==e)return e;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}}function Uo(t){return (Uo=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var u=".".concat("bs.modal"),qo={backdrop:!0,keyboard:!0,focus:!0},Ko={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean"},$o="hide".concat(u),Xo="hidePrevented".concat(u),Go="hidden".concat(u),Qo="show".concat(u),Zo="shown".concat(u),Jo="resize".concat(u),ti="click.dismiss".concat(u),ei="keydown.dismiss".concat(u),ni="mouseup.dismiss".concat(u),ri="mousedown.dismiss".concat(u),o="click".concat(u).concat(".data-api"),oi="modal-open",ii="modal-static",ai=function(){var t=o,e=c;if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Wo(t,e);var n,r=zo(o);function o(t,e){if(this instanceof o)return (t=r.call(this,t))._config=t._getConfig(e),t._dialog=p.findOne(".modal-dialog",t._element),t._backdrop=t._initializeBackDrop(),t._focustrap=t._initializeFocusTrap(),t._isShown=!1,t._ignoreBackdropClick=!1,t._isTransitioning=!1,t._scrollBar=new dr,t;throw new TypeError("Cannot call a class as a function")}return t=o,e=[{key:"Default",get:function(){return qo}},{key:"NAME",get:function(){return "modal"}},{key:"jQueryInterface",value:function(e,n){return this.each(function(){var t=o.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError('No method named "'.concat(e,'"'));t[e](n);}})}}],(n=[{key:"toggle",value:function(t){return this._isShown?this.hide():this.show(t)}},{key:"show",value:function(t){var e=this;this._isShown||this._isTransitioning||d.trigger(this._element,Qo,{relatedTarget:t}).defaultPrevented||(this._isShown=!0,this._isAnimated()&&(this._isTransitioning=!0),this._scrollBar.hide(),document.body.classList.add(oi),this._adjustDialog(),this._setEscapeEvent(),this._setResizeEvent(),d.on(this._dialog,ri,function(){d.one(e._element,ni,function(t){t.target===e._element&&(e._ignoreBackdropClick=!0);});}),this._showBackdrop(function(){return e._showElement(t)}));}},{key:"hide",value:function(){var t,e=this;!this._isShown||this._isTransitioning||d.trigger(this._element,$o).defaultPrevented||(this._isShown=!1,(t=this._isAnimated())&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),this._focustrap.deactivate(),this._element.classList.remove("show"),d.off(this._element,ti),d.off(this._dialog,ri),this._queueCallback(function(){return e._hideModal()},this._element,t));}},{key:"dispose",value:function(){[window,this._dialog].forEach(function(t){return d.off(t,u)}),this._backdrop.dispose(),this._focustrap.deactivate(),Yo(Uo(o.prototype),"dispose",this).call(this);}},{key:"handleUpdate",value:function(){this._adjustDialog();}},{key:"_initializeBackDrop",value:function(){return new wr({isVisible:Boolean(this._config.backdrop),isAnimated:this._isAnimated()})}},{key:"_initializeFocusTrap",value:function(){return new Mr({trapElement:this._element})}},{key:"_getConfig",value:function(t){return t=Fo(Fo(Fo({},qo),f.getDataAttributes(this._element)),"object"===Bo(t)?t:{}),W("modal",t,Ko),t}},{key:"_showElement",value:function(t){var e=this,n=this._isAnimated(),r=p.findOne(".modal-body",this._dialog);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.append(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.scrollTop=0,r&&(r.scrollTop=0),n&&$(this._element),this._element.classList.add("show");this._queueCallback(function(){e._config.focus&&e._focustrap.activate(),e._isTransitioning=!1,d.trigger(e._element,Zo,{relatedTarget:t});},this._dialog,n);}},{key:"_setEscapeEvent",value:function(){var e=this;this._isShown?d.on(this._element,ei,function(t){e._config.keyboard&&"Escape"===t.key?(t.preventDefault(),e.hide()):e._config.keyboard||"Escape"!==t.key||e._triggerBackdropTransition();}):d.off(this._element,ei);}},{key:"_setResizeEvent",value:function(){var t=this;this._isShown?d.on(window,Jo,function(){return t._adjustDialog()}):d.off(window,Jo);}},{key:"_hideModal",value:function(){var t=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._isTransitioning=!1,this._backdrop.hide(function(){document.body.classList.remove(oi),t._resetAdjustments(),t._scrollBar.reset(),d.trigger(t._element,Go);});}},{key:"_showBackdrop",value:function(t){var e=this;d.on(this._element,ti,function(t){e._ignoreBackdropClick?e._ignoreBackdropClick=!1:t.target===t.currentTarget&&(!0===e._config.backdrop?e.hide():"static"===e._config.backdrop&&e._triggerBackdropTransition());}),this._backdrop.show(t);}},{key:"_isAnimated",value:function(){return this._element.classList.contains("fade")}},{key:"_triggerBackdropTransition",value:function(){var t,e,n,r,o,i=this;d.trigger(this._element,Xo).defaultPrevented||(t=this._element,e=t.classList,n=t.scrollHeight,r=t.style,!(o=n>document.documentElement.clientHeight)&&"hidden"===r.overflowY||e.contains(ii)||(o||(r.overflowY="hidden"),e.add(ii),this._queueCallback(function(){e.remove(ii),o||i._queueCallback(function(){r.overflowY="";},i._dialog);},this._dialog),this._element.focus()));}},{key:"_adjustDialog",value:function(){var t=this._element.scrollHeight>document.documentElement.clientHeight,e=this._scrollBar.getWidth(),n=0<e;(!n&&t&&!a()||n&&!t&&a())&&(this._element.style.paddingLeft="".concat(e,"px")),(n&&!t&&!a()||!n&&t&&a())&&(this._element.style.paddingRight="".concat(e,"px"));}},{key:"_resetAdjustments",value:function(){this._element.style.paddingLeft="",this._element.style.paddingRight="";}}])&&Vo(t.prototype,n),e&&Vo(t,e),Object.defineProperty(t,"prototype",{writable:!1}),o}(),Io=(d.on(document,o,'[data-bs-toggle="modal"]',function(t){var e=this,n=F(this),t=(["A","AREA"].includes(this.tagName)&&t.preventDefault(),d.one(n,Qo,function(t){t.defaultPrevented||d.one(n,Go,function(){z(e)&&e.focus();});}),p.findOne(".modal.show"));t&&ai.getInstance(t).hide(),ai.getOrCreateInstance(n).toggle(this);}),xr(ai),e(ai),ai);function ci(t){return function(t){if(Array.isArray(t))return si(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,e){if(t){if("string"==typeof t)return si(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return "Map"===(n="Object"===n&&t.constructor?t.constructor.name:n)||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?si(t,e):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function si(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}var ui=new Set(["background","cite","href","itemtype","longdesc","poster","src","xlink:href"]),li=/^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i,fi=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i,o={"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","srcset","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]};function di(t,i,e){if(!t.length)return t;if(e&&"function"==typeof e)return e(t);for(var e=(new window.DOMParser).parseFromString(t,"text/html"),a=(t=[]).concat.apply(t,ci(e.body.querySelectorAll("*"))),n=function(t,e){var n=a[t],t=n.nodeName.toLowerCase();if(!Object.keys(i).includes(t))return n.remove(),"continue";var r=(r=[]).concat.apply(r,ci(n.attributes)),o=[].concat(i["*"]||[],i[t]||[]);r.forEach(function(t){!function(t,e){var n=t.nodeName.toLowerCase();if(e.includes(n))return !ui.has(n)||Boolean(li.test(t.nodeValue)||fi.test(t.nodeValue));for(var r=e.filter(function(t){return t instanceof RegExp}),o=0,i=r.length;o<i;o++)if(r[o].test(n))return !0;return !1}(t,o)&&n.removeAttribute(t.nodeName);});},r=0,o=a.length;r<o;r++)n(r);return e.body.innerHTML}function pi(t){return (pi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function hi(e,t){var n,r=Object.keys(e);return Object.getOwnPropertySymbols&&(n=Object.getOwnPropertySymbols(e),t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)),r}function vi(r){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?hi(Object(o),!0).forEach(function(t){var e,n;e=r,n=o[t=t],t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n;}):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(o)):hi(Object(o)).forEach(function(t){Object.defineProperty(r,t,Object.getOwnPropertyDescriptor(o,t));});}return r}function yi(t){return function(t){if(Array.isArray(t))return mi(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,e){if(t){if("string"==typeof t)return mi(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return "Map"===(n="Object"===n&&t.constructor?t.constructor.name:n)||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?mi(t,e):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function mi(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function gi(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r);}}function bi(){return (bi="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=Oi(t)););return t}(t,e);if(r)return r=Object.getOwnPropertyDescriptor(r,e),r.get?r.get.call(arguments.length<3?t:n):r.value}).apply(this,arguments)}function _i(t,e){return (_i=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function wi(n){var r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(t){return !1}}();return function(){var t,e=Oi(n),e=(t=r?(t=Oi(this).constructor,Reflect.construct(e,arguments,t)):e.apply(this,arguments),this);if(t&&("object"===pi(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");if(void 0!==e)return e;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}}function Oi(t){return (Oi=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var ki="tooltip",l=".".concat("bs.tooltip"),Ci=new Set(["sanitize","allowList","sanitizeFn"]),Si={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(array|string|function)",container:"(string|element|boolean)",fallbackPlacements:"array",boundary:"(string|element)",customClass:"(string|function)",sanitize:"boolean",sanitizeFn:"(null|function)",allowList:"object",popperConfig:"(null|object|function)"},xi={AUTO:"auto",TOP:"top",RIGHT:a()?"left":"right",BOTTOM:"bottom",LEFT:a()?"right":"left"},Ei={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:[0,0],container:!1,fallbackPlacements:["top","right","bottom","left"],boundary:"clippingParents",customClass:"",sanitize:!0,sanitizeFn:null,allowList:o,popperConfig:null},ji={HIDE:"hide".concat(l),HIDDEN:"hidden".concat(l),SHOW:"show".concat(l),SHOWN:"shown".concat(l),INSERTED:"inserted".concat(l),CLICK:"click".concat(l),FOCUSIN:"focusin".concat(l),FOCUSOUT:"focusout".concat(l),MOUSEENTER:"mouseenter".concat(l),MOUSELEAVE:"mouseleave".concat(l)},Ti="fade",Ai="show",Di="show",Pi=".tooltip-inner",Mi=".".concat("modal"),Ii="hide.bs.modal",Li="hover",Ni="focus",o=function(){var t=o,e=c;if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&_i(t,e);var n,r=wi(o);function o(t,e){if(!(this instanceof o))throw new TypeError("Cannot call a class as a function");if(void 0===i)throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");return (t=r.call(this,t))._isEnabled=!0,t._timeout=0,t._hoverState="",t._activeTrigger={},t._popper=null,t._config=t._getConfig(e),t.tip=null,t._setListeners(),t}return t=o,e=[{key:"Default",get:function(){return Ei}},{key:"NAME",get:function(){return ki}},{key:"Event",get:function(){return ji}},{key:"DefaultType",get:function(){return Si}},{key:"jQueryInterface",value:function(e){return this.each(function(){var t=o.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError('No method named "'.concat(e,'"'));t[e]();}})}}],(n=[{key:"enable",value:function(){this._isEnabled=!0;}},{key:"disable",value:function(){this._isEnabled=!1;}},{key:"toggleEnabled",value:function(){this._isEnabled=!this._isEnabled;}},{key:"toggle",value:function(t){this._isEnabled&&(t?((t=this._initializeOnDelegatedTarget(t))._activeTrigger.click=!t._activeTrigger.click,t._isWithActiveTrigger()?t._enter(null,t):t._leave(null,t)):this.getTipElement().classList.contains(Ai)?this._leave(null,this):this._enter(null,this));}},{key:"dispose",value:function(){clearTimeout(this._timeout),d.off(this._element.closest(Mi),Ii,this._hideModalHandler),this.tip&&this.tip.remove(),this._disposePopper(),bi(Oi(o.prototype),"dispose",this).call(this);}},{key:"show",value:function(){var t,e,n,r=this;if("none"===this._element.style.display)throw new Error("Please use show on visible elements");this.isWithContent()&&this._isEnabled&&(e=d.trigger(this._element,this.constructor.Event.SHOW),n=(null===(n=q(this._element))?this._element.ownerDocument.documentElement:n).contains(this._element),!e.defaultPrevented&&n&&("tooltip"===this.constructor.NAME&&this.tip&&this.getTitle()!==this.tip.querySelector(Pi).innerHTML&&(this._disposePopper(),this.tip.remove(),this.tip=null),e=this.getTipElement(),n=function(t){for(;t+=Math.floor(1e6*Math.random()),document.getElementById(t););return t}(this.constructor.NAME),e.setAttribute("id",n),this._element.setAttribute("aria-describedby",n),this._config.animation&&e.classList.add(Ti),n="function"==typeof this._config.placement?this._config.placement.call(this,e,this._element):this._config.placement,n=this._getAttachment(n),this._addAttachmentClass(n),t=this._config.container,kt(e,this.constructor.DATA_KEY,this),this._element.ownerDocument.documentElement.contains(this.tip)||(t.append(e),d.trigger(this._element,this.constructor.Event.INSERTED)),this._popper?this._popper.update():this._popper=en(this._element,e,this._getPopperConfig(n)),e.classList.add(Ai),(t=this._resolvePossibleFunction(this._config.customClass))&&(n=e.classList).add.apply(n,yi(t.split(" "))),"ontouchstart"in document.documentElement&&(e=[]).concat.apply(e,yi(document.body.children)).forEach(function(t){d.on(t,"mouseover",K);}),n=this.tip.classList.contains(Ti),this._queueCallback(function(){var t=r._hoverState;r._hoverState=null,d.trigger(r._element,r.constructor.Event.SHOWN),"out"===t&&r._leave(null,r);},this.tip,n)));}},{key:"hide",value:function(){var t,e,n=this;this._popper&&(t=this.getTipElement(),d.trigger(this._element,this.constructor.Event.HIDE).defaultPrevented||(t.classList.remove(Ai),"ontouchstart"in document.documentElement&&(e=[]).concat.apply(e,yi(document.body.children)).forEach(function(t){return d.off(t,"mouseover",K)}),this._activeTrigger.click=!1,this._activeTrigger[Ni]=!1,this._activeTrigger[Li]=!1,e=this.tip.classList.contains(Ti),this._queueCallback(function(){n._isWithActiveTrigger()||(n._hoverState!==Di&&t.remove(),n._cleanTipClass(),n._element.removeAttribute("aria-describedby"),d.trigger(n._element,n.constructor.Event.HIDDEN),n._disposePopper());},this.tip,e),this._hoverState=""));}},{key:"update",value:function(){null!==this._popper&&this._popper.update();}},{key:"isWithContent",value:function(){return Boolean(this.getTitle())}},{key:"getTipElement",value:function(){if(this.tip)return this.tip;var t=document.createElement("div"),t=(t.innerHTML=this._config.template,t.children[0]);return this.setContent(t),t.classList.remove(Ti,Ai),this.tip=t,this.tip}},{key:"setContent",value:function(t){this._sanitizeAndSetContent(t,this.getTitle(),Pi);}},{key:"_sanitizeAndSetContent",value:function(t,e,n){n=p.findOne(n,t);!e&&n?n.remove():this.setElementContent(n,e);}},{key:"setElementContent",value:function(t,e){if(null!==t)return nt(e)?(e=Y(e),void(this._config.html?e.parentNode!==t&&(t.innerHTML="",t.append(e)):t.textContent=e.textContent)):void(this._config.html?(this._config.sanitize&&(e=di(e,this._config.allowList,this._config.sanitizeFn)),t.innerHTML=e):t.textContent=e)}},{key:"getTitle",value:function(){var t=this._element.getAttribute("data-bs-original-title")||this._config.title;return this._resolvePossibleFunction(t)}},{key:"updateAttachment",value:function(t){return "right"===t?"end":"left"===t?"start":t}},{key:"_initializeOnDelegatedTarget",value:function(t,e){return e||this.constructor.getOrCreateInstance(t.delegateTarget,this._getDelegateConfig())}},{key:"_getOffset",value:function(){var e=this,n=this._config.offset;return "string"==typeof n?n.split(",").map(function(t){return Number.parseInt(t,10)}):"function"==typeof n?function(t){return n(t,e._element)}:n}},{key:"_resolvePossibleFunction",value:function(t){return "function"==typeof t?t.call(this._element):t}},{key:"_getPopperConfig",value:function(t){var e=this,t={placement:t,modifiers:[{name:"flip",options:{fallbackPlacements:this._config.fallbackPlacements}},{name:"offset",options:{offset:this._getOffset()}},{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"arrow",options:{element:".".concat(this.constructor.NAME,"-arrow")}},{name:"onChange",enabled:!0,phase:"afterWrite",fn:function(t){return e._handlePopperPlacementChange(t)}}],onFirstUpdate:function(t){t.options.placement!==t.placement&&e._handlePopperPlacementChange(t);}};return vi(vi({},t),"function"==typeof this._config.popperConfig?this._config.popperConfig(t):this._config.popperConfig)}},{key:"_addAttachmentClass",value:function(t){this.getTipElement().classList.add("".concat(this._getBasicClassPrefix(),"-").concat(this.updateAttachment(t)));}},{key:"_getAttachment",value:function(t){return xi[t.toUpperCase()]}},{key:"_setListeners",value:function(){var n=this;this._config.trigger.split(" ").forEach(function(t){var e;"click"===t?d.on(n._element,n.constructor.Event.CLICK,n._config.selector,function(t){return n.toggle(t)}):"manual"!==t&&(e=t===Li?n.constructor.Event.MOUSEENTER:n.constructor.Event.FOCUSIN,t=t===Li?n.constructor.Event.MOUSELEAVE:n.constructor.Event.FOCUSOUT,d.on(n._element,e,n._config.selector,function(t){return n._enter(t)}),d.on(n._element,t,n._config.selector,function(t){return n._leave(t)}));}),this._hideModalHandler=function(){n._element&&n.hide();},d.on(this._element.closest(Mi),Ii,this._hideModalHandler),this._config.selector?this._config=vi(vi({},this._config),{},{trigger:"manual",selector:""}):this._fixTitle();}},{key:"_fixTitle",value:function(){var t=this._element.getAttribute("title"),e=pi(this._element.getAttribute("data-bs-original-title"));!t&&"string"===e||(this._element.setAttribute("data-bs-original-title",t||""),!t||this._element.getAttribute("aria-label")||this._element.textContent||this._element.setAttribute("aria-label",t),this._element.setAttribute("title",""));}},{key:"_enter",value:function(t,e){e=this._initializeOnDelegatedTarget(t,e),t&&(e._activeTrigger["focusin"===t.type?Ni:Li]=!0),e.getTipElement().classList.contains(Ai)||e._hoverState===Di?e._hoverState=Di:(clearTimeout(e._timeout),e._hoverState=Di,e._config.delay&&e._config.delay.show?e._timeout=setTimeout(function(){e._hoverState===Di&&e.show();},e._config.delay.show):e.show());}},{key:"_leave",value:function(t,e){e=this._initializeOnDelegatedTarget(t,e),t&&(e._activeTrigger["focusout"===t.type?Ni:Li]=e._element.contains(t.relatedTarget)),e._isWithActiveTrigger()||(clearTimeout(e._timeout),e._hoverState="out",e._config.delay&&e._config.delay.hide?e._timeout=setTimeout(function(){"out"===e._hoverState&&e.hide();},e._config.delay.hide):e.hide());}},{key:"_isWithActiveTrigger",value:function(){for(var t in this._activeTrigger)if(this._activeTrigger[t])return !0;return !1}},{key:"_getConfig",value:function(t){var e=f.getDataAttributes(this._element);return Object.keys(e).forEach(function(t){Ci.has(t)&&delete e[t];}),(t=vi(vi(vi({},this.constructor.Default),e),"object"===pi(t)&&t?t:{})).container=!1===t.container?document.body:Y(t.container),"number"==typeof t.delay&&(t.delay={show:t.delay,hide:t.delay}),"number"==typeof t.title&&(t.title=t.title.toString()),"number"==typeof t.content&&(t.content=t.content.toString()),W(ki,t,this.constructor.DefaultType),t.sanitize&&(t.template=di(t.template,t.allowList,t.sanitizeFn)),t}},{key:"_getDelegateConfig",value:function(){var t,e={};for(t in this._config)this.constructor.Default[t]!==this._config[t]&&(e[t]=this._config[t]);return e}},{key:"_cleanTipClass",value:function(){var e=this.getTipElement(),t=new RegExp("(^|\\s)".concat(this._getBasicClassPrefix(),"\\S+"),"g"),t=e.getAttribute("class").match(t);null!==t&&0<t.length&&t.map(function(t){return t.trim()}).forEach(function(t){return e.classList.remove(t)});}},{key:"_getBasicClassPrefix",value:function(){return "bs-tooltip"}},{key:"_handlePopperPlacementChange",value:function(t){t=t.state;t&&(this.tip=t.elements.popper,this._cleanTipClass(),this._addAttachmentClass(this._getAttachment(t.placement)));}},{key:"_disposePopper",value:function(){this._popper&&(this._popper.destroy(),this._popper=null);}}])&&gi(t.prototype,n),e&&gi(t,e),Object.defineProperty(t,"prototype",{writable:!1}),o}(),Ri=(e(o),o);function Bi(t){return (Bi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Hi(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r);}}function Fi(t,e){return (Fi=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function Vi(n){var r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(t){return !1}}();return function(){var t,e=Yi(n),e=(t=r?(t=Yi(this).constructor,Reflect.construct(e,arguments,t)):e.apply(this,arguments),this);if(t&&("object"===Bi(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");if(void 0!==e)return e;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}}function Yi(t){return (Yi=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Wi(e,t){var n,r=Object.keys(e);return Object.getOwnPropertySymbols&&(n=Object.getOwnPropertySymbols(e),t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)),r}function zi(r){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?Wi(Object(o),!0).forEach(function(t){var e,n;e=r,n=o[t=t],t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n;}):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(o)):Wi(Object(o)).forEach(function(t){Object.defineProperty(r,t,Object.getOwnPropertyDescriptor(o,t));});}return r}var l=".".concat("bs.popover"),Ui=zi(zi({},Ri.Default),{},{placement:"right",offset:[0,8],trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'}),qi=zi(zi({},Ri.DefaultType),{},{content:"(string|element|function)"}),Ki={HIDE:"hide".concat(l),HIDDEN:"hidden".concat(l),SHOW:"show".concat(l),SHOWN:"shown".concat(l),INSERTED:"inserted".concat(l),CLICK:"click".concat(l),FOCUSIN:"focusin".concat(l),FOCUSOUT:"focusout".concat(l),MOUSEENTER:"mouseenter".concat(l),MOUSELEAVE:"mouseleave".concat(l)},o=function(){var t=o,e=Ri;if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Fi(t,e);var n,r=Vi(o);function o(){var t=this,e=o;if(t instanceof e)return r.apply(this,arguments);throw new TypeError("Cannot call a class as a function")}return t=o,e=[{key:"Default",get:function(){return Ui}},{key:"NAME",get:function(){return "popover"}},{key:"Event",get:function(){return Ki}},{key:"DefaultType",get:function(){return qi}},{key:"jQueryInterface",value:function(e){return this.each(function(){var t=o.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError('No method named "'.concat(e,'"'));t[e]();}})}}],(n=[{key:"isWithContent",value:function(){return this.getTitle()||this._getContent()}},{key:"setContent",value:function(t){this._sanitizeAndSetContent(t,this.getTitle(),".popover-header"),this._sanitizeAndSetContent(t,this._getContent(),".popover-body");}},{key:"_getContent",value:function(){return this._resolvePossibleFunction(this._config.content)}},{key:"_getBasicClassPrefix",value:function(){return "bs-popover"}}])&&Hi(t.prototype,n),e&&Hi(t,e),Object.defineProperty(t,"prototype",{writable:!1}),o}(),l=(e(o),o);t(180);function $i(t){return ($i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Xi(e,t){var n,r=Object.keys(e);return Object.getOwnPropertySymbols&&(n=Object.getOwnPropertySymbols(e),t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)),r}function Gi(r){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?Xi(Object(o),!0).forEach(function(t){var e,n;e=r,n=o[t=t],t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n;}):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(o)):Xi(Object(o)).forEach(function(t){Object.defineProperty(r,t,Object.getOwnPropertyDescriptor(o,t));});}return r}function Qi(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r);}}function Zi(){return (Zi="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=ea(t)););return t}(t,e);if(r)return r=Object.getOwnPropertyDescriptor(r,e),r.get?r.get.call(arguments.length<3?t:n):r.value}).apply(this,arguments)}function Ji(t,e){return (Ji=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function ta(n){var r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(t){return !1}}();return function(){var t,e=ea(n),e=(t=r?(t=ea(this).constructor,Reflect.construct(e,arguments,t)):e.apply(this,arguments),this);if(t&&("object"===$i(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");if(void 0!==e)return e;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}}function ea(t){return (ea=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var na="scrollspy",ra=".".concat("bs.scrollspy"),oa={offset:10,method:"auto",target:""},ia={offset:"number",method:"string",target:"(string|element)"},aa="activate".concat(ra),ca="scroll".concat(ra),o="load".concat(ra).concat(".data-api"),sa="dropdown-item",ua="active",la=".nav-link",fa=".list-group-item",da="".concat(la,", ").concat(fa,", .").concat(sa),pa="position",ha=function(){var t=o,e=c;if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Ji(t,e);var n,r=ta(o);function o(t,e){var n;if(this instanceof o)return (n=r.call(this,t))._scrollElement="BODY"===n._element.tagName?window:n._element,n._config=n._getConfig(e),n._offsets=[],n._targets=[],n._activeTarget=null,n._scrollHeight=0,d.on(n._scrollElement,ca,function(){return n._process()}),n.refresh(),n._process(),n;throw new TypeError("Cannot call a class as a function")}return t=o,e=[{key:"Default",get:function(){return oa}},{key:"NAME",get:function(){return na}},{key:"jQueryInterface",value:function(e){return this.each(function(){var t=o.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError('No method named "'.concat(e,'"'));t[e]();}})}}],(n=[{key:"refresh",value:function(){var e=this,t=this._scrollElement===this._scrollElement.window?"offset":pa,r="auto"===this._config.method?t:this._config.method,o=r===pa?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),p.find(da,this._config.target).map(function(t){var t=H(t),e=t?p.findOne(t):null;if(e){var n=e.getBoundingClientRect();if(n.width||n.height)return [f[r](e).top+o,t]}return null}).filter(function(t){return t}).sort(function(t,e){return t[0]-e[0]}).forEach(function(t){e._offsets.push(t[0]),e._targets.push(t[1]);});}},{key:"dispose",value:function(){d.off(this._scrollElement,ra),Zi(ea(o.prototype),"dispose",this).call(this);}},{key:"_getConfig",value:function(t){return (t=Gi(Gi(Gi({},oa),f.getDataAttributes(this._element)),"object"===$i(t)&&t?t:{})).target=Y(t.target)||document.documentElement,W(na,t,ia),t}},{key:"_getScrollTop",value:function(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop}},{key:"_getScrollHeight",value:function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)}},{key:"_getOffsetHeight",value:function(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height}},{key:"_process",value:function(){var t=this._getScrollTop()+this._config.offset,e=this._getScrollHeight(),n=this._config.offset+e-this._getOffsetHeight();if(this._scrollHeight!==e&&this.refresh(),n<=t)return e=this._targets[this._targets.length-1],void(this._activeTarget!==e&&this._activate(e));if(this._activeTarget&&t<this._offsets[0]&&0<this._offsets[0])return this._activeTarget=null,void this._clear();for(var r=this._offsets.length;r--;)this._activeTarget!==this._targets[r]&&t>=this._offsets[r]&&(void 0===this._offsets[r+1]||t<this._offsets[r+1])&&this._activate(this._targets[r]);}},{key:"_activate",value:function(e){this._activeTarget=e,this._clear();var t=da.split(",").map(function(t){return "".concat(t,'[data-bs-target="').concat(e,'"],').concat(t,'[href="').concat(e,'"]')}),t=p.findOne(t.join(","),this._config.target);t.classList.add(ua),t.classList.contains(sa)?p.findOne(".dropdown-toggle",t.closest(".dropdown")).classList.add(ua):p.parents(t,".nav, .list-group").forEach(function(t){p.prev(t,"".concat(la,", ").concat(fa)).forEach(function(t){return t.classList.add(ua)}),p.prev(t,".nav-item").forEach(function(t){p.children(t,la).forEach(function(t){return t.classList.add(ua)});});}),d.trigger(this._scrollElement,aa,{relatedTarget:e});}},{key:"_clear",value:function(){p.find(da,this._config.target).filter(function(t){return t.classList.contains(ua)}).forEach(function(t){return t.classList.remove(ua)});}}])&&Qi(t.prototype,n),e&&Qi(t,e),Object.defineProperty(t,"prototype",{writable:!1}),o}(),o=(d.on(window,o,function(){p.find('[data-bs-spy="scroll"]').forEach(function(t){return new ha(t)});}),e(ha),ha);function va(t){return (va="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function ya(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r);}}function ma(t,e){return (ma=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function ga(n){var r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(t){return !1}}();return function(){var t,e=ba(n),e=(t=r?(t=ba(this).constructor,Reflect.construct(e,arguments,t)):e.apply(this,arguments),this);if(t&&("object"===va(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");if(void 0!==e)return e;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}}function ba(t){return (ba=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var _a=".".concat("bs.tab"),wa="hide".concat(_a),Oa="hidden".concat(_a),ka="show".concat(_a),Ca="shown".concat(_a),_a="click".concat(_a).concat(".data-api"),Sa="active",xa=".active",Ea=":scope > li > .active",ja=function(){var t=o,e=c;if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&ma(t,e);var n,r=ga(o);function o(){var t=this,e=o;if(t instanceof e)return r.apply(this,arguments);throw new TypeError("Cannot call a class as a function")}return t=o,e=[{key:"NAME",get:function(){return "tab"}},{key:"jQueryInterface",value:function(e){return this.each(function(){var t=o.getOrCreateInstance(this);if("string"==typeof e){if(void 0===t[e])throw new TypeError('No method named "'.concat(e,'"'));t[e]();}})}}],(n=[{key:"show",value:function(){var t,e,n,r,o=this;this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&this._element.classList.contains(Sa)||(t=F(this._element),(e=this._element.closest(".nav, .list-group"))&&(r="UL"===e.nodeName||"OL"===e.nodeName?Ea:xa,n=(n=p.find(r,e))[n.length-1]),r=n?d.trigger(n,wa,{relatedTarget:this._element}):null,d.trigger(this._element,ka,{relatedTarget:n}).defaultPrevented||null!==r&&r.defaultPrevented||(this._activate(this._element,e),r=function(){d.trigger(n,Oa,{relatedTarget:o._element}),d.trigger(o._element,Ca,{relatedTarget:n});},t?this._activate(t,t.parentNode,r):r()));}},{key:"_activate",value:function(t,e,n){function r(){return o._transitionComplete(t,i,n)}var o=this,i=(!e||"UL"!==e.nodeName&&"OL"!==e.nodeName?p.children(e,xa):p.find(Ea,e))[0],e=n&&i&&i.classList.contains("fade");i&&e?(i.classList.remove("show"),this._queueCallback(r,t,!0)):r();}},{key:"_transitionComplete",value:function(t,e,n){e&&(e.classList.remove(Sa),(r=p.findOne(":scope > .dropdown-menu .active",e.parentNode))&&r.classList.remove(Sa),"tab"===e.getAttribute("role")&&e.setAttribute("aria-selected",!1)),t.classList.add(Sa),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!0),$(t),t.classList.contains("fade")&&t.classList.add("show");var r=t.parentNode;(r=r&&"LI"===r.nodeName?r.parentNode:r)&&r.classList.contains("dropdown-menu")&&((e=t.closest(".dropdown"))&&p.find(".dropdown-toggle",e).forEach(function(t){return t.classList.add(Sa)}),t.setAttribute("aria-expanded",!0)),n&&n();}}])&&ya(t.prototype,n),e&&ya(t,e),Object.defineProperty(t,"prototype",{writable:!1}),o}(),_a=(d.on(document,_a,'[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]',function(t){["A","AREA"].includes(this.tagName)&&t.preventDefault(),U(this)||ja.getOrCreateInstance(this).show();}),e(ja),ja);function Ta(t){return (Ta="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Aa(e,t){var n,r=Object.keys(e);return Object.getOwnPropertySymbols&&(n=Object.getOwnPropertySymbols(e),t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)),r}function Da(r){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?Aa(Object(o),!0).forEach(function(t){var e,n;e=r,n=o[t=t],t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n;}):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(o)):Aa(Object(o)).forEach(function(t){Object.defineProperty(r,t,Object.getOwnPropertyDescriptor(o,t));});}return r}function Pa(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r);}}function Ma(){return (Ma="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=Na(t)););return t}(t,e);if(r)return r=Object.getOwnPropertyDescriptor(r,e),r.get?r.get.call(arguments.length<3?t:n):r.value}).apply(this,arguments)}function Ia(t,e){return (Ia=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function La(n){var r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(t){return !1}}();return function(){var t,e=Na(n),e=(t=r?(t=Na(this).constructor,Reflect.construct(e,arguments,t)):e.apply(this,arguments),this);if(t&&("object"===Ta(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");if(void 0!==e)return e;throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}}function Na(t){return (Na=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function Ra(t){for(;t+=Math.floor(Math.random()*nc),document.getElementById(t););return t}function Ba(o,i,a){Object.keys(a).forEach(function(t){var e,n=a[t],r=i[t],r=r&&((e=r)[0]||e).nodeType?"element":null==(e=r)?"".concat(e):{}.toString.call(e).match(/\s([a-z]+)/i)[1].toLowerCase();if(!new RegExp(n).test(r))throw new Error("".concat(o.toUpperCase(),": ")+'Option "'.concat(t,'" provided type "').concat(r,'" ')+'but expected type "'.concat(n,'".'))});}function Ha(){var t=window.jQuery;return t&&!document.body.hasAttribute("data-mdb-no-jquery")?t:null}function Fa(t){"loading"===document.readyState?document.addEventListener("DOMContentLoaded",t):t();}function Va(t){return document.createElement(t)}var Ya,Wa,h=".".concat("bs.toast"),za="mouseover".concat(h),Ua="mouseout".concat(h),qa="focusin".concat(h),Ka="focusout".concat(h),$a="hide".concat(h),Xa="hidden".concat(h),Ga="show".concat(h),Qa="shown".concat(h),Za="show",Ja="showing",tc={animation:"boolean",autohide:"boolean",delay:"number"},ec={animation:!0,autohide:!0,delay:5e3},h=function(){var t=o,e=c;if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&Ia(t,e);var n,r=La(o);function o(t,e){if(this instanceof o)return (t=r.call(this,t))._config=t._getConfig(e),t._timeout=null,t._hasMouseInteraction=!1,t._hasKeyboardInteraction=!1,t._setListeners(),t;throw new TypeError("Cannot call a class as a function")}return t=o,e=[{key:"DefaultType",get:function(){return tc}},{key:"Default",get:function(){return ec}},{key:"NAME",get:function(){return "toast"}},{key:"jQueryInterface",value:function(e){return this.each(function(){var t=o.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError('No method named "'.concat(e,'"'));t[e](this);}})}}],(n=[{key:"show",value:function(){var t=this;d.trigger(this._element,Ga).defaultPrevented||(this._clearTimeout(),this._config.animation&&this._element.classList.add("fade"),this._element.classList.remove("hide"),$(this._element),this._element.classList.add(Za),this._element.classList.add(Ja),this._queueCallback(function(){t._element.classList.remove(Ja),d.trigger(t._element,Qa),t._maybeScheduleHide();},this._element,this._config.animation));}},{key:"hide",value:function(){var t=this;this._element.classList.contains(Za)&&!d.trigger(this._element,$a).defaultPrevented&&(this._element.classList.add(Ja),this._queueCallback(function(){t._element.classList.add("hide"),t._element.classList.remove(Ja),t._element.classList.remove(Za),d.trigger(t._element,Xa);},this._element,this._config.animation));}},{key:"dispose",value:function(){this._clearTimeout(),this._element.classList.contains(Za)&&this._element.classList.remove(Za),Ma(Na(o.prototype),"dispose",this).call(this);}},{key:"_getConfig",value:function(t){return t=Da(Da(Da({},ec),f.getDataAttributes(this._element)),"object"===Ta(t)&&t?t:{}),W("toast",t,this.constructor.DefaultType),t}},{key:"_maybeScheduleHide",value:function(){var t=this;!this._config.autohide||this._hasMouseInteraction||this._hasKeyboardInteraction||(this._timeout=setTimeout(function(){t.hide();},this._config.delay));}},{key:"_onInteraction",value:function(t,e){switch(t.type){case"mouseover":case"mouseout":this._hasMouseInteraction=e;break;case"focusin":case"focusout":this._hasKeyboardInteraction=e;}e?this._clearTimeout():(t=t.relatedTarget,this._element===t||this._element.contains(t)||this._maybeScheduleHide());}},{key:"_setListeners",value:function(){var e=this;d.on(this._element,za,function(t){return e._onInteraction(t,!0)}),d.on(this._element,Ua,function(t){return e._onInteraction(t,!1)}),d.on(this._element,qa,function(t){return e._onInteraction(t,!0)}),d.on(this._element,Ka,function(t){return e._onInteraction(t,!1)});}},{key:"_clearTimeout",value:function(){clearTimeout(this._timeout),this._timeout=null;}}])&&Pa(t.prototype,n),e&&Pa(t,e),Object.defineProperty(t,"prototype",{writable:!1}),o}(),nc=(xr(h),e(h),1e6),rc=(document.documentElement.dir,Ya={},Wa=1,{set:function(t,e,n){void 0===t[e]&&(t[e]={key:e,id:Wa},Wa++),Ya[t[e].id]=n;},get:function(t,e){if(!t||void 0===t[e])return null;t=t[e];return t.key===e?Ya[t.id]:null},delete:function(t,e){var n;void 0!==t[e]&&(n=t[e]).key===e&&(delete Ya[n.id],delete t[e]);}}),v={setData:function(t,e,n){rc.set(t,e,n);},getData:function(t,e){return rc.get(t,e)},removeData:function(t,e){rc.delete(t,e);}};function oc(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var r,o,i=[],a=!0,c=!1;try{for(n=n.call(t);!(a=(r=n.next()).done)&&(i.push(r.value),!e||i.length!==e);a=!0);}catch(t){c=!0,o=t;}finally{try{a||null==n.return||n.return();}finally{if(c)throw o}}return i}}(t,e)||function(t,e){if(t){if("string"==typeof t)return ic(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return "Map"===(n="Object"===n&&t.constructor?t.constructor.name:n)||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ic(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ic(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}var ac=Ha(),cc=/[^.]*(?=\..*)\.|.*/,sc=/\..*/,uc=/::\d+$/,lc={},fc=1,dc={mouseenter:"mouseover",mouseleave:"mouseout"},pc=["click","dblclick","mouseup","mousedown","contextmenu","mousewheel","DOMMouseScroll","mouseover","mouseout","mousemove","selectstart","selectend","keydown","keypress","keyup","orientationchange","touchstart","touchmove","touchend","touchcancel","pointerdown","pointermove","pointerup","pointerleave","pointercancel","gesturestart","gesturechange","gestureend","focus","blur","change","reset","select","submit","focusin","focusout","load","unload","beforeunload","resize","move","DOMContentLoaded","readystatechange","error","abort","scroll"];function hc(t,e){return e&&"".concat(e,"::").concat(fc++)||t.uidEvent||fc++}function vc(t){var e=hc(t);return t.uidEvent=e,lc[e]=lc[e]||{},lc[e]}function yc(t,e,n){for(var r=2<arguments.length&&void 0!==n?n:null,o=Object.keys(t),i=0,a=o.length;i<a;i++){var c=t[o[i]];if(c.originalHandler===e&&c.delegationSelector===r)return c}return null}function mc(t,e,n){var r="string"==typeof e,n=r?n:e,e=t.replace(sc,""),o=dc[e];return [r,n,e=-1<pc.indexOf(e=o?o:e)?e:t]}function gc(t,e,n,r,o){var i,a,c,s,u,l,f,d,p,h;"string"==typeof e&&t&&(n||(n=r,r=null),i=(c=oc(mc(e,n,r),3))[0],a=c[1],c=c[2],(u=yc(s=(s=vc(t))[c]||(s[c]={}),a,i?n:null))?u.oneOff=u.oneOff&&o:(u=hc(a,e.replace(cc,"")),(e=i?(d=t,p=n,h=r,function t(e){for(var n=d.querySelectorAll(p),r=e.target;r&&r!==this;r=r.parentNode)for(var o=n.length;o--;)if(n[o]===r)return e.delegateTarget=r,t.oneOff&&_c.off(d,e.type,h),h.apply(r,[e]);return null}):(l=t,f=n,function t(e){return e.delegateTarget=l,t.oneOff&&_c.off(l,e.type,f),f.apply(l,[e])})).delegationSelector=i?n:null,e.originalHandler=a,e.oneOff=o,s[e.uidEvent=u]=e,t.addEventListener(c,e,i)));}function bc(t,e,n,r,o){r=yc(e[n],r,o);r&&(t.removeEventListener(n,r,Boolean(o)),delete e[n][r.uidEvent]);}var _c={on:function(t,e,n,r){gc(t,e,n,r,!1);},one:function(t,e,n,r){gc(t,e,n,r,!0);},off:function(a,c,t,e){if("string"==typeof c&&a){var e=oc(mc(c,t,e),3),n=e[0],r=e[1],o=e[2],i=o!==c,s=vc(a),e="."===c.charAt(0);if(void 0!==r)return s&&s[o]?void bc(a,s,o,r,n?t:null):void 0;e&&Object.keys(s).forEach(function(t){var e,n,r,o,i;e=a,n=s,r=t,o=c.slice(1),i=n[r]||{},Object.keys(i).forEach(function(t){-1<t.indexOf(o)&&(t=i[t],bc(e,n,r,t.originalHandler,t.delegationSelector));});});var u=s[o]||{};Object.keys(u).forEach(function(t){var e=t.replace(uc,"");(!i||-1<c.indexOf(e))&&(e=u[t],bc(a,s,o,e.originalHandler,e.delegationSelector));});}},trigger:function(t,e,n){if("string"!=typeof e||!t)return null;var r,o=e.replace(sc,""),i=e!==o,a=-1<pc.indexOf(o),c=!0,s=!0,u=!1,l=null;return i&&ac&&(r=ac.Event(e,n),ac(t).trigger(r),c=!r.isPropagationStopped(),s=!r.isImmediatePropagationStopped(),u=r.isDefaultPrevented()),a?(l=document.createEvent("HTMLEvents")).initEvent(o,c,!0):l=new CustomEvent(e,{bubbles:c,cancelable:!0}),void 0!==n&&Object.keys(n).forEach(function(t){Object.defineProperty(l,t,{get:function(){return n[t]}});}),u&&l.preventDefault(),s&&t.dispatchEvent(l),l.defaultPrevented&&void 0!==r&&r.preventDefault(),l}},wc=function(t,e,n,r){for(var o=e.split(" "),i=0;i<o.length;i++)_c.on(t,o[i],n,r);},Oc=function(t,e,n,r){for(var o=e.split(" "),i=0;i<o.length;i++)_c.off(t,o[i],n,r);},_=_c;t(185);function kc(e,t){var n,r=Object.keys(e);return Object.getOwnPropertySymbols&&(n=Object.getOwnPropertySymbols(e),t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)),r}function Cc(r){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?kc(Object(o),!0).forEach(function(t){var e,n;e=r,n=o[t=t],t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n;}):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(o)):kc(Object(o)).forEach(function(t){Object.defineProperty(r,t,Object.getOwnPropertyDescriptor(o,t));});}return r}function Sc(t){return "true"===t||"false"!==t&&(t===Number(t).toString()?Number(t):""===t||"null"===t?null:t)}function xc(t){return t.replace(/[A-Z]/g,function(t){return "-".concat(t.toLowerCase())})}var S={setDataAttribute:function(t,e,n){t.setAttribute("data-mdb-".concat(xc(e)),n);},removeDataAttribute:function(t,e){t.removeAttribute("data-mdb-".concat(xc(e)));},getDataAttributes:function(t){if(!t)return {};var n=Cc({},t.dataset);return Object.keys(n).filter(function(t){return t.startsWith("mdb")}).forEach(function(t){var e=(e=t.replace(/^mdb/,"")).charAt(0).toLowerCase()+e.slice(1,e.length);n[e]=Sc(n[t]);}),n},getDataAttribute:function(t,e){return Sc(t.getAttribute("data-mdb-".concat(xc(e))))},offset:function(t){t=t.getBoundingClientRect();return {top:t.top+document.body.scrollTop,left:t.left+document.body.scrollLeft}},position:function(t){return {top:t.offsetTop,left:t.offsetLeft}},style:function(t,e){Object.assign(t.style,e);},toggleClass:function(t,e){t&&(t.classList.contains(e)?t.classList.remove(e):t.classList.add(e));},addClass:function(t,e){t.classList.contains(e)||t.classList.add(e);},addStyle:function(e,n){Object.keys(n).forEach(function(t){e.style[t]=n[t];});},removeClass:function(t,e){t.classList.contains(e)&&t.classList.remove(e);},hasClass:function(t,e){return t.classList.contains(e)}};function Ec(t){return function(t){if(Array.isArray(t))return jc(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,e){if(t){if("string"==typeof t)return jc(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return "Map"===(n="Object"===n&&t.constructor?t.constructor.name:n)||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?jc(t,e):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function jc(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}var x={closest:function(t,e){return t.closest(e)},matches:function(t,e){return t.matches(e)},find:function(t){var e,n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:document.documentElement;return (e=[]).concat.apply(e,Ec(Element.prototype.querySelectorAll.call(n,t)))},findOne:function(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:document.documentElement;return Element.prototype.querySelector.call(e,t)},children:function(t,e){var n;return (n=[]).concat.apply(n,Ec(t.children)).filter(function(t){return t.matches(e)})},parents:function(t,e){for(var n=[],r=t.parentNode;r&&r.nodeType===Node.ELEMENT_NODE&&3!==r.nodeType;)this.matches(r,e)&&n.push(r),r=r.parentNode;return n},prev:function(t,e){for(var n=t.previousElementSibling;n;){if(n.matches(e))return [n];n=n.previousElementSibling;}return []},next:function(t,e){for(var n=t.nextElementSibling;n;){if(this.matches(n,e))return [n];n=n.nextElementSibling;}return []}};function Tc(t){return (Tc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Ac(e,t){var n,r=Object.keys(e);return Object.getOwnPropertySymbols&&(n=Object.getOwnPropertySymbols(e),t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)),r}function Dc(r){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?Ac(Object(o),!0).forEach(function(t){var e,n;e=r,n=o[t=t],t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n;}):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(o)):Ac(Object(o)).forEach(function(t){Object.defineProperty(r,t,Object.getOwnPropertyDescriptor(o,t));});}return r}function Pc(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r);}}var Mc="ripple",Ic="mdb.ripple",Lc="ripple-surface",Nc="ripple-wave",Rc=["[data-mdb-ripple]"],Bc="ripple-surface-unbound",Hc=[0,0,0],Fc=["primary","secondary","success","danger","warning","info","light","dark"],Vc={rippleCentered:!1,rippleColor:"",rippleDuration:"500ms",rippleRadius:0,rippleUnbound:!1},Yc={rippleCentered:"boolean",rippleColor:"string",rippleDuration:"string",rippleRadius:"number",rippleUnbound:"boolean"},Wc=function(){function n(t,e){if(!(this instanceof n))throw new TypeError("Cannot call a class as a function");this._element=t,this._options=this._getConfig(e),this._element&&(v.setData(t,Ic,this),S.addClass(this._element,Lc)),this._clickHandler=this._createRipple.bind(this),this._rippleTimer=null,this._isMinWidthSet=!1,this.init();}var t,e,r;return t=n,r=[{key:"NAME",get:function(){return Mc}},{key:"autoInitial",value:function(e){return function(t){e._autoInit(t);}}},{key:"jQueryInterface",value:function(t){return this.each(function(){return v.getData(this,Ic)?null:new n(this,t)})}},{key:"getInstance",value:function(t){return v.getData(t,Ic)}},{key:"getOrCreateInstance",value:function(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};return this.getInstance(t)||new this(t,"object"===Tc(e)?e:null)}}],(e=[{key:"init",value:function(){this._addClickEvent(this._element);}},{key:"dispose",value:function(){v.removeData(this._element,Ic),_.off(this._element,"click",this._clickHandler),this._element=null,this._options=null;}},{key:"_autoInit",value:function(e){var n=this;Rc.forEach(function(t){x.closest(e.target,t)&&(n._element=x.closest(e.target,t));}),this._element.style.minWidth||(S.style(this._element,{"min-width":"".concat(this._element.offsetWidth,"px")}),this._isMinWidthSet=!0),S.addClass(this._element,Lc),this._options=this._getConfig(),this._createRipple(e);}},{key:"_addClickEvent",value:function(t){_.on(t,"mousedown",this._clickHandler);}},{key:"_createRipple",value:function(t){S.hasClass(this._element,Lc)||S.addClass(this._element,Lc);var e=t.layerX,t=t.layerY,n=this._element.offsetHeight,r=this._element.offsetWidth,o=this._durationToMsNumber(this._options.rippleDuration),i={offsetX:this._options.rippleCentered?n/2:e,offsetY:this._options.rippleCentered?r/2:t,height:n,width:r},i=this._getDiameter(i),a=this._options.rippleRadius||i/2,c={delay:.5*o,duration:o-.5*o},r={left:this._options.rippleCentered?"".concat(r/2-a,"px"):"".concat(e-a,"px"),top:this._options.rippleCentered?"".concat(n/2-a,"px"):"".concat(t-a,"px"),height:"".concat(2*this._options.rippleRadius||i,"px"),width:"".concat(2*this._options.rippleRadius||i,"px"),transitionDelay:"0s, ".concat(c.delay,"ms"),transitionDuration:"".concat(o,"ms, ").concat(c.duration,"ms")},e=Va("div");this._createHTMLRipple({wrapper:this._element,ripple:e,styles:r}),this._removeHTMLRipple({ripple:e,duration:o});}},{key:"_createHTMLRipple",value:function(t){var e=t.wrapper,n=t.ripple,r=t.styles;Object.keys(r).forEach(function(t){return n.style[t]=r[t]}),n.classList.add(Nc),""!==this._options.rippleColor&&(this._removeOldColorClasses(e),this._addColor(n,e)),this._toggleUnbound(e),this._appendRipple(n,e);}},{key:"_removeHTMLRipple",value:function(t){var e=this,n=t.ripple,t=t.duration;this._rippleTimer&&(clearTimeout(this._rippleTimer),this._rippleTimer=null),this._rippleTimer=setTimeout(function(){n&&(n.remove(),e._element&&(x.find(".".concat(Nc),e._element).forEach(function(t){t.remove();}),e._isMinWidthSet&&(S.style(e._element,{"min-width":""}),e._isMinWidthSet=!1),S.removeClass(e._element,Lc)));},t);}},{key:"_durationToMsNumber",value:function(t){return Number(t.replace("ms","").replace("s","000"))}},{key:"_getConfig",value:function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},e=S.getDataAttributes(this._element),t=Dc(Dc(Dc({},Vc),e),t);return Ba(Mc,t,Yc),t}},{key:"_getDiameter",value:function(t){function e(t,e){return Math.sqrt(Math.pow(t,2)+Math.pow(e,2))}var n=t.offsetX,r=t.offsetY,o=t.height,t=t.width,i=r<=o/2,a=n<=t/2,c=r===o/2&&n===t/2,s=!0==i&&!1==a,u=!0==i&&!0==a,l=!1==i&&!0==a,i=!1==i&&!1==a,a={topLeft:e(n,r),topRight:e(t-n,r),bottomLeft:e(n,o-r),bottomRight:e(t-n,o-r)},t=0;return c||i?t=a.topLeft:l?t=a.topRight:u?t=a.bottomRight:s&&(t=a.bottomLeft),2*t}},{key:"_appendRipple",value:function(t,e){e.appendChild(t),setTimeout(function(){S.addClass(t,"active");},50);}},{key:"_toggleUnbound",value:function(t){!0===this._options.rippleUnbound?S.addClass(t,Bc):t.classList.remove(Bc);}},{key:"_addColor",value:function(t,e){var n=this;Fc.find(function(t){return t===n._options.rippleColor.toLowerCase()})?S.addClass(e,"".concat(Lc,"-").concat(this._options.rippleColor.toLowerCase())):(e=this._colorToRGB(this._options.rippleColor).join(","),e="rgba({{color}}, 0.2) 0, rgba({{color}}, 0.3) 40%, rgba({{color}}, 0.4) 50%, rgba({{color}}, 0.5) 60%, rgba({{color}}, 0) 70%".split("{{color}}").join("".concat(e)),t.style.backgroundImage="radial-gradient(circle, ".concat(e,")"));}},{key:"_removeOldColorClasses",value:function(e){var t=new RegExp("".concat(Lc,"-[a-z]+"),"gi");(e.classList.value.match(t)||[]).forEach(function(t){e.classList.remove(t);});}},{key:"_colorToRGB",value:function(t){return "transparent"===t.toLowerCase()?Hc:"#"===t[0]?((e=t).length<7&&(e="#".concat(e[1]).concat(e[1]).concat(e[2]).concat(e[2]).concat(e[3]).concat(e[3])),[parseInt(e.substr(1,2),16),parseInt(e.substr(3,2),16),parseInt(e.substr(5,2),16)]):(-1===t.indexOf("rgb")&&(e=t,n=document.body.appendChild(document.createElement("fictum")),r="rgb(1, 2, 3)",n.style.color=r,t=n.style.color!==r?Hc:(n.style.color=e,n.style.color===r||""===n.style.color?Hc:(e=getComputedStyle(n).color,document.body.removeChild(n),e))),0===t.indexOf("rgb")?((r=(r=t).match(/[.\d]+/g).map(function(t){return +Number(t)})).length=3,r):Hc);var e,n,r;}}])&&Pc(t.prototype,e),r&&Pc(t,r),Object.defineProperty(t,"prototype",{writable:!1}),n}(),zc=(Rc.forEach(function(t){_.one(document,"mousedown",t,Wc.autoInitial(new Wc));}),Fa(function(){var t,e=Ha();e&&(t=e.fn[Mc],e.fn[Mc]=Wc.jQueryInterface,e.fn[Mc].Constructor=Wc,e.fn[Mc].noConflict=function(){return e.fn[Mc]=t,Wc.jQueryInterface});}),Wc);t(187);function Uc(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r);}}var qc=function(){function a(t){var e=this,n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},r=2<arguments.length?arguments[2]:void 0,o=this,i=a;if(!(o instanceof i))throw new TypeError("Cannot call a class as a function");this._element=t,this._toggler=r,this._event=n.event||"blur",this._condition=n.condition||function(){return !0},this._selector=n.selector||'button, a, input, select, textarea, [tabindex]:not([tabindex="-1"])',this._onlyVisible=n.onlyVisible||!1,this._focusableElements=[],this._firstElement=null,this._lastElement=null,this.handler=function(t){e._condition(t)&&t.target===e._lastElement&&(t.preventDefault(),e._firstElement.focus());};}var t,e;return t=a,(e=[{key:"trap",value:function(){this._setElements(),this._init(),this._setFocusTrap();}},{key:"disable",value:function(){var e=this;this._focusableElements.forEach(function(t){t.removeEventListener(e._event,e.handler);}),this._toggler&&this._toggler.focus();}},{key:"update",value:function(){this._setElements(),this._setFocusTrap();}},{key:"_init",value:function(){var n=this;window.addEventListener("keydown",function t(e){n._firstElement&&"Tab"===e.key&&!n._focusableElements.includes(e.target)&&(e.preventDefault(),n._firstElement.focus(),window.removeEventListener("keydown",t));});}},{key:"_filterVisible",value:function(t){return t.filter(function(t){if(!(e=t)||(!(e.style&&e.parentNode&&e.parentNode.style)||(n=getComputedStyle(e),e=getComputedStyle(e.parentNode),"none"===n.display||"none"===e.display||"hidden"===n.visibility)))return !1;for(var e,n,r=x.parents(t,"*"),o=0;o<r.length;o++){var i=window.getComputedStyle(r[o]);if(i&&("none"===i.display||"hidden"===i.visibility))return !1}return !0})}},{key:"_setElements",value:function(){this._focusableElements=x.find(this._selector,this._element),this._onlyVisible&&(this._focusableElements=this._filterVisible(this._focusableElements)),this._firstElement=this._focusableElements[0],this._lastElement=this._focusableElements[this._focusableElements.length-1];}},{key:"_setFocusTrap",value:function(){var n=this;this._focusableElements.forEach(function(t,e){e===n._focusableElements.length-1?t.addEventListener(n._event,n.handler):t.removeEventListener(n._event,n.handler);});}}])&&Uc(t.prototype,e),Object.defineProperty(t,"prototype",{writable:!1}),a}();t(188);function O(t){return t.getDate()}function Kc(t){return t.getDay()}function k(t){return t.getMonth()}function C(t){return t.getFullYear()}function $c(t){return Qc((t=t).getFullYear(),t.getMonth()+1,0).getDate()}function Xc(){return new Date}function y(t,e){return D(t,12*e)}function D(t,e){e=Qc(t.getFullYear(),t.getMonth()+e,t.getDate());return O(t)!==O(e)&&e.setDate(0),e}function Gc(t,e){return Qc(t.getFullYear(),t.getMonth(),t.getDate()+e)}function Qc(t,e,n){e=new Date(t,e,n);return 0<=t&&t<100&&e.setFullYear(e.getFullYear()-1900),e}function Zc(t){t=t.split("-");return Qc(t[0],t[1],t[2])}function Jc(t,e){return t.setHours(0,0,0,0),e.setHours(0,0,0,0),t.getTime()===e.getTime()}function ts(t,e){return ((C(t)-function(t,e,n){var r=0;n?(n=C(n),r=n-t+1):e&&(r=C(e));return r}())%e+e)%e}function es(t,e,n,r,o){return "days"===n?C(t)===C(e)&&k(t)===k(e):"months"===n?C(t)===C(e):"years"===n&&(C(e)>=o&&C(e)<=r)}function ns(t,e,n,r,o,i,a,c,s){var u,l,f=k(t),d=C(t),p=O(t),h=Kc(t),v=Va("div"),a="\n      ".concat((p=p,h=h,u=f,'\n      <div class="datepicker-header">\n        <div class="datepicker-title">\n          <span class="datepicker-title-text">'.concat((l=o).title,'</span>\n        </div>\n        <div class="datepicker-date">\n          <span class="datepicker-date-text">').concat(l.weekdaysShort[h],", ").concat(l.monthsShort[u]," ").concat(p,"</span>\n        </div>\n      </div>\n    ")),"\n      ").concat((h=t,l=e,u=n,p=r,t=i,e=a,n=c,'\n    <div class="datepicker-main">\n      '.concat(function(t,e,n){return '\n    <div class="datepicker-date-controls">\n      <button class="datepicker-view-change-button" aria-label="'.concat(n.switchToMultiYearViewLabel,'">\n        ').concat(n.monthsFull[t]," ").concat(e,'\n      </button>\n      <div class="datepicker-arrow-controls">\n        <button class="datepicker-previous-button" aria-label="').concat(n.prevMonthLabel,'"></button>\n        <button class="datepicker-next-button" aria-label="').concat(n.nextMonthLabel,'"></button>\n      </div>\n    </div>\n    ')}(f,r=d,i=o),'\n      <div class="datepicker-view" tabindex="0">\n        ').concat(function(t,e,n,r,o,i,a,c,s){n="days"===i.view?rs(t,n,i):"months"===i.view?os(e,r,o,i,a):is(t,r,0,c,s);return n}(h,r,l,u,p,i,t,e,n),"\n      </div>\n      ").concat(function(t){return '\n        <div class="datepicker-footer">\n          <button class="datepicker-footer-btn datepicker-clear-btn" aria-label="'.concat(t.clearBtnLabel,'">').concat(t.clearBtnText,'</button>\n          <button class="datepicker-footer-btn datepicker-cancel-btn" aria-label="').concat(t.cancelBtnLabel,'">').concat(t.cancelBtnText,'</button>\n          <button class="datepicker-footer-btn datepicker-ok-btn" aria-label="').concat(t.okBtnLabel,'">').concat(t.okBtnText,"</button>\n        </div>\n      ")}(i),"\n    </div>\n  ")),"\n    ");return S.addClass(v,"datepicker-modal-container"),S.addClass(v,"datepicker-modal-container-".concat(s)),v.innerHTML=a,v}function rs(t,e,n){t=function(t,e,n){for(var r=[],o=k(t),i=k(D(t,-1)),a=k(D(t,1)),c=C(t),s=function(t,e,n){return n=0<(n=n.startDay)?7-n:0,7<=(t=new Date(t,e).getDay()+n)?t-7:t}(c,o,n),u=$c(t),l=$c(D(t,-1)),f=1,d=!1,p=1;p<7;p++){var h=[];if(1===p){for(var v=l-s+1;v<=l;v++){var y=Qc(c,i,v);h.push({date:y,currentMonth:d,isSelected:e&&Jc(y,e),isToday:Jc(y,Xc()),dayNumber:O(y)});}d=!0;for(var m=7-h.length,g=0;g<m;g++){var b=Qc(c,o,f);h.push({date:b,currentMonth:d,isSelected:e&&Jc(b,e),isToday:Jc(b,Xc()),dayNumber:O(b)}),f++;}}else for(var _=1;_<8;_++){u<f&&(d=!(f=1));var w=Qc(c,d?o:a,f);h.push({date:w,currentMonth:d,isSelected:e&&Jc(w,e),isToday:Jc(w,Xc()),dayNumber:O(w)}),f++;}r.push(h);}return r}(t,e,n),e=n.weekdaysNarrow,e="\n      <tr>\n        ".concat(e.map(function(t,e){return '<th class="datepicker-day-heading" scope="col" aria-label="'.concat(n.weekdaysFull[e],'">').concat(t,"</th>")}).join(""),"\n      </tr>\n    "),t=t.map(function(t){return "\n        <tr>\n          ".concat(t.map(function(t){return '\n              <td\n              class="datepicker-cell datepicker-small-cell datepicker-day-cell\n              '.concat(t.currentMonth?"":"disabled"," ").concat(t.disabled?"disabled":"","\n              ").concat(t.isToday&&"current"," ").concat(t.isSelected&&"selected",'"\n              data-mdb-date="').concat(C(t.date),"-").concat(k(t.date),"-").concat(O(t.date),'"\n              aria-label="').concat(t.date,'"\n              aria-selected="').concat(t.isSelected,'">\n                <div\n                  class="datepicker-cell-content datepicker-small-cell-content"\n                  style="').concat(t.currentMonth?"display: block":"display: none",'">\n                  ').concat(t.dayNumber,"\n                  </div>\n              </td>\n            ")}).join(""),"\n        </tr>\n      ")}).join("");return '\n      <table class="datepicker-table">\n        <thead>\n          '.concat(e,'\n        </thead>\n        <tbody class="datepicker-table-body">\n         ').concat(t,"\n        </tbody>\n      </table>\n    ")}function os(n,r,o,i,t){var t=function(t,e){for(var n=[],r=[],o=0;o<t.monthsShort.length;o++){var i;r.push(t.monthsShort[o]),r.length===e&&(i=r,n.push(i),r=[]);}return n}(i,t),a=k(Xc()),t="\n      ".concat(t.map(function(t){return "\n          <tr>\n            ".concat(t.map(function(t){var e=i.monthsShort.indexOf(t);return '\n                <td class="datepicker-cell datepicker-large-cell datepicker-month-cell '.concat(e===o&&n===r?"selected":""," ").concat(e===a?"current":"",'" data-mdb-month="').concat(e,'" data-mdb-year="').concat(n,'" aria-label="').concat(t,", ").concat(n,'">\n                  <div class="datepicker-cell-content datepicker-large-cell-content">').concat(t,"</div>\n                </td>\n              ")}).join(""),"\n          </tr>\n        ")}).join(""),"\n    ");return '\n      <table class="datepicker-table">\n        <tbody class="datepicker-table-body">\n         '.concat(t,"\n        </tbody>\n      </table>\n    ")}function is(t,e,n,r,o){var t=function(t,e,n){for(var r=[],o=C(t),t=ts(t,e),i=o-t,a=[],c=0;c<e;c++){var s;a.push(i+c),a.length===n&&(s=a,r.push(s),a=[]);}return r}(t,r,o),i=C(Xc()),r="\n    ".concat(t.map(function(t){return "\n        <tr>\n          ".concat(t.map(function(t){return '\n              <td class="datepicker-cell datepicker-large-cell datepicker-year-cell '.concat(t===e?"selected":""," ").concat(t===i?"current":"",'" aria-label="').concat(t,'" data-mdb-year="').concat(t,'">\n                <div class="datepicker-cell-content datepicker-large-cell-content">').concat(t,"</div>\n              </td>\n            ")}).join(""),"\n        </tr>\n      ")}).join(""),"\n  ");return '\n      <table class="datepicker-table">\n        <tbody class="datepicker-table-body">\n        '.concat(r,"\n        </tbody>\n      </table>\n    ")}function as(t){return (as="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function cs(e,t){var n,r=Object.keys(e);return Object.getOwnPropertySymbols&&(n=Object.getOwnPropertySymbols(e),t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)),r}function ss(r){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?cs(Object(o),!0).forEach(function(t){var e,n;e=r,n=o[t=t],t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n;}):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(o)):cs(Object(o)).forEach(function(t){Object.defineProperty(r,t,Object.getOwnPropertyDescriptor(o,t));});}return r}function us(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r);}}var ls="datepicker",fs="mdb.datepicker",ds=".".concat(fs),ps="close".concat(ds),hs="open".concat(ds),vs="dateChange".concat(ds),ys="click".concat(ds).concat(".data-api"),ms={title:"Select date",monthsFull:["January","February","March","April","May","June","July","August","September","October","November","December"],monthsShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],weekdaysFull:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],weekdaysShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],weekdaysNarrow:["S","M","T","W","T","F","S"],okBtnText:"Ok",clearBtnText:"Clear",cancelBtnText:"Cancel",okBtnLabel:"Confirm selection",clearBtnLabel:"Clear selection",cancelBtnLabel:"Cancel selection",nextMonthLabel:"Next month",prevMonthLabel:"Previous month",nextYearLabel:"Next year",prevYearLabel:"Previous year",nextMultiYearLabel:"Next 24 years",prevMultiYearLabel:"Previous 24 years",switchToMultiYearViewLabel:"Choose year and month",switchToMonthViewLabel:"Choose date",switchToDayViewLabel:"Choose date",startDate:null,startDay:0,format:"dd/mm/yyyy",view:"days",toggleButton:!0,disableToggleButton:!1,disableInput:!1},gs={title:"string",monthsFull:"array",monthsShort:"array",weekdaysFull:"array",weekdaysShort:"array",weekdaysNarrow:"array",okBtnText:"string",clearBtnText:"string",cancelBtnText:"string",okBtnLabel:"string",clearBtnLabel:"string",cancelBtnLabel:"string",nextMonthLabel:"string",prevMonthLabel:"string",nextYearLabel:"string",prevYearLabel:"string",nextMultiYearLabel:"string",prevMultiYearLabel:"string",switchToMultiYearViewLabel:"string",switchToMonthViewLabel:"string",switchToDayViewLabel:"string",startDate:"(null|string|date)",startDay:"number",format:"string",view:"string",toggleButton:"boolean",disableToggleButton:"boolean",disableInput:"boolean"},bs=function(){function n(t,e){if(!(this instanceof n))throw new TypeError("Cannot call a class as a function");this._element=t,this._input=x.findOne("input",this._element),this._options=this._getConfig(e),this._activeDate=new Date,this._selectedDate=null,this._selectedYear=null,this._selectedMonth=null,this._view=this._options.view,this._popper=null,this._focusTrap=null,this._isOpen=!1,this._toggleButtonId=Ra("datepicker-toggle-"),this._element&&v.setData(t,fs,this),this._init(),this.toggleButton&&this._options.disableToggle&&(this.toggleButton.disabled="true"),this._options.disableInput&&(this._input.disabled="true");}var t,e,r;return t=n,r=[{key:"NAME",get:function(){return ls}},{key:"getInstance",value:function(t){return v.getData(t,fs)}},{key:"getOrCreateInstance",value:function(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};return this.getInstance(t)||new this(t,"object"===as(e)?e:null)}}],(e=[{key:"container",get:function(){return x.findOne(".datepicker-modal-container".concat("-",this._toggleButtonId))||x.findOne(".datepicker-dropdown-container".concat("-",this._toggleButtonId))}},{key:"options",get:function(){return this._options}},{key:"activeCell",get:function(){var t;return "days"===this._view&&(t=this._getActiveDayCell()),"months"===this._view&&(t=this._getActiveMonthCell()),t="years"===this._view?this._getActiveYearCell():t}},{key:"activeDay",get:function(){return O(this._activeDate)}},{key:"activeMonth",get:function(){return k(this._activeDate)}},{key:"activeYear",get:function(){return C(this._activeDate)}},{key:"firstYearInView",get:function(){return this.activeYear-ts(this._activeDate,24)}},{key:"lastYearInView",get:function(){return this.firstYearInView+24-1}},{key:"viewChangeButton",get:function(){return x.findOne(".datepicker-view-change-button",this.container)}},{key:"previousButton",get:function(){return x.findOne(".datepicker-previous-button",this.container)}},{key:"nextButton",get:function(){return x.findOne(".datepicker-next-button",this.container)}},{key:"okButton",get:function(){return x.findOne(".datepicker-ok-btn",this.container)}},{key:"cancelButton",get:function(){return x.findOne(".datepicker-cancel-btn",this.container)}},{key:"clearButton",get:function(){return x.findOne(".datepicker-clear-btn",this.container)}},{key:"datesContainer",get:function(){return x.findOne(".datepicker-view",this.container)}},{key:"toggleButton",get:function(){return x.findOne(".datepicker-toggle-button",this._element)}},{key:"_getConfig",value:function(t){var e=S.getDataAttributes(this._element);return t=ss(ss(ss({},ms),e),t),Ba(ls,t,gs),t.startDay&&0!==t.startDay&&(e=this._getNewDaysOrderArray(t),t.weekdaysNarrow=e),t}},{key:"_getNewDaysOrderArray",value:function(t){var e=t.startDay,t=t.weekdaysNarrow;return t.slice(e).concat(t.slice(0,e))}},{key:"_init",value:function(){!this.toggleButton&&this._options.toggleButton&&(this._appendToggleButton(),(this._input.readOnly||this._input.disabled)&&(this.toggleButton.style.pointerEvents="none")),this._listenToUserInput(),this._listenToToggleClick(),this._listenToToggleKeydown();}},{key:"_appendToggleButton",value:function(){var t='\n    <button id="'.concat(this._toggleButtonId,'" type="button" class="datepicker-toggle-button" data-mdb-toggle="datepicker">\n      <i class="far fa-calendar datepicker-toggle-icon"></i>\n    </button>\n  ');this._element.insertAdjacentHTML("beforeend",t),S.addClass(this._input,"form-icon-trailing");}},{key:"open",value:function(){var t,e,n=this;this._input.readOnly||this._input.disabled||(t=_.trigger(this._element,hs),this._isOpen||t.defaultPrevented||(this._setInitialDate(),t=Va("div"),S.addClass(t,"datepicker-backdrop"),t=t,e=ns(this._activeDate,this._selectedDate,this._selectedYear,this._selectedMonth,this._options,4,24,24,this._toggleButtonId),this._openModal(t,e),S.addClass(this.container,"animation"),S.addClass(this.container,"fade-in"),this.container.style.animationDuration="300ms",S.addClass(t,"animation"),S.addClass(t,"fade-in"),t.style.animationDuration="150ms",this._setFocusTrap(this.container),this._listenToDateSelection(),this._addControlsListeners(),this._listenToEscapeClick(),this._listenToKeyboardNavigation(),this._listenToDatesContainerFocus(),this._listenToDatesContainerBlur(),this._asyncFocusDatesContainer(),this._updateViewControlsAndAttributes(this._view),this._isOpen=!0,setTimeout(function(){n._listenToOutsideClick();},0)));}},{key:"_openDropdown",value:function(t){this._popper=en(this._input,t,{placement:"bottom-start"}),document.body.appendChild(t);}},{key:"_openModal",value:function(t,e){document.body.appendChild(t),document.body.appendChild(e);window.innerWidth>document.documentElement.clientWidth&&(document.body.style.overflow="hidden",document.body.style.paddingRight="15px");}},{key:"_setFocusTrap",value:function(t){this._focusTrap=new qc(t,{event:"keydown",condition:function(t){return "Tab"===t.key}}),this._focusTrap.trap();}},{key:"_listenToUserInput",value:function(){var e=this;_.on(this._input,"input",function(t){e._handleUserInput(t.target.value);});}},{key:"_listenToToggleClick",value:function(){var e=this;_.on(this._element,ys,'[data-mdb-toggle="datepicker"]',function(t){t.preventDefault(),e.open();});}},{key:"_listenToToggleKeydown",value:function(){var e=this;_.on(this._element,"keydown",'[data-mdb-toggle="datepicker"]',function(t){13!==t.keyCode||e._isOpen||e.open();});}},{key:"_listenToDateSelection",value:function(){var r=this;_.on(this.datesContainer,"click",function(t){var e,n=("DIV"===t.target.nodeName?t.target.parentNode:t.target).dataset,t="DIV"===t.target.nodeName?t.target.parentNode:t.target;n.mdbDate&&r._pickDay(n.mdbDate,t),n.mdbMonth&&n.mdbYear&&(t=parseInt(n.mdbMonth,10),e=parseInt(n.mdbYear,10),r._pickMonth(t,e)),n.mdbYear&&!n.mdbMonth&&(t=parseInt(n.mdbYear,10),r._pickYear(t)),r._updateHeaderDate(r._activeDate,r._options.monthsShort,r._options.weekdaysShort);});}},{key:"_updateHeaderDate",value:function(t,e,n){var r=x.findOne(".datepicker-date-text",this.container),o=k(t),i=O(t),t=Kc(t);r.innerHTML="".concat(n[t],", ").concat(e[o]," ").concat(i);}},{key:"_addControlsListeners",value:function(){var t=this;_.on(this.nextButton,"click",function(){"days"===t._view?t.nextMonth():"years"===t._view?t.nextYears():t.nextYear();}),_.on(this.previousButton,"click",function(){"days"===t._view?t.previousMonth():"years"===t._view?t.previousYears():t.previousYear();}),_.on(this.viewChangeButton,"click",function(){"days"===t._view?t._changeView("years"):"years"!==t._view&&"months"!==t._view||t._changeView("days");}),this._listenToFooterButtonsClick();}},{key:"_listenToFooterButtonsClick",value:function(){var t=this;_.on(this.okButton,"click",function(){return t.handleOk()}),_.on(this.cancelButton,"click",function(){return t.handleCancel()}),_.on(this.clearButton,"click",function(){return t.handleClear()});}},{key:"_listenToOutsideClick",value:function(){var n=this;_.on(document,ys,function(t){var e=t.target===n.container,t=n.container&&n.container.contains(t.target);e||t||n.close();});}},{key:"_listenToEscapeClick",value:function(){var e=this;_.on(document,"keydown",function(t){27===t.keyCode&&e._isOpen&&e.close();});}},{key:"_listenToKeyboardNavigation",value:function(){var e=this;_.on(this.datesContainer,"keydown",function(t){e._handleKeydown(t);});}},{key:"_listenToDatesContainerFocus",value:function(){var t=this;_.on(this.datesContainer,"focus",function(){t._focusActiveCell(t.activeCell);});}},{key:"_listenToDatesContainerBlur",value:function(){var t=this;_.on(this.datesContainer,"blur",function(){t._removeCurrentFocusStyles();});}},{key:"_handleKeydown",value:function(t){"days"===this._view&&this._handleDaysViewKeydown(t),"months"===this._view&&this._handleMonthsViewKeydown(t),"years"===this._view&&this._handleYearsViewKeydown(t);}},{key:"_handleDaysViewKeydown",value:function(t){var e=this._activeDate,n=this.activeCell;switch(t.keyCode){case 37:this._activeDate=Gc(this._activeDate,-1);break;case 39:this._activeDate=Gc(this._activeDate,1);break;case 38:this._activeDate=Gc(this._activeDate,-7);break;case 40:this._activeDate=Gc(this._activeDate,7);break;case 36:this._activeDate=Gc(this._activeDate,1-O(this._activeDate));break;case 35:this._activeDate=Gc(this._activeDate,$c(this._activeDate)-O(this._activeDate));break;case 33:this._activeDate=D(this._activeDate,-1);break;case 34:this._activeDate=D(this._activeDate,1);break;case 13:case 32:return this._selectDate(this._activeDate),void t.preventDefault();default:return}es(e,this._activeDate,this._view,24,0)||this._changeView("days"),this._removeHighlightFromCell(n),this._focusActiveCell(this.activeCell),t.preventDefault();}},{key:"_asyncFocusDatesContainer",value:function(){var t=this;setTimeout(function(){t.datesContainer.focus();},0);}},{key:"_focusActiveCell",value:function(t){t&&S.addClass(t,"focused");}},{key:"_removeHighlightFromCell",value:function(t){t&&t.classList.remove("focused");}},{key:"_getActiveDayCell",value:function(){var e=this,t=x.find("td",this.datesContainer);return Array.from(t).find(function(t){return Jc(Zc(t.dataset.mdbDate),e._activeDate)})}},{key:"_handleMonthsViewKeydown",value:function(t){var e=this._activeDate,n=this.activeCell;switch(t.keyCode){case 37:this._activeDate=D(this._activeDate,-1);break;case 39:this._activeDate=D(this._activeDate,1);break;case 38:this._activeDate=D(this._activeDate,-4);break;case 40:this._activeDate=D(this._activeDate,4);break;case 36:this._activeDate=D(this._activeDate,-this.activeMonth);break;case 35:this._activeDate=D(this._activeDate,11-this.activeMonth);break;case 33:this._activeDate=y(this._activeDate,-1);break;case 34:this._activeDate=y(this._activeDate,1);break;case 13:case 32:return void this._selectMonth(this.activeMonth);default:return}es(e,this._activeDate,this._view,24,0)||this._changeView("months"),this._removeHighlightFromCell(n),this._focusActiveCell(this.activeCell),t.preventDefault();}},{key:"_getActiveMonthCell",value:function(){var n=this,t=x.find("td",this.datesContainer);return Array.from(t).find(function(t){var e=parseInt(t.dataset.mdbYear,10),t=parseInt(t.dataset.mdbMonth,10);return e===n.activeYear&&t===n.activeMonth})}},{key:"_handleYearsViewKeydown",value:function(t){var e=this._activeDate,n=this.activeCell;switch(t.keyCode){case 37:this._activeDate=y(this._activeDate,-1);break;case 39:this._activeDate=y(this._activeDate,1);break;case 38:this._activeDate=y(this._activeDate,-4);break;case 40:this._activeDate=y(this._activeDate,4);break;case 36:this._activeDate=y(this._activeDate,-ts(this._activeDate,24));break;case 35:this._activeDate=y(this._activeDate,24-ts(this._activeDate,24)-1);break;case 33:this._activeDate=y(this._activeDate,-24);break;case 34:this._activeDate=y(this._activeDate,24);break;case 13:case 32:return void this._selectYear(this.activeYear);default:return}es(e,this._activeDate,this._view,24,0)||this._changeView("years"),this._removeHighlightFromCell(n),this._focusActiveCell(this.activeCell),t.preventDefault();}},{key:"_getActiveYearCell",value:function(){var e=this,t=x.find("td",this.datesContainer);return Array.from(t).find(function(t){return parseInt(t.dataset.mdbYear,10)===e.activeYear})}},{key:"_setInitialDate",value:function(){this._input.value?this._handleUserInput(this._input.value):this._options.startDate?this._activeDate=new Date(this._options.startDate):this._activeDate=new Date;}},{key:"close",value:function(){var t=_.trigger(this._element,ps);this._isOpen&&!t.defaultPrevented&&(this._removeDatepickerListeners(),S.addClass(this.container,"animation"),S.addClass(this.container,"fade-out"),this._closeModal(),this._isOpen=!1,this._view=this._options.view,(this.toggleButton||this._input).focus());}},{key:"_closeDropdown",value:function(){var t=this,e=x.findOne(".datepicker-dropdown-container");e.addEventListener("animationend",function(){e&&document.body.removeChild(e),t._popper&&t._popper.destroy();}),this._removeFocusTrap();}},{key:"_closeModal",value:function(){var t=x.findOne(".datepicker-backdrop"),e=x.findOne(".datepicker-modal-container");S.addClass(t,"animation"),S.addClass(t,"fade-out"),e&&t&&t.addEventListener("animationend",function(){document.body.removeChild(t),document.body.removeChild(e),document.body.style.overflow="",document.body.style.paddingRight="";});}},{key:"_removeFocusTrap",value:function(){this._focusTrap&&(this._focusTrap.disable(),this._focusTrap=null);}},{key:"_removeDatepickerListeners",value:function(){_.off(this.nextButton,"click"),_.off(this.previousButton,"click"),_.off(this.viewChangeButton,"click"),_.off(this.okButton,"click"),_.off(this.cancelButton,"click"),_.off(this.clearButton,"click"),_.off(this.datesContainer,"click"),_.off(this.datesContainer,"keydown"),_.off(this.datesContainer,"focus"),_.off(this.datesContainer,"blur"),_.off(document,ys);}},{key:"dispose",value:function(){this._isOpen&&this.close(),this._removeInputAndToggleListeners();var t=x.findOne("#".concat(this._toggleButtonId));t&&this._element.removeChild(t),v.removeData(this._element,fs),this._element=null,this._input=null,this._options=null,this._activeDate=null,this._selectedDate=null,this._selectedYear=null,this._selectedMonth=null,this._view=null,this._popper=null,this._focusTrap=null;}},{key:"_removeInputAndToggleListeners",value:function(){_.off(this._input,"input"),_.off(this._element,ys,'[data-mdb-toggle="datepicker"]'),_.off(this._element,"keydown",'[data-mdb-toggle="datepicker"]');}},{key:"handleOk",value:function(){this._confirmSelection(this._selectedDate),this.close();}},{key:"_selectDate",value:function(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:this.activeCell;this._removeCurrentSelectionStyles(),this._removeCurrentFocusStyles(),this._addSelectedStyles(e),this._selectedDate=t;}},{key:"_selectYear",value:function(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:this.activeCell;this._removeCurrentSelectionStyles(),this._removeCurrentFocusStyles(),this._addSelectedStyles(e),this._selectedYear=t,this._asyncChangeView("months");}},{key:"_selectMonth",value:function(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:this.activeCell;this._removeCurrentSelectionStyles(),this._removeCurrentFocusStyles(),this._addSelectedStyles(e),this._selectedMonth=t,this._asyncChangeView("days");}},{key:"_removeSelectedStyles",value:function(t){t&&t.classList.remove("selected");}},{key:"_addSelectedStyles",value:function(t){t&&S.addClass(t,"selected");}},{key:"_confirmSelection",value:function(t){var e;t&&(e=this.formatDate(t),this._input.value=e,S.addClass(this._input,"active"),_.trigger(this._element,vs,{date:t}));}},{key:"handleCancel",value:function(){this._selectedDate=null,this._selectedYear=null,this._selectedMonth=null,this.close();}},{key:"handleClear",value:function(){this._selectedDate=null,this._selectedMonth=null,this._selectedYear=null,this._removeCurrentSelectionStyles(),this._input.value="",this._input.classList.remove("active"),this._setInitialDate(),this._changeView("days");}},{key:"_removeCurrentSelectionStyles",value:function(){var t=x.findOne(".selected",this.container);t&&t.classList.remove("selected");}},{key:"_removeCurrentFocusStyles",value:function(){var t=x.findOne(".focused",this.container);t&&t.classList.remove("focused");}},{key:"formatDate",value:function(t){var e=O(t),n=this._addLeadingZero(O(t)),r=this._options.weekdaysShort[Kc(t)],o=this._options.weekdaysFull[Kc(t)],i=k(t)+1,a=this._addLeadingZero(k(t)+1),c=this._options.monthsShort[k(t)],s=this._options.monthsFull[k(t)],u=2===C(t).toString().length?C(t):C(t).toString().slice(2,4),l=C(t),t=this._options.format.split(/(d{1,4}|m{1,4}|y{4}|yy|!.)/g),f="";return t.forEach(function(t){switch(t){case"dddd":t=t.replace(t,o);break;case"ddd":t=t.replace(t,r);break;case"dd":t=t.replace(t,n);break;case"d":t=t.replace(t,e);break;case"mmmm":t=t.replace(t,s);break;case"mmm":t=t.replace(t,c);break;case"mm":t=t.replace(t,a);break;case"m":t=t.replace(t,i);break;case"yyyy":t=t.replace(t,l);break;case"yy":t=t.replace(t,u);}f+=t;}),f}},{key:"_addLeadingZero",value:function(t){return parseInt(t,10)<10?"0".concat(t):t}},{key:"_pickDay",value:function(t,e){t=Zc(t);this._activeDate=t,this._selectDate(t,e);}},{key:"_pickYear",value:function(t){var e=Qc(t,this.activeMonth,this.activeDay);this._activeDate=e,this._selectedDate=e,this._selectYear(t);}},{key:"_pickMonth",value:function(t,e){e=Qc(e,t,this.activeDay);this._activeDate=e,this._selectMonth(t);}},{key:"nextMonth",value:function(){var t,e=rs(t=D(this._activeDate,1),this._selectedDate,this._options);this._activeDate=t,this.viewChangeButton.textContent="".concat(this._options.monthsFull[this.activeMonth]," ").concat(this.activeYear),this.datesContainer.innerHTML=e;}},{key:"previousMonth",value:function(){var t=D(this._activeDate,-1),t=rs(this._activeDate=t,this._selectedDate,this._options);this.viewChangeButton.textContent="".concat(this._options.monthsFull[this.activeMonth]," ").concat(this.activeYear),this.datesContainer.innerHTML=t;}},{key:"nextYear",value:function(){var t=y(this._activeDate,1),t=(this._activeDate=t,this.viewChangeButton.textContent="".concat(this.activeYear),os(this.activeYear,this._selectedYear,this._selectedMonth,this._options,4));this.datesContainer.innerHTML=t;}},{key:"previousYear",value:function(){var t=y(this._activeDate,-1),t=(this._activeDate=t,this.viewChangeButton.textContent="".concat(this.activeYear),os(this.activeYear,this._selectedYear,this._selectedMonth,this._options,4));this.datesContainer.innerHTML=t;}},{key:"nextYears",value:function(){var t=y(this._activeDate,24),t=is(this._activeDate=t,this._selectedYear,this._options,24,4);this.viewChangeButton.textContent="".concat(this.firstYearInView," - ").concat(this.lastYearInView),this.datesContainer.innerHTML=t;}},{key:"previousYears",value:function(){var t=y(this._activeDate,-24),t=is(this._activeDate=t,this._selectedYear,this._options,24,4);this.viewChangeButton.textContent="".concat(this.firstYearInView," - ").concat(this.lastYearInView),this.datesContainer.innerHTML=t;}},{key:"_asyncChangeView",value:function(t){var e=this;setTimeout(function(){e._changeView(t);},0);}},{key:"_changeView",value:function(t){this._view=t,this.datesContainer.blur(),"days"===t&&(this.datesContainer.innerHTML=rs(this._activeDate,this._selectedDate,this._options)),"months"===t&&(this.datesContainer.innerHTML=os(this.activeYear,this._selectedYear,this._selectedMonth,this._options,4)),"years"===t&&(this.datesContainer.innerHTML=is(this._activeDate,this._selectedYear,this._options,24,4)),this.datesContainer.focus(),this._updateViewControlsAndAttributes(t);}},{key:"_updateViewControlsAndAttributes",value:function(t){"days"===t&&(this.viewChangeButton.textContent="".concat(this._options.monthsFull[this.activeMonth]," ").concat(this.activeYear),this.viewChangeButton.setAttribute("aria-label",this._options.switchToMultiYearViewLabel),this.previousButton.setAttribute("aria-label",this._options.prevMonthLabel),this.nextButton.setAttribute("aria-label",this._options.nextMonthLabel)),"months"===t&&(this.viewChangeButton.textContent="".concat(this.activeYear),this.viewChangeButton.setAttribute("aria-label",this._options.switchToDayViewLabel),this.previousButton.setAttribute("aria-label",this._options.prevYearLabel),this.nextButton.setAttribute("aria-label",this._options.nextYearLabel)),"years"===t&&(this.viewChangeButton.textContent="".concat(this.firstYearInView," - ").concat(this.lastYearInView),this.viewChangeButton.setAttribute("aria-label",this._options.switchToMonthViewLabel),this.previousButton.setAttribute("aria-label",this._options.prevMultiYearLabel),this.nextButton.setAttribute("aria-label",this._options.nextMultiYearLabel));}},{key:"_handleUserInput",value:function(t){var e=this._getDelimeters(this._options.format),t=this._parseDate(t,this._options.format,e);Number.isNaN(t.getTime())?(this._activeDate=new Date,this._selectedDate=null,this._selectedMonth=null,this._selectedYear=null):(this._activeDate=t,this._selectedDate=t);}},{key:"_getDelimeters",value:function(t){return t.match(/[^(dmy)]{1,}/g)}},{key:"_parseDate",value:function(t,e,n){for(var n=n[0]!==n[1]?n[0]+n[1]:n[0],n=new RegExp("[".concat(n,"]")),r=t.split(n),o=e.split(n),t=-1!==e.indexOf("mmm"),i=[],a=0;a<o.length;a++)-1!==o[a].indexOf("yy")&&(i[0]={value:r[a],format:o[a]}),-1!==o[a].indexOf("m")&&(i[1]={value:r[a],format:o[a]}),-1!==o[a].indexOf("d")&&o[a].length<=2&&(i[2]={value:r[a],format:o[a]});n=-1!==e.indexOf("mmmm")?this._options.monthsFull:this._options.monthsShort;return Qc(Number(i[0].value),t?this.getMonthNumberByMonthName(i[1].value,n):Number(i[1].value)-1,Number(i[2].value))}},{key:"getMonthNumberByMonthName",value:function(e,t){return t.findIndex(function(t){return t===e})}}])&&us(t.prototype,e),r&&us(t,r),Object.defineProperty(t,"prototype",{writable:!1}),n}(),ds=bs;x.find(".datepicker").forEach(function(t){var e=bs.getInstance(t);e||new bs(t);}),t(189),t(191);function _s(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var r,o,i=[],a=!0,c=!1;try{for(n=n.call(t);!(a=(r=n.next()).done)&&(i.push(r.value),!e||i.length!==e);a=!0);}catch(t){c=!0,o=t;}finally{try{a||null==n.return||n.return();}finally{if(c)throw o}}return i}}(t,e)||function(t,e){if(t){if("string"==typeof t)return ws(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return "Map"===(n="Object"===n&&t.constructor?t.constructor.name:n)||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ws(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ws(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function Os(t,e){var n=t.clientX,r=t.clientY,t=t.touches,o=2<arguments.length&&void 0!==arguments[2]&&arguments[2],e=e.getBoundingClientRect(),i=e.left,e=e.top,a={};return o&&t?o&&0<Object.keys(t).length&&(a={x:t[0].clientX-i,y:t[0].clientY-e}):a={x:n-i,y:r-e},a}function ks(){return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)}var Cs=function(t){return t&&"[object Date]"===Object.prototype.toString.call(t)&&!isNaN(t)},P=function(t){t=(!(1<arguments.length&&void 0!==arguments[1])||arguments[1]?t.value:t).replace(/:/gi," ");return t.split(" ")};function Ss(t){return (Ss="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function xs(e,t){var n,r=Object.keys(e);return Object.getOwnPropertySymbols&&(n=Object.getOwnPropertySymbols(e),t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)),r}function Es(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?xs(Object(n),!0).forEach(function(t){Ms(e,t,n[t]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):xs(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t));});}return e}function js(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var r,o,i=[],a=!0,c=!1;try{for(n=n.call(t);!(a=(r=n.next()).done)&&(i.push(r.value),!e||i.length!==e);a=!0);}catch(t){c=!0,o=t;}finally{try{a||null==n.return||n.return();}finally{if(c)throw o}}return i}}(t,e)||As(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ts(t){return function(t){if(Array.isArray(t))return Ds(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||As(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function As(t,e){if(t){if("string"==typeof t)return Ds(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return "Map"===(n="Object"===n&&t.constructor?t.constructor.name:n)||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ds(t,e):void 0}}function Ds(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function Ps(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r);}}function Ms(t,e,n){e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n;}var m="timepicker",Is="mdb.".concat(m),M="active",Ls="".concat(m,"-am"),Ns="".concat(m,"-cancel"),Rs="".concat(m,"-clear"),Bs="".concat(m,"-submit"),Hs="".concat(m,"-circle"),Fs="".concat(m,"-clock-animation"),Vs="".concat(m,"-clock"),Ys="".concat(m,"-clock-inner"),Ws="".concat(m,"-clock-wrapper"),zs=".".concat(m,"-current"),Us="".concat(m,"-current-inline"),qs="".concat(m,"-hand-pointer"),Ks="".concat(m,"-hour"),$s="".concat(m,"-hour-mode"),Xs="".concat(m,"-icon-down"),Gs="".concat(m,"-icon-inline-hour"),Qs="".concat(m,"-icon-inline-minute"),Zs="".concat(m,"-icon-up"),Js="".concat(m,"-inline-hour-icons"),tu="".concat(m,"-middle-dot"),eu="".concat(m,"-minute"),nu="".concat(m,"-modal"),ru="".concat(m,"-pm"),ou="".concat(m,"-tips-element"),iu="".concat(m,"-time-tips-hours"),au="".concat(m,"-tips-inner-element"),cu="".concat(m,"-time-tips-inner"),I="".concat(m,"-time-tips-minutes"),su="".concat(m,"-transform"),uu="".concat(m,"-wrapper"),lu="".concat(m,"-input"),fu={appendValidationInfo:!0,bodyID:"",cancelLabel:"Cancel",clearLabel:"Clear",closeModalOnBackdropClick:!0,closeModalOnMinutesClick:!1,defaultTime:"",disabled:!1,focusInputAfterApprove:!1,footerID:"",format12:!0,headID:"",increment:!1,invalidLabel:"Invalid Time Format",maxHour:"",minHour:"",maxTime:"",minTime:"",modalID:"",okLabel:"Ok",overflowHidden:!0,pickerID:"",readOnly:!1,showClearBtn:!0,switchHoursToMinutesOnClick:!0,iconClass:"far fa-clock fa-sm timepicker-icon",withIcon:!0,pmLabel:"PM",amLabel:"AM"},du={appendValidationInfo:"boolean",bodyID:"string",cancelLabel:"string",clearLabel:"string",closeModalOnBackdropClick:"boolean",closeModalOnMinutesClick:"boolean",disabled:"boolean",footerID:"string",format12:"boolean",headID:"string",increment:"boolean",invalidLabel:"string",maxHour:"(string|number)",minHour:"(string|number)",modalID:"string",okLabel:"string",overflowHidden:"boolean",pickerID:"string",readOnly:"boolean",showClearBtn:"boolean",switchHoursToMinutesOnClick:"boolean",defaultTime:"(string|date|number)",iconClass:"string",withIcon:"boolean",pmLabel:"string",amLabel:"string"},pu=function(){function o(t){var C=this,e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},n=this,r=o;if(!(n instanceof r))throw new TypeError("Cannot call a class as a function");Ms(this,"_toggleBackgroundColorCircle",function(t){null!==C._modal.querySelector(".".concat(t,".").concat(M))?S.addStyle(C._circle,{backgroundColor:"#1976d2"}):S.addStyle(C._circle,{backgroundColor:"transparent"});}),Ms(this,"_toggleClassActive",function(t,e,n){var r=e.textContent,o=Ts(t).find(function(t){return Number(t)===Number(r)});return n.forEach(function(t){S.hasClass(t,"disabled")||(t.textContent===o?S.addClass(t,M):S.removeClass(t,M));})}),Ms(this,"_makeMinutesDegrees",function(t,e){var n=C._options.increment;return t=t<0?(e=Math.round(360+t/6)%60,360+6*Math.round(t/6)):(e=Math.round(t/6)%60,6*Math.round(t/6)),n&&(t=30*Math.round(t/30),60===(e=6*Math.round(t/6)/6)&&(e="00")),{degrees:t=360<=t?0:t,minute:e,addDegrees:n?30:6}}),Ms(this,"_makeHourDegrees",function(t,e,n){var r=C._options,o=r.maxHour,r=r.minHour;if(t&&(S.hasClass(t,Ys)||S.hasClass(t,cu)||S.hasClass(t,au)?e<0?(n=Math.round(360+e/30)%24,e=360+e):12===(n=Math.round(e/30)+12)&&(n="00"):e<0?(n=Math.round(360+e/30)%12,e=360+e):(0===(n=Math.round(e/30)%12)||12<n)&&(n=12),360<=e&&(e=0),!(""!==o&&n>Number(o)||""!==r&&n<Number(r))))return {degrees:e,hour:n,addDegrees:30}}),Ms(this,"_makeInnerHoursDegrees",function(t,e){return t<0?(e=Math.round(360+t/30)%24,t=360+t):12===(e=Math.round(t/30)+12)&&(e="00"),{degrees:t,hour:e,addDegrees:30}}),Ms(this,"_getAppendClock",function(){var a,c,s,u=0<arguments.length&&void 0!==arguments[0]?arguments[0]:[],t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:".".concat(Vs),l=2<arguments.length?arguments[2]:void 0,e=C._options,f=e.maxHour,d=e.minHour,p=e.minTime,h=e.maxTime,n=e.inline,e=e.format12,r=js(P(h,!1),3),v=r[0],y=r[1],m=r[2],r=js(P(p,!1),3),g=r[0],b=r[1],_=r[2],w=(n||e&&C._isInvalidTimeFormat&&!S.hasClass(C._AM,"active")&&S.addClass(C._PM,"active"),x.findOne(".".concat($s,".").concat(M))),O=x.findOne(t),k=360/u.length;null!==O&&(a=(O.offsetWidth-32)/2,c=(O.offsetHeight-32)/2,s=a-4,Ts(u).forEach(function(t,e){var e=e*k*(Math.PI/180),n=Va("span"),r=Va("span"),o=(r.innerHTML=t,S.addClass(n,l),n.offsetWidth),i=n.offsetHeight;return S.addStyle(n,{left:"".concat(a+Math.sin(e)*s-o,"px"),bottom:"".concat(c+Math.cos(e)*s-i,"px")}),u.includes("05")&&S.addClass(n,"".concat(I)),u.includes("13")?r.classList.add(au):r.classList.add(ou),S.hasClass(n,"".concat(I))?S.hasClass(n,"".concat(I))&&(""!==h&&Number(t)>Number(y)&&Number(C._hour.textContent)>=Number(v)&&S.addClass(n,"disabled"),""!==p&&Number(t)<Number(b)&&Number(C._hour.textContent)<=Number(g)&&S.addClass(n,"disabled"),""!==h&&void 0!==m&&("PM"===m&&"PM"===w.textContent?Number(t)>Number(y)&&Number(C._hour.textContent)>=Number(v)&&S.addClass(n,"disabled"):"PM"===m&&"AM"===w.textContent&&S.removeClass(n,"disabled"),("AM"===m&&"PM"===w.textContent||"AM"===m&&"AM"===w.textContent&&Number(C._hour.textContent)>=Number(v)&&Number(t)>Number(y))&&S.addClass(n,"disabled")),""!==p&&void 0!==_&&("PM"===_&&"PM"===w.textContent?(Number(t)<Number(b)&&Number(C._hour.textContent)===Number(g)||Number(C._hour.textContent)<Number(g))&&S.addClass(n,"disabled"):"PM"===_&&"AM"===w.textContent&&S.addClass(n,"disabled"),"AM"===_&&"PM"===w.textContent?S.removeClass(n,"disabled"):"AM"===_&&"AM"===w.textContent&&(Number(C._hour.textContent)===Number(g)&&Number(t)<Number(b)||Number(C._hour.textContent)<Number(g))&&S.addClass(n,"disabled"))):(""!==f&&Number(t)>Number(f)&&S.addClass(n,"disabled"),""!==d&&Number(t)<Number(d)&&S.addClass(n,"disabled"),""!==h&&(void 0!==m?("PM"===m&&"PM"===w.textContent&&(C._isAmEnabled=!1,C._isPmEnabled=!0,Number(t)>Number(v)&&S.addClass(n,"disabled")),"AM"===m&&"PM"===w.textContent?(C._isAmEnabled=!1,C._isPmEnabled=!0,S.addClass(n,"disabled")):"AM"===m&&"AM"===w.textContent&&(C._isAmEnabled=!0,C._isPmEnabled=!1,Number(t)>Number(v)&&S.addClass(n,"disabled"))):Number(t)>Number(v)&&S.addClass(n,"disabled")),""!==p&&Number(t)<Number(g)&&S.addClass(n,"disabled"),""!==p&&void 0!==_&&("PM"===_&&"PM"===w.textContent?(C._isAmEnabled=!1,C._isPmEnabled=!0,Number(t)<Number(g)&&S.addClass(n,"disabled")):"PM"===_&&"AM"===w.textContent&&(C._isAmEnabled=!0,C._isPmEnabled=!1,S.addClass(n,"disabled")),"AM"===_&&"PM"===w.textContent?(C._isAmEnabled=!1,C._isPmEnabled=!0,S.removeClass(n,"disabled")):"AM"===_&&"AM"===w.textContent&&(C._isAmEnabled=!0,C._isPmEnabled=!1,Number(t)<Number(g)&&S.addClass(n,"disabled")))),n.appendChild(r),O.appendChild(n)}));}),this._element=t,this._element&&v.setData(t,Is,this),this._document=document,this._options=this._getConfig(e),this._currentTime=null,this._toggleButtonId=Ra("timepicker-toggle-"),this.hoursArray=["12","1","2","3","4","5","6","7","8","9","10","11"],this.innerHours=["00","13","14","15","16","17","18","19","20","21","22","23"],this.minutesArray=["00","05","10","15","20","25","30","35","40","45","50","55"],this.input=x.findOne("input",this._element),this.dataWithIcon=t.dataset.withIcon,this.dataToggle=t.dataset.toggle,this.customIcon=x.findOne(".timepicker-toggle-button",this._element),this._checkToggleButton(),this.inputFormatShow=x.findOne("[data-mdb-timepicker-format24]",this._element),this.inputFormat=null===this.inputFormatShow?"":Object.values(this.inputFormatShow.dataset)[0],this.elementToggle=x.findOne("[data-mdb-toggle]",this._element),this.toggleElement=Object.values(t.querySelector("[data-mdb-toggle]").dataset)[0],this._hour=null,this._minutes=null,this._AM=null,this._PM=null,this._wrapper=null,this._modal=null,this._hand=null,this._circle=null,this._focusTrap=null,this._popper=null,this._interval=null,this._inputValue=""!==this._options.defaultTime?this._options.defaultTime:this.input.value,this._options.format12&&(this._currentTime=function(t){var e,n,r;if(""!==t)return Cs(t)?(e=t.getHours(),0===(e%=12)&&(r="AM"),e=e||12,void 0===r&&(r=12<=e?"PM":"AM"),n=(n=t.getMinutes())<10?"0".concat(n):n):(e=(t=_s(P(t,!1),3))[0],n=t[1],r=t[2],0===(e%=12)&&(r="AM"),e=e||12,void 0===r&&(r=12<=e?"PM":"AM")),{hours:e,minutes:n,amOrPm:r}}(this._inputValue)),this._options.readOnly&&this.input.setAttribute("readonly",!0),this.init(),this._isHours=!0,this._isMinutes=!1,this._isInvalidTimeFormat=!1,this._isMouseMove=!1,this._isInner=!1,this._isAmEnabled=!1,this._isPmEnabled=!1,this._objWithDataOnChange={degrees:null};}var t,e,n;return t=o,n=[{key:"NAME",get:function(){return m}},{key:"getInstance",value:function(t){return v.getData(t,Is)}},{key:"getOrCreateInstance",value:function(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};return this.getInstance(t)||new this(t,"object"===Ss(e)?e:null)}}],(e=[{key:"init",value:function(){var t,e,n,r;S.addClass(this.input,lu),void 0!==this._currentTime?(n=(t=this._currentTime).hours,r=t.minutes,t=t.amOrPm,e=Number(n)<10?0:"",n="".concat(e).concat(Number(n),":").concat(r),r=t,this.input.value="".concat(n," ").concat(r)):this.input.value=r=n=e="",0<this.input.value.length&&""!==this.input.value&&S.addClass(this.input,"active"),null===this._options&&null===this._element||(this._handleOpen(),this._listenToToggleKeydown());}},{key:"dispose",value:function(){this._removeModal(),null!==this._element&&v.removeData(this._element,Is),this._element=null,this._options=null,this.input=null,this._focusTrap=null,_.off(this._document,"click","[data-mdb-toggle='".concat(this.toggleElement,"']")),_.off(this._element,"keydown","[data-mdb-toggle='".concat(this.toggleElement,"']"));}},{key:"_checkToggleButton",value:function(){null===this.customIcon&&(void 0!==this.dataWithIcon&&(this._options.withIcon=null,"true"===this.dataWithIcon&&this._appendToggleButton(this._options)),this._options.withIcon&&this._appendToggleButton(this._options));}},{key:"_appendToggleButton",value:function(){var t=function(t,e){t=t.iconClass;return '\n  <button id="'.concat(e,'" tabindex="0" type="button" class="timepicker-toggle-button" data-mdb-toggle="timepicker"  >\n    <i class="').concat(t,'"></i>\n  </button>\n')}(this._options,this._toggleButtonId);this.input.insertAdjacentHTML("afterend",t);}},{key:"_getDomElements",value:function(){this._hour=x.findOne(".".concat(Ks)),this._minutes=x.findOne(".".concat(eu)),this._AM=x.findOne(".".concat(Ls)),this._PM=x.findOne(".".concat(ru)),this._wrapper=x.findOne(".".concat(uu)),this._modal=x.findOne(".".concat(nu)),this._hand=x.findOne(".".concat(qs)),this._circle=x.findOne(".".concat(Hs)),this._clock=x.findOne(".".concat(Vs)),this._clockInner=x.findOne(".".concat(Ys));}},{key:"_handlerMaxMinHoursOptions",value:function(t,e,n,r,o,i){var a=""!==n?30*n:"",c=""!==r?30*r:"";if(""!==n&&""!==r){if((t=t<=0?360+t:t)<=a&&c<=t)return e()}else if(""!==r){if(t<=0&&(t=360+t),(c=12<Number(r)?30*r-c:c)<=t&&void 0===i)return e();if(void 0!==i){if("PM"===i&&this._isAmEnabled)return;if("PM"===i&&this._isPmEnabled&&c<=t)return e();if("AM"===i&&this._isPmEnabled)return e();if("AM"===i&&this._isAmEnabled&&c<=t)return e()}}else {if(""===n)return e();if((t=t<=0?360+t:t)<=a&&void 0===o)return e();if(void 0!==o){if("AM"===o&&this._isPmEnabled)return;if("AM"===o&&this._isAmEnabled&&t<=a)return e();if("PM"===o&&this._isPmEnabled){if(t<=a)return e()}else if("PM"===o&&this._isAmEnabled)return e()}}return e}},{key:"_handleKeyboard",value:function(){var b=this;_.on(this._document,"keydown","",function(t){var e,n=b._options,r=n.maxHour,o=n.minHour,n=n.increment,i=null!==x.findOne(".".concat(I)),a=null!==x.findOne(".".concat(cu)),c=Number(b._hand.style.transform.replace(/[^\d-]/g,"")),s=x.find(".".concat(I),b._modal),u=x.find(".".concat(iu),b._modal),l=x.find(".".concat(cu),b._modal),f=""!==r?Number(r):"",d=""!==o?Number(o):"",p=b._makeHourDegrees(t.target,c,void 0).hour,h=b._makeHourDegrees(t.target,c,void 0),v=h.degrees,y=h.addDegrees,h=b._makeMinutesDegrees(c,void 0),m=h.minute,h=h.degrees,g=b._makeMinutesDegrees(c,void 0).addDegrees,c=b._makeInnerHoursDegrees(c,void 0).hour;27===t.keyCode&&(e=x.findOne(".".concat(Ns),b._modal),_.trigger(e,"click")),i?(38===t.keyCode&&(S.addStyle(b._hand,{transform:"rotateZ(".concat(h+=g,"deg)")}),m+=1,n&&"0014"===(m+=4)&&(m=5),b._minutes.textContent=b._setHourOrMinute(59<m?0:m),b._toggleClassActive(b.minutesArray,b._minutes,s),b._toggleBackgroundColorCircle("".concat(I))),40===t.keyCode&&(S.addStyle(b._hand,{transform:"rotateZ(".concat(h-=g,"deg)")}),n?m-=5:--m,-1===m?m=59:-5===m&&(m=55),b._minutes.textContent=b._setHourOrMinute(m),b._toggleClassActive(b.minutesArray,b._minutes,s),b._toggleBackgroundColorCircle("".concat(I)))):(a&&(39===t.keyCode&&(b._isInner=!1,S.addStyle(b._hand,{height:"calc(40% + 1px)"}),b._hour.textContent=b._setHourOrMinute(12<p?1:p),b._toggleClassActive(b.hoursArray,b._hour,u),b._toggleClassActive(b.innerHours,b._hour,l)),37===t.keyCode&&(b._isInner=!0,S.addStyle(b._hand,{height:"21.5%"}),b._hour.textContent=b._setHourOrMinute(24<=c||"00"===c?0:c),b._toggleClassActive(b.innerHours,b._hour,l),b._toggleClassActive(b.hoursArray,b._hour-1,u))),38===t.keyCode&&(b._handlerMaxMinHoursOptions(v+30,function(){return S.addStyle(b._hand,{transform:"rotateZ(".concat(v+y,"deg)")})},r,o),b._isInner?(24===(c+=1)?c=0:25!==c&&"001"!==c||(c=13),b._hour.textContent=b._setHourOrMinute(c),b._toggleClassActive(b.innerHours,b._hour,l)):(p+=1,""!==r&&""!==o?r<p?p=f:p<o&&(p=d):""!==r&&""===o?r<p&&(p=f):""===r&&""!==o&&12<=p&&(p=12),b._hour.textContent=b._setHourOrMinute(12<p?1:p),b._toggleClassActive(b.hoursArray,b._hour,u))),40===t.keyCode&&(b._handlerMaxMinHoursOptions(v-30,function(){return S.addStyle(b._hand,{transform:"rotateZ(".concat(v-y,"deg)")})},r,o),b._isInner?(12===--c?c=0:-1===c&&(c=23),b._hour.textContent=b._setHourOrMinute(c),b._toggleClassActive(b.innerHours,b._hour,l)):(--p,""!==r&&""!==o?f<p?p=f:p<d&&(p=d):""===r&&""!==o?p<=d&&(p=d):""!==r&&""===o&&p<=1&&(p=1),b._hour.textContent=b._setHourOrMinute(0===p?12:p),b._toggleClassActive(b.hoursArray,b._hour,u))));});}},{key:"_setActiveClassToTipsOnOpen",value:function(t){var e=this;if(!this._isInvalidTimeFormat){for(var n=arguments.length,r=new Array(1<n?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];[].concat(r).filter(function(t){return "PM"===t?S.addClass(e._PM,M):"AM"===t?S.addClass(e._AM,M):(S.removeClass(e._AM,M),S.removeClass(e._PM,M)),t});var i=x.find(".".concat(iu),this._modal);this._addActiveClassToTip(i,t);}}},{key:"_setTipsAndTimesDependOnInputValue",value:function(t,e){var n=this._options,r=n.inline,n=n.format12;this._isInvalidTimeFormat?(this._hour.textContent="12",this._minutes.textContent="00",r||S.addStyle(this._hand,{transform:"rotateZ(0deg)"}),n&&S.addClass(this._PM,M)):(n=12<t?30*t-360:30*t,this._hour.textContent=t,this._minutes.textContent=e,r||(S.addStyle(this._hand,{transform:"rotateZ(".concat(n,"deg)")}),S.addStyle(this._circle,{backgroundColor:"#1976d2"}),(12<Number(t)||"00"===t)&&S.addStyle(this._hand,{height:"21.5%"})));}},{key:"_listenToToggleKeydown",value:function(){var e=this;_.on(this._element,"keydown","[data-mdb-toggle='".concat(this.toggleElement,"']"),function(t){13===t.keyCode&&(t.preventDefault(),_.trigger(e.elementToggle,"click"));});}},{key:"_handleOpen",value:function(){var b=this;wc(this._element,"click","[data-mdb-toggle='".concat(this.toggleElement,"']"),function(g){var t;null!==b._options&&(t=null!==S.getDataAttribute(b.input,"toggle")?200:0,setTimeout(function(){S.addStyle(b.elementToggle,{pointerEvents:"none"}),b.elementToggle.blur(),h=""===P(b.input)[0]?["12","00","PM"]:P(b.input);var t,e,n,r,o,i,a,c,s,u,l=b._options,f=l.modalID,d=l.inline,p=l.format12,l=l.overflowHidden,h=js(h,3),v=h[0],y=h[1],h=h[2],m=Va("div");(12<Number(v)||"00"===v)&&(b._isInner=!0),b.input.blur(),g.target.blur(),m.innerHTML=(t=b._options,e=t.okLabel,n=t.cancelLabel,u=t.headID,r=t.footerID,o=t.bodyID,s=t.pickerID,i=t.clearLabel,a=t.showClearBtn,c=t.amLabel,t=t.pmLabel,"<div id='".concat(s,"' class='timepicker-wrapper h-full flex items-center justify-center flex-col fixed'>\n      <div class=\"flex items-center justify-center flex-col timepicker-container\">\n        <div class=\"flex flex-col timepicker-elements justify-around\">\n        <div id='").concat(u,"' class='timepicker-head flex flex-row items-center justify-center'>\n        <div class='timepicker-head-content flex w-100 justify-evenly'>\n            <div class=\"timepicker-current-wrapper\">\n              <span class=\"relative h-100\">\n                <button type='button' class='timepicker-current timepicker-hour active ripple' tabindex=\"0\">21</button>\n              </span>\n              <button type='button' class='timepicker-dot' disabled>:</button>\n            <span class=\"relative h-100\">\n              <button type='button' class='timepicker-current timepicker-minute ripple' tabindex=\"0\">21</button>\n            </span>\n            </div>\n            <div class=\"flex flex-col justify-center timepicker-mode-wrapper\">\n              <button type='button' class=\"timepicker-hour-mode timepicker-am ripple\" tabindex=\"0\">").concat(c,'</button>\n              <button class="timepicker-hour-mode timepicker-pm ripple" tabindex="0">').concat(t,"</button>\n            </div>\n        </div>\n      </div>\n      <div id='").concat(o,"' class='timepicker-clock-wrapper flex justify-center flex-col items-center'>\n        <div class='timepicker-clock'>\n          <span class='timepicker-middle-dot absolute'></span>\n          <div class='timepicker-hand-pointer absolute'>\n            <div class='timepicker-circle absolute'></div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div id='").concat(r,"' class='timepicker-footer'>\n      <div class=\"w-full flex justify-between\">\n        ").concat(a?"<button type='button' class='timepicker-button timepicker-clear ripple' tabindex=\"0\">".concat(i,"</button>"):"","\n        <button type='button' class='timepicker-button timepicker-cancel ripple' tabindex=\"0\">").concat(n,"</button>\n        <button type='button' class='timepicker-button timepicker-submit ripple' tabindex=\"0\">").concat(e,"</button>\n      </div>\n    </div>\n  </div>\n</div>")),S.addClass(m,nu),m.setAttribute("role","dialog"),m.setAttribute("tabIndex","-1"),m.setAttribute("id",f),d&&(b._popper=en(b.input,m,{placement:"bottom-start"})),b._document.body.appendChild(m),b._getDomElements(),b._toggleBackdropAnimation(),b._setActiveClassToTipsOnOpen(v,y,h),b._appendTimes(),b._setActiveClassToTipsOnOpen(v,y,h),b._setTipsAndTimesDependOnInputValue(v,y),""===b.input.value&&(s=x.find(".".concat(iu),b._modal),p&&S.addClass(b._PM,M),b._hour.textContent="12",b._minutes.textContent="00",b._addActiveClassToTip(s,Number(b._hour.textContent))),b._handleSwitchTimeMode(),b._handleOkButton(),b._handleClose(),d?(b._handleHoverInlineBtn(),b._handleDocumentClickInline(),b._handleInlineClicks()):(b._handleSwitchHourMinute(),b._handleClockClick(),b._handleKeyboard(),S.addStyle(b._hour,{pointerEvents:"none"}),S.addStyle(b._minutes,{pointerEvents:""})),l&&(u=window.innerWidth>document.documentElement.clientWidth,S.addStyle(b._document.body,{overflow:"hidden"}),!ks()&&u&&S.addStyle(b._document.body,{paddingRight:"15px"})),b._focusTrap=new qc(b._wrapper,{event:"keydown",condition:function(t){return "Tab"===t.key}}),b._focusTrap.trap();},t));});}},{key:"_handleInlineClicks",value:function(){var d=this;wc(this._modal,"click mousedown mouseup touchstart touchend contextmenu",".".concat(Zs,", .").concat(Xs),function(t){function e(t){t=f(t),d._hour.textContent=d._setHourOrMinute(t);}function n(t){t=l(t),d._minutes.textContent=d._setHourOrMinute(t);}function r(){e(s+=1);}function o(){n(u+=1);}function i(){e(--s);}function a(){n(--u);}var c=t.target,t=t.type,s=Number(d._hour.textContent),u=Number(d._minutes.textContent),l=function(t){return 59<t?t=0:t<0&&(t=59),t},f=function(t){return 12<t?t=1:t<1&&(t=12),t=12<t?1:t};S.hasClass(c,Zs)?S.hasClass(c.parentNode,Js)?"mousedown"===t||"touchstart"===t?(clearInterval(d._interval),d._interval=setInterval(r,100)):"mouseup"===t||"touchend"===t||"contextmenu"===t?clearInterval(d._interval):r():"mousedown"===t||"touchstart"===t?(clearInterval(d._interval),d._interval=setInterval(o,100)):"mouseup"===t||"touchend"===t||"contextmenu"===t?clearInterval(d._interval):o():S.hasClass(c,Xs)&&(S.hasClass(c.parentNode,Js)?"mousedown"===t||"touchstart"===t?(clearInterval(d._interval),d._interval=setInterval(i,100)):"mouseup"===t||"touchend"===t?clearInterval(d._interval):i():"mousedown"===t||"touchstart"===t?(clearInterval(d._interval),d._interval=setInterval(a,100)):"mouseup"===t||"touchend"===t?clearInterval(d._interval):a());});}},{key:"_handleClose",value:function(){var a=this;_.on(this._modal,"click",".".concat(uu,", .").concat(Ns,", .").concat(Rs),function(t){function e(){S.addStyle(a.elementToggle,{pointerEvents:"auto"}),a._toggleBackdropAnimation(!0),a._removeModal(),a._focusTrap.disable(),a._focusTrap=null,a.elementToggle?a.elementToggle.focus():a.input&&a.input.focus();}var n,r,o,t=t.target,i=a._options.closeModalOnBackdropClick;S.hasClass(t,Rs)?(a.input.value="",S.removeClass(a.input,"active"),o=""===P(a.input)[0]?["12","00","PM"]:P(a.input),n=(o=js(o,3))[0],r=o[1],o=o[2],a._setTipsAndTimesDependOnInputValue("12","00"),a._setActiveClassToTipsOnOpen(n,r,o),a._hour.click()):(S.hasClass(t,Ns)||S.hasClass(t,uu)&&i)&&e();});}},{key:"showValueInput",value:function(){return this.input.value}},{key:"_handleOkButton",value:function(){var o=this;wc(this._modal,"click",".".concat(Bs),function(){var t=o._options,e=t.readOnly,t=t.focusInputAfterApprove,n=o._document.querySelector(".".concat($s,".").concat(M)),r="".concat(o._hour.textContent,":").concat(o._minutes.textContent);S.addClass(o.input,"active"),S.addStyle(o.elementToggle,{pointerEvents:"auto"}),o._isInvalidTimeFormat&&S.removeClass(o.input,"is-invalid"),!e&&t&&o.input.focus(),S.addStyle(o.elementToggle,{pointerEvents:"auto"}),o.input.value=null===n?"".concat(r," PM"):"".concat(r," ").concat(n.textContent),o._toggleBackdropAnimation(!0),o._removeModal(),_.trigger(o.input,"input.mdb.timepicker");});}},{key:"_handleHoverInlineBtn",value:function(){var o=this;wc(this._modal,"mouseover mouseleave",".".concat(Us),function(t){var e=t.type,t=t.target,n=x.find(".".concat(Gs),o._modal),r=x.find(".".concat(Qs),o._modal);"mouseover"===e?S.hasClass(t,Ks)?n.forEach(function(t){return S.addClass(t,M)}):r.forEach(function(t){return S.addClass(t,M)}):S.hasClass(t,Ks)?n.forEach(function(t){return S.removeClass(t,M)}):r.forEach(function(t){return S.removeClass(t,M)});});}},{key:"_handleDocumentClickInline",value:function(){var e=this;_.on(document,"click",function(t){t=t.target;!e._modal||e._modal.contains(t)||S.hasClass(t,"timepicker-icon")||(clearInterval(e._interval),S.addStyle(e.elementToggle,{pointerEvents:"auto"}),e._removeModal());});}},{key:"_handleSwitchHourMinute",value:function(){var t,e,c=this;t="click",e=zs,_.on(document,t,e,function(t){t=t.target;S.hasClass(t,"active")||(document.querySelectorAll(e).forEach(function(t){S.hasClass(t,"active")&&S.removeClass(t,"active");}),S.addClass(t,"active"));}),_.on(this._modal,"click",zs,function(){function e(t,e){r.forEach(function(t){return t.remove()}),n.forEach(function(t){return t.remove()}),S.addClass(c._hand,su),setTimeout(function(){S.removeClass(c._hand,su);},401),c._getAppendClock(t,".".concat(Vs),e),setTimeout(function(){var t,e;t=x.find(".".concat(iu),c._modal),e=x.find(".".concat(I),c._modal),c._addActiveClassToTip(t,i),c._addActiveClassToTip(e,a);},401);}var t=x.find(zs,c._modal),n=x.find(".".concat(I),c._modal),r=x.find(".".concat(iu),c._modal),o=x.find(".".concat(cu),c._modal),i=Number(c._hour.textContent),a=Number(c._minutes.textContent);t.forEach(function(t){S.hasClass(t,M)&&(S.hasClass(t,eu)?(S.addClass(c._hand,su),S.addStyle(c._hand,{transform:"rotateZ(".concat(6*c._minutes.textContent,"deg)"),height:"calc(40% + 1px)"}),0<o.length&&o.forEach(function(t){return t.remove()}),e(c.minutesArray,"".concat(I)),c._hour.style.pointerEvents="",c._minutes.style.pointerEvents="none"):S.hasClass(t,Ks)&&(S.addStyle(c._hand,{transform:"rotateZ(".concat(30*c._hour.textContent,"deg)")}),12<Number(c._hour.textContent)?(S.addStyle(c._hand,{transform:"rotateZ(".concat(30*c._hour.textContent-360,"deg)"),height:"21.5%"}),12<Number(c._hour.textContent)&&S.addStyle(c._hand,{height:"21.5%"})):S.addStyle(c._hand,{height:"calc(40% + 1px)"}),0<o.length&&o.forEach(function(t){return t.remove()}),e(c.hoursArray,"".concat(iu)),S.addStyle(c._hour,{pointerEvents:"none"}),S.addStyle(c._minutes,{pointerEvents:""})));});});}},{key:"_handleSwitchTimeMode",value:function(){_.on(document,"click",".".concat($s),function(t){t=t.target;S.hasClass(t,M)||(x.find(".".concat($s)).forEach(function(t){S.hasClass(t,M)&&S.removeClass(t,M);}),S.addClass(t,M));});}},{key:"_handleClockClick",value:function(){var y=this,m=x.findOne(".".concat(Ws));wc(document,"mousedown mouseup mousemove mouseleave mouseover touchstart touchmove touchend","",function(t){ks()||t.preventDefault();var e=y._options,n=e.maxHour,e=e.minHour,r=t.type,o=t.target,i=y._options,a=i.closeModalOnMinutesClick,i=i.switchHoursToMinutesOnClick,c=null!==x.findOne(".".concat(I),y._modal),s=null!==x.findOne(".".concat(iu),y._modal),u=null!==x.findOne(".".concat(cu),y._modal),l=x.find(".".concat(I),y._modal),f=Os(t,m),d=m.offsetWidth/2,f=Math.atan2(f.y-d,f.x-d),p=(ks()&&(h=Os(t,m,!0),f=Math.atan2(h.y-d,h.x-d)),null);if("mousedown"===r||"mousemove"===r||"touchmove"===r||"touchstart"===r?"mousedown"!==r&&"touchstart"!==r&&"touchmove"!==r||(S.hasClass(o,Ws)||S.hasClass(o,Vs)||S.hasClass(o,I)||S.hasClass(o,Ys)||S.hasClass(o,cu)||S.hasClass(o,iu)||S.hasClass(o,Hs)||S.hasClass(o,qs)||S.hasClass(o,tu)||S.hasClass(o,ou)||S.hasClass(o,au))&&(y._isMouseMove=!0,ks()&&t.touches&&(h=t.touches[0].clientX,d=t.touches[0].clientY,p=document.elementFromPoint(h,d))):"mouseup"!==r&&"touchend"!==r||(y._isMouseMove=!1,(S.hasClass(o,Vs)||S.hasClass(o,Ys)||S.hasClass(o,cu)||S.hasClass(o,iu)||S.hasClass(o,Hs)||S.hasClass(o,qs)||S.hasClass(o,tu)||S.hasClass(o,ou)||S.hasClass(o,au))&&(s||u)&&i&&_.trigger(y._minutes,"click"),c&&a&&(h=x.findOne(".".concat(Bs),y._modal),_.trigger(h,"click"))),c){d=Math.trunc(180*f/Math.PI)+90,r=y._makeMinutesDegrees(d,void 0),i=r.degrees,a=r.minute;if(void 0===y._handlerMaxMinMinutesOptions(i,a))return;var h=y._handlerMaxMinMinutesOptions(i,a),c=h.degrees,d=h.minute;if(y._isMouseMove){if(S.addStyle(y._hand,{transform:"rotateZ(".concat(c,"deg)")}),void 0===d)return;y._minutes.textContent=10<=d||"00"===d?d:"0".concat(d),y._toggleClassActive(y.minutesArray,y._minutes,l),y._toggleBackgroundColorCircle("".concat(I)),y._objWithDataOnChange.degreesMinutes=c,y._objWithDataOnChange.minutes=d;}}if(s||u){var v=Math.trunc(180*f/Math.PI)+90,v=30*Math.round(v/30);if(S.addStyle(y._circle,{backgroundColor:"#1976d2"}),void 0===y._makeHourDegrees(o,v,void 0))return;y._objWithDataOnChange.degreesHours=v,y._handlerMaxMinHoursOptions(v,function(){var t,e;return ks()&&v?(t=(e=y._makeHourDegrees(p,v,void 0)).degrees,e=e.hour,y._handleMoveHand(p,e,t)):(t=(e=y._makeHourDegrees(o,v,void 0)).degrees,e=e.hour,y._handleMoveHand(o,e,t))},n,e);}t.stopPropagation();});}},{key:"_handleMoveHand",value:function(t,e,n){var r=x.find(".".concat(iu),this._modal),o=x.find(".".concat(cu),this._modal);this._isMouseMove&&(S.hasClass(t,Ys)||S.hasClass(t,cu)||S.hasClass(t,au)?S.addStyle(this._hand,{height:"21.5%"}):S.addStyle(this._hand,{height:"calc(40% + 1px)"}),S.addStyle(this._hand,{transform:"rotateZ(".concat(n,"deg)")}),this._hour.textContent=10<=e||"00"===e?e:"0".concat(e),this._toggleClassActive(this.hoursArray,this._hour,r),this._toggleClassActive(this.innerHours,this._hour,o),this._objWithDataOnChange.hour=10<=e||"00"===e?e:"0".concat(e));}},{key:"_handlerMaxMinMinutesOptions",value:function(t,e){var n=this._options,r=n.increment,o=n.maxTime,n=n.minTime,i=P(o,!1)[1],a=P(n,!1)[1],c=P(o,!1)[0],s=P(n,!1)[0],u=P(o,!1)[2],l=P(n,!1)[2],i=""!==i?6*i:"",a=""!==a?6*a:"";if(void 0===u&&void 0===l){if(""!==o&&""!==n){if(t<=i&&a<=t)return t}else if(""!==n&&Number(this._hour.textContent)<=Number(s)){if(t<=a-6)return t}else if(""!==o&&Number(this._hour.textContent)>=Number(c)&&i+6<=t)return t}else if(""!==n){if("PM"===l&&this._isAmEnabled)return;if("PM"===l&&this._isPmEnabled){if(Number(this._hour.textContent)<Number(s))return;if(Number(this._hour.textContent)<=Number(s)&&t<=a-6)return t}else if("AM"===l&&this._isAmEnabled){if(Number(this._hour.textContent)<Number(s))return;if(Number(this._hour.textContent)<=Number(s)&&t<=a-6)return t}}else if(""!==o){if("AM"===u&&this._isPmEnabled)return;if("PM"===u&&this._isPmEnabled){if(Number(this._hour.textContent)>=Number(c)&&i+6<=t)return t}else if("AM"===u&&this._isAmEnabled&&Number(this._hour.textContent)>=Number(c)&&i+6<=t)return t}return (t=r?30*Math.round(t/30):t)<=0?t=360+t:360<=t&&(t=0),{degrees:t,minute:e}}},{key:"_removeModal",value:function(){var t=this;setTimeout(function(){t._modal.remove(),S.addStyle(t._document.body,{overflow:""}),ks()||S.addStyle(t._document.body,{paddingRight:""});},300),Oc(this._document,"click keydown mousedown mouseup mousemove mouseleave mouseover touchmove touchend");}},{key:"_toggleBackdropAnimation",value:function(){0<arguments.length&&void 0!==arguments[0]&&arguments[0]?(S.addClass(this._wrapper,"animation"),S.addClass(this._wrapper,"fade-out"),this._wrapper.style.animationDuration="300ms"):(S.addClass(this._wrapper,"animation"),S.addClass(this._wrapper,"fade-in"),this._wrapper.style.animationDuration="300ms",this._options.inline||S.addClass(this._clock,Fs));}},{key:"_addActiveClassToTip",value:function(t,e){t.forEach(function(t){Number(t.textContent)===Number(e)&&S.addClass(t,M);});}},{key:"_setHourOrMinute",value:function(t){return t<10?"0".concat(t):t}},{key:"_appendTimes",value:function(){this._getAppendClock(this.hoursArray,".".concat(Vs),"".concat(iu));}},{key:"_getConfig",value:function(t){var e=S.getDataAttributes(this._element);return t=Es(Es(Es({},fu),e),t),Ba(m,t,du),t}}])&&Ps(t.prototype,e),n&&Ps(t,n),Object.defineProperty(t,"prototype",{writable:!1}),o}(),t=pu;function hu(t){return (hu="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function vu(e,t){var n,r=Object.keys(e);return Object.getOwnPropertySymbols&&(n=Object.getOwnPropertySymbols(e),t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)),r}function yu(r){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?vu(Object(o),!0).forEach(function(t){var e,n;e=r,n=o[t=t],t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n;}):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(o)):vu(Object(o)).forEach(function(t){Object.defineProperty(r,t,Object.getOwnPropertyDescriptor(o,t));});}return r}function mu(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r);}}_.on(window,"DOMContentLoaded",function(){x.find(".".concat(m)).forEach(function(t){var e=pu.getInstance(t);e||new pu(t);});});var g="stepper",gu="mdb.stepper",bu=".".concat(gu),_u="horizontal",wu="vertical",Ou={stepperType:"string",stepperLinear:"boolean",stepperNoEditable:"boolean",stepperActive:"string",stepperCompleted:"string",stepperInvalid:"string",stepperDisabled:"string",stepperVerticalBreakpoint:"number",stepperMobileBreakpoint:"number",stepperMobileBarBreakpoint:"number"},ku={stepperType:_u,stepperLinear:!1,stepperNoEditable:!1,stepperActive:"",stepperCompleted:"",stepperInvalid:"",stepperDisabled:"",stepperVerticalBreakpoint:0,stepperMobileBreakpoint:0,stepperMobileBarBreakpoint:4},Cu="mousedown".concat(bu),Su="keydown".concat(bu),xu="keyup".concat(bu),Eu="resize".concat(bu),ju="animationend",Tu="".concat(g,"-step"),w="".concat(g,"-head"),L="".concat(g,"-content"),Au="".concat(g,"-active"),Du="".concat(g,"-completed"),Pu="".concat(g,"-invalid"),Mu="".concat(g,"-disabled"),Iu="".concat(g,"-").concat(wu),Lu="".concat(g,"-content-hide"),Nu="".concat(g,"-").concat(_u),Ru=function(){function n(t,e){if(!(this instanceof n))throw new TypeError("Cannot call a class as a function");this._element=t,this._options=this._getConfig(e),this._elementHeight=0,this._steps=x.find(".".concat(Tu),this._element),this._currentView="",this._activeStepIndex=0,this._verticalStepperStyles=[],this._element&&(v.setData(t,gu,this),this._init());}var t,e,r;return t=n,r=[{key:"NAME",get:function(){return g}},{key:"getInstance",value:function(t){return v.getData(t,gu)}},{key:"getOrCreateInstance",value:function(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};return this.getInstance(t)||new this(t,"object"===hu(e)?e:null)}}],(e=[{key:"activeStep",get:function(){return this._steps[this._activeStepIndex]}},{key:"activeStepIndex",get:function(){return this._activeStepIndex}},{key:"dispose",value:function(){this._steps.forEach(function(t){_.off(t,Cu),_.off(t,Su);}),_.off(window,Eu),v.removeData(this._element,gu),this._element=null;}},{key:"changeStep",value:function(t){this._toggleStep(t);}},{key:"nextStep",value:function(){this._toggleStep(this._activeStepIndex+1);}},{key:"previousStep",value:function(){this._toggleStep(this._activeStepIndex-1);}},{key:"_init",value:function(){var t=x.findOne(".".concat(Au),this._element);t?this._activeStepIndex=this._steps.indexOf(t):this._toggleStepClass(this._activeStepIndex,"add",Au),this._toggleStepClass(this._activeStepIndex,"add",this._options.stepperActive),this._bindMouseDown(),this._bindKeysNavigation(),this._options.stepperType===wu?this._toggleVertical():this._toggleHorizontal(),(this._options.stepperVerticalBreakpoint||this._options.stepperMobileBreakpoint)&&this._toggleStepperView(),this._bindResize();}},{key:"_getConfig",value:function(t){var e=S.getDataAttributes(this._element);return t=yu(yu(yu({},ku),e),t),Ba(g,t,Ou),t}},{key:"_bindMouseDown",value:function(){var n=this;this._steps.forEach(function(t){t=x.findOne(".".concat(w),t);_.on(t,Cu,function(t){var e=x.parents(t.target,".".concat(Tu))[0],e=n._steps.indexOf(e);t.preventDefault(),n._toggleStep(e);});});}},{key:"_bindResize",value:function(){var t=this;_.on(window,Eu,function(){t._currentView===wu&&t._setSingleStepHeight(t.activeStep),t._currentView===_u&&t._setHeight(t.activeStep),(t._options.stepperVerticalBreakpoint||t._options.stepperMobileBreakpoint)&&t._toggleStepperView();});}},{key:"_toggleStepperView",value:function(){var e=this,t=this._options.stepperVerticalBreakpoint<window.innerWidth,n=this._options.stepperVerticalBreakpoint>window.innerWidth,r=this._options.stepperMobileBreakpoint>window.innerWidth;t&&this._currentView!==_u&&this._toggleHorizontal(),n&&!r&&this._currentView!==wu&&(this._steps.forEach(function(t){t=x.findOne(".".concat(L),t);e._resetStepperHeight(),e._showElement(t);}),this._toggleVertical());}},{key:"_toggleStep",value:function(t){this._activeStepIndex!==t&&(this._options.stepperNoEditable&&this._toggleDisabled(),this._showElement(x.findOne(".".concat(L),this._steps[t])),this._toggleActive(t),t>this._activeStepIndex&&this._toggleCompleted(this._activeStepIndex),this._currentView===_u?this._animateHorizontalStep(t):(this._animateVerticalStep(t),this._setSingleStepHeight(this._steps[t])),this._toggleStepTabIndex(x.findOne(".".concat(w),this.activeStep),x.findOne(".".concat(w),this._steps[t])),this._activeStepIndex=t);}},{key:"_resetStepperHeight",value:function(){this._element.style.height="";}},{key:"_setStepsHeight",value:function(){var n=this;this._steps.forEach(function(t){var t=x.findOne(".".concat(L),t),e=window.getComputedStyle(t),e=(n._verticalStepperStyles.push({paddingTop:parseFloat(e.paddingTop),paddingBottom:parseFloat(e.paddingBottom)}),t.scrollHeight);t.style.height="".concat(e,"px");});}},{key:"_setSingleStepHeight",value:function(t){var e=x.findOne(".".concat(L),t),n=this.activeStep===t,t=this._steps.indexOf(t),n=n?(e.style.height="",e.scrollHeight):e.scrollHeight+this._verticalStepperStyles[t].paddingTop+this._verticalStepperStyles[t].paddingBottom;e.style.height="".concat(n,"px");}},{key:"_toggleVertical",value:function(){this._currentView=wu,this._toggleStepperClass(Iu),this._setStepsHeight(),this._hideInactiveSteps();}},{key:"_toggleHorizontal",value:function(){this._currentView=_u,this._toggleStepperClass(Nu),this._setHeight(this.activeStep),this._hideInactiveSteps();}},{key:"_toggleStepperClass",value:function(t){this._element.classList.remove(Nu,Iu),this._element.classList.add(t),t!==Iu&&this._steps.forEach(function(t){x.findOne(".".concat(L),t).classList.remove(Lu);});}},{key:"_toggleStepClass",value:function(t,e,n){n&&this._steps[t].classList[e](n);}},{key:"_bindKeysNavigation",value:function(){var s=this;this._toggleStepTabIndex(!1,x.findOne(".".concat(w),this.activeStep)),this._steps.forEach(function(t){t=x.findOne(".".concat(w),t);_.on(t,Su,function(t){var e=x.parents(t.currentTarget,".".concat(Tu))[0],n=x.next(e,".".concat(Tu))[0],r=x.prev(e,".".concat(Tu))[0],o=x.findOne(".".concat(w),e),i=x.findOne(".".concat(w),s.activeStep),a=null,c=null;n&&(a=x.findOne(".".concat(w),n)),r&&(c=x.findOne(".".concat(w),r)),37===t.keyCode&&s._currentView!==wu&&(c?(s._toggleStepTabIndex(o,c),s._toggleOutlineStyles(o,c),c.focus()):a&&(s._toggleStepTabIndex(o,a),s._toggleOutlineStyles(o,a),a.focus())),39===t.keyCode&&s._currentView!==wu&&(a?(s._toggleStepTabIndex(o,a),s._toggleOutlineStyles(o,a),a.focus()):c&&(s._toggleStepTabIndex(o,c),s._toggleOutlineStyles(o,c),c.focus())),40===t.keyCode&&s._currentView===wu&&(t.preventDefault(),a&&(s._toggleStepTabIndex(o,a),s._toggleOutlineStyles(o,a),a.focus())),38===t.keyCode&&s._currentView===wu&&(t.preventDefault(),c&&(s._toggleStepTabIndex(o,c),s._toggleOutlineStyles(o,c),c.focus())),36===t.keyCode&&(n=x.findOne(".".concat(w),s._steps[0]),s._toggleStepTabIndex(o,n),s._toggleOutlineStyles(o,n),n.focus()),35===t.keyCode&&(r=s._steps[s._steps.length-1],a=x.findOne(".".concat(w),r),s._toggleStepTabIndex(o,a),s._toggleOutlineStyles(o,a),a.focus()),13!==t.keyCode&&32!==t.keyCode||(t.preventDefault(),s.changeStep(s._steps.indexOf(e))),9===t.keyCode&&(s._toggleStepTabIndex(o,i),s._toggleOutlineStyles(o,!1),i.focus());}),_.on(t,xu,function(t){var e=x.parents(t.currentTarget,".".concat(Tu))[0],e=x.findOne(".".concat(w),e),n=x.findOne(".".concat(w),s.activeStep);9===t.keyCode&&(s._toggleStepTabIndex(e,n),s._toggleOutlineStyles(!1,n),n.focus());});});}},{key:"_toggleStepTabIndex",value:function(t,e){t&&t.setAttribute("tabIndex",-1),e&&e.setAttribute("tabIndex",0);}},{key:"_toggleOutlineStyles",value:function(t,e){t&&(t.style.outline=""),e&&(e.style.outline="revert");}},{key:"_toggleDisabled",value:function(){this._toggleStepClass(this._activeStepIndex,"add",Mu),this._toggleStepClass(this._activeStepIndex,"add",this._options.stepperDisabled);}},{key:"_toggleActive",value:function(t){this._toggleStepClass(t,"add",Au),this._toggleStepClass(this._activeStepIndex,"remove",Au),this._toggleStepClass(t,"add",this._options.stepperActive),this._toggleStepClass(this._activeStepIndex,"remove",this._options.stepperActive);}},{key:"_toggleCompleted",value:function(t){this._toggleStepClass(t,"add",Du),this._toggleStepClass(t,"remove",Pu),this._toggleStepClass(t,"add",this._options.stepperCompleted),this._toggleStepClass(t,"remove",this._options.stepperInvalid);}},{key:"_hideInactiveSteps",value:function(){var e=this;this._steps.forEach(function(t){t.classList.contains(Au)||e._hideElement(x.findOne(".".concat(L),t));});}},{key:"_setHeight",value:function(t){var e=x.findOne(".".concat(L),t),n=getComputedStyle(e),t=x.findOne(".".concat(w),t),r=getComputedStyle(t),e=e.offsetHeight+parseFloat(n.marginTop)+parseFloat(n.marginBottom),n=t.offsetHeight+parseFloat(r.marginTop)+parseFloat(r.marginBottom);this._element.style.height="".concat(n+e,"px");}},{key:"_hideElement",value:function(t){x.parents(t,".".concat(Tu))[0].classList.contains(Au)||this._currentView===wu?t.classList.add(Lu):t.style.display="none";}},{key:"_showElement",value:function(t){this._currentView===wu?t.classList.remove(Lu):t.style.display="block";}},{key:"_animateHorizontalStep",value:function(n){var t,r=this,e=n>this._activeStepIndex,o=x.findOne(".".concat(L),this._steps[n]),i=x.findOne(".".concat(L),this.activeStep);this._steps.forEach(function(t,e){t=x.findOne(".".concat(L),t);r._clearStepAnimation(t),e!==n&&e!==r._activeStepIndex&&r._hideElement(t);}),e=e?(t="slide-out-left","slide-in-right"):(t="slide-out-right","slide-in-left"),i.classList.add(t,"animation","fast"),o.classList.add(e,"animation","fast"),this._setHeight(this._steps[n]),_.one(i,ju,function(t){r._clearStepAnimation(t.target),r._hideElement(t.target);}),_.one(o,ju,function(t){r._clearStepAnimation(t.target);});}},{key:"_animateVerticalStep",value:function(t){var t=x.findOne(".".concat(L),this._steps[t]),e=x.findOne(".".concat(L),this.activeStep);this._hideElement(e),this._showElement(t);}},{key:"_clearStepAnimation",value:function(t){t.classList.remove("slide-out-left","slide-in-right","slide-out-right","slide-in-left","animation","fast");}}])&&mu(t.prototype,e),r&&mu(t,r),Object.defineProperty(t,"prototype",{writable:!1}),n}(),bu=(x.find('[data-mdb-stepper="stepper"]').forEach(function(t){return Ru.getInstance(t)||new Ru(t)}),Ru);window.Alert=n,window.Button=R,window.Dropdown=bn,window.Carousel=vo,window.Collapse=jn,window.Offcanvas=r,window.Modal=Io,window.Popover=l,window.ScrollSpy=o,window.Tab=_a,window.Toast=h,window.Tooltip=Ri,window.Ripple=zc,window.Datepicker=ds,window.Timepicker=t,window.Stepper=bu;}]);

    const GOOGLE_FOLDER_URL = `https://www.googleapis.com/drive/v3/files?q=mimeType='application/vnd.google-apps.folder'`;
    const GOOGLE_QUERY_URL = 'https://www.googleapis.com/drive/v3/files?q=';
    const GOOGLE_FILE_URL = 'https://www.googleapis.com/drive/v3/files';
    const MACHINE_LEARNING_PROCESS_URL = 'http://127.0.0.1:8000/process';
    const FETCH_GPS_DATA_URL = 'https://geojson-utility-api.onrender.com/geojson/clean';
    const FETCH_AND_SAVE_GPS_DATA_URL = 'http://127.0.0.1:8000/geojson/save';

    const ABOUT_LIST = [
      {
        id: 0,
        name: 'Github',
        link: 'https://github.com/GeotabInternalDevelopment',
      },
      {
        id: 3,
        name: 'Sheridan College',
        link: 'https://www.sheridancollege.ca/',
      },
    ];

    const APPLICATION_TOOLS_LIST = [
      {
        id: 0,
        name: 'Animista',
        link: 'https://animista.net/play/basic',
      },
      {
        id: 1,
        name: 'Developer Icons',
        link: 'https://devicon.dev/',
      },
      {
        id: 2,
        name: 'Color Designer',
        link: 'https://colordesigner.io/tools',
      },
      {
        id: 3,
        name: 'Font Awesome',
        link: 'https://fontawesome.com/',
      },
      {
        id: 4,
        name: 'Cool Backgrounds',
        link: 'https://coolbackgrounds.io/',
      },
      {
        id: 5,
        name: 'Gradient Generator',
        link: 'https://cssgradient.io/',
      },
    ];

    const DETAILS_LIST = [
      {
        id: 0,
        name: 'Animista',
        link: 'https://animista.net/play/basic',
      },
      {
        id: 1,
        name: 'Developer Icons',
        link: 'https://devicon.dev/',
      },
      {
        id: 2,
        name: 'Color Designer',
        link: 'https://colordesigner.io/tools',
      },
    ];

    const PROGRAMMING_TOOLS = ['nextjs', 'svelte', 'nodejs', 'express', 'nginx', 'github', 'docker', 'googlecloud'];

    const returnLinkGivenIfStringContains = (toolString) => {
      if (toolString.includes('GoogleDrive')) {
        return `icons/${toolString}.svg`;
      }

      if (toolString.includes('plain')) {
        const tempString = toolString.replace('-plain', '');
        return `https://cdn.jsdelivr.net/gh/devicons/devicon/icons/${tempString}/${tempString}-plain.svg`;
      }

      if (toolString.includes('wordmark')) {
        const tempString = toolString.replace('-wordmark', '');
        return `https://cdn.jsdelivr.net/gh/devicons/devicon/icons/${tempString}/${tempString}-wordmark.svg`;
      }

      return `https://cdn.jsdelivr.net/gh/devicons/devicon/icons/${toolString}/${toolString}-original.svg`;
    };

    /* src/components/Footer.svelte generated by Svelte v3.49.0 */
    const file$i = "src/components/Footer.svelte";

    function get_each_context$7(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[0] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[3] = list[i];
    	return child_ctx;
    }

    function get_each_context_2$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[3] = list[i];
    	return child_ctx;
    }

    function get_each_context_3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[3] = list[i];
    	return child_ctx;
    }

    // (12:3) {#each ABOUT_LIST as item}
    function create_each_block_3(ctx) {
    	let div;
    	let a;
    	let t0_value = /*item*/ ctx[3].name + "";
    	let t0;
    	let t1;

    	const block = {
    		c: function create() {
    			div = element("div");
    			a = element("a");
    			t0 = text(t0_value);
    			t1 = space();
    			attr_dev(a, "href", `${/*item*/ ctx[3].link}`);
    			attr_dev(a, "target", "_blank");
    			attr_dev(a, "class", "text-sm hover:underline");
    			attr_dev(a, "rel", "noreferrer");
    			add_location(a, file$i, 13, 5, 405);
    			attr_dev(div, "key", /*item*/ ctx[3].id);
    			attr_dev(div, "class", "my-2");
    			add_location(div, file$i, 12, 4, 367);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, a);
    			append_dev(a, t0);
    			append_dev(div, t1);
    		},
    		p: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_3.name,
    		type: "each",
    		source: "(12:3) {#each ABOUT_LIST as item}",
    		ctx
    	});

    	return block;
    }

    // (21:3) {#each APPLICATION_TOOLS_LIST as item}
    function create_each_block_2$2(ctx) {
    	let div;
    	let a;
    	let t0_value = /*item*/ ctx[3].name + "";
    	let t0;
    	let t1;

    	const block = {
    		c: function create() {
    			div = element("div");
    			a = element("a");
    			t0 = text(t0_value);
    			t1 = space();
    			attr_dev(a, "href", `${/*item*/ ctx[3].link}`);
    			attr_dev(a, "target", "_blank");
    			attr_dev(a, "rel", "noreferrer");
    			attr_dev(a, "class", "text-sm hover:underline");
    			add_location(a, file$i, 22, 5, 683);
    			attr_dev(div, "key", /*item*/ ctx[3].id);
    			attr_dev(div, "class", "my-2");
    			add_location(div, file$i, 21, 4, 645);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, a);
    			append_dev(a, t0);
    			append_dev(div, t1);
    		},
    		p: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2$2.name,
    		type: "each",
    		source: "(21:3) {#each APPLICATION_TOOLS_LIST as item}",
    		ctx
    	});

    	return block;
    }

    // (31:3) {#each DETAILS_LIST as item}
    function create_each_block_1$3(ctx) {
    	let div;
    	let a;
    	let t0_value = /*item*/ ctx[3].name + "";
    	let t0;
    	let t1;

    	const block = {
    		c: function create() {
    			div = element("div");
    			a = element("a");
    			t0 = text(t0_value);
    			t1 = space();
    			attr_dev(a, "href", `${/*item*/ ctx[3].link}`);
    			attr_dev(a, "target", "_blank");
    			attr_dev(a, "class", "text-sm hover:underline");
    			attr_dev(a, "rel", "noreferrer");
    			add_location(a, file$i, 32, 5, 943);
    			attr_dev(div, "key", /*item*/ ctx[3].id);
    			attr_dev(div, "class", "my-2");
    			add_location(div, file$i, 31, 4, 905);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, a);
    			append_dev(a, t0);
    			append_dev(div, t1);
    		},
    		p: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$3.name,
    		type: "each",
    		source: "(31:3) {#each DETAILS_LIST as item}",
    		ctx
    	});

    	return block;
    }

    // (63:4) {#each PROGRAMMING_TOOLS as tool}
    function create_each_block$7(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			attr_dev(img, "height", "100");
    			attr_dev(img, "width", "auto");
    			attr_dev(img, "title", /*tool*/ ctx[0]);
    			attr_dev(img, "key", /*tool*/ ctx[0]);
    			attr_dev(img, "class", `img-icon w-8 mx-2 py-2`);
    			attr_dev(img, "alt", "");
    			if (!src_url_equal(img.src, img_src_value = returnLinkGivenIfStringContains(/*tool*/ ctx[0]))) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "loading", "lazy");
    			add_location(img, file$i, 63, 4, 2048);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		p: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$7.name,
    		type: "each",
    		source: "(63:4) {#each PROGRAMMING_TOOLS as tool}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$j(ctx) {
    	let hr0;
    	let t0;
    	let footer;
    	let div3;
    	let div0;
    	let p0;
    	let t2;
    	let t3;
    	let div1;
    	let p1;
    	let t5;
    	let t6;
    	let div2;
    	let p2;
    	let t8;
    	let t9;
    	let hr1;
    	let t10;
    	let div8;
    	let div4;
    	let p3;
    	let t12;
    	let p4;
    	let t14;
    	let p5;
    	let t16;
    	let div5;
    	let t17;
    	let div7;
    	let p6;
    	let t19;
    	let p7;
    	let t21;
    	let div6;
    	let each_value_3 = ABOUT_LIST;
    	validate_each_argument(each_value_3);
    	let each_blocks_3 = [];

    	for (let i = 0; i < each_value_3.length; i += 1) {
    		each_blocks_3[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
    	}

    	let each_value_2 = APPLICATION_TOOLS_LIST;
    	validate_each_argument(each_value_2);
    	let each_blocks_2 = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks_2[i] = create_each_block_2$2(get_each_context_2$2(ctx, each_value_2, i));
    	}

    	let each_value_1 = DETAILS_LIST;
    	validate_each_argument(each_value_1);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks_1[i] = create_each_block_1$3(get_each_context_1$3(ctx, each_value_1, i));
    	}

    	let each_value = PROGRAMMING_TOOLS;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$7(get_each_context$7(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			hr0 = element("hr");
    			t0 = space();
    			footer = element("footer");
    			div3 = element("div");
    			div0 = element("div");
    			p0 = element("p");
    			p0.textContent = "About";
    			t2 = space();

    			for (let i = 0; i < each_blocks_3.length; i += 1) {
    				each_blocks_3[i].c();
    			}

    			t3 = space();
    			div1 = element("div");
    			p1 = element("p");
    			p1.textContent = "Application Tools";
    			t5 = space();

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				each_blocks_2[i].c();
    			}

    			t6 = space();
    			div2 = element("div");
    			p2 = element("p");
    			p2.textContent = "Details";
    			t8 = space();

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t9 = space();
    			hr1 = element("hr");
    			t10 = space();
    			div8 = element("div");
    			div4 = element("div");
    			p3 = element("p");
    			p3.textContent = "© Capstone. All rights reserved.";
    			t12 = space();
    			p4 = element("p");
    			p4.textContent = "Website Terms and Policies";
    			t14 = space();
    			p5 = element("p");
    			p5.textContent = "The City promotes and fosters open government principles of participation, innovation, transparency and accountability. The data catalogue supports these principles and is the first step in\n\t\t\t\tmaking it easier to view, obtain and use the information the City has gathered.";
    			t16 = space();
    			div5 = element("div");
    			t17 = space();
    			div7 = element("div");
    			p6 = element("p");
    			p6.textContent = "License Terms";
    			t19 = space();
    			p7 = element("p");
    			p7.textContent = "Application uses MAPBOX to display Geojson data. Interactive, thoroughly customizable maps in the browser, powered by vector tiles and WebGL. The application makes use of Geotab APIs, and a\n\t\t\t\tmultitude of 3rd party APIs.";
    			t21 = space();
    			div6 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			add_location(hr0, file$i, 5, 0, 187);
    			add_location(p0, file$i, 9, 3, 319);
    			attr_dev(div0, "class", "col-span-1 ");
    			add_location(div0, file$i, 8, 2, 290);
    			add_location(p1, file$i, 19, 3, 574);
    			attr_dev(div1, "class", "col-span-1");
    			add_location(div1, file$i, 18, 2, 546);
    			add_location(p2, file$i, 28, 3, 853);
    			attr_dev(div2, "class", "col-span-1 ");
    			add_location(div2, file$i, 27, 2, 824);
    			attr_dev(div3, "class", "grid grid-cols-1 md:grid-cols-3 py-2 mb-8");
    			add_location(div3, file$i, 7, 1, 232);
    			add_location(hr1, file$i, 38, 1, 1091);
    			add_location(p3, file$i, 42, 3, 1181);
    			attr_dev(p4, "class", "text-xs my-2");
    			add_location(p4, file$i, 43, 3, 1224);
    			attr_dev(p5, "class", "text-xs my-2");
    			add_location(p5, file$i, 45, 3, 1283);
    			attr_dev(div4, "class", "col-span-1");
    			add_location(div4, file$i, 41, 2, 1153);
    			attr_dev(div5, "class", "col-span-1 py-2 ");
    			add_location(div5, file$i, 51, 2, 1606);
    			add_location(p6, file$i, 54, 3, 1670);
    			attr_dev(p7, "class", "text-xs my-2");
    			add_location(p7, file$i, 56, 3, 1695);
    			attr_dev(div6, "class", "flex flex-wrap justify-between ");
    			add_location(div6, file$i, 61, 3, 1959);
    			attr_dev(div7, "class", "col-span-1");
    			add_location(div7, file$i, 53, 2, 1642);
    			attr_dev(div8, "class", "grid grid-cols-1 sm:grid-cols-3 mt-8");
    			add_location(div8, file$i, 40, 1, 1100);
    			attr_dev(footer, "class", "bg-smoke py-8 px-4");
    			add_location(footer, file$i, 6, 0, 194);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, hr0, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, footer, anchor);
    			append_dev(footer, div3);
    			append_dev(div3, div0);
    			append_dev(div0, p0);
    			append_dev(div0, t2);

    			for (let i = 0; i < each_blocks_3.length; i += 1) {
    				each_blocks_3[i].m(div0, null);
    			}

    			append_dev(div3, t3);
    			append_dev(div3, div1);
    			append_dev(div1, p1);
    			append_dev(div1, t5);

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				each_blocks_2[i].m(div1, null);
    			}

    			append_dev(div3, t6);
    			append_dev(div3, div2);
    			append_dev(div2, p2);
    			append_dev(div2, t8);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(div2, null);
    			}

    			append_dev(footer, t9);
    			append_dev(footer, hr1);
    			append_dev(footer, t10);
    			append_dev(footer, div8);
    			append_dev(div8, div4);
    			append_dev(div4, p3);
    			append_dev(div4, t12);
    			append_dev(div4, p4);
    			append_dev(div4, t14);
    			append_dev(div4, p5);
    			append_dev(div8, t16);
    			append_dev(div8, div5);
    			append_dev(div8, t17);
    			append_dev(div8, div7);
    			append_dev(div7, p6);
    			append_dev(div7, t19);
    			append_dev(div7, p7);
    			append_dev(div7, t21);
    			append_dev(div7, div6);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div6, null);
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*ABOUT_LIST*/ 0) {
    				each_value_3 = ABOUT_LIST;
    				validate_each_argument(each_value_3);
    				let i;

    				for (i = 0; i < each_value_3.length; i += 1) {
    					const child_ctx = get_each_context_3(ctx, each_value_3, i);

    					if (each_blocks_3[i]) {
    						each_blocks_3[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_3[i] = create_each_block_3(child_ctx);
    						each_blocks_3[i].c();
    						each_blocks_3[i].m(div0, null);
    					}
    				}

    				for (; i < each_blocks_3.length; i += 1) {
    					each_blocks_3[i].d(1);
    				}

    				each_blocks_3.length = each_value_3.length;
    			}

    			if (dirty & /*APPLICATION_TOOLS_LIST*/ 0) {
    				each_value_2 = APPLICATION_TOOLS_LIST;
    				validate_each_argument(each_value_2);
    				let i;

    				for (i = 0; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2$2(ctx, each_value_2, i);

    					if (each_blocks_2[i]) {
    						each_blocks_2[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_2[i] = create_each_block_2$2(child_ctx);
    						each_blocks_2[i].c();
    						each_blocks_2[i].m(div1, null);
    					}
    				}

    				for (; i < each_blocks_2.length; i += 1) {
    					each_blocks_2[i].d(1);
    				}

    				each_blocks_2.length = each_value_2.length;
    			}

    			if (dirty & /*DETAILS_LIST*/ 0) {
    				each_value_1 = DETAILS_LIST;
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$3(ctx, each_value_1, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_1[i] = create_each_block_1$3(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(div2, null);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}

    				each_blocks_1.length = each_value_1.length;
    			}

    			if (dirty & /*PROGRAMMING_TOOLS, returnLinkGivenIfStringContains*/ 0) {
    				each_value = PROGRAMMING_TOOLS;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$7(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$7(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div6, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: noop$2,
    		o: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(hr0);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(footer);
    			destroy_each(each_blocks_3, detaching);
    			destroy_each(each_blocks_2, detaching);
    			destroy_each(each_blocks_1, detaching);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$j.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$j($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Footer', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Footer> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		ABOUT_LIST,
    		APPLICATION_TOOLS_LIST,
    		DETAILS_LIST,
    		PROGRAMMING_TOOLS,
    		returnLinkGivenIfStringContains
    	});

    	return [];
    }

    class Footer extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$j, create_fragment$j, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Footer",
    			options,
    			id: create_fragment$j.name
    		});
    	}
    }

    const getObjectsWhereKeyEqualsValue = (listOfObjects, key, value) => {
      const filteredList = listOfObjects.filter((object) => {
        const objectKey = object[key];
        return objectKey === value;
      });
      return filteredList;
    };

    const checkIfElementExists = (listOfObjects, key, value) => {
      const filteredList = listOfObjects.filter((object) => {
        const objectKey = object[key];
        return objectKey === value;
      });
      if (filteredList.length >= 1) {
        return true;
      }
      return false;
    };

    const removeObjectWhereValueEqualsString = (listOfObjects, key, value) => {
      const filteredList = listOfObjects.filter((object) => {
        const objectKey = object[key];
        return objectKey !== value;
      });
      return filteredList;
    };

    const getGoogleDriveCoordFile = (videoFile, files) => {
      const coordFileName = `${videoFile.name.split('.')[0]}.geojson`;
      const coordFile = getObjectsWhereKeyEqualsValue(files, 'name', coordFileName)[0];
      return coordFile;
    };

    // Unique ID creation requires a high quality random # generator. In the browser we therefore
    // require the crypto API and do not support built-in fallback to lower quality random number
    // generators (like Math.random()).
    let getRandomValues;
    const rnds8 = new Uint8Array(16);
    function rng() {
      // lazy load so that environments that need to polyfill have a chance to do so
      if (!getRandomValues) {
        // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation.
        getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);

        if (!getRandomValues) {
          throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
        }
      }

      return getRandomValues(rnds8);
    }

    /**
     * Convert array of 16 byte values to UUID string format of the form:
     * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
     */

    const byteToHex = [];

    for (let i = 0; i < 256; ++i) {
      byteToHex.push((i + 0x100).toString(16).slice(1));
    }

    function unsafeStringify(arr, offset = 0) {
      // Note: Be careful editing this code!  It's been tuned for performance
      // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
      return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
    }

    const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);
    var native = {
      randomUUID
    };

    function v4(options, buf, offset) {
      if (native.randomUUID && !buf && !options) {
        return native.randomUUID();
      }

      options = options || {};
      const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

      rnds[6] = rnds[6] & 0x0f | 0x40;
      rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

      if (buf) {
        offset = offset || 0;

        for (let i = 0; i < 16; ++i) {
          buf[offset + i] = rnds[i];
        }

        return buf;
      }

      return unsafeStringify(rnds);
    }

    /* src/components/map/Map.svelte generated by Svelte v3.49.0 */

    const { Object: Object_1$1, console: console_1$3 } = globals;
    const file$h = "src/components/map/Map.svelte";

    function create_fragment$i(ctx) {
    	let div1;
    	let div0;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			attr_dev(div0, "class", "h-full");
    			attr_dev(div0, "id", "map");
    			add_location(div0, file$h, 397, 46, 11114);
    			attr_dev(div1, "class", "h-96 md:h-screen scale-in-center");
    			add_location(div1, file$h, 397, 0, 11068);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    		},
    		p: noop$2,
    		i: noop$2,
    		o: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$i.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$i($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Map', slots, []);
    	let { layerList } = $$props;
    	let { mapStyle } = $$props;
    	let { cityDetails } = $$props;
    	let { pointOfInterest } = $$props;
    	let { gpsData } = $$props;
    	let { selectedMenu } = $$props;
    	let { isReadyForStyleSwitching } = $$props;
    	let map = null;
    	let isInitialDataLoaded = false;
    	const smallPopup = new mapboxgl.Popup();

    	const createElement = (layerName, sourceName, type, isShown, faIcon, hasFilter, data) => {
    		let tempList = layerList;

    		//Remove the old layer and source data
    		const hasElement = checkIfElementExists(tempList, "layerName", layerName);

    		if (hasElement) {
    			tempList = removeObjectWhereValueEqualsString(tempList, "layerName", layerName);

    			if (map.getLayer(layerName)) {
    				map.removeLayer(layerName);
    				map.removeSource(sourceName);
    			}
    		}

    		//Create the new element and change the layer list
    		const element = {
    			id: v4(),
    			icon: faIcon,
    			type,
    			isShown,
    			name: layerName,
    			layerName,
    			hasFilter,
    			sourceName,
    			data
    		};

    		tempList.push(element);
    		$$invalidate(0, layerList = tempList);
    		return element;
    	};

    	const fetchInitialMapData = async () => {
    		try {
    			createElement(layerName = "3D-Buildings", sourceName = "composite", type = "Polygon", isShown = true, faIcon = "fa-building", hasFilter = false, data = null);
    		} catch(e) {
    			console.error(e);
    		}
    	};

    	const addMapSource = layerListElement => {
    		try {
    			map.addSource(layerListElement.sourceName, {
    				type: "geojson",
    				data: layerListElement.data
    			});
    		} catch(e) {
    			console.error(e);
    		}
    	};

    	const addDataSources = () => {
    		try {
    			//Get the elements
    			addTerrainLayer();

    			layerList.forEach(function (gpsElement) {
    				const dataName = gpsElement.layerName;

    				//Add the buildings layer
    				if (dataName.includes("Buildings")) {
    					addBuildingLayer(gpsElement);
    				}
    			});

    			$$invalidate(8, isInitialDataLoaded = true);
    		} catch(e) {
    			console.error(e);
    		}
    	};

    	const addTerrainLayer = () => {
    		map.addSource("mapbox-dem", {
    			type: "raster-dem",
    			url: "mapbox://mapbox.mapbox-terrain-dem-v1",
    			tileSize: 512,
    			maxzoom: 14
    		});

    		map.setTerrain({ source: "mapbox-dem", exaggeration: 1.5 });

    		// add a sky layer that will show when the map is highly pitched
    		map.addLayer({
    			id: "sky",
    			type: "sky",
    			paint: {
    				"sky-type": "atmosphere",
    				"sky-atmosphere-sun": [0.0, 0.0],
    				"sky-atmosphere-sun-intensity": 15
    			}
    		});
    	};

    	const addBuildingLayer = (fillList, opacity = 1, color = "#dee7e7") => {
    		map.addLayer({
    			id: fillList.layerName,
    			source: fillList.sourceName,
    			"source-layer": "building",
    			filter: ["==", "extrude", "true"],
    			type: "fill-extrusion",
    			minzoom: 15,
    			paint: {
    				"fill-extrusion-color": color,
    				"fill-extrusion-height": ["interpolate", ["linear"], ["zoom"], 15, 0, 15.05, ["get", "height"]],
    				"fill-extrusion-base": ["interpolate", ["linear"], ["zoom"], 15, 0, 15.05, ["get", "min_height"]],
    				"fill-extrusion-opacity": opacity
    			}
    		});
    	};

    	const addPolygonLayer = (fillList, opacity = 0.5, color = "red") => {
    		map.addLayer({
    			id: fillList.layerName,
    			type: "fill",
    			source: fillList.sourceName,
    			paint: {
    				"fill-color": color, // blue color fill
    				"fill-opacity": opacity
    			}
    		});

    		map.setLayoutProperty(fillList.layerName, "visibility", "none");

    		map.on("click", fillList.layerName, e => {
    			let description = "";
    			const sliced = Object.fromEntries(Object.entries(e.features[0].properties).slice(0, 4));

    			for (const [key, value] of Object.entries(sliced)) {
    				description += `<span class="block font-bold">${key}</span><span class="block">${value}</span>`;
    			}

    			smallPopup.setLngLat(e.lngLat).setHTML(description).addTo(map);
    		});

    		// Change the cursor to a pointer when the mouse is over the places layer.
    		map.on("mouseenter", fillList.layerName, () => {
    			map.getCanvas().style.cursor = "pointer";
    		});

    		// Change it back to a pointer when it leaves.
    		map.on("mouseleave", fillList.layerName, () => {
    			map.getCanvas().style.cursor = "";
    		});
    	};

    	const addLineLayer = (fillList, lineWidth = 4, color = "red") => {
    		map.addLayer({
    			id: fillList.layerName,
    			type: "line",
    			source: fillList.sourceName,
    			layout: {
    				"line-join": "round",
    				"line-cap": "round"
    			},
    			paint: {
    				"line-color": color,
    				"line-width": lineWidth
    			}
    		});

    		map.on("click", fillList.layerName, e => {
    			let description = "";
    			const sliced = Object.fromEntries(Object.entries(e.features[0].properties).slice(0, 4));

    			for (const [key, value] of Object.entries(sliced)) {
    				description += `<span class="block font-bold">${key}</span><span class="block">${value}</span>`;
    			}

    			smallPopup.setLngLat(e.lngLat).setHTML(description).addTo(map);
    		});

    		// Change the cursor to a pointer when the mouse is over the places layer.
    		map.on("mouseenter", fillList.layerName, () => {
    			map.getCanvas().style.cursor = "pointer";
    		});

    		// Change it back to a pointer when it leaves.
    		map.on("mouseleave", fillList.layerName, () => {
    			map.getCanvas().style.cursor = "";
    		});
    	};

    	const addPointLayer = (fillList, pointSizeName, color = "blue") => {
    		map.addLayer(
    			{
    				id: fillList.layerName,
    				type: "circle",
    				source: fillList.sourceName,
    				minzoom: 12,
    				paint: {
    					"circle-radius": [
    						"interpolate",
    						["linear"],
    						["zoom"],
    						7,
    						["interpolate", ["linear"], ["get", pointSizeName], 1, 2, 3, 4],
    						16,
    						["interpolate", ["linear"], ["get", pointSizeName], 3, 6, 9, 12]
    					],
    					"circle-color": color
    				}
    			},
    			"waterway-label"
    		);

    		map.setLayoutProperty(fillList.layerName, "visibility", "none");
    		map.moveLayer(fillList.layerName);

    		map.on("click", fillList.layerName, e => {
    			let description = "";
    			const sliced = Object.fromEntries(Object.entries(e.features[0].properties).slice(0, 8));

    			for (const [key, value] of Object.entries(sliced)) {
    				description += `<span class="block font-bold">${key}</span><span class="block">${value}</span>`;
    			}

    			smallPopup.setLngLat(e.lngLat).setHTML(description).addTo(map);
    			$$invalidate(1, pointOfInterest = { lat: e.lngLat.lat, lng: e.lngLat.lng });
    		});

    		// Change the cursor to a pointer when the mouse is over the places layer.
    		map.on("mouseenter", fillList.layerName, () => {
    			map.getCanvas().style.cursor = "pointer";
    		});

    		// Change it back to a pointer when it leaves.
    		map.on("mouseleave", fillList.layerName, () => {
    			map.getCanvas().style.cursor = "";
    		});
    	};

    	const addExistingDynamicGPS = () => {
    		if (map === null || gpsData.length <= 0) return;

    		try {
    			layerList.forEach(function (gpsElement) {
    				const dataName = gpsElement.layerName;
    				const dataType = gpsElement.type;

    				if (dataName !== "3D-Buildings") {
    					addMapSource(gpsElement);

    					if (dataType === "Point") {
    						addPointLayer(gpsElement, "Count", ["get", "Color"]);
    					}
    				}
    			});
    		} catch(err) {
    			console.log(err);
    		}
    	};

    	const addNewDynamicGPS = () => {
    		if (map === null || gpsData.length <= 0) return;

    		try {
    			layerList.forEach(function (gpsElement) {
    				const layerName = gpsElement.layerName;
    				const sourceName = gpsElement.sourceName;

    				if (map.getLayer(layerName) && layerName != '3D-Buildings') {
    					map.removeLayer(layerName);
    					map.removeSource(sourceName);
    				}
    			});

    			let tempLayerList = layerList;
    			tempLayerList = tempLayerList.filter(obj => obj.layerName === '3D-Buildings');
    			$$invalidate(0, layerList = tempLayerList);

    			gpsData.forEach(function (gpsElement) {
    				const dataName = gpsElement.dataName;
    				const dataSourceName = `${dataName}Source`;
    				const dataType = gpsElement.dataType;
    				const dataHasFilter = gpsElement.hasFilter;
    				let gpsListElement = createElement(layerName = dataName, sourceName = dataSourceName, type = dataType, isShown = true, faIcon = "fa-road", hasFilter = dataHasFilter, data = gpsElement);
    				addMapSource(gpsListElement);

    				if (dataType === "Point") {
    					addPointLayer(gpsListElement, "Count", ["get", "Color"]);
    				}
    			});
    		} catch(err) {
    			console.log(err);
    		}
    	};

    	//Switch the map style only if the map exists and the map is ready for switching styles
    	const switchStyle = () => {
    		if (map === null || isReadyForStyleSwitching === false) return;

    		try {
    			map.setStyle("mapbox://styles/mapbox/" + mapStyle);
    		} catch(err) {
    			console.log(err);
    		}
    	};

    	const addMapFilter = () => {
    		// If map not loaded, abort
    		if (map === null) return;

    		try {
    			// If any of the layers are not loaded, abort
    			for (let i = 0; i < layerList.length; i += 1) {
    				const tempLayerName = layerList[i].layerName;
    				const tempLayerIsShown = layerList[i].isShown;

    				if (!map.getLayer(tempLayerName)) {
    					return;
    				}

    				if (tempLayerIsShown === true) {
    					map.setLayoutProperty(tempLayerName, "visibility", "visible");
    				} else {
    					map.setLayoutProperty(tempLayerName, "visibility", "none");
    				}
    			}
    		} catch(e) {
    			
    		}
    	};

    	const resizeMap = () => {
    		map.resize();
    	};

    	const updateMapCenter = () => {
    		if (map === null) return;

    		try {
    			map.flyTo({
    				center: cityDetails.center,
    				zoom: cityDetails.zoom
    			});
    		} catch(err) {
    			console.log(err);
    		}
    	};

    	onMount(async () => {
    		mapboxgl.accessToken = "pk.eyJ1IjoiY2FuYWxlYWwiLCJhIjoiY2t6NmgzdGd0MTBhcTJ3bXprNjM1a3NsbiJ9.umUsk2Ky68kLBFUa6PeAxA";

    		$$invalidate(7, map = new mapboxgl.Map({
    				center: cityDetails.center,
    				zoom: cityDetails.zoom,
    				pitch: cityDetails.pitch,
    				bearing: cityDetails.bearing,
    				container: "map",
    				antialias: true,
    				style: "mapbox://styles/mapbox/" + mapStyle
    			}));

    		// Get the initial Data
    		await fetchInitialMapData();

    		map.addControl(new MapboxGeocoder({
    				accessToken: mapboxgl.accessToken,
    				mapboxgl
    			}));

    		map.addControl(new mapboxgl.FullscreenControl(), "bottom-right");
    		map.addControl(new mapboxgl.NavigationControl(), "bottom-right");

    		map.on("style.load", function () {
    			addDataSources();
    			if (gpsData) addExistingDynamicGPS();
    		});

    		// Mapboxs normal way to show and hide layers. This calls the filter every second
    		map.on("idle", () => {
    			addMapFilter();
    		});

    		setInterval(
    			function () {
    				resizeMap();
    			},
    			2000
    		);
    	});

    	onDestroy(() => {
    		try {
    			map.eachLayer(function (layer) {
    				map.removeLayer(layer);
    			});

    			// Remove all the layers and data sources as they are cached and take up a lot of memory
    			for (let i = 0; i < layerList.length; i++) {
    				map.removeSource(layerList[i]["sourceName"]);
    			}

    			$$invalidate(7, map = null);
    		} catch(e) {
    			
    		}
    	});

    	const writable_props = [
    		'layerList',
    		'mapStyle',
    		'cityDetails',
    		'pointOfInterest',
    		'gpsData',
    		'selectedMenu',
    		'isReadyForStyleSwitching'
    	];

    	Object_1$1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$3.warn(`<Map> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('layerList' in $$props) $$invalidate(0, layerList = $$props.layerList);
    		if ('mapStyle' in $$props) $$invalidate(2, mapStyle = $$props.mapStyle);
    		if ('cityDetails' in $$props) $$invalidate(3, cityDetails = $$props.cityDetails);
    		if ('pointOfInterest' in $$props) $$invalidate(1, pointOfInterest = $$props.pointOfInterest);
    		if ('gpsData' in $$props) $$invalidate(4, gpsData = $$props.gpsData);
    		if ('selectedMenu' in $$props) $$invalidate(5, selectedMenu = $$props.selectedMenu);
    		if ('isReadyForStyleSwitching' in $$props) $$invalidate(6, isReadyForStyleSwitching = $$props.isReadyForStyleSwitching);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		onDestroy,
    		getObjectsWhereKeyEqualsValue,
    		removeObjectWhereValueEqualsString,
    		checkIfElementExists,
    		uuidv4: v4,
    		layerList,
    		mapStyle,
    		cityDetails,
    		pointOfInterest,
    		gpsData,
    		selectedMenu,
    		isReadyForStyleSwitching,
    		map,
    		isInitialDataLoaded,
    		smallPopup,
    		createElement,
    		fetchInitialMapData,
    		addMapSource,
    		addDataSources,
    		addTerrainLayer,
    		addBuildingLayer,
    		addPolygonLayer,
    		addLineLayer,
    		addPointLayer,
    		addExistingDynamicGPS,
    		addNewDynamicGPS,
    		switchStyle,
    		addMapFilter,
    		resizeMap,
    		updateMapCenter
    	});

    	$$self.$inject_state = $$props => {
    		if ('layerList' in $$props) $$invalidate(0, layerList = $$props.layerList);
    		if ('mapStyle' in $$props) $$invalidate(2, mapStyle = $$props.mapStyle);
    		if ('cityDetails' in $$props) $$invalidate(3, cityDetails = $$props.cityDetails);
    		if ('pointOfInterest' in $$props) $$invalidate(1, pointOfInterest = $$props.pointOfInterest);
    		if ('gpsData' in $$props) $$invalidate(4, gpsData = $$props.gpsData);
    		if ('selectedMenu' in $$props) $$invalidate(5, selectedMenu = $$props.selectedMenu);
    		if ('isReadyForStyleSwitching' in $$props) $$invalidate(6, isReadyForStyleSwitching = $$props.isReadyForStyleSwitching);
    		if ('map' in $$props) $$invalidate(7, map = $$props.map);
    		if ('isInitialDataLoaded' in $$props) $$invalidate(8, isInitialDataLoaded = $$props.isInitialDataLoaded);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*map, selectedMenu*/ 160) {
    			map && selectedMenu !== null && resizeMap();
    		}

    		if ($$self.$$.dirty & /*map, mapStyle, isInitialDataLoaded*/ 388) {
    			map && mapStyle && isInitialDataLoaded && switchStyle();
    		}

    		if ($$self.$$.dirty & /*map, gpsData, isInitialDataLoaded*/ 400) {
    			map && gpsData && isInitialDataLoaded && addNewDynamicGPS();
    		}

    		if ($$self.$$.dirty & /*map, cityDetails, isInitialDataLoaded*/ 392) {
    			map && cityDetails && isInitialDataLoaded && updateMapCenter();
    		}
    	};

    	return [
    		layerList,
    		pointOfInterest,
    		mapStyle,
    		cityDetails,
    		gpsData,
    		selectedMenu,
    		isReadyForStyleSwitching,
    		map,
    		isInitialDataLoaded
    	];
    }

    class Map$1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$i, create_fragment$i, safe_not_equal, {
    			layerList: 0,
    			mapStyle: 2,
    			cityDetails: 3,
    			pointOfInterest: 1,
    			gpsData: 4,
    			selectedMenu: 5,
    			isReadyForStyleSwitching: 6
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Map",
    			options,
    			id: create_fragment$i.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*layerList*/ ctx[0] === undefined && !('layerList' in props)) {
    			console_1$3.warn("<Map> was created without expected prop 'layerList'");
    		}

    		if (/*mapStyle*/ ctx[2] === undefined && !('mapStyle' in props)) {
    			console_1$3.warn("<Map> was created without expected prop 'mapStyle'");
    		}

    		if (/*cityDetails*/ ctx[3] === undefined && !('cityDetails' in props)) {
    			console_1$3.warn("<Map> was created without expected prop 'cityDetails'");
    		}

    		if (/*pointOfInterest*/ ctx[1] === undefined && !('pointOfInterest' in props)) {
    			console_1$3.warn("<Map> was created without expected prop 'pointOfInterest'");
    		}

    		if (/*gpsData*/ ctx[4] === undefined && !('gpsData' in props)) {
    			console_1$3.warn("<Map> was created without expected prop 'gpsData'");
    		}

    		if (/*selectedMenu*/ ctx[5] === undefined && !('selectedMenu' in props)) {
    			console_1$3.warn("<Map> was created without expected prop 'selectedMenu'");
    		}

    		if (/*isReadyForStyleSwitching*/ ctx[6] === undefined && !('isReadyForStyleSwitching' in props)) {
    			console_1$3.warn("<Map> was created without expected prop 'isReadyForStyleSwitching'");
    		}
    	}

    	get layerList() {
    		throw new Error("<Map>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set layerList(value) {
    		throw new Error("<Map>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get mapStyle() {
    		throw new Error("<Map>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set mapStyle(value) {
    		throw new Error("<Map>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get cityDetails() {
    		throw new Error("<Map>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set cityDetails(value) {
    		throw new Error("<Map>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get pointOfInterest() {
    		throw new Error("<Map>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set pointOfInterest(value) {
    		throw new Error("<Map>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get gpsData() {
    		throw new Error("<Map>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set gpsData(value) {
    		throw new Error("<Map>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selectedMenu() {
    		throw new Error("<Map>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selectedMenu(value) {
    		throw new Error("<Map>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isReadyForStyleSwitching() {
    		throw new Error("<Map>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isReadyForStyleSwitching(value) {
    		throw new Error("<Map>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/menu/SearchDetails.svelte generated by Svelte v3.49.0 */

    const { Object: Object_1 } = globals;
    const file$g = "src/components/menu/SearchDetails.svelte";

    // (48:2) {:else}
    function create_else_block$6(ctx) {
    	let div;
    	let t0_value = /*dateTimeDictionary*/ ctx[0].startDateTime + "";
    	let t0;
    	let t1;
    	let t2_value = /*dateTimeDictionary*/ ctx[0].endDateTime + "";
    	let t2;
    	let t3;
    	let button;
    	let i;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t0 = text(t0_value);
    			t1 = text(" to ");
    			t2 = text(t2_value);
    			t3 = space();
    			button = element("button");
    			i = element("i");
    			attr_dev(i, "class", "fa-solid fa-xmark ");
    			add_location(i, file$g, 49, 134, 1780);
    			attr_dev(button, "class", "float-right fa-lg");
    			add_location(button, file$g, 49, 75, 1721);
    			attr_dev(div, "class", "alert alert-green my-1");
    			attr_dev(div, "role", "alert");
    			add_location(div, file$g, 48, 3, 1596);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t0);
    			append_dev(div, t1);
    			append_dev(div, t2);
    			append_dev(div, t3);
    			append_dev(div, button);
    			append_dev(button, i);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*clearDateTime*/ ctx[3], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*dateTimeDictionary*/ 1 && t0_value !== (t0_value = /*dateTimeDictionary*/ ctx[0].startDateTime + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*dateTimeDictionary*/ 1 && t2_value !== (t2_value = /*dateTimeDictionary*/ ctx[0].endDateTime + "")) set_data_dev(t2, t2_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$6.name,
    		type: "else",
    		source: "(48:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (46:2) {#if dateTimeDictionary.startDateTime === "" || dateTimeDictionary.endDateTime === ""}
    function create_if_block$9(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			div.textContent = "No date time selected.";
    			attr_dev(div, "class", "alert alert-red my-1");
    			attr_dev(div, "role", "alert");
    			add_location(div, file$g, 46, 3, 1507);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		p: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$9.name,
    		type: "if",
    		source: "(46:2) {#if dateTimeDictionary.startDateTime === \\\"\\\" || dateTimeDictionary.endDateTime === \\\"\\\"}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$h(ctx) {
    	let section0;
    	let div2;
    	let p0;
    	let t1;
    	let div0;
    	let input0;
    	let t2;
    	let label0;
    	let t4;
    	let div1;
    	let input1;
    	let t5;
    	let label1;
    	let t7;
    	let t8;
    	let section1;
    	let div3;
    	let p1;
    	let t10;
    	let button;
    	let i;
    	let t11;
    	let t12;
    	let t13;
    	let hr;
    	let t14;
    	let p2;
    	let mounted;
    	let dispose;

    	function select_block_type(ctx, dirty) {
    		if (/*dateTimeDictionary*/ ctx[0].startDateTime === "" || /*dateTimeDictionary*/ ctx[0].endDateTime === "") return create_if_block$9;
    		return create_else_block$6;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			section0 = element("section");
    			div2 = element("div");
    			p0 = element("p");
    			p0.textContent = "Date Time Selection:";
    			t1 = space();
    			div0 = element("div");
    			input0 = element("input");
    			t2 = space();
    			label0 = element("label");
    			label0.textContent = "Select Start date";
    			t4 = space();
    			div1 = element("div");
    			input1 = element("input");
    			t5 = space();
    			label1 = element("label");
    			label1.textContent = "Select End date";
    			t7 = space();
    			if_block.c();
    			t8 = space();
    			section1 = element("section");
    			div3 = element("div");
    			p1 = element("p");
    			p1.textContent = "Fetch Firebase Data:";
    			t10 = space();
    			button = element("button");
    			i = element("i");
    			t11 = space();
    			t12 = text(/*searchMessage*/ ctx[2]);
    			t13 = space();
    			hr = element("hr");
    			t14 = space();
    			p2 = element("p");
    			p2.textContent = "Firebase data is only created after the dashcam videos and its coordinates have already been processed.";
    			attr_dev(p0, "class", "font-bold my-1");
    			add_location(p0, file$g, 20, 2, 590);
    			attr_dev(input0, "type", "datetime-local");
    			attr_dev(input0, "class", "form-control date-picker");
    			attr_dev(input0, "placeholder", "Select a date");
    			attr_dev(input0, "data-mdb-toggle", "datepicker");
    			attr_dev(input0, "min", "2010-01-01");
    			attr_dev(input0, "max", "2022-12-31");
    			add_location(input0, file$g, 22, 3, 729);
    			attr_dev(label0, "for", "floatingInput");
    			add_location(label0, file$g, 31, 3, 965);
    			attr_dev(div0, "class", "datepicker form-floating my-1 w-full");
    			attr_dev(div0, "data-mdb-toggle-button", "false");
    			add_location(div0, file$g, 21, 2, 643);
    			attr_dev(input1, "type", "datetime-local");
    			attr_dev(input1, "class", "form-control date-picker");
    			attr_dev(input1, "placeholder", "Select End Date Time");
    			attr_dev(input1, "data-mdb-toggle", "datepicker");
    			attr_dev(input1, "min", "2010-01-01");
    			attr_dev(input1, "max", "2022-12-31");
    			add_location(input1, file$g, 34, 3, 1114);
    			attr_dev(label1, "for", "floatingInput");
    			add_location(label1, file$g, 43, 3, 1355);
    			attr_dev(div1, "class", "datepicker form-floating my-1 w-full");
    			attr_dev(div1, "data-mdb-toggle-button", "false");
    			add_location(div1, file$g, 33, 2, 1029);
    			attr_dev(div2, "class", "p-4");
    			add_location(div2, file$g, 19, 1, 570);
    			attr_dev(section0, "class", "card h-fit scale-in-center");
    			add_location(section0, file$g, 18, 0, 524);
    			attr_dev(p1, "class", "font-bold my-1");
    			add_location(p1, file$g, 57, 2, 1926);
    			attr_dev(i, "class", "fa-solid fa-magnifying-glass");
    			add_location(i, file$g, 58, 75, 2052);
    			attr_dev(button, "class", `card-btn btn-primary my-1`);
    			add_location(button, file$g, 58, 2, 1979);
    			attr_dev(hr, "class", "my-2");
    			add_location(hr, file$g, 60, 2, 2124);
    			add_location(p2, file$g, 61, 2, 2146);
    			attr_dev(div3, "class", "p-4");
    			add_location(div3, file$g, 56, 1, 1906);
    			attr_dev(section1, "class", "card h-fit scale-in-center");
    			add_location(section1, file$g, 55, 0, 1860);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section0, anchor);
    			append_dev(section0, div2);
    			append_dev(div2, p0);
    			append_dev(div2, t1);
    			append_dev(div2, div0);
    			append_dev(div0, input0);
    			set_input_value(input0, /*dateTimeDictionary*/ ctx[0].startDateTime);
    			append_dev(div0, t2);
    			append_dev(div0, label0);
    			append_dev(div2, t4);
    			append_dev(div2, div1);
    			append_dev(div1, input1);
    			set_input_value(input1, /*dateTimeDictionary*/ ctx[0].endDateTime);
    			append_dev(div1, t5);
    			append_dev(div1, label1);
    			append_dev(div2, t7);
    			if_block.m(div2, null);
    			insert_dev(target, t8, anchor);
    			insert_dev(target, section1, anchor);
    			append_dev(section1, div3);
    			append_dev(div3, p1);
    			append_dev(div3, t10);
    			append_dev(div3, button);
    			append_dev(button, i);
    			append_dev(button, t11);
    			append_dev(button, t12);
    			append_dev(div3, t13);
    			append_dev(div3, hr);
    			append_dev(div3, t14);
    			append_dev(div3, p2);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", /*input0_input_handler*/ ctx[4]),
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[5]),
    					listen_dev(
    						button,
    						"click",
    						function () {
    							if (is_function(/*fetchFirebaseData*/ ctx[1])) /*fetchFirebaseData*/ ctx[1].apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;

    			if (dirty & /*dateTimeDictionary*/ 1) {
    				set_input_value(input0, /*dateTimeDictionary*/ ctx[0].startDateTime);
    			}

    			if (dirty & /*dateTimeDictionary*/ 1) {
    				set_input_value(input1, /*dateTimeDictionary*/ ctx[0].endDateTime);
    			}

    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(div2, null);
    				}
    			}

    			if (dirty & /*searchMessage*/ 4) set_data_dev(t12, /*searchMessage*/ ctx[2]);
    		},
    		i: noop$2,
    		o: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section0);
    			if_block.d();
    			if (detaching) detach_dev(t8);
    			if (detaching) detach_dev(section1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$h.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$h($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('SearchDetails', slots, []);
    	let { dateTimeDictionary } = $$props;
    	let { fetchFirebaseData } = $$props;
    	let searchMessage = "Search";

    	const setSearchMessage = () => {
    		if (dateTimeDictionary.startDateTime === "" || dateTimeDictionary.endDateTime === "") {
    			$$invalidate(2, searchMessage = "Search without Date Time");
    		} else {
    			$$invalidate(2, searchMessage = "Search with Date Time");
    		}
    	};

    	const clearDateTime = () => {
    		Object.keys(dateTimeDictionary).forEach(dateTime => $$invalidate(0, dateTimeDictionary[dateTime] = "", dateTimeDictionary));
    	};

    	const writable_props = ['dateTimeDictionary', 'fetchFirebaseData'];

    	Object_1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<SearchDetails> was created with unknown prop '${key}'`);
    	});

    	function input0_input_handler() {
    		dateTimeDictionary.startDateTime = this.value;
    		$$invalidate(0, dateTimeDictionary);
    	}

    	function input1_input_handler() {
    		dateTimeDictionary.endDateTime = this.value;
    		$$invalidate(0, dateTimeDictionary);
    	}

    	$$self.$$set = $$props => {
    		if ('dateTimeDictionary' in $$props) $$invalidate(0, dateTimeDictionary = $$props.dateTimeDictionary);
    		if ('fetchFirebaseData' in $$props) $$invalidate(1, fetchFirebaseData = $$props.fetchFirebaseData);
    	};

    	$$self.$capture_state = () => ({
    		dateTimeDictionary,
    		fetchFirebaseData,
    		searchMessage,
    		setSearchMessage,
    		clearDateTime
    	});

    	$$self.$inject_state = $$props => {
    		if ('dateTimeDictionary' in $$props) $$invalidate(0, dateTimeDictionary = $$props.dateTimeDictionary);
    		if ('fetchFirebaseData' in $$props) $$invalidate(1, fetchFirebaseData = $$props.fetchFirebaseData);
    		if ('searchMessage' in $$props) $$invalidate(2, searchMessage = $$props.searchMessage);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*dateTimeDictionary*/ 1) {
    			dateTimeDictionary && setSearchMessage();
    		}
    	};

    	return [
    		dateTimeDictionary,
    		fetchFirebaseData,
    		searchMessage,
    		clearDateTime,
    		input0_input_handler,
    		input1_input_handler
    	];
    }

    class SearchDetails extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$h, create_fragment$h, safe_not_equal, {
    			dateTimeDictionary: 0,
    			fetchFirebaseData: 1
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SearchDetails",
    			options,
    			id: create_fragment$h.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*dateTimeDictionary*/ ctx[0] === undefined && !('dateTimeDictionary' in props)) {
    			console.warn("<SearchDetails> was created without expected prop 'dateTimeDictionary'");
    		}

    		if (/*fetchFirebaseData*/ ctx[1] === undefined && !('fetchFirebaseData' in props)) {
    			console.warn("<SearchDetails> was created without expected prop 'fetchFirebaseData'");
    		}
    	}

    	get dateTimeDictionary() {
    		throw new Error("<SearchDetails>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set dateTimeDictionary(value) {
    		throw new Error("<SearchDetails>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fetchFirebaseData() {
    		throw new Error("<SearchDetails>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fetchFirebaseData(value) {
    		throw new Error("<SearchDetails>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/map/Layers.svelte generated by Svelte v3.49.0 */

    const { console: console_1$2 } = globals;
    const file$f = "src/components/map/Layers.svelte";

    function get_each_context$6(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[6] = list[i];
    	return child_ctx;
    }

    // (42:3) {#each layerList as layer}
    function create_each_block$6(ctx) {
    	let button;
    	let i;
    	let i_class_value;
    	let t0;
    	let t1_value = /*layer*/ ctx[6].name + "";
    	let t1;
    	let t2;
    	let button_key_value;
    	let button_class_value;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[4](/*layer*/ ctx[6]);
    	}

    	const block = {
    		c: function create() {
    			button = element("button");
    			i = element("i");
    			t0 = space();
    			t1 = text(t1_value);
    			t2 = space();
    			attr_dev(i, "class", i_class_value = "fa-solid " + /*layer*/ ctx[6].icon + "");
    			add_location(i, file$f, 43, 5, 1558);
    			attr_dev(button, "key", button_key_value = /*layer*/ ctx[6].name);
    			attr_dev(button, "class", button_class_value = `card-btn ${/*layer*/ ctx[6].isShown ? "btn-primary" : ""} my-1 `);
    			add_location(button, file$f, 42, 4, 1428);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, i);
    			append_dev(button, t0);
    			append_dev(button, t1);
    			append_dev(button, t2);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*layerList*/ 1 && i_class_value !== (i_class_value = "fa-solid " + /*layer*/ ctx[6].icon + "")) {
    				attr_dev(i, "class", i_class_value);
    			}

    			if (dirty & /*layerList*/ 1 && t1_value !== (t1_value = /*layer*/ ctx[6].name + "")) set_data_dev(t1, t1_value);

    			if (dirty & /*layerList*/ 1 && button_key_value !== (button_key_value = /*layer*/ ctx[6].name)) {
    				attr_dev(button, "key", button_key_value);
    			}

    			if (dirty & /*layerList*/ 1 && button_class_value !== (button_class_value = `card-btn ${/*layer*/ ctx[6].isShown ? "btn-primary" : ""} my-1 `)) {
    				attr_dev(button, "class", button_class_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$6.name,
    		type: "each",
    		source: "(42:3) {#each layerList as layer}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$g(ctx) {
    	let section;
    	let div1;
    	let p;
    	let t1;
    	let button;
    	let t2_value = (/*showAllLayers*/ ctx[1] ? "Show All" : "Disable All") + "";
    	let t2;
    	let button_class_value;
    	let t3;
    	let div0;
    	let mounted;
    	let dispose;
    	let each_value = /*layerList*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$6(get_each_context$6(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			section = element("section");
    			div1 = element("div");
    			p = element("p");
    			p.textContent = "Layers:";
    			t1 = space();
    			button = element("button");
    			t2 = text(t2_value);
    			t3 = space();
    			div0 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(p, "class", "font-bold my-1");
    			add_location(p, file$f, 38, 2, 1154);

    			attr_dev(button, "class", button_class_value = `card-btn   ${/*showAllLayers*/ ctx[1]
			? "btn-green"
			: " btn-error-outline"}  my-1 `);

    			add_location(button, file$f, 39, 2, 1194);
    			attr_dev(div0, "class", "overflow-auto");
    			add_location(div0, file$f, 40, 2, 1366);
    			attr_dev(div1, "class", "p-4");
    			add_location(div1, file$f, 37, 1, 1134);
    			attr_dev(section, "class", "card h-fit scale-in-center");
    			add_location(section, file$f, 36, 0, 1088);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, div1);
    			append_dev(div1, p);
    			append_dev(div1, t1);
    			append_dev(div1, button);
    			append_dev(button, t2);
    			append_dev(div1, t3);
    			append_dev(div1, div0);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div0, null);
    			}

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*toggleLayers*/ ctx[2], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*showAllLayers*/ 2 && t2_value !== (t2_value = (/*showAllLayers*/ ctx[1] ? "Show All" : "Disable All") + "")) set_data_dev(t2, t2_value);

    			if (dirty & /*showAllLayers*/ 2 && button_class_value !== (button_class_value = `card-btn   ${/*showAllLayers*/ ctx[1]
			? "btn-green"
			: " btn-error-outline"}  my-1 `)) {
    				attr_dev(button, "class", button_class_value);
    			}

    			if (dirty & /*layerList, toggleLayer*/ 9) {
    				each_value = /*layerList*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$6(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$6(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div0, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: noop$2,
    		o: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$g.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$g($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Layers', slots, []);
    	let { layerList = [] } = $$props;
    	let showAllLayers = false;

    	const toggleLayers = () => {
    		try {
    			//Change all the isShow values to true or false
    			let tempCollection = layerList;

    			tempCollection.map(layer => {
    				layer.isShown = showAllLayers;
    				return layer;
    			});

    			$$invalidate(0, layerList = tempCollection);
    			$$invalidate(1, showAllLayers = !showAllLayers);
    		} catch(e) {
    			console.log('Unable to toggle Layers');
    		}
    	};

    	const toggleLayer = selectedLayer => {
    		try {
    			// Get the object from the list and toggle the is shown
    			let tempCollection = layerList;

    			let index = tempCollection.findIndex(layer => layer.name === selectedLayer.name);
    			tempCollection[index].isShown = !tempCollection[index].isShown;
    			$$invalidate(0, layerList = tempCollection);

    			if (checkIfAllLayersAreSame() === true) {
    				$$invalidate(1, showAllLayers = !tempCollection[index].isShown);
    			}
    		} catch(e) {
    			console.log('Unable to toggle Layer');
    		}
    	};

    	const checkIfAllLayersAreSame = () => {
    		let initialIsShown = layerList[0].isShown;
    		return layerList.every(element => element.isShown === initialIsShown);
    	};

    	const writable_props = ['layerList'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$2.warn(`<Layers> was created with unknown prop '${key}'`);
    	});

    	const click_handler = layer => toggleLayer(layer);

    	$$self.$$set = $$props => {
    		if ('layerList' in $$props) $$invalidate(0, layerList = $$props.layerList);
    	};

    	$$self.$capture_state = () => ({
    		layerList,
    		showAllLayers,
    		toggleLayers,
    		toggleLayer,
    		checkIfAllLayersAreSame
    	});

    	$$self.$inject_state = $$props => {
    		if ('layerList' in $$props) $$invalidate(0, layerList = $$props.layerList);
    		if ('showAllLayers' in $$props) $$invalidate(1, showAllLayers = $$props.showAllLayers);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [layerList, showAllLayers, toggleLayers, toggleLayer, click_handler];
    }

    class Layers extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$g, create_fragment$g, safe_not_equal, { layerList: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Layers",
    			options,
    			id: create_fragment$g.name
    		});
    	}

    	get layerList() {
    		throw new Error("<Layers>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set layerList(value) {
    		throw new Error("<Layers>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/map/MapStyleSelector.svelte generated by Svelte v3.49.0 */

    const { console: console_1$1 } = globals;
    const file$e = "src/components/map/MapStyleSelector.svelte";

    function get_each_context_1$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[8] = list[i];
    	return child_ctx;
    }

    function get_each_context$5(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[8] = list[i];
    	return child_ctx;
    }

    // (37:2) {:else}
    function create_else_block$5(ctx) {
    	let each_1_anchor;
    	let each_value_1 = /*mapStyleList*/ ctx[2];
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$2(get_each_context_1$2(ctx, each_value_1, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*mapStyleList, mapStyle, toggleStyle*/ 13) {
    				each_value_1 = /*mapStyleList*/ ctx[2];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$2(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1$2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$5.name,
    		type: "else",
    		source: "(37:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (29:2) {#if isLargeMenu === true}
    function create_if_block$8(ctx) {
    	let div;
    	let each_value = /*mapStyleList*/ ctx[2];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$5(get_each_context$5(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div, "class", "flex flex-col");
    			add_location(div, file$e, 29, 3, 1468);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*mapStyle, mapStyleList, toggleStyle*/ 13) {
    				each_value = /*mapStyleList*/ ctx[2];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$5(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$5(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$8.name,
    		type: "if",
    		source: "(29:2) {#if isLargeMenu === true}",
    		ctx
    	});

    	return block;
    }

    // (38:3) {#each mapStyleList as mapStyleItem}
    function create_each_block_1$2(ctx) {
    	let div;
    	let input;
    	let input_checked_value;
    	let t0;
    	let label;
    	let t1_value = /*mapStyleItem*/ ctx[8].name + "";
    	let t1;
    	let t2;
    	let mounted;
    	let dispose;

    	function click_handler_1() {
    		return /*click_handler_1*/ ctx[7](/*mapStyleItem*/ ctx[8]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			input = element("input");
    			t0 = space();
    			label = element("label");
    			t1 = text(t1_value);
    			t2 = space();
    			attr_dev(input, "id", /*mapStyleItem*/ ctx[8].name);
    			attr_dev(input, "type", "radio");
    			input.value = /*mapStyleItem*/ ctx[8].id;
    			input.checked = input_checked_value = /*mapStyle*/ ctx[0] === /*mapStyleItem*/ ctx[8].id;
    			add_location(input, file$e, 39, 5, 1896);
    			attr_dev(label, "class", "ml-2");
    			attr_dev(label, "for", /*mapStyleItem*/ ctx[8].name);
    			add_location(label, file$e, 40, 5, 2056);
    			attr_dev(div, "key", /*mapStyleItem*/ ctx[8].id);
    			add_location(div, file$e, 38, 4, 1863);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, input);
    			append_dev(div, t0);
    			append_dev(div, label);
    			append_dev(label, t1);
    			append_dev(div, t2);

    			if (!mounted) {
    				dispose = listen_dev(input, "click", click_handler_1, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*mapStyle*/ 1 && input_checked_value !== (input_checked_value = /*mapStyle*/ ctx[0] === /*mapStyleItem*/ ctx[8].id)) {
    				prop_dev(input, "checked", input_checked_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$2.name,
    		type: "each",
    		source: "(38:3) {#each mapStyleList as mapStyleItem}",
    		ctx
    	});

    	return block;
    }

    // (31:4) {#each mapStyleList as mapStyleItem}
    function create_each_block$5(ctx) {
    	let button;
    	let img;
    	let img_src_value;
    	let button_class_value;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[6](/*mapStyleItem*/ ctx[8]);
    	}

    	const block = {
    		c: function create() {
    			button = element("button");
    			img = element("img");
    			attr_dev(img, "class", "mapstyle-img");
    			if (!src_url_equal(img.src, img_src_value = /*mapStyleItem*/ ctx[8].img)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "height", "100");
    			attr_dev(img, "width", "100");
    			attr_dev(img, "alt", "");
    			add_location(img, file$e, 32, 7, 1688);

    			attr_dev(button, "class", button_class_value = `map-style my-1 ${/*mapStyle*/ ctx[0] === /*mapStyleItem*/ ctx[8].id
			? "map-style-selected"
			: ""}`);

    			add_location(button, file$e, 31, 5, 1542);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, img);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*mapStyle*/ 1 && button_class_value !== (button_class_value = `map-style my-1 ${/*mapStyle*/ ctx[0] === /*mapStyleItem*/ ctx[8].id
			? "map-style-selected"
			: ""}`)) {
    				attr_dev(button, "class", button_class_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$5.name,
    		type: "each",
    		source: "(31:4) {#each mapStyleList as mapStyleItem}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$f(ctx) {
    	let div;
    	let section;
    	let button;
    	let i;
    	let i_class_value;
    	let t0;
    	let p;
    	let t2;
    	let mounted;
    	let dispose;

    	function select_block_type(ctx, dirty) {
    		if (/*isLargeMenu*/ ctx[1] === true) return create_if_block$8;
    		return create_else_block$5;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			section = element("section");
    			button = element("button");
    			i = element("i");
    			t0 = space();
    			p = element("p");
    			p.textContent = "Map Style:";
    			t2 = space();
    			if_block.c();
    			attr_dev(i, "class", i_class_value = `fa-solid ${/*isLargeMenu*/ ctx[1] ? "fa-minimize" : "fa-expand"}`);
    			add_location(i, file$e, 26, 69, 1322);
    			attr_dev(button, "class", "card-btn my-1 text-center");
    			add_location(button, file$e, 26, 2, 1255);
    			attr_dev(p, "class", "my-1");
    			add_location(p, file$e, 27, 2, 1404);
    			attr_dev(section, "class", "card h-fit scale-in-center p-4");
    			add_location(section, file$e, 25, 1, 1204);
    			attr_dev(div, "class", "absolute top-2 left-2");
    			add_location(div, file$e, 24, 0, 1167);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, section);
    			append_dev(section, button);
    			append_dev(button, i);
    			append_dev(section, t0);
    			append_dev(section, p);
    			append_dev(section, t2);
    			if_block.m(section, null);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*toggleMenu*/ ctx[4], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*isLargeMenu*/ 2 && i_class_value !== (i_class_value = `fa-solid ${/*isLargeMenu*/ ctx[1] ? "fa-minimize" : "fa-expand"}`)) {
    				attr_dev(i, "class", i_class_value);
    			}

    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(section, null);
    				}
    			}
    		},
    		i: noop$2,
    		o: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if_block.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$f.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$f($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MapStyleSelector', slots, []);
    	let { mapStyle } = $$props;
    	let { isReadyForStyleSwitching } = $$props;
    	let isLargeMenu = false;

    	const mapStyleList = [
    		{
    			name: "Streets",
    			id: "streets-v11",
    			img: "https://assets.website-files.com/5e83362767d71ffd59a0c8a9/5ea01b977fb48a501b898a93_ipad-map%20streets.png"
    		},
    		{
    			name: "Dark",
    			id: "dark-v10",
    			img: "https://assets.website-files.com/5e83362767d71ffd59a0c8a9/5ea01810f9a5b1c55841ee6f_ipad-map%20dark.png"
    		},
    		{
    			name: "Outdoors",
    			id: "outdoors-v11",
    			img: "https://assets.website-files.com/5e83362767d71ffd59a0c8a9/5ea01bd0779fa266f900ba3c_ipad-map%20outdoors.png"
    		},
    		{
    			name: "Satellite",
    			id: "satellite-streets-v11",
    			img: "https://assets.website-files.com/5e83362767d71ffd59a0c8a9/6025417270820571127804d8_ipad-map.png"
    		},
    		{
    			name: "Dark - Traffic",
    			id: "navigation-night-v1",
    			img: "https://assets.website-files.com/5e83362767d71ffd59a0c8a9/5ea01810f9a5b1c55841ee6f_ipad-map%20dark.png"
    		}
    	];

    	const toggleStyle = mapStyleItem => {
    		try {
    			$$invalidate(0, mapStyle = mapStyleItem);
    			$$invalidate(5, isReadyForStyleSwitching = true);
    		} catch(e) {
    			console.log("Unable to toggle Map Style");
    		}
    	};

    	const toggleMenu = () => {
    		$$invalidate(1, isLargeMenu = !isLargeMenu);
    	};

    	const writable_props = ['mapStyle', 'isReadyForStyleSwitching'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$1.warn(`<MapStyleSelector> was created with unknown prop '${key}'`);
    	});

    	const click_handler = mapStyleItem => toggleStyle(mapStyleItem.id);
    	const click_handler_1 = mapStyleItem => toggleStyle(mapStyleItem.id);

    	$$self.$$set = $$props => {
    		if ('mapStyle' in $$props) $$invalidate(0, mapStyle = $$props.mapStyle);
    		if ('isReadyForStyleSwitching' in $$props) $$invalidate(5, isReadyForStyleSwitching = $$props.isReadyForStyleSwitching);
    	};

    	$$self.$capture_state = () => ({
    		mapStyle,
    		isReadyForStyleSwitching,
    		isLargeMenu,
    		mapStyleList,
    		toggleStyle,
    		toggleMenu
    	});

    	$$self.$inject_state = $$props => {
    		if ('mapStyle' in $$props) $$invalidate(0, mapStyle = $$props.mapStyle);
    		if ('isReadyForStyleSwitching' in $$props) $$invalidate(5, isReadyForStyleSwitching = $$props.isReadyForStyleSwitching);
    		if ('isLargeMenu' in $$props) $$invalidate(1, isLargeMenu = $$props.isLargeMenu);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		mapStyle,
    		isLargeMenu,
    		mapStyleList,
    		toggleStyle,
    		toggleMenu,
    		isReadyForStyleSwitching,
    		click_handler,
    		click_handler_1
    	];
    }

    class MapStyleSelector extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$f, create_fragment$f, safe_not_equal, { mapStyle: 0, isReadyForStyleSwitching: 5 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MapStyleSelector",
    			options,
    			id: create_fragment$f.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*mapStyle*/ ctx[0] === undefined && !('mapStyle' in props)) {
    			console_1$1.warn("<MapStyleSelector> was created without expected prop 'mapStyle'");
    		}

    		if (/*isReadyForStyleSwitching*/ ctx[5] === undefined && !('isReadyForStyleSwitching' in props)) {
    			console_1$1.warn("<MapStyleSelector> was created without expected prop 'isReadyForStyleSwitching'");
    		}
    	}

    	get mapStyle() {
    		throw new Error("<MapStyleSelector>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set mapStyle(value) {
    		throw new Error("<MapStyleSelector>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isReadyForStyleSwitching() {
    		throw new Error("<MapStyleSelector>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isReadyForStyleSwitching(value) {
    		throw new Error("<MapStyleSelector>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const stringToByteArray$1 = function (str) {
        // TODO(user): Use native implementations if/when available
        const out = [];
        let p = 0;
        for (let i = 0; i < str.length; i++) {
            let c = str.charCodeAt(i);
            if (c < 128) {
                out[p++] = c;
            }
            else if (c < 2048) {
                out[p++] = (c >> 6) | 192;
                out[p++] = (c & 63) | 128;
            }
            else if ((c & 0xfc00) === 0xd800 &&
                i + 1 < str.length &&
                (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {
                // Surrogate Pair
                c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);
                out[p++] = (c >> 18) | 240;
                out[p++] = ((c >> 12) & 63) | 128;
                out[p++] = ((c >> 6) & 63) | 128;
                out[p++] = (c & 63) | 128;
            }
            else {
                out[p++] = (c >> 12) | 224;
                out[p++] = ((c >> 6) & 63) | 128;
                out[p++] = (c & 63) | 128;
            }
        }
        return out;
    };
    /**
     * Turns an array of numbers into the string given by the concatenation of the
     * characters to which the numbers correspond.
     * @param bytes Array of numbers representing characters.
     * @return Stringification of the array.
     */
    const byteArrayToString = function (bytes) {
        // TODO(user): Use native implementations if/when available
        const out = [];
        let pos = 0, c = 0;
        while (pos < bytes.length) {
            const c1 = bytes[pos++];
            if (c1 < 128) {
                out[c++] = String.fromCharCode(c1);
            }
            else if (c1 > 191 && c1 < 224) {
                const c2 = bytes[pos++];
                out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
            }
            else if (c1 > 239 && c1 < 365) {
                // Surrogate Pair
                const c2 = bytes[pos++];
                const c3 = bytes[pos++];
                const c4 = bytes[pos++];
                const u = (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -
                    0x10000;
                out[c++] = String.fromCharCode(0xd800 + (u >> 10));
                out[c++] = String.fromCharCode(0xdc00 + (u & 1023));
            }
            else {
                const c2 = bytes[pos++];
                const c3 = bytes[pos++];
                out[c++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
            }
        }
        return out.join('');
    };
    // We define it as an object literal instead of a class because a class compiled down to es5 can't
    // be treeshaked. https://github.com/rollup/rollup/issues/1691
    // Static lookup maps, lazily populated by init_()
    const base64 = {
        /**
         * Maps bytes to characters.
         */
        byteToCharMap_: null,
        /**
         * Maps characters to bytes.
         */
        charToByteMap_: null,
        /**
         * Maps bytes to websafe characters.
         * @private
         */
        byteToCharMapWebSafe_: null,
        /**
         * Maps websafe characters to bytes.
         * @private
         */
        charToByteMapWebSafe_: null,
        /**
         * Our default alphabet, shared between
         * ENCODED_VALS and ENCODED_VALS_WEBSAFE
         */
        ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',
        /**
         * Our default alphabet. Value 64 (=) is special; it means "nothing."
         */
        get ENCODED_VALS() {
            return this.ENCODED_VALS_BASE + '+/=';
        },
        /**
         * Our websafe alphabet.
         */
        get ENCODED_VALS_WEBSAFE() {
            return this.ENCODED_VALS_BASE + '-_.';
        },
        /**
         * Whether this browser supports the atob and btoa functions. This extension
         * started at Mozilla but is now implemented by many browsers. We use the
         * ASSUME_* variables to avoid pulling in the full useragent detection library
         * but still allowing the standard per-browser compilations.
         *
         */
        HAS_NATIVE_SUPPORT: typeof atob === 'function',
        /**
         * Base64-encode an array of bytes.
         *
         * @param input An array of bytes (numbers with
         *     value in [0, 255]) to encode.
         * @param webSafe Boolean indicating we should use the
         *     alternative alphabet.
         * @return The base64 encoded string.
         */
        encodeByteArray(input, webSafe) {
            if (!Array.isArray(input)) {
                throw Error('encodeByteArray takes an array as a parameter');
            }
            this.init_();
            const byteToCharMap = webSafe
                ? this.byteToCharMapWebSafe_
                : this.byteToCharMap_;
            const output = [];
            for (let i = 0; i < input.length; i += 3) {
                const byte1 = input[i];
                const haveByte2 = i + 1 < input.length;
                const byte2 = haveByte2 ? input[i + 1] : 0;
                const haveByte3 = i + 2 < input.length;
                const byte3 = haveByte3 ? input[i + 2] : 0;
                const outByte1 = byte1 >> 2;
                const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);
                let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);
                let outByte4 = byte3 & 0x3f;
                if (!haveByte3) {
                    outByte4 = 64;
                    if (!haveByte2) {
                        outByte3 = 64;
                    }
                }
                output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
            }
            return output.join('');
        },
        /**
         * Base64-encode a string.
         *
         * @param input A string to encode.
         * @param webSafe If true, we should use the
         *     alternative alphabet.
         * @return The base64 encoded string.
         */
        encodeString(input, webSafe) {
            // Shortcut for Mozilla browsers that implement
            // a native base64 encoder in the form of "btoa/atob"
            if (this.HAS_NATIVE_SUPPORT && !webSafe) {
                return btoa(input);
            }
            return this.encodeByteArray(stringToByteArray$1(input), webSafe);
        },
        /**
         * Base64-decode a string.
         *
         * @param input to decode.
         * @param webSafe True if we should use the
         *     alternative alphabet.
         * @return string representing the decoded value.
         */
        decodeString(input, webSafe) {
            // Shortcut for Mozilla browsers that implement
            // a native base64 encoder in the form of "btoa/atob"
            if (this.HAS_NATIVE_SUPPORT && !webSafe) {
                return atob(input);
            }
            return byteArrayToString(this.decodeStringToByteArray(input, webSafe));
        },
        /**
         * Base64-decode a string.
         *
         * In base-64 decoding, groups of four characters are converted into three
         * bytes.  If the encoder did not apply padding, the input length may not
         * be a multiple of 4.
         *
         * In this case, the last group will have fewer than 4 characters, and
         * padding will be inferred.  If the group has one or two characters, it decodes
         * to one byte.  If the group has three characters, it decodes to two bytes.
         *
         * @param input Input to decode.
         * @param webSafe True if we should use the web-safe alphabet.
         * @return bytes representing the decoded value.
         */
        decodeStringToByteArray(input, webSafe) {
            this.init_();
            const charToByteMap = webSafe
                ? this.charToByteMapWebSafe_
                : this.charToByteMap_;
            const output = [];
            for (let i = 0; i < input.length;) {
                const byte1 = charToByteMap[input.charAt(i++)];
                const haveByte2 = i < input.length;
                const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
                ++i;
                const haveByte3 = i < input.length;
                const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
                ++i;
                const haveByte4 = i < input.length;
                const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
                ++i;
                if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {
                    throw Error();
                }
                const outByte1 = (byte1 << 2) | (byte2 >> 4);
                output.push(outByte1);
                if (byte3 !== 64) {
                    const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);
                    output.push(outByte2);
                    if (byte4 !== 64) {
                        const outByte3 = ((byte3 << 6) & 0xc0) | byte4;
                        output.push(outByte3);
                    }
                }
            }
            return output;
        },
        /**
         * Lazy static initialization function. Called before
         * accessing any of the static map variables.
         * @private
         */
        init_() {
            if (!this.byteToCharMap_) {
                this.byteToCharMap_ = {};
                this.charToByteMap_ = {};
                this.byteToCharMapWebSafe_ = {};
                this.charToByteMapWebSafe_ = {};
                // We want quick mappings back and forth, so we precompute two maps.
                for (let i = 0; i < this.ENCODED_VALS.length; i++) {
                    this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);
                    this.charToByteMap_[this.byteToCharMap_[i]] = i;
                    this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);
                    this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;
                    // Be forgiving when decoding and correctly decode both encodings.
                    if (i >= this.ENCODED_VALS_BASE.length) {
                        this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
                        this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;
                    }
                }
            }
        }
    };
    /**
     * URL-safe base64 encoding
     */
    const base64Encode = function (str) {
        const utf8Bytes = stringToByteArray$1(str);
        return base64.encodeByteArray(utf8Bytes, true);
    };
    /**
     * URL-safe base64 encoding (without "." padding in the end).
     * e.g. Used in JSON Web Token (JWT) parts.
     */
    const base64urlEncodeWithoutPadding = function (str) {
        // Use base64url encoding and remove padding in the end (dot characters).
        return base64Encode(str).replace(/\./g, '');
    };
    /**
     * URL-safe base64 decoding
     *
     * NOTE: DO NOT use the global atob() function - it does NOT support the
     * base64Url variant encoding.
     *
     * @param str To be decoded
     * @return Decoded result, if possible
     */
    const base64Decode = function (str) {
        try {
            return base64.decodeString(str, true);
        }
        catch (e) {
            console.error('base64Decode failed: ', e);
        }
        return null;
    };
    /**
     * Copy properties from source to target (recursively allows extension
     * of Objects and Arrays).  Scalar values in the target are over-written.
     * If target is undefined, an object of the appropriate type will be created
     * (and returned).
     *
     * We recursively copy all child properties of plain Objects in the source- so
     * that namespace- like dictionaries are merged.
     *
     * Note that the target can be a function, in which case the properties in
     * the source Object are copied onto it as static properties of the Function.
     *
     * Note: we don't merge __proto__ to prevent prototype pollution
     */
    function deepExtend(target, source) {
        if (!(source instanceof Object)) {
            return source;
        }
        switch (source.constructor) {
            case Date:
                // Treat Dates like scalars; if the target date object had any child
                // properties - they will be lost!
                const dateValue = source;
                return new Date(dateValue.getTime());
            case Object:
                if (target === undefined) {
                    target = {};
                }
                break;
            case Array:
                // Always copy the array source and overwrite the target.
                target = [];
                break;
            default:
                // Not a plain Object - treat it as a scalar.
                return source;
        }
        for (const prop in source) {
            // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202
            if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {
                continue;
            }
            target[prop] = deepExtend(target[prop], source[prop]);
        }
        return target;
    }
    function isValidKey(key) {
        return key !== '__proto__';
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class Deferred {
        constructor() {
            this.reject = () => { };
            this.resolve = () => { };
            this.promise = new Promise((resolve, reject) => {
                this.resolve = resolve;
                this.reject = reject;
            });
        }
        /**
         * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around
         * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback
         * and returns a node-style callback which will resolve or reject the Deferred's promise.
         */
        wrapCallback(callback) {
            return (error, value) => {
                if (error) {
                    this.reject(error);
                }
                else {
                    this.resolve(value);
                }
                if (typeof callback === 'function') {
                    // Attaching noop handler just in case developer wasn't expecting
                    // promises
                    this.promise.catch(() => { });
                    // Some of our callbacks don't expect a value and our own tests
                    // assert that the parameter length is 1
                    if (callback.length === 1) {
                        callback(error);
                    }
                    else {
                        callback(error, value);
                    }
                }
            };
        }
    }

    /**
     * @license
     * Copyright 2021 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function createMockUserToken(token, projectId) {
        if (token.uid) {
            throw new Error('The "uid" field is no longer supported by mockUserToken. Please use "sub" instead for Firebase Auth User ID.');
        }
        // Unsecured JWTs use "none" as the algorithm.
        const header = {
            alg: 'none',
            type: 'JWT'
        };
        const project = projectId || 'demo-project';
        const iat = token.iat || 0;
        const sub = token.sub || token.user_id;
        if (!sub) {
            throw new Error("mockUserToken must contain 'sub' or 'user_id' field!");
        }
        const payload = Object.assign({ 
            // Set all required fields to decent defaults
            iss: `https://securetoken.google.com/${project}`, aud: project, iat, exp: iat + 3600, auth_time: iat, sub, user_id: sub, firebase: {
                sign_in_provider: 'custom',
                identities: {}
            } }, token);
        // Unsecured JWTs use the empty string as a signature.
        const signature = '';
        return [
            base64urlEncodeWithoutPadding(JSON.stringify(header)),
            base64urlEncodeWithoutPadding(JSON.stringify(payload)),
            signature
        ].join('.');
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns navigator.userAgent string or '' if it's not defined.
     * @return user agent string
     */
    function getUA() {
        if (typeof navigator !== 'undefined' &&
            typeof navigator['userAgent'] === 'string') {
            return navigator['userAgent'];
        }
        else {
            return '';
        }
    }
    /**
     * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.
     *
     * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap
     * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally
     * wait for a callback.
     */
    function isMobileCordova() {
        return (typeof window !== 'undefined' &&
            // @ts-ignore Setting up an broadly applicable index signature for Window
            // just to deal with this case would probably be a bad idea.
            !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&
            /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA()));
    }
    /**
     * Detect Node.js.
     *
     * @return true if Node.js environment is detected.
     */
    // Node detection logic from: https://github.com/iliakan/detect-node/
    function isNode() {
        try {
            return (Object.prototype.toString.call(global.process) === '[object process]');
        }
        catch (e) {
            return false;
        }
    }
    /**
     * Detect Browser Environment
     */
    function isBrowser() {
        return typeof self === 'object' && self.self === self;
    }
    function isBrowserExtension() {
        const runtime = typeof chrome === 'object'
            ? chrome.runtime
            : typeof browser === 'object'
                ? browser.runtime
                : undefined;
        return typeof runtime === 'object' && runtime.id !== undefined;
    }
    /**
     * Detect React Native.
     *
     * @return true if ReactNative environment is detected.
     */
    function isReactNative() {
        return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');
    }
    /** Detects Electron apps. */
    function isElectron() {
        return getUA().indexOf('Electron/') >= 0;
    }
    /** Detects Internet Explorer. */
    function isIE() {
        const ua = getUA();
        return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;
    }
    /** Detects Universal Windows Platform apps. */
    function isUWP() {
        return getUA().indexOf('MSAppHost/') >= 0;
    }
    /** Returns true if we are running in Safari. */
    function isSafari() {
        return (!isNode() &&
            navigator.userAgent.includes('Safari') &&
            !navigator.userAgent.includes('Chrome'));
    }
    /**
     * This method checks if indexedDB is supported by current browser/service worker context
     * @return true if indexedDB is supported by current browser/service worker context
     */
    function isIndexedDBAvailable() {
        return typeof indexedDB === 'object';
    }
    /**
     * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject
     * if errors occur during the database open operation.
     *
     * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox
     * private browsing)
     */
    function validateIndexedDBOpenable() {
        return new Promise((resolve, reject) => {
            try {
                let preExist = true;
                const DB_CHECK_NAME = 'validate-browser-context-for-indexeddb-analytics-module';
                const request = self.indexedDB.open(DB_CHECK_NAME);
                request.onsuccess = () => {
                    request.result.close();
                    // delete database only when it doesn't pre-exist
                    if (!preExist) {
                        self.indexedDB.deleteDatabase(DB_CHECK_NAME);
                    }
                    resolve(true);
                };
                request.onupgradeneeded = () => {
                    preExist = false;
                };
                request.onerror = () => {
                    var _a;
                    reject(((_a = request.error) === null || _a === void 0 ? void 0 : _a.message) || '');
                };
            }
            catch (error) {
                reject(error);
            }
        });
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @fileoverview Standardized Firebase Error.
     *
     * Usage:
     *
     *   // Typescript string literals for type-safe codes
     *   type Err =
     *     'unknown' |
     *     'object-not-found'
     *     ;
     *
     *   // Closure enum for type-safe error codes
     *   // at-enum {string}
     *   var Err = {
     *     UNKNOWN: 'unknown',
     *     OBJECT_NOT_FOUND: 'object-not-found',
     *   }
     *
     *   let errors: Map<Err, string> = {
     *     'generic-error': "Unknown error",
     *     'file-not-found': "Could not find file: {$file}",
     *   };
     *
     *   // Type-safe function - must pass a valid error code as param.
     *   let error = new ErrorFactory<Err>('service', 'Service', errors);
     *
     *   ...
     *   throw error.create(Err.GENERIC);
     *   ...
     *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});
     *   ...
     *   // Service: Could not file file: foo.txt (service/file-not-found).
     *
     *   catch (e) {
     *     assert(e.message === "Could not find file: foo.txt.");
     *     if ((e as FirebaseError)?.code === 'service/file-not-found') {
     *       console.log("Could not read file: " + e['file']);
     *     }
     *   }
     */
    const ERROR_NAME = 'FirebaseError';
    // Based on code from:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types
    class FirebaseError extends Error {
        constructor(
        /** The error code for this error. */
        code, message, 
        /** Custom data for this error. */
        customData) {
            super(message);
            this.code = code;
            this.customData = customData;
            /** The custom name for all FirebaseErrors. */
            this.name = ERROR_NAME;
            // Fix For ES5
            // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
            Object.setPrototypeOf(this, FirebaseError.prototype);
            // Maintains proper stack trace for where our error was thrown.
            // Only available on V8.
            if (Error.captureStackTrace) {
                Error.captureStackTrace(this, ErrorFactory.prototype.create);
            }
        }
    }
    class ErrorFactory {
        constructor(service, serviceName, errors) {
            this.service = service;
            this.serviceName = serviceName;
            this.errors = errors;
        }
        create(code, ...data) {
            const customData = data[0] || {};
            const fullCode = `${this.service}/${code}`;
            const template = this.errors[code];
            const message = template ? replaceTemplate(template, customData) : 'Error';
            // Service Name: Error message (service/code).
            const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;
            const error = new FirebaseError(fullCode, fullMessage, customData);
            return error;
        }
    }
    function replaceTemplate(template, data) {
        return template.replace(PATTERN, (_, key) => {
            const value = data[key];
            return value != null ? String(value) : `<${key}?>`;
        });
    }
    const PATTERN = /\{\$([^}]+)}/g;

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function contains$1(obj, key) {
        return Object.prototype.hasOwnProperty.call(obj, key);
    }
    function isEmpty(obj) {
        for (const key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
                return false;
            }
        }
        return true;
    }
    /**
     * Deep equal two objects. Support Arrays and Objects.
     */
    function deepEqual(a, b) {
        if (a === b) {
            return true;
        }
        const aKeys = Object.keys(a);
        const bKeys = Object.keys(b);
        for (const k of aKeys) {
            if (!bKeys.includes(k)) {
                return false;
            }
            const aProp = a[k];
            const bProp = b[k];
            if (isObject$2(aProp) && isObject$2(bProp)) {
                if (!deepEqual(aProp, bProp)) {
                    return false;
                }
            }
            else if (aProp !== bProp) {
                return false;
            }
        }
        for (const k of bKeys) {
            if (!aKeys.includes(k)) {
                return false;
            }
        }
        return true;
    }
    function isObject$2(thing) {
        return thing !== null && typeof thing === 'object';
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a
     * params object (e.g. {arg: 'val', arg2: 'val2'})
     * Note: You must prepend it with ? when adding it to a URL.
     */
    function querystring(querystringParams) {
        const params = [];
        for (const [key, value] of Object.entries(querystringParams)) {
            if (Array.isArray(value)) {
                value.forEach(arrayVal => {
                    params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));
                });
            }
            else {
                params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
            }
        }
        return params.length ? '&' + params.join('&') : '';
    }
    /**
     * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object
     * (e.g. {arg: 'val', arg2: 'val2'})
     */
    function querystringDecode(querystring) {
        const obj = {};
        const tokens = querystring.replace(/^\?/, '').split('&');
        tokens.forEach(token => {
            if (token) {
                const [key, value] = token.split('=');
                obj[decodeURIComponent(key)] = decodeURIComponent(value);
            }
        });
        return obj;
    }
    /**
     * Extract the query string part of a URL, including the leading question mark (if present).
     */
    function extractQuerystring(url) {
        const queryStart = url.indexOf('?');
        if (!queryStart) {
            return '';
        }
        const fragmentStart = url.indexOf('#', queryStart);
        return url.substring(queryStart, fragmentStart > 0 ? fragmentStart : undefined);
    }

    /**
     * Helper to make a Subscribe function (just like Promise helps make a
     * Thenable).
     *
     * @param executor Function which can make calls to a single Observer
     *     as a proxy.
     * @param onNoObservers Callback when count of Observers goes to zero.
     */
    function createSubscribe(executor, onNoObservers) {
        const proxy = new ObserverProxy(executor, onNoObservers);
        return proxy.subscribe.bind(proxy);
    }
    /**
     * Implement fan-out for any number of Observers attached via a subscribe
     * function.
     */
    class ObserverProxy {
        /**
         * @param executor Function which can make calls to a single Observer
         *     as a proxy.
         * @param onNoObservers Callback when count of Observers goes to zero.
         */
        constructor(executor, onNoObservers) {
            this.observers = [];
            this.unsubscribes = [];
            this.observerCount = 0;
            // Micro-task scheduling by calling task.then().
            this.task = Promise.resolve();
            this.finalized = false;
            this.onNoObservers = onNoObservers;
            // Call the executor asynchronously so subscribers that are called
            // synchronously after the creation of the subscribe function
            // can still receive the very first value generated in the executor.
            this.task
                .then(() => {
                executor(this);
            })
                .catch(e => {
                this.error(e);
            });
        }
        next(value) {
            this.forEachObserver((observer) => {
                observer.next(value);
            });
        }
        error(error) {
            this.forEachObserver((observer) => {
                observer.error(error);
            });
            this.close(error);
        }
        complete() {
            this.forEachObserver((observer) => {
                observer.complete();
            });
            this.close();
        }
        /**
         * Subscribe function that can be used to add an Observer to the fan-out list.
         *
         * - We require that no event is sent to a subscriber sychronously to their
         *   call to subscribe().
         */
        subscribe(nextOrObserver, error, complete) {
            let observer;
            if (nextOrObserver === undefined &&
                error === undefined &&
                complete === undefined) {
                throw new Error('Missing Observer.');
            }
            // Assemble an Observer object when passed as callback functions.
            if (implementsAnyMethods$1(nextOrObserver, [
                'next',
                'error',
                'complete'
            ])) {
                observer = nextOrObserver;
            }
            else {
                observer = {
                    next: nextOrObserver,
                    error,
                    complete
                };
            }
            if (observer.next === undefined) {
                observer.next = noop$1;
            }
            if (observer.error === undefined) {
                observer.error = noop$1;
            }
            if (observer.complete === undefined) {
                observer.complete = noop$1;
            }
            const unsub = this.unsubscribeOne.bind(this, this.observers.length);
            // Attempt to subscribe to a terminated Observable - we
            // just respond to the Observer with the final error or complete
            // event.
            if (this.finalized) {
                // eslint-disable-next-line @typescript-eslint/no-floating-promises
                this.task.then(() => {
                    try {
                        if (this.finalError) {
                            observer.error(this.finalError);
                        }
                        else {
                            observer.complete();
                        }
                    }
                    catch (e) {
                        // nothing
                    }
                    return;
                });
            }
            this.observers.push(observer);
            return unsub;
        }
        // Unsubscribe is synchronous - we guarantee that no events are sent to
        // any unsubscribed Observer.
        unsubscribeOne(i) {
            if (this.observers === undefined || this.observers[i] === undefined) {
                return;
            }
            delete this.observers[i];
            this.observerCount -= 1;
            if (this.observerCount === 0 && this.onNoObservers !== undefined) {
                this.onNoObservers(this);
            }
        }
        forEachObserver(fn) {
            if (this.finalized) {
                // Already closed by previous event....just eat the additional values.
                return;
            }
            // Since sendOne calls asynchronously - there is no chance that
            // this.observers will become undefined.
            for (let i = 0; i < this.observers.length; i++) {
                this.sendOne(i, fn);
            }
        }
        // Call the Observer via one of it's callback function. We are careful to
        // confirm that the observe has not been unsubscribed since this asynchronous
        // function had been queued.
        sendOne(i, fn) {
            // Execute the callback asynchronously
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.task.then(() => {
                if (this.observers !== undefined && this.observers[i] !== undefined) {
                    try {
                        fn(this.observers[i]);
                    }
                    catch (e) {
                        // Ignore exceptions raised in Observers or missing methods of an
                        // Observer.
                        // Log error to console. b/31404806
                        if (typeof console !== 'undefined' && console.error) {
                            console.error(e);
                        }
                    }
                }
            });
        }
        close(err) {
            if (this.finalized) {
                return;
            }
            this.finalized = true;
            if (err !== undefined) {
                this.finalError = err;
            }
            // Proxy is no longer needed - garbage collect references
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.task.then(() => {
                this.observers = undefined;
                this.onNoObservers = undefined;
            });
        }
    }
    /**
     * Return true if the object passed in implements any of the named methods.
     */
    function implementsAnyMethods$1(obj, methods) {
        if (typeof obj !== 'object' || obj === null) {
            return false;
        }
        for (const method of methods) {
            if (method in obj && typeof obj[method] === 'function') {
                return true;
            }
        }
        return false;
    }
    function noop$1() {
        // do nothing
    }

    /**
     * @license
     * Copyright 2021 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function getModularInstance(service) {
        if (service && service._delegate) {
            return service._delegate;
        }
        else {
            return service;
        }
    }

    /**
     * Component for service name T, e.g. `auth`, `auth-internal`
     */
    class Component$1 {
        /**
         *
         * @param name The public service name, e.g. app, auth, firestore, database
         * @param instanceFactory Service factory responsible for creating the public interface
         * @param type whether the service provided by the component is public or private
         */
        constructor(name, instanceFactory, type) {
            this.name = name;
            this.instanceFactory = instanceFactory;
            this.type = type;
            this.multipleInstances = false;
            /**
             * Properties to be added to the service namespace
             */
            this.serviceProps = {};
            this.instantiationMode = "LAZY" /* LAZY */;
            this.onInstanceCreated = null;
        }
        setInstantiationMode(mode) {
            this.instantiationMode = mode;
            return this;
        }
        setMultipleInstances(multipleInstances) {
            this.multipleInstances = multipleInstances;
            return this;
        }
        setServiceProps(props) {
            this.serviceProps = props;
            return this;
        }
        setInstanceCreatedCallback(callback) {
            this.onInstanceCreated = callback;
            return this;
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const DEFAULT_ENTRY_NAME$1 = '[DEFAULT]';

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Provider for instance for service name T, e.g. 'auth', 'auth-internal'
     * NameServiceMapping[T] is an alias for the type of the instance
     */
    class Provider {
        constructor(name, container) {
            this.name = name;
            this.container = container;
            this.component = null;
            this.instances = new Map();
            this.instancesDeferred = new Map();
            this.instancesOptions = new Map();
            this.onInitCallbacks = new Map();
        }
        /**
         * @param identifier A provider can provide mulitple instances of a service
         * if this.component.multipleInstances is true.
         */
        get(identifier) {
            // if multipleInstances is not supported, use the default name
            const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
            if (!this.instancesDeferred.has(normalizedIdentifier)) {
                const deferred = new Deferred();
                this.instancesDeferred.set(normalizedIdentifier, deferred);
                if (this.isInitialized(normalizedIdentifier) ||
                    this.shouldAutoInitialize()) {
                    // initialize the service if it can be auto-initialized
                    try {
                        const instance = this.getOrInitializeService({
                            instanceIdentifier: normalizedIdentifier
                        });
                        if (instance) {
                            deferred.resolve(instance);
                        }
                    }
                    catch (e) {
                        // when the instance factory throws an exception during get(), it should not cause
                        // a fatal error. We just return the unresolved promise in this case.
                    }
                }
            }
            return this.instancesDeferred.get(normalizedIdentifier).promise;
        }
        getImmediate(options) {
            var _a;
            // if multipleInstances is not supported, use the default name
            const normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);
            const optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;
            if (this.isInitialized(normalizedIdentifier) ||
                this.shouldAutoInitialize()) {
                try {
                    return this.getOrInitializeService({
                        instanceIdentifier: normalizedIdentifier
                    });
                }
                catch (e) {
                    if (optional) {
                        return null;
                    }
                    else {
                        throw e;
                    }
                }
            }
            else {
                // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw
                if (optional) {
                    return null;
                }
                else {
                    throw Error(`Service ${this.name} is not available`);
                }
            }
        }
        getComponent() {
            return this.component;
        }
        setComponent(component) {
            if (component.name !== this.name) {
                throw Error(`Mismatching Component ${component.name} for Provider ${this.name}.`);
            }
            if (this.component) {
                throw Error(`Component for ${this.name} has already been provided`);
            }
            this.component = component;
            // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)
            if (!this.shouldAutoInitialize()) {
                return;
            }
            // if the service is eager, initialize the default instance
            if (isComponentEager(component)) {
                try {
                    this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME$1 });
                }
                catch (e) {
                    // when the instance factory for an eager Component throws an exception during the eager
                    // initialization, it should not cause a fatal error.
                    // TODO: Investigate if we need to make it configurable, because some component may want to cause
                    // a fatal error in this case?
                }
            }
            // Create service instances for the pending promises and resolve them
            // NOTE: if this.multipleInstances is false, only the default instance will be created
            // and all promises with resolve with it regardless of the identifier.
            for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {
                const normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
                try {
                    // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.
                    const instance = this.getOrInitializeService({
                        instanceIdentifier: normalizedIdentifier
                    });
                    instanceDeferred.resolve(instance);
                }
                catch (e) {
                    // when the instance factory throws an exception, it should not cause
                    // a fatal error. We just leave the promise unresolved.
                }
            }
        }
        clearInstance(identifier = DEFAULT_ENTRY_NAME$1) {
            this.instancesDeferred.delete(identifier);
            this.instancesOptions.delete(identifier);
            this.instances.delete(identifier);
        }
        // app.delete() will call this method on every provider to delete the services
        // TODO: should we mark the provider as deleted?
        async delete() {
            const services = Array.from(this.instances.values());
            await Promise.all([
                ...services
                    .filter(service => 'INTERNAL' in service) // legacy services
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    .map(service => service.INTERNAL.delete()),
                ...services
                    .filter(service => '_delete' in service) // modularized services
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    .map(service => service._delete())
            ]);
        }
        isComponentSet() {
            return this.component != null;
        }
        isInitialized(identifier = DEFAULT_ENTRY_NAME$1) {
            return this.instances.has(identifier);
        }
        getOptions(identifier = DEFAULT_ENTRY_NAME$1) {
            return this.instancesOptions.get(identifier) || {};
        }
        initialize(opts = {}) {
            const { options = {} } = opts;
            const normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);
            if (this.isInitialized(normalizedIdentifier)) {
                throw Error(`${this.name}(${normalizedIdentifier}) has already been initialized`);
            }
            if (!this.isComponentSet()) {
                throw Error(`Component ${this.name} has not been registered yet`);
            }
            const instance = this.getOrInitializeService({
                instanceIdentifier: normalizedIdentifier,
                options
            });
            // resolve any pending promise waiting for the service instance
            for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {
                const normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
                if (normalizedIdentifier === normalizedDeferredIdentifier) {
                    instanceDeferred.resolve(instance);
                }
            }
            return instance;
        }
        /**
         *
         * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().
         * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.
         *
         * @param identifier An optional instance identifier
         * @returns a function to unregister the callback
         */
        onInit(callback, identifier) {
            var _a;
            const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
            const existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : new Set();
            existingCallbacks.add(callback);
            this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);
            const existingInstance = this.instances.get(normalizedIdentifier);
            if (existingInstance) {
                callback(existingInstance, normalizedIdentifier);
            }
            return () => {
                existingCallbacks.delete(callback);
            };
        }
        /**
         * Invoke onInit callbacks synchronously
         * @param instance the service instance`
         */
        invokeOnInitCallbacks(instance, identifier) {
            const callbacks = this.onInitCallbacks.get(identifier);
            if (!callbacks) {
                return;
            }
            for (const callback of callbacks) {
                try {
                    callback(instance, identifier);
                }
                catch (_a) {
                    // ignore errors in the onInit callback
                }
            }
        }
        getOrInitializeService({ instanceIdentifier, options = {} }) {
            let instance = this.instances.get(instanceIdentifier);
            if (!instance && this.component) {
                instance = this.component.instanceFactory(this.container, {
                    instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),
                    options
                });
                this.instances.set(instanceIdentifier, instance);
                this.instancesOptions.set(instanceIdentifier, options);
                /**
                 * Invoke onInit listeners.
                 * Note this.component.onInstanceCreated is different, which is used by the component creator,
                 * while onInit listeners are registered by consumers of the provider.
                 */
                this.invokeOnInitCallbacks(instance, instanceIdentifier);
                /**
                 * Order is important
                 * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which
                 * makes `isInitialized()` return true.
                 */
                if (this.component.onInstanceCreated) {
                    try {
                        this.component.onInstanceCreated(this.container, instanceIdentifier, instance);
                    }
                    catch (_a) {
                        // ignore errors in the onInstanceCreatedCallback
                    }
                }
            }
            return instance || null;
        }
        normalizeInstanceIdentifier(identifier = DEFAULT_ENTRY_NAME$1) {
            if (this.component) {
                return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME$1;
            }
            else {
                return identifier; // assume multiple instances are supported before the component is provided.
            }
        }
        shouldAutoInitialize() {
            return (!!this.component &&
                this.component.instantiationMode !== "EXPLICIT" /* EXPLICIT */);
        }
    }
    // undefined should be passed to the service factory for the default instance
    function normalizeIdentifierForFactory(identifier) {
        return identifier === DEFAULT_ENTRY_NAME$1 ? undefined : identifier;
    }
    function isComponentEager(component) {
        return component.instantiationMode === "EAGER" /* EAGER */;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`
     */
    class ComponentContainer {
        constructor(name) {
            this.name = name;
            this.providers = new Map();
        }
        /**
         *
         * @param component Component being added
         * @param overwrite When a component with the same name has already been registered,
         * if overwrite is true: overwrite the existing component with the new component and create a new
         * provider with the new component. It can be useful in tests where you want to use different mocks
         * for different tests.
         * if overwrite is false: throw an exception
         */
        addComponent(component) {
            const provider = this.getProvider(component.name);
            if (provider.isComponentSet()) {
                throw new Error(`Component ${component.name} has already been registered with ${this.name}`);
            }
            provider.setComponent(component);
        }
        addOrOverwriteComponent(component) {
            const provider = this.getProvider(component.name);
            if (provider.isComponentSet()) {
                // delete the existing provider from the container, so we can register the new component
                this.providers.delete(component.name);
            }
            this.addComponent(component);
        }
        /**
         * getProvider provides a type safe interface where it can only be called with a field name
         * present in NameServiceMapping interface.
         *
         * Firebase SDKs providing services should extend NameServiceMapping interface to register
         * themselves.
         */
        getProvider(name) {
            if (this.providers.has(name)) {
                return this.providers.get(name);
            }
            // create a Provider for a service that hasn't registered with Firebase
            const provider = new Provider(name, this);
            this.providers.set(name, provider);
            return provider;
        }
        getProviders() {
            return Array.from(this.providers.values());
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A container for all of the Logger instances
     */
    const instances = [];
    /**
     * The JS SDK supports 5 log levels and also allows a user the ability to
     * silence the logs altogether.
     *
     * The order is a follows:
     * DEBUG < VERBOSE < INFO < WARN < ERROR
     *
     * All of the log types above the current log level will be captured (i.e. if
     * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and
     * `VERBOSE` logs will not)
     */
    var LogLevel;
    (function (LogLevel) {
        LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
        LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";
        LogLevel[LogLevel["INFO"] = 2] = "INFO";
        LogLevel[LogLevel["WARN"] = 3] = "WARN";
        LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
        LogLevel[LogLevel["SILENT"] = 5] = "SILENT";
    })(LogLevel || (LogLevel = {}));
    const levelStringToEnum = {
        'debug': LogLevel.DEBUG,
        'verbose': LogLevel.VERBOSE,
        'info': LogLevel.INFO,
        'warn': LogLevel.WARN,
        'error': LogLevel.ERROR,
        'silent': LogLevel.SILENT
    };
    /**
     * The default log level
     */
    const defaultLogLevel = LogLevel.INFO;
    /**
     * By default, `console.debug` is not displayed in the developer console (in
     * chrome). To avoid forcing users to have to opt-in to these logs twice
     * (i.e. once for firebase, and once in the console), we are sending `DEBUG`
     * logs to the `console.log` function.
     */
    const ConsoleMethod = {
        [LogLevel.DEBUG]: 'log',
        [LogLevel.VERBOSE]: 'log',
        [LogLevel.INFO]: 'info',
        [LogLevel.WARN]: 'warn',
        [LogLevel.ERROR]: 'error'
    };
    /**
     * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR
     * messages on to their corresponding console counterparts (if the log method
     * is supported by the current log level)
     */
    const defaultLogHandler = (instance, logType, ...args) => {
        if (logType < instance.logLevel) {
            return;
        }
        const now = new Date().toISOString();
        const method = ConsoleMethod[logType];
        if (method) {
            console[method](`[${now}]  ${instance.name}:`, ...args);
        }
        else {
            throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);
        }
    };
    class Logger {
        /**
         * Gives you an instance of a Logger to capture messages according to
         * Firebase's logging scheme.
         *
         * @param name The name that the logs will be associated with
         */
        constructor(name) {
            this.name = name;
            /**
             * The log level of the given Logger instance.
             */
            this._logLevel = defaultLogLevel;
            /**
             * The main (internal) log handler for the Logger instance.
             * Can be set to a new function in internal package code but not by user.
             */
            this._logHandler = defaultLogHandler;
            /**
             * The optional, additional, user-defined log handler for the Logger instance.
             */
            this._userLogHandler = null;
            /**
             * Capture the current instance for later use
             */
            instances.push(this);
        }
        get logLevel() {
            return this._logLevel;
        }
        set logLevel(val) {
            if (!(val in LogLevel)) {
                throw new TypeError(`Invalid value "${val}" assigned to \`logLevel\``);
            }
            this._logLevel = val;
        }
        // Workaround for setter/getter having to be the same type.
        setLogLevel(val) {
            this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;
        }
        get logHandler() {
            return this._logHandler;
        }
        set logHandler(val) {
            if (typeof val !== 'function') {
                throw new TypeError('Value assigned to `logHandler` must be a function');
            }
            this._logHandler = val;
        }
        get userLogHandler() {
            return this._userLogHandler;
        }
        set userLogHandler(val) {
            this._userLogHandler = val;
        }
        /**
         * The functions below are all based on the `console` interface
         */
        debug(...args) {
            this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);
            this._logHandler(this, LogLevel.DEBUG, ...args);
        }
        log(...args) {
            this._userLogHandler &&
                this._userLogHandler(this, LogLevel.VERBOSE, ...args);
            this._logHandler(this, LogLevel.VERBOSE, ...args);
        }
        info(...args) {
            this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);
            this._logHandler(this, LogLevel.INFO, ...args);
        }
        warn(...args) {
            this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);
            this._logHandler(this, LogLevel.WARN, ...args);
        }
        error(...args) {
            this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);
            this._logHandler(this, LogLevel.ERROR, ...args);
        }
    }
    function setLogLevel$2(level) {
        instances.forEach(inst => {
            inst.setLogLevel(level);
        });
    }
    function setUserLogHandler(logCallback, options) {
        for (const instance of instances) {
            let customLogLevel = null;
            if (options && options.level) {
                customLogLevel = levelStringToEnum[options.level];
            }
            if (logCallback === null) {
                instance.userLogHandler = null;
            }
            else {
                instance.userLogHandler = (instance, level, ...args) => {
                    const message = args
                        .map(arg => {
                        if (arg == null) {
                            return null;
                        }
                        else if (typeof arg === 'string') {
                            return arg;
                        }
                        else if (typeof arg === 'number' || typeof arg === 'boolean') {
                            return arg.toString();
                        }
                        else if (arg instanceof Error) {
                            return arg.message;
                        }
                        else {
                            try {
                                return JSON.stringify(arg);
                            }
                            catch (ignored) {
                                return null;
                            }
                        }
                    })
                        .filter(arg => arg)
                        .join(' ');
                    if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {
                        logCallback({
                            level: LogLevel[level].toLowerCase(),
                            message,
                            args,
                            type: instance.name
                        });
                    }
                };
            }
        }
    }

    const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);

    let idbProxyableTypes;
    let cursorAdvanceMethods;
    // This is a function to prevent it throwing up in node environments.
    function getIdbProxyableTypes() {
        return (idbProxyableTypes ||
            (idbProxyableTypes = [
                IDBDatabase,
                IDBObjectStore,
                IDBIndex,
                IDBCursor,
                IDBTransaction,
            ]));
    }
    // This is a function to prevent it throwing up in node environments.
    function getCursorAdvanceMethods() {
        return (cursorAdvanceMethods ||
            (cursorAdvanceMethods = [
                IDBCursor.prototype.advance,
                IDBCursor.prototype.continue,
                IDBCursor.prototype.continuePrimaryKey,
            ]));
    }
    const cursorRequestMap = new WeakMap();
    const transactionDoneMap = new WeakMap();
    const transactionStoreNamesMap = new WeakMap();
    const transformCache = new WeakMap();
    const reverseTransformCache = new WeakMap();
    function promisifyRequest(request) {
        const promise = new Promise((resolve, reject) => {
            const unlisten = () => {
                request.removeEventListener('success', success);
                request.removeEventListener('error', error);
            };
            const success = () => {
                resolve(wrap(request.result));
                unlisten();
            };
            const error = () => {
                reject(request.error);
                unlisten();
            };
            request.addEventListener('success', success);
            request.addEventListener('error', error);
        });
        promise
            .then((value) => {
            // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval
            // (see wrapFunction).
            if (value instanceof IDBCursor) {
                cursorRequestMap.set(value, request);
            }
            // Catching to avoid "Uncaught Promise exceptions"
        })
            .catch(() => { });
        // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This
        // is because we create many promises from a single IDBRequest.
        reverseTransformCache.set(promise, request);
        return promise;
    }
    function cacheDonePromiseForTransaction(tx) {
        // Early bail if we've already created a done promise for this transaction.
        if (transactionDoneMap.has(tx))
            return;
        const done = new Promise((resolve, reject) => {
            const unlisten = () => {
                tx.removeEventListener('complete', complete);
                tx.removeEventListener('error', error);
                tx.removeEventListener('abort', error);
            };
            const complete = () => {
                resolve();
                unlisten();
            };
            const error = () => {
                reject(tx.error || new DOMException('AbortError', 'AbortError'));
                unlisten();
            };
            tx.addEventListener('complete', complete);
            tx.addEventListener('error', error);
            tx.addEventListener('abort', error);
        });
        // Cache it for later retrieval.
        transactionDoneMap.set(tx, done);
    }
    let idbProxyTraps = {
        get(target, prop, receiver) {
            if (target instanceof IDBTransaction) {
                // Special handling for transaction.done.
                if (prop === 'done')
                    return transactionDoneMap.get(target);
                // Polyfill for objectStoreNames because of Edge.
                if (prop === 'objectStoreNames') {
                    return target.objectStoreNames || transactionStoreNamesMap.get(target);
                }
                // Make tx.store return the only store in the transaction, or undefined if there are many.
                if (prop === 'store') {
                    return receiver.objectStoreNames[1]
                        ? undefined
                        : receiver.objectStore(receiver.objectStoreNames[0]);
                }
            }
            // Else transform whatever we get back.
            return wrap(target[prop]);
        },
        set(target, prop, value) {
            target[prop] = value;
            return true;
        },
        has(target, prop) {
            if (target instanceof IDBTransaction &&
                (prop === 'done' || prop === 'store')) {
                return true;
            }
            return prop in target;
        },
    };
    function replaceTraps(callback) {
        idbProxyTraps = callback(idbProxyTraps);
    }
    function wrapFunction(func) {
        // Due to expected object equality (which is enforced by the caching in `wrap`), we
        // only create one new func per func.
        // Edge doesn't support objectStoreNames (booo), so we polyfill it here.
        if (func === IDBDatabase.prototype.transaction &&
            !('objectStoreNames' in IDBTransaction.prototype)) {
            return function (storeNames, ...args) {
                const tx = func.call(unwrap$1(this), storeNames, ...args);
                transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);
                return wrap(tx);
            };
        }
        // Cursor methods are special, as the behaviour is a little more different to standard IDB. In
        // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the
        // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense
        // with real promises, so each advance methods returns a new promise for the cursor object, or
        // undefined if the end of the cursor has been reached.
        if (getCursorAdvanceMethods().includes(func)) {
            return function (...args) {
                // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use
                // the original object.
                func.apply(unwrap$1(this), args);
                return wrap(cursorRequestMap.get(this));
            };
        }
        return function (...args) {
            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use
            // the original object.
            return wrap(func.apply(unwrap$1(this), args));
        };
    }
    function transformCachableValue(value) {
        if (typeof value === 'function')
            return wrapFunction(value);
        // This doesn't return, it just creates a 'done' promise for the transaction,
        // which is later returned for transaction.done (see idbObjectHandler).
        if (value instanceof IDBTransaction)
            cacheDonePromiseForTransaction(value);
        if (instanceOfAny(value, getIdbProxyableTypes()))
            return new Proxy(value, idbProxyTraps);
        // Return the same value back if we're not going to transform it.
        return value;
    }
    function wrap(value) {
        // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because
        // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.
        if (value instanceof IDBRequest)
            return promisifyRequest(value);
        // If we've already transformed this value before, reuse the transformed value.
        // This is faster, but it also provides object equality.
        if (transformCache.has(value))
            return transformCache.get(value);
        const newValue = transformCachableValue(value);
        // Not all types are transformed.
        // These may be primitive types, so they can't be WeakMap keys.
        if (newValue !== value) {
            transformCache.set(value, newValue);
            reverseTransformCache.set(newValue, value);
        }
        return newValue;
    }
    const unwrap$1 = (value) => reverseTransformCache.get(value);

    /**
     * Open a database.
     *
     * @param name Name of the database.
     * @param version Schema version.
     * @param callbacks Additional callbacks.
     */
    function openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {
        const request = indexedDB.open(name, version);
        const openPromise = wrap(request);
        if (upgrade) {
            request.addEventListener('upgradeneeded', (event) => {
                upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction));
            });
        }
        if (blocked)
            request.addEventListener('blocked', () => blocked());
        openPromise
            .then((db) => {
            if (terminated)
                db.addEventListener('close', () => terminated());
            if (blocking)
                db.addEventListener('versionchange', () => blocking());
        })
            .catch(() => { });
        return openPromise;
    }

    const readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];
    const writeMethods = ['put', 'add', 'delete', 'clear'];
    const cachedMethods = new Map();
    function getMethod(target, prop) {
        if (!(target instanceof IDBDatabase &&
            !(prop in target) &&
            typeof prop === 'string')) {
            return;
        }
        if (cachedMethods.get(prop))
            return cachedMethods.get(prop);
        const targetFuncName = prop.replace(/FromIndex$/, '');
        const useIndex = prop !== targetFuncName;
        const isWrite = writeMethods.includes(targetFuncName);
        if (
        // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.
        !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||
            !(isWrite || readMethods.includes(targetFuncName))) {
            return;
        }
        const method = async function (storeName, ...args) {
            // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(
            const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');
            let target = tx.store;
            if (useIndex)
                target = target.index(args.shift());
            // Must reject if op rejects.
            // If it's a write operation, must reject if tx.done rejects.
            // Must reject with op rejection first.
            // Must resolve with op value.
            // Must handle both promises (no unhandled rejections)
            return (await Promise.all([
                target[targetFuncName](...args),
                isWrite && tx.done,
            ]))[0];
        };
        cachedMethods.set(prop, method);
        return method;
    }
    replaceTraps((oldTraps) => ({
        ...oldTraps,
        get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),
        has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),
    }));

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class PlatformLoggerServiceImpl {
        constructor(container) {
            this.container = container;
        }
        // In initial implementation, this will be called by installations on
        // auth token refresh, and installations will send this string.
        getPlatformInfoString() {
            const providers = this.container.getProviders();
            // Loop through providers and get library/version pairs from any that are
            // version components.
            return providers
                .map(provider => {
                if (isVersionServiceProvider(provider)) {
                    const service = provider.getImmediate();
                    return `${service.library}/${service.version}`;
                }
                else {
                    return null;
                }
            })
                .filter(logString => logString)
                .join(' ');
        }
    }
    /**
     *
     * @param provider check if this provider provides a VersionService
     *
     * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider
     * provides VersionService. The provider is not necessarily a 'app-version'
     * provider.
     */
    function isVersionServiceProvider(provider) {
        const component = provider.getComponent();
        return (component === null || component === void 0 ? void 0 : component.type) === "VERSION" /* VERSION */;
    }

    const name$o = "@firebase/app";
    const version$1$1 = "0.7.28";

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const logger$1 = new Logger('@firebase/app');

    const name$n = "@firebase/app-compat";

    const name$m = "@firebase/analytics-compat";

    const name$l = "@firebase/analytics";

    const name$k = "@firebase/app-check-compat";

    const name$j = "@firebase/app-check";

    const name$i = "@firebase/auth";

    const name$h = "@firebase/auth-compat";

    const name$g = "@firebase/database";

    const name$f = "@firebase/database-compat";

    const name$e = "@firebase/functions";

    const name$d = "@firebase/functions-compat";

    const name$c = "@firebase/installations";

    const name$b = "@firebase/installations-compat";

    const name$a = "@firebase/messaging";

    const name$9 = "@firebase/messaging-compat";

    const name$8 = "@firebase/performance";

    const name$7 = "@firebase/performance-compat";

    const name$6 = "@firebase/remote-config";

    const name$5 = "@firebase/remote-config-compat";

    const name$4$1 = "@firebase/storage";

    const name$3$1 = "@firebase/storage-compat";

    const name$2$1 = "@firebase/firestore";

    const name$1$1 = "@firebase/firestore-compat";

    const name$p = "firebase";
    const version$5 = "9.9.0";

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * The default app name
     *
     * @internal
     */
    const DEFAULT_ENTRY_NAME = '[DEFAULT]';
    const PLATFORM_LOG_STRING = {
        [name$o]: 'fire-core',
        [name$n]: 'fire-core-compat',
        [name$l]: 'fire-analytics',
        [name$m]: 'fire-analytics-compat',
        [name$j]: 'fire-app-check',
        [name$k]: 'fire-app-check-compat',
        [name$i]: 'fire-auth',
        [name$h]: 'fire-auth-compat',
        [name$g]: 'fire-rtdb',
        [name$f]: 'fire-rtdb-compat',
        [name$e]: 'fire-fn',
        [name$d]: 'fire-fn-compat',
        [name$c]: 'fire-iid',
        [name$b]: 'fire-iid-compat',
        [name$a]: 'fire-fcm',
        [name$9]: 'fire-fcm-compat',
        [name$8]: 'fire-perf',
        [name$7]: 'fire-perf-compat',
        [name$6]: 'fire-rc',
        [name$5]: 'fire-rc-compat',
        [name$4$1]: 'fire-gcs',
        [name$3$1]: 'fire-gcs-compat',
        [name$2$1]: 'fire-fst',
        [name$1$1]: 'fire-fst-compat',
        'fire-js': 'fire-js',
        [name$p]: 'fire-js-all'
    };

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @internal
     */
    const _apps = new Map();
    /**
     * Registered components.
     *
     * @internal
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const _components = new Map();
    /**
     * @param component - the component being added to this app's container
     *
     * @internal
     */
    function _addComponent(app, component) {
        try {
            app.container.addComponent(component);
        }
        catch (e) {
            logger$1.debug(`Component ${component.name} failed to register with FirebaseApp ${app.name}`, e);
        }
    }
    /**
     *
     * @internal
     */
    function _addOrOverwriteComponent(app, component) {
        app.container.addOrOverwriteComponent(component);
    }
    /**
     *
     * @param component - the component to register
     * @returns whether or not the component is registered successfully
     *
     * @internal
     */
    function _registerComponent(component) {
        const componentName = component.name;
        if (_components.has(componentName)) {
            logger$1.debug(`There were multiple attempts to register component ${componentName}.`);
            return false;
        }
        _components.set(componentName, component);
        // add the component to existing app instances
        for (const app of _apps.values()) {
            _addComponent(app, component);
        }
        return true;
    }
    /**
     *
     * @param app - FirebaseApp instance
     * @param name - service name
     *
     * @returns the provider for the service with the matching name
     *
     * @internal
     */
    function _getProvider(app, name) {
        const heartbeatController = app.container
            .getProvider('heartbeat')
            .getImmediate({ optional: true });
        if (heartbeatController) {
            void heartbeatController.triggerHeartbeat();
        }
        return app.container.getProvider(name);
    }
    /**
     *
     * @param app - FirebaseApp instance
     * @param name - service name
     * @param instanceIdentifier - service instance identifier in case the service supports multiple instances
     *
     * @internal
     */
    function _removeServiceInstance(app, name, instanceIdentifier = DEFAULT_ENTRY_NAME) {
        _getProvider(app, name).clearInstance(instanceIdentifier);
    }
    /**
     * Test only
     *
     * @internal
     */
    function _clearComponents() {
        _components.clear();
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const ERRORS$1 = {
        ["no-app" /* NO_APP */]: "No Firebase App '{$appName}' has been created - " +
            'call Firebase App.initializeApp()',
        ["bad-app-name" /* BAD_APP_NAME */]: "Illegal App name: '{$appName}",
        ["duplicate-app" /* DUPLICATE_APP */]: "Firebase App named '{$appName}' already exists with different options or config",
        ["app-deleted" /* APP_DELETED */]: "Firebase App named '{$appName}' already deleted",
        ["invalid-app-argument" /* INVALID_APP_ARGUMENT */]: 'firebase.{$appName}() takes either no argument or a ' +
            'Firebase App instance.',
        ["invalid-log-argument" /* INVALID_LOG_ARGUMENT */]: 'First argument to `onLog` must be null or a function.',
        ["storage-open" /* STORAGE_OPEN */]: 'Error thrown when opening storage. Original error: {$originalErrorMessage}.',
        ["storage-get" /* STORAGE_GET */]: 'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',
        ["storage-set" /* STORAGE_WRITE */]: 'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',
        ["storage-delete" /* STORAGE_DELETE */]: 'Error thrown when deleting from storage. Original error: {$originalErrorMessage}.'
    };
    const ERROR_FACTORY$1 = new ErrorFactory('app', 'Firebase', ERRORS$1);

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class FirebaseAppImpl$1 {
        constructor(options, config, container) {
            this._isDeleted = false;
            this._options = Object.assign({}, options);
            this._config = Object.assign({}, config);
            this._name = config.name;
            this._automaticDataCollectionEnabled =
                config.automaticDataCollectionEnabled;
            this._container = container;
            this.container.addComponent(new Component$1('app', () => this, "PUBLIC" /* PUBLIC */));
        }
        get automaticDataCollectionEnabled() {
            this.checkDestroyed();
            return this._automaticDataCollectionEnabled;
        }
        set automaticDataCollectionEnabled(val) {
            this.checkDestroyed();
            this._automaticDataCollectionEnabled = val;
        }
        get name() {
            this.checkDestroyed();
            return this._name;
        }
        get options() {
            this.checkDestroyed();
            return this._options;
        }
        get config() {
            this.checkDestroyed();
            return this._config;
        }
        get container() {
            return this._container;
        }
        get isDeleted() {
            return this._isDeleted;
        }
        set isDeleted(val) {
            this._isDeleted = val;
        }
        /**
         * This function will throw an Error if the App has already been deleted -
         * use before performing API actions on the App.
         */
        checkDestroyed() {
            if (this.isDeleted) {
                throw ERROR_FACTORY$1.create("app-deleted" /* APP_DELETED */, { appName: this._name });
            }
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * The current SDK version.
     *
     * @public
     */
    const SDK_VERSION = version$5;
    function initializeApp(options, rawConfig = {}) {
        if (typeof rawConfig !== 'object') {
            const name = rawConfig;
            rawConfig = { name };
        }
        const config = Object.assign({ name: DEFAULT_ENTRY_NAME, automaticDataCollectionEnabled: false }, rawConfig);
        const name = config.name;
        if (typeof name !== 'string' || !name) {
            throw ERROR_FACTORY$1.create("bad-app-name" /* BAD_APP_NAME */, {
                appName: String(name)
            });
        }
        const existingApp = _apps.get(name);
        if (existingApp) {
            // return the existing app if options and config deep equal the ones in the existing app.
            if (deepEqual(options, existingApp.options) &&
                deepEqual(config, existingApp.config)) {
                return existingApp;
            }
            else {
                throw ERROR_FACTORY$1.create("duplicate-app" /* DUPLICATE_APP */, { appName: name });
            }
        }
        const container = new ComponentContainer(name);
        for (const component of _components.values()) {
            container.addComponent(component);
        }
        const newApp = new FirebaseAppImpl$1(options, config, container);
        _apps.set(name, newApp);
        return newApp;
    }
    /**
     * Retrieves a {@link @firebase/app#FirebaseApp} instance.
     *
     * When called with no arguments, the default app is returned. When an app name
     * is provided, the app corresponding to that name is returned.
     *
     * An exception is thrown if the app being retrieved has not yet been
     * initialized.
     *
     * @example
     * ```javascript
     * // Return the default app
     * const app = getApp();
     * ```
     *
     * @example
     * ```javascript
     * // Return a named app
     * const otherApp = getApp("otherApp");
     * ```
     *
     * @param name - Optional name of the app to return. If no name is
     *   provided, the default is `"[DEFAULT]"`.
     *
     * @returns The app corresponding to the provided app name.
     *   If no app name is provided, the default app is returned.
     *
     * @public
     */
    function getApp(name = DEFAULT_ENTRY_NAME) {
        const app = _apps.get(name);
        if (!app) {
            throw ERROR_FACTORY$1.create("no-app" /* NO_APP */, { appName: name });
        }
        return app;
    }
    /**
     * A (read-only) array of all initialized apps.
     * @public
     */
    function getApps() {
        return Array.from(_apps.values());
    }
    /**
     * Renders this app unusable and frees the resources of all associated
     * services.
     *
     * @example
     * ```javascript
     * deleteApp(app)
     *   .then(function() {
     *     console.log("App deleted successfully");
     *   })
     *   .catch(function(error) {
     *     console.log("Error deleting app:", error);
     *   });
     * ```
     *
     * @public
     */
    async function deleteApp(app) {
        const name = app.name;
        if (_apps.has(name)) {
            _apps.delete(name);
            await Promise.all(app.container
                .getProviders()
                .map(provider => provider.delete()));
            app.isDeleted = true;
        }
    }
    /**
     * Registers a library's name and version for platform logging purposes.
     * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)
     * @param version - Current version of that library.
     * @param variant - Bundle variant, e.g., node, rn, etc.
     *
     * @public
     */
    function registerVersion(libraryKeyOrName, version, variant) {
        var _a;
        // TODO: We can use this check to whitelist strings when/if we set up
        // a good whitelist system.
        let library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;
        if (variant) {
            library += `-${variant}`;
        }
        const libraryMismatch = library.match(/\s|\//);
        const versionMismatch = version.match(/\s|\//);
        if (libraryMismatch || versionMismatch) {
            const warning = [
                `Unable to register library "${library}" with version "${version}":`
            ];
            if (libraryMismatch) {
                warning.push(`library name "${library}" contains illegal characters (whitespace or "/")`);
            }
            if (libraryMismatch && versionMismatch) {
                warning.push('and');
            }
            if (versionMismatch) {
                warning.push(`version name "${version}" contains illegal characters (whitespace or "/")`);
            }
            logger$1.warn(warning.join(' '));
            return;
        }
        _registerComponent(new Component$1(`${library}-version`, () => ({ library, version }), "VERSION" /* VERSION */));
    }
    /**
     * Sets log handler for all Firebase SDKs.
     * @param logCallback - An optional custom log handler that executes user code whenever
     * the Firebase SDK makes a logging call.
     *
     * @public
     */
    function onLog(logCallback, options) {
        if (logCallback !== null && typeof logCallback !== 'function') {
            throw ERROR_FACTORY$1.create("invalid-log-argument" /* INVALID_LOG_ARGUMENT */);
        }
        setUserLogHandler(logCallback, options);
    }
    /**
     * Sets log level for all Firebase SDKs.
     *
     * All of the log types above the current log level are captured (i.e. if
     * you set the log level to `info`, errors are logged, but `debug` and
     * `verbose` logs are not).
     *
     * @public
     */
    function setLogLevel$1(logLevel) {
        setLogLevel$2(logLevel);
    }

    /**
     * @license
     * Copyright 2021 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const DB_NAME$1 = 'firebase-heartbeat-database';
    const DB_VERSION$1 = 1;
    const STORE_NAME = 'firebase-heartbeat-store';
    let dbPromise = null;
    function getDbPromise() {
        if (!dbPromise) {
            dbPromise = openDB(DB_NAME$1, DB_VERSION$1, {
                upgrade: (db, oldVersion) => {
                    // We don't use 'break' in this switch statement, the fall-through
                    // behavior is what we want, because if there are multiple versions between
                    // the old version and the current version, we want ALL the migrations
                    // that correspond to those versions to run, not only the last one.
                    // eslint-disable-next-line default-case
                    switch (oldVersion) {
                        case 0:
                            db.createObjectStore(STORE_NAME);
                    }
                }
            }).catch(e => {
                throw ERROR_FACTORY$1.create("storage-open" /* STORAGE_OPEN */, {
                    originalErrorMessage: e.message
                });
            });
        }
        return dbPromise;
    }
    async function readHeartbeatsFromIndexedDB(app) {
        var _a;
        try {
            const db = await getDbPromise();
            return db
                .transaction(STORE_NAME)
                .objectStore(STORE_NAME)
                .get(computeKey(app));
        }
        catch (e) {
            throw ERROR_FACTORY$1.create("storage-get" /* STORAGE_GET */, {
                originalErrorMessage: (_a = e) === null || _a === void 0 ? void 0 : _a.message
            });
        }
    }
    async function writeHeartbeatsToIndexedDB(app, heartbeatObject) {
        var _a;
        try {
            const db = await getDbPromise();
            const tx = db.transaction(STORE_NAME, 'readwrite');
            const objectStore = tx.objectStore(STORE_NAME);
            await objectStore.put(heartbeatObject, computeKey(app));
            return tx.done;
        }
        catch (e) {
            throw ERROR_FACTORY$1.create("storage-set" /* STORAGE_WRITE */, {
                originalErrorMessage: (_a = e) === null || _a === void 0 ? void 0 : _a.message
            });
        }
    }
    function computeKey(app) {
        return `${app.name}!${app.options.appId}`;
    }

    /**
     * @license
     * Copyright 2021 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const MAX_HEADER_BYTES = 1024;
    // 30 days
    const STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;
    class HeartbeatServiceImpl {
        constructor(container) {
            this.container = container;
            /**
             * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate
             * the header string.
             * Stores one record per date. This will be consolidated into the standard
             * format of one record per user agent string before being sent as a header.
             * Populated from indexedDB when the controller is instantiated and should
             * be kept in sync with indexedDB.
             * Leave public for easier testing.
             */
            this._heartbeatsCache = null;
            const app = this.container.getProvider('app').getImmediate();
            this._storage = new HeartbeatStorageImpl(app);
            this._heartbeatsCachePromise = this._storage.read().then(result => {
                this._heartbeatsCache = result;
                return result;
            });
        }
        /**
         * Called to report a heartbeat. The function will generate
         * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it
         * to IndexedDB.
         * Note that we only store one heartbeat per day. So if a heartbeat for today is
         * already logged, subsequent calls to this function in the same day will be ignored.
         */
        async triggerHeartbeat() {
            const platformLogger = this.container
                .getProvider('platform-logger')
                .getImmediate();
            // This is the "Firebase user agent" string from the platform logger
            // service, not the browser user agent.
            const agent = platformLogger.getPlatformInfoString();
            const date = getUTCDateString();
            if (this._heartbeatsCache === null) {
                this._heartbeatsCache = await this._heartbeatsCachePromise;
            }
            // Do not store a heartbeat if one is already stored for this day
            // or if a header has already been sent today.
            if (this._heartbeatsCache.lastSentHeartbeatDate === date ||
                this._heartbeatsCache.heartbeats.some(singleDateHeartbeat => singleDateHeartbeat.date === date)) {
                return;
            }
            else {
                // There is no entry for this date. Create one.
                this._heartbeatsCache.heartbeats.push({ date, agent });
            }
            // Remove entries older than 30 days.
            this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter(singleDateHeartbeat => {
                const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();
                const now = Date.now();
                return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;
            });
            return this._storage.overwrite(this._heartbeatsCache);
        }
        /**
         * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.
         * It also clears all heartbeats from memory as well as in IndexedDB.
         *
         * NOTE: Consuming product SDKs should not send the header if this method
         * returns an empty string.
         */
        async getHeartbeatsHeader() {
            if (this._heartbeatsCache === null) {
                await this._heartbeatsCachePromise;
            }
            // If it's still null or the array is empty, there is no data to send.
            if (this._heartbeatsCache === null ||
                this._heartbeatsCache.heartbeats.length === 0) {
                return '';
            }
            const date = getUTCDateString();
            // Extract as many heartbeats from the cache as will fit under the size limit.
            const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(this._heartbeatsCache.heartbeats);
            const headerString = base64urlEncodeWithoutPadding(JSON.stringify({ version: 2, heartbeats: heartbeatsToSend }));
            // Store last sent date to prevent another being logged/sent for the same day.
            this._heartbeatsCache.lastSentHeartbeatDate = date;
            if (unsentEntries.length > 0) {
                // Store any unsent entries if they exist.
                this._heartbeatsCache.heartbeats = unsentEntries;
                // This seems more likely than emptying the array (below) to lead to some odd state
                // since the cache isn't empty and this will be called again on the next request,
                // and is probably safest if we await it.
                await this._storage.overwrite(this._heartbeatsCache);
            }
            else {
                this._heartbeatsCache.heartbeats = [];
                // Do not wait for this, to reduce latency.
                void this._storage.overwrite(this._heartbeatsCache);
            }
            return headerString;
        }
    }
    function getUTCDateString() {
        const today = new Date();
        // Returns date format 'YYYY-MM-DD'
        return today.toISOString().substring(0, 10);
    }
    function extractHeartbeatsForHeader(heartbeatsCache, maxSize = MAX_HEADER_BYTES) {
        // Heartbeats grouped by user agent in the standard format to be sent in
        // the header.
        const heartbeatsToSend = [];
        // Single date format heartbeats that are not sent.
        let unsentEntries = heartbeatsCache.slice();
        for (const singleDateHeartbeat of heartbeatsCache) {
            // Look for an existing entry with the same user agent.
            const heartbeatEntry = heartbeatsToSend.find(hb => hb.agent === singleDateHeartbeat.agent);
            if (!heartbeatEntry) {
                // If no entry for this user agent exists, create one.
                heartbeatsToSend.push({
                    agent: singleDateHeartbeat.agent,
                    dates: [singleDateHeartbeat.date]
                });
                if (countBytes(heartbeatsToSend) > maxSize) {
                    // If the header would exceed max size, remove the added heartbeat
                    // entry and stop adding to the header.
                    heartbeatsToSend.pop();
                    break;
                }
            }
            else {
                heartbeatEntry.dates.push(singleDateHeartbeat.date);
                // If the header would exceed max size, remove the added date
                // and stop adding to the header.
                if (countBytes(heartbeatsToSend) > maxSize) {
                    heartbeatEntry.dates.pop();
                    break;
                }
            }
            // Pop unsent entry from queue. (Skipped if adding the entry exceeded
            // quota and the loop breaks early.)
            unsentEntries = unsentEntries.slice(1);
        }
        return {
            heartbeatsToSend,
            unsentEntries
        };
    }
    class HeartbeatStorageImpl {
        constructor(app) {
            this.app = app;
            this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();
        }
        async runIndexedDBEnvironmentCheck() {
            if (!isIndexedDBAvailable()) {
                return false;
            }
            else {
                return validateIndexedDBOpenable()
                    .then(() => true)
                    .catch(() => false);
            }
        }
        /**
         * Read all heartbeats.
         */
        async read() {
            const canUseIndexedDB = await this._canUseIndexedDBPromise;
            if (!canUseIndexedDB) {
                return { heartbeats: [] };
            }
            else {
                const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);
                return idbHeartbeatObject || { heartbeats: [] };
            }
        }
        // overwrite the storage with the provided heartbeats
        async overwrite(heartbeatsObject) {
            var _a;
            const canUseIndexedDB = await this._canUseIndexedDBPromise;
            if (!canUseIndexedDB) {
                return;
            }
            else {
                const existingHeartbeatsObject = await this.read();
                return writeHeartbeatsToIndexedDB(this.app, {
                    lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,
                    heartbeats: heartbeatsObject.heartbeats
                });
            }
        }
        // add heartbeats
        async add(heartbeatsObject) {
            var _a;
            const canUseIndexedDB = await this._canUseIndexedDBPromise;
            if (!canUseIndexedDB) {
                return;
            }
            else {
                const existingHeartbeatsObject = await this.read();
                return writeHeartbeatsToIndexedDB(this.app, {
                    lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,
                    heartbeats: [
                        ...existingHeartbeatsObject.heartbeats,
                        ...heartbeatsObject.heartbeats
                    ]
                });
            }
        }
    }
    /**
     * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped
     * in a platform logging header JSON object, stringified, and converted
     * to base 64.
     */
    function countBytes(heartbeatsCache) {
        // base64 has a restricted set of characters, all of which should be 1 byte.
        return base64urlEncodeWithoutPadding(
        // heartbeatsCache wrapper properties
        JSON.stringify({ version: 2, heartbeats: heartbeatsCache })).length;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function registerCoreComponents$1(variant) {
        _registerComponent(new Component$1('platform-logger', container => new PlatformLoggerServiceImpl(container), "PRIVATE" /* PRIVATE */));
        _registerComponent(new Component$1('heartbeat', container => new HeartbeatServiceImpl(container), "PRIVATE" /* PRIVATE */));
        // Register `app` package.
        registerVersion(name$o, version$1$1, variant);
        // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation
        registerVersion(name$o, version$1$1, 'esm2017');
        // Register platform SDK identifier (no version).
        registerVersion('fire-js', '');
    }

    /**
     * Firebase App
     *
     * @remarks This package coordinates the communication between the different Firebase components
     * @packageDocumentation
     */
    registerCoreComponents$1('');

    var modularAPIs = /*#__PURE__*/Object.freeze({
        __proto__: null,
        SDK_VERSION: SDK_VERSION,
        _DEFAULT_ENTRY_NAME: DEFAULT_ENTRY_NAME,
        _addComponent: _addComponent,
        _addOrOverwriteComponent: _addOrOverwriteComponent,
        _apps: _apps,
        _clearComponents: _clearComponents,
        _components: _components,
        _getProvider: _getProvider,
        _registerComponent: _registerComponent,
        _removeServiceInstance: _removeServiceInstance,
        deleteApp: deleteApp,
        getApp: getApp,
        getApps: getApps,
        initializeApp: initializeApp,
        onLog: onLog,
        registerVersion: registerVersion,
        setLogLevel: setLogLevel$1,
        FirebaseError: FirebaseError
    });

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    /*

     Copyright The Closure Library Authors.
     SPDX-License-Identifier: Apache-2.0
    */
    var k$1,goog=goog||{},l=commonjsGlobal||self;function aa$1(){}function ba$1(a){var b=typeof a;b="object"!=b?b:a?Array.isArray(a)?"array":b:"null";return "array"==b||"object"==b&&"number"==typeof a.length}function p(a){var b=typeof a;return "object"==b&&null!=a||"function"==b}function da$1(a){return Object.prototype.hasOwnProperty.call(a,ea$1)&&a[ea$1]||(a[ea$1]=++fa$1)}var ea$1="closure_uid_"+(1E9*Math.random()>>>0),fa$1=0;function ha$1(a,b,c){return a.call.apply(a.bind,arguments)}
    function ia$1(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var e=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(e,d);return a.apply(b,e)}}return function(){return a.apply(b,arguments)}}function q$1(a,b,c){Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?q$1=ha$1:q$1=ia$1;return q$1.apply(null,arguments)}
    function ja$1(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var d=c.slice();d.push.apply(d,arguments);return a.apply(this,d)}}function t(a,b){function c(){}c.prototype=b.prototype;a.Z=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.Vb=function(d,e,f){for(var h=Array(arguments.length-2),n=2;n<arguments.length;n++)h[n-2]=arguments[n];return b.prototype[e].apply(d,h)};}function v(){this.s=this.s;this.o=this.o;}var ka$1=0;v.prototype.s=!1;v.prototype.na=function(){if(!this.s&&(this.s=!0,this.M(),0!=ka$1)){da$1(this);}};v.prototype.M=function(){if(this.o)for(;this.o.length;)this.o.shift()();};const ma$1=Array.prototype.indexOf?function(a,b){return Array.prototype.indexOf.call(a,b,void 0)}:function(a,b){if("string"===typeof a)return "string"!==typeof b||1!=b.length?-1:a.indexOf(b,0);for(let c=0;c<a.length;c++)if(c in a&&a[c]===b)return c;return -1},na$1=Array.prototype.forEach?function(a,b,c){Array.prototype.forEach.call(a,b,c);}:function(a,b,c){const d=a.length,e="string"===typeof a?a.split(""):a;for(let f=0;f<d;f++)f in e&&b.call(c,e[f],f,a);};
    function oa$1(a){a:{var b=pa$1;const c=a.length,d="string"===typeof a?a.split(""):a;for(let e=0;e<c;e++)if(e in d&&b.call(void 0,d[e],e,a)){b=e;break a}b=-1;}return 0>b?null:"string"===typeof a?a.charAt(b):a[b]}function qa$1(a){return Array.prototype.concat.apply([],arguments)}function ra$1(a){const b=a.length;if(0<b){const c=Array(b);for(let d=0;d<b;d++)c[d]=a[d];return c}return []}function sa$1(a){return /^[\s\xa0]*$/.test(a)}var ta$1=String.prototype.trim?function(a){return a.trim()}:function(a){return /^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1]};function w(a,b){return -1!=a.indexOf(b)}function ua$1(a,b){return a<b?-1:a>b?1:0}var x$2;a:{var va$1=l.navigator;if(va$1){var wa$1=va$1.userAgent;if(wa$1){x$2=wa$1;break a}}x$2="";}function xa$1(a,b,c){for(const d in a)b.call(c,a[d],d,a);}function ya$1(a){const b={};for(const c in a)b[c]=a[c];return b}var za$1="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");function Aa$1(a,b){let c,d;for(let e=1;e<arguments.length;e++){d=arguments[e];for(c in d)a[c]=d[c];for(let f=0;f<za$1.length;f++)c=za$1[f],Object.prototype.hasOwnProperty.call(d,c)&&(a[c]=d[c]);}}function Ca$1(a){Ca$1[" "](a);return a}Ca$1[" "]=aa$1;function Fa$1(a){var b=Ga$1;return Object.prototype.hasOwnProperty.call(b,9)?b[9]:b[9]=a(9)}var Ha=w(x$2,"Opera"),y$1=w(x$2,"Trident")||w(x$2,"MSIE"),Ia$1=w(x$2,"Edge"),Ja$1=Ia$1||y$1,Ka$1=w(x$2,"Gecko")&&!(w(x$2.toLowerCase(),"webkit")&&!w(x$2,"Edge"))&&!(w(x$2,"Trident")||w(x$2,"MSIE"))&&!w(x$2,"Edge"),La$1=w(x$2.toLowerCase(),"webkit")&&!w(x$2,"Edge");function Ma$1(){var a=l.document;return a?a.documentMode:void 0}var Na$1;
    a:{var Oa$1="",Pa$1=function(){var a=x$2;if(Ka$1)return /rv:([^\);]+)(\)|;)/.exec(a);if(Ia$1)return /Edge\/([\d\.]+)/.exec(a);if(y$1)return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);if(La$1)return /WebKit\/(\S+)/.exec(a);if(Ha)return /(?:Version)[ \/]?(\S+)/.exec(a)}();Pa$1&&(Oa$1=Pa$1?Pa$1[1]:"");if(y$1){var Qa$1=Ma$1();if(null!=Qa$1&&Qa$1>parseFloat(Oa$1)){Na$1=String(Qa$1);break a}}Na$1=Oa$1;}var Ga$1={};
    function Ra$1(){return Fa$1(function(){let a=0;const b=ta$1(String(Na$1)).split("."),c=ta$1("9").split("."),d=Math.max(b.length,c.length);for(let h=0;0==a&&h<d;h++){var e=b[h]||"",f=c[h]||"";do{e=/(\d*)(\D*)(.*)/.exec(e)||["","","",""];f=/(\d*)(\D*)(.*)/.exec(f)||["","","",""];if(0==e[0].length&&0==f[0].length)break;a=ua$1(0==e[1].length?0:parseInt(e[1],10),0==f[1].length?0:parseInt(f[1],10))||ua$1(0==e[2].length,0==f[2].length)||ua$1(e[2],f[2]);e=e[3];f=f[3];}while(0==a)}return 0<=a})}var Sa$1;
    if(l.document&&y$1){var Ta$1=Ma$1();Sa$1=Ta$1?Ta$1:parseInt(Na$1,10)||void 0;}else Sa$1=void 0;var Ua$1=Sa$1;var Va$1=function(){if(!l.addEventListener||!Object.defineProperty)return !1;var a=!1,b=Object.defineProperty({},"passive",{get:function(){a=!0;}});try{l.addEventListener("test",aa$1,b),l.removeEventListener("test",aa$1,b);}catch(c){}return a}();function z$1(a,b){this.type=a;this.g=this.target=b;this.defaultPrevented=!1;}z$1.prototype.h=function(){this.defaultPrevented=!0;};function A(a,b){z$1.call(this,a?a.type:"");this.relatedTarget=this.g=this.target=null;this.button=this.screenY=this.screenX=this.clientY=this.clientX=0;this.key="";this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1;this.state=null;this.pointerId=0;this.pointerType="";this.i=null;if(a){var c=this.type=a.type,d=a.changedTouches&&a.changedTouches.length?a.changedTouches[0]:null;this.target=a.target||a.srcElement;this.g=b;if(b=a.relatedTarget){if(Ka$1){a:{try{Ca$1(b.nodeName);var e=!0;break a}catch(f){}e=
    !1;}e||(b=null);}}else "mouseover"==c?b=a.fromElement:"mouseout"==c&&(b=a.toElement);this.relatedTarget=b;d?(this.clientX=void 0!==d.clientX?d.clientX:d.pageX,this.clientY=void 0!==d.clientY?d.clientY:d.pageY,this.screenX=d.screenX||0,this.screenY=d.screenY||0):(this.clientX=void 0!==a.clientX?a.clientX:a.pageX,this.clientY=void 0!==a.clientY?a.clientY:a.pageY,this.screenX=a.screenX||0,this.screenY=a.screenY||0);this.button=a.button;this.key=a.key||"";this.ctrlKey=a.ctrlKey;this.altKey=a.altKey;this.shiftKey=
    a.shiftKey;this.metaKey=a.metaKey;this.pointerId=a.pointerId||0;this.pointerType="string"===typeof a.pointerType?a.pointerType:Wa$1[a.pointerType]||"";this.state=a.state;this.i=a;a.defaultPrevented&&A.Z.h.call(this);}}t(A,z$1);var Wa$1={2:"touch",3:"pen",4:"mouse"};A.prototype.h=function(){A.Z.h.call(this);var a=this.i;a.preventDefault?a.preventDefault():a.returnValue=!1;};var B$1="closure_listenable_"+(1E6*Math.random()|0);var Xa$1=0;function Ya$1(a,b,c,d,e){this.listener=a;this.proxy=null;this.src=b;this.type=c;this.capture=!!d;this.ia=e;this.key=++Xa$1;this.ca=this.fa=!1;}function Za$1(a){a.ca=!0;a.listener=null;a.proxy=null;a.src=null;a.ia=null;}function $a(a){this.src=a;this.g={};this.h=0;}$a.prototype.add=function(a,b,c,d,e){var f=a.toString();a=this.g[f];a||(a=this.g[f]=[],this.h++);var h=ab(a,b,d,e);-1<h?(b=a[h],c||(b.fa=!1)):(b=new Ya$1(b,this.src,f,!!d,e),b.fa=c,a.push(b));return b};function bb(a,b){var c=b.type;if(c in a.g){var d=a.g[c],e=ma$1(d,b),f;(f=0<=e)&&Array.prototype.splice.call(d,e,1);f&&(Za$1(b),0==a.g[c].length&&(delete a.g[c],a.h--));}}
    function ab(a,b,c,d){for(var e=0;e<a.length;++e){var f=a[e];if(!f.ca&&f.listener==b&&f.capture==!!c&&f.ia==d)return e}return -1}var cb="closure_lm_"+(1E6*Math.random()|0),db$1={};function fb(a,b,c,d,e){if(d&&d.once)return gb(a,b,c,d,e);if(Array.isArray(b)){for(var f=0;f<b.length;f++)fb(a,b[f],c,d,e);return null}c=hb(c);return a&&a[B$1]?a.N(b,c,p(d)?!!d.capture:!!d,e):ib(a,b,c,!1,d,e)}
    function ib(a,b,c,d,e,f){if(!b)throw Error("Invalid event type");var h=p(e)?!!e.capture:!!e,n=jb(a);n||(a[cb]=n=new $a(a));c=n.add(b,c,d,h,f);if(c.proxy)return c;d=kb();c.proxy=d;d.src=a;d.listener=c;if(a.addEventListener)Va$1||(e=h),void 0===e&&(e=!1),a.addEventListener(b.toString(),d,e);else if(a.attachEvent)a.attachEvent(lb(b.toString()),d);else if(a.addListener&&a.removeListener)a.addListener(d);else throw Error("addEventListener and attachEvent are unavailable.");return c}
    function kb(){function a(c){return b.call(a.src,a.listener,c)}var b=mb;return a}function gb(a,b,c,d,e){if(Array.isArray(b)){for(var f=0;f<b.length;f++)gb(a,b[f],c,d,e);return null}c=hb(c);return a&&a[B$1]?a.O(b,c,p(d)?!!d.capture:!!d,e):ib(a,b,c,!0,d,e)}
    function nb(a,b,c,d,e){if(Array.isArray(b))for(var f=0;f<b.length;f++)nb(a,b[f],c,d,e);else (d=p(d)?!!d.capture:!!d,c=hb(c),a&&a[B$1])?(a=a.i,b=String(b).toString(),b in a.g&&(f=a.g[b],c=ab(f,c,d,e),-1<c&&(Za$1(f[c]),Array.prototype.splice.call(f,c,1),0==f.length&&(delete a.g[b],a.h--)))):a&&(a=jb(a))&&(b=a.g[b.toString()],a=-1,b&&(a=ab(b,c,d,e)),(c=-1<a?b[a]:null)&&ob(c));}
    function ob(a){if("number"!==typeof a&&a&&!a.ca){var b=a.src;if(b&&b[B$1])bb(b.i,a);else {var c=a.type,d=a.proxy;b.removeEventListener?b.removeEventListener(c,d,a.capture):b.detachEvent?b.detachEvent(lb(c),d):b.addListener&&b.removeListener&&b.removeListener(d);(c=jb(b))?(bb(c,a),0==c.h&&(c.src=null,b[cb]=null)):Za$1(a);}}}function lb(a){return a in db$1?db$1[a]:db$1[a]="on"+a}function mb(a,b){if(a.ca)a=!0;else {b=new A(b,this);var c=a.listener,d=a.ia||a.src;a.fa&&ob(a);a=c.call(d,b);}return a}
    function jb(a){a=a[cb];return a instanceof $a?a:null}var pb="__closure_events_fn_"+(1E9*Math.random()>>>0);function hb(a){if("function"===typeof a)return a;a[pb]||(a[pb]=function(b){return a.handleEvent(b)});return a[pb]}function C$1(){v.call(this);this.i=new $a(this);this.P=this;this.I=null;}t(C$1,v);C$1.prototype[B$1]=!0;C$1.prototype.removeEventListener=function(a,b,c,d){nb(this,a,b,c,d);};
    function D$1(a,b){var c,d=a.I;if(d)for(c=[];d;d=d.I)c.push(d);a=a.P;d=b.type||b;if("string"===typeof b)b=new z$1(b,a);else if(b instanceof z$1)b.target=b.target||a;else {var e=b;b=new z$1(d,a);Aa$1(b,e);}e=!0;if(c)for(var f=c.length-1;0<=f;f--){var h=b.g=c[f];e=qb(h,d,!0,b)&&e;}h=b.g=a;e=qb(h,d,!0,b)&&e;e=qb(h,d,!1,b)&&e;if(c)for(f=0;f<c.length;f++)h=b.g=c[f],e=qb(h,d,!1,b)&&e;}
    C$1.prototype.M=function(){C$1.Z.M.call(this);if(this.i){var a=this.i,c;for(c in a.g){for(var d=a.g[c],e=0;e<d.length;e++)Za$1(d[e]);delete a.g[c];a.h--;}}this.I=null;};C$1.prototype.N=function(a,b,c,d){return this.i.add(String(a),b,!1,c,d)};C$1.prototype.O=function(a,b,c,d){return this.i.add(String(a),b,!0,c,d)};
    function qb(a,b,c,d){b=a.i.g[String(b)];if(!b)return !0;b=b.concat();for(var e=!0,f=0;f<b.length;++f){var h=b[f];if(h&&!h.ca&&h.capture==c){var n=h.listener,u=h.ia||h.src;h.fa&&bb(a.i,h);e=!1!==n.call(u,d)&&e;}}return e&&!d.defaultPrevented}var rb=l.JSON.stringify;function sb(){var a=tb;let b=null;a.g&&(b=a.g,a.g=a.g.next,a.g||(a.h=null),b.next=null);return b}class ub{constructor(){this.h=this.g=null;}add(a,b){const c=vb.get();c.set(a,b);this.h?this.h.next=c:this.g=c;this.h=c;}}var vb=new class{constructor(a,b){this.i=a;this.j=b;this.h=0;this.g=null;}get(){let a;0<this.h?(this.h--,a=this.g,this.g=a.next,a.next=null):a=this.i();return a}}(()=>new wb,a=>a.reset());
    class wb{constructor(){this.next=this.g=this.h=null;}set(a,b){this.h=a;this.g=b;this.next=null;}reset(){this.next=this.g=this.h=null;}}function yb(a){l.setTimeout(()=>{throw a;},0);}function zb(a,b){Ab||Bb();Cb||(Ab(),Cb=!0);tb.add(a,b);}var Ab;function Bb(){var a=l.Promise.resolve(void 0);Ab=function(){a.then(Db);};}var Cb=!1,tb=new ub;function Db(){for(var a;a=sb();){try{a.h.call(a.g);}catch(c){yb(c);}var b=vb;b.j(a);100>b.h&&(b.h++,a.next=b.g,b.g=a);}Cb=!1;}function Eb(a,b){C$1.call(this);this.h=a||1;this.g=b||l;this.j=q$1(this.kb,this);this.l=Date.now();}t(Eb,C$1);k$1=Eb.prototype;k$1.da=!1;k$1.S=null;k$1.kb=function(){if(this.da){var a=Date.now()-this.l;0<a&&a<.8*this.h?this.S=this.g.setTimeout(this.j,this.h-a):(this.S&&(this.g.clearTimeout(this.S),this.S=null),D$1(this,"tick"),this.da&&(Fb(this),this.start()));}};k$1.start=function(){this.da=!0;this.S||(this.S=this.g.setTimeout(this.j,this.h),this.l=Date.now());};
    function Fb(a){a.da=!1;a.S&&(a.g.clearTimeout(a.S),a.S=null);}k$1.M=function(){Eb.Z.M.call(this);Fb(this);delete this.g;};function Gb(a,b,c){if("function"===typeof a)c&&(a=q$1(a,c));else if(a&&"function"==typeof a.handleEvent)a=q$1(a.handleEvent,a);else throw Error("Invalid listener argument");return 2147483647<Number(b)?-1:l.setTimeout(a,b||0)}function Hb(a){a.g=Gb(()=>{a.g=null;a.i&&(a.i=!1,Hb(a));},a.j);const b=a.h;a.h=null;a.m.apply(null,b);}class Ib extends v{constructor(a,b){super();this.m=a;this.j=b;this.h=null;this.i=!1;this.g=null;}l(a){this.h=arguments;this.g?this.i=!0:Hb(this);}M(){super.M();this.g&&(l.clearTimeout(this.g),this.g=null,this.i=!1,this.h=null);}}function E(a){v.call(this);this.h=a;this.g={};}t(E,v);var Jb=[];function Kb(a,b,c,d){Array.isArray(c)||(c&&(Jb[0]=c.toString()),c=Jb);for(var e=0;e<c.length;e++){var f=fb(b,c[e],d||a.handleEvent,!1,a.h||a);if(!f)break;a.g[f.key]=f;}}function Lb(a){xa$1(a.g,function(b,c){this.g.hasOwnProperty(c)&&ob(b);},a);a.g={};}E.prototype.M=function(){E.Z.M.call(this);Lb(this);};E.prototype.handleEvent=function(){throw Error("EventHandler.handleEvent not implemented");};function Mb(){this.g=!0;}Mb.prototype.Aa=function(){this.g=!1;};function Nb(a,b,c,d,e,f){a.info(function(){if(a.g)if(f){var h="";for(var n=f.split("&"),u=0;u<n.length;u++){var m=n[u].split("=");if(1<m.length){var r=m[0];m=m[1];var G=r.split("_");h=2<=G.length&&"type"==G[1]?h+(r+"="+m+"&"):h+(r+"=redacted&");}}}else h=null;else h=f;return "XMLHTTP REQ ("+d+") [attempt "+e+"]: "+b+"\n"+c+"\n"+h});}
    function Ob(a,b,c,d,e,f,h){a.info(function(){return "XMLHTTP RESP ("+d+") [ attempt "+e+"]: "+b+"\n"+c+"\n"+f+" "+h});}function F$1(a,b,c,d){a.info(function(){return "XMLHTTP TEXT ("+b+"): "+Pb(a,c)+(d?" "+d:"")});}function Qb(a,b){a.info(function(){return "TIMEOUT: "+b});}Mb.prototype.info=function(){};
    function Pb(a,b){if(!a.g)return b;if(!b)return null;try{var c=JSON.parse(b);if(c)for(a=0;a<c.length;a++)if(Array.isArray(c[a])){var d=c[a];if(!(2>d.length)){var e=d[1];if(Array.isArray(e)&&!(1>e.length)){var f=e[0];if("noop"!=f&&"stop"!=f&&"close"!=f)for(var h=1;h<e.length;h++)e[h]="";}}}return rb(c)}catch(n){return b}}var H$1={},Rb=null;function Sb(){return Rb=Rb||new C$1}H$1.Ma="serverreachability";function Tb(a){z$1.call(this,H$1.Ma,a);}t(Tb,z$1);function I(a){const b=Sb();D$1(b,new Tb(b));}H$1.STAT_EVENT="statevent";function Ub(a,b){z$1.call(this,H$1.STAT_EVENT,a);this.stat=b;}t(Ub,z$1);function J$1(a){const b=Sb();D$1(b,new Ub(b,a));}H$1.Na="timingevent";function Vb(a,b){z$1.call(this,H$1.Na,a);this.size=b;}t(Vb,z$1);
    function K$1(a,b){if("function"!==typeof a)throw Error("Fn must not be null and must be a function");return l.setTimeout(function(){a();},b)}var Wb={NO_ERROR:0,lb:1,yb:2,xb:3,sb:4,wb:5,zb:6,Ja:7,TIMEOUT:8,Cb:9};var Xb={qb:"complete",Mb:"success",Ka:"error",Ja:"abort",Eb:"ready",Fb:"readystatechange",TIMEOUT:"timeout",Ab:"incrementaldata",Db:"progress",tb:"downloadprogress",Ub:"uploadprogress"};function Yb(){}Yb.prototype.h=null;function Zb(a){return a.h||(a.h=a.i())}function $b(){}var L$1={OPEN:"a",pb:"b",Ka:"c",Bb:"d"};function ac$1(){z$1.call(this,"d");}t(ac$1,z$1);function bc$1(){z$1.call(this,"c");}t(bc$1,z$1);var cc$1;function dc$1(){}t(dc$1,Yb);dc$1.prototype.g=function(){return new XMLHttpRequest};dc$1.prototype.i=function(){return {}};cc$1=new dc$1;function M$1(a,b,c,d){this.l=a;this.j=b;this.m=c;this.X=d||1;this.V=new E(this);this.P=ec$1;a=Ja$1?125:void 0;this.W=new Eb(a);this.H=null;this.i=!1;this.s=this.A=this.v=this.K=this.F=this.Y=this.B=null;this.D=[];this.g=null;this.C=0;this.o=this.u=null;this.N=-1;this.I=!1;this.O=0;this.L=null;this.aa=this.J=this.$=this.U=!1;this.h=new fc$1;}function fc$1(){this.i=null;this.g="";this.h=!1;}var ec$1=45E3,gc$1={},hc$1={};k$1=M$1.prototype;k$1.setTimeout=function(a){this.P=a;};
    function ic$1(a,b,c){a.K=1;a.v=jc$1(N$1(b));a.s=c;a.U=!0;kc$1(a,null);}function kc$1(a,b){a.F=Date.now();lc$1(a);a.A=N$1(a.v);var c=a.A,d=a.X;Array.isArray(d)||(d=[String(d)]);mc$1(c.h,"t",d);a.C=0;c=a.l.H;a.h=new fc$1;a.g=nc$1(a.l,c?b:null,!a.s);0<a.O&&(a.L=new Ib(q$1(a.Ia,a,a.g),a.O));Kb(a.V,a.g,"readystatechange",a.gb);b=a.H?ya$1(a.H):{};a.s?(a.u||(a.u="POST"),b["Content-Type"]="application/x-www-form-urlencoded",a.g.ea(a.A,a.u,a.s,b)):(a.u="GET",a.g.ea(a.A,a.u,null,b));I();Nb(a.j,a.u,a.A,a.m,a.X,a.s);}
    k$1.gb=function(a){a=a.target;const b=this.L;b&&3==O$1(a)?b.l():this.Ia(a);};
    k$1.Ia=function(a){try{if(a==this.g)a:{const r=O$1(this.g);var b=this.g.Da();const G=this.g.ba();if(!(3>r)&&(3!=r||Ja$1||this.g&&(this.h.h||this.g.ga()||oc$1(this.g)))){this.I||4!=r||7==b||(8==b||0>=G?I(3):I(2));pc$1(this);var c=this.g.ba();this.N=c;b:if(qc$1(this)){var d=oc$1(this.g);a="";var e=d.length,f=4==O$1(this.g);if(!this.h.i){if("undefined"===typeof TextDecoder){P(this);rc$1(this);var h="";break b}this.h.i=new l.TextDecoder;}for(b=0;b<e;b++)this.h.h=!0,a+=this.h.i.decode(d[b],{stream:f&&b==e-1});d.splice(0,
    e);this.h.g+=a;this.C=0;h=this.h.g;}else h=this.g.ga();this.i=200==c;Ob(this.j,this.u,this.A,this.m,this.X,r,c);if(this.i){if(this.$&&!this.J){b:{if(this.g){var n,u=this.g;if((n=u.g?u.g.getResponseHeader("X-HTTP-Initial-Response"):null)&&!sa$1(n)){var m=n;break b}}m=null;}if(c=m)F$1(this.j,this.m,c,"Initial handshake response via X-HTTP-Initial-Response"),this.J=!0,sc$1(this,c);else {this.i=!1;this.o=3;J$1(12);P(this);rc$1(this);break a}}this.U?(tc$1(this,r,h),Ja$1&&this.i&&3==r&&(Kb(this.V,this.W,"tick",this.fb),
    this.W.start())):(F$1(this.j,this.m,h,null),sc$1(this,h));4==r&&P(this);this.i&&!this.I&&(4==r?uc$1(this.l,this):(this.i=!1,lc$1(this)));}else 400==c&&0<h.indexOf("Unknown SID")?(this.o=3,J$1(12)):(this.o=0,J$1(13)),P(this),rc$1(this);}}}catch(r){}finally{}};function qc$1(a){return a.g?"GET"==a.u&&2!=a.K&&a.l.Ba:!1}
    function tc$1(a,b,c){let d=!0,e;for(;!a.I&&a.C<c.length;)if(e=vc$1(a,c),e==hc$1){4==b&&(a.o=4,J$1(14),d=!1);F$1(a.j,a.m,null,"[Incomplete Response]");break}else if(e==gc$1){a.o=4;J$1(15);F$1(a.j,a.m,c,"[Invalid Chunk]");d=!1;break}else F$1(a.j,a.m,e,null),sc$1(a,e);qc$1(a)&&e!=hc$1&&e!=gc$1&&(a.h.g="",a.C=0);4!=b||0!=c.length||a.h.h||(a.o=1,J$1(16),d=!1);a.i=a.i&&d;d?0<c.length&&!a.aa&&(a.aa=!0,b=a.l,b.g==a&&b.$&&!b.L&&(b.h.info("Great, no buffering proxy detected. Bytes received: "+c.length),wc$1(b),b.L=!0,J$1(11))):(F$1(a.j,a.m,
    c,"[Invalid Chunked Response]"),P(a),rc$1(a));}k$1.fb=function(){if(this.g){var a=O$1(this.g),b=this.g.ga();this.C<b.length&&(pc$1(this),tc$1(this,a,b),this.i&&4!=a&&lc$1(this));}};function vc$1(a,b){var c=a.C,d=b.indexOf("\n",c);if(-1==d)return hc$1;c=Number(b.substring(c,d));if(isNaN(c))return gc$1;d+=1;if(d+c>b.length)return hc$1;b=b.substr(d,c);a.C=d+c;return b}k$1.cancel=function(){this.I=!0;P(this);};function lc$1(a){a.Y=Date.now()+a.P;xc$1(a,a.P);}
    function xc$1(a,b){if(null!=a.B)throw Error("WatchDog timer not null");a.B=K$1(q$1(a.eb,a),b);}function pc$1(a){a.B&&(l.clearTimeout(a.B),a.B=null);}k$1.eb=function(){this.B=null;const a=Date.now();0<=a-this.Y?(Qb(this.j,this.A),2!=this.K&&(I(),J$1(17)),P(this),this.o=2,rc$1(this)):xc$1(this,this.Y-a);};function rc$1(a){0==a.l.G||a.I||uc$1(a.l,a);}function P(a){pc$1(a);var b=a.L;b&&"function"==typeof b.na&&b.na();a.L=null;Fb(a.W);Lb(a.V);a.g&&(b=a.g,a.g=null,b.abort(),b.na());}
    function sc$1(a,b){try{var c=a.l;if(0!=c.G&&(c.g==a||yc$1(c.i,a)))if(c.I=a.N,!a.J&&yc$1(c.i,a)&&3==c.G){try{var d=c.Ca.g.parse(b);}catch(m){d=null;}if(Array.isArray(d)&&3==d.length){var e=d;if(0==e[0])a:{if(!c.u){if(c.g)if(c.g.F+3E3<a.F)zc$1(c),Ac$1(c);else break a;Bc$1(c);J$1(18);}}else c.ta=e[1],0<c.ta-c.U&&37500>e[2]&&c.N&&0==c.A&&!c.v&&(c.v=K$1(q$1(c.ab,c),6E3));if(1>=Cc$1(c.i)&&c.ka){try{c.ka();}catch(m){}c.ka=void 0;}}else Q$1(c,11);}else if((a.J||c.g==a)&&zc$1(c),!sa$1(b))for(e=c.Ca.g.parse(b),b=0;b<e.length;b++){let m=e[b];
    c.U=m[0];m=m[1];if(2==c.G)if("c"==m[0]){c.J=m[1];c.la=m[2];const r=m[3];null!=r&&(c.ma=r,c.h.info("VER="+c.ma));const G=m[4];null!=G&&(c.za=G,c.h.info("SVER="+c.za));const Da=m[5];null!=Da&&"number"===typeof Da&&0<Da&&(d=1.5*Da,c.K=d,c.h.info("backChannelRequestTimeoutMs_="+d));d=c;const ca=a.g;if(ca){const Ea=ca.g?ca.g.getResponseHeader("X-Client-Wire-Protocol"):null;if(Ea){var f=d.i;!f.g&&(w(Ea,"spdy")||w(Ea,"quic")||w(Ea,"h2"))&&(f.j=f.l,f.g=new Set,f.h&&(Dc$1(f,f.h),f.h=null));}if(d.D){const xb=
    ca.g?ca.g.getResponseHeader("X-HTTP-Session-Id"):null;xb&&(d.sa=xb,R(d.F,d.D,xb));}}c.G=3;c.j&&c.j.xa();c.$&&(c.O=Date.now()-a.F,c.h.info("Handshake RTT: "+c.O+"ms"));d=c;var h=a;d.oa=Ec$1(d,d.H?d.la:null,d.W);if(h.J){Fc$1(d.i,h);var n=h,u=d.K;u&&n.setTimeout(u);n.B&&(pc$1(n),lc$1(n));d.g=h;}else Gc$1(d);0<c.l.length&&Hc$1(c);}else "stop"!=m[0]&&"close"!=m[0]||Q$1(c,7);else 3==c.G&&("stop"==m[0]||"close"==m[0]?"stop"==m[0]?Q$1(c,7):Ic$1(c):"noop"!=m[0]&&c.j&&c.j.wa(m),c.A=0);}I(4);}catch(m){}}function Jc$1(a){if(a.R&&"function"==typeof a.R)return a.R();if("string"===typeof a)return a.split("");if(ba$1(a)){for(var b=[],c=a.length,d=0;d<c;d++)b.push(a[d]);return b}b=[];c=0;for(d in a)b[c++]=a[d];return b}
    function Kc$1(a,b){if(a.forEach&&"function"==typeof a.forEach)a.forEach(b,void 0);else if(ba$1(a)||"string"===typeof a)na$1(a,b,void 0);else {if(a.T&&"function"==typeof a.T)var c=a.T();else if(a.R&&"function"==typeof a.R)c=void 0;else if(ba$1(a)||"string"===typeof a){c=[];for(var d=a.length,e=0;e<d;e++)c.push(e);}else for(e in c=[],d=0,a)c[d++]=e;d=Jc$1(a);e=d.length;for(var f=0;f<e;f++)b.call(void 0,d[f],c&&c[f],a);}}function S(a,b){this.h={};this.g=[];this.i=0;var c=arguments.length;if(1<c){if(c%2)throw Error("Uneven number of arguments");for(var d=0;d<c;d+=2)this.set(arguments[d],arguments[d+1]);}else if(a)if(a instanceof S)for(c=a.T(),d=0;d<c.length;d++)this.set(c[d],a.get(c[d]));else for(d in a)this.set(d,a[d]);}k$1=S.prototype;k$1.R=function(){Lc$1(this);for(var a=[],b=0;b<this.g.length;b++)a.push(this.h[this.g[b]]);return a};k$1.T=function(){Lc$1(this);return this.g.concat()};
    function Lc$1(a){if(a.i!=a.g.length){for(var b=0,c=0;b<a.g.length;){var d=a.g[b];T(a.h,d)&&(a.g[c++]=d);b++;}a.g.length=c;}if(a.i!=a.g.length){var e={};for(c=b=0;b<a.g.length;)d=a.g[b],T(e,d)||(a.g[c++]=d,e[d]=1),b++;a.g.length=c;}}k$1.get=function(a,b){return T(this.h,a)?this.h[a]:b};k$1.set=function(a,b){T(this.h,a)||(this.i++,this.g.push(a));this.h[a]=b;};k$1.forEach=function(a,b){for(var c=this.T(),d=0;d<c.length;d++){var e=c[d],f=this.get(e);a.call(b,f,e,this);}};
    function T(a,b){return Object.prototype.hasOwnProperty.call(a,b)}var Mc$1=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^\\/?#]*)@)?([^\\/?#]*?)(?::([0-9]+))?(?=[\\/?#]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;function Nc$1(a,b){if(a){a=a.split("&");for(var c=0;c<a.length;c++){var d=a[c].indexOf("="),e=null;if(0<=d){var f=a[c].substring(0,d);e=a[c].substring(d+1);}else f=a[c];b(f,e?decodeURIComponent(e.replace(/\+/g," ")):"");}}}function U$1(a,b){this.i=this.s=this.j="";this.m=null;this.o=this.l="";this.g=!1;if(a instanceof U$1){this.g=void 0!==b?b:a.g;Oc$1(this,a.j);this.s=a.s;Pc$1(this,a.i);Qc$1(this,a.m);this.l=a.l;b=a.h;var c=new Rc$1;c.i=b.i;b.g&&(c.g=new S(b.g),c.h=b.h);Sc$1(this,c);this.o=a.o;}else a&&(c=String(a).match(Mc$1))?(this.g=!!b,Oc$1(this,c[1]||"",!0),this.s=Tc$1(c[2]||""),Pc$1(this,c[3]||"",!0),Qc$1(this,c[4]),this.l=Tc$1(c[5]||"",!0),Sc$1(this,c[6]||"",!0),this.o=Tc$1(c[7]||"")):(this.g=!!b,this.h=new Rc$1(null,this.g));}
    U$1.prototype.toString=function(){var a=[],b=this.j;b&&a.push(Uc$1(b,Vc$1,!0),":");var c=this.i;if(c||"file"==b)a.push("//"),(b=this.s)&&a.push(Uc$1(b,Vc$1,!0),"@"),a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g,"%$1")),c=this.m,null!=c&&a.push(":",String(c));if(c=this.l)this.i&&"/"!=c.charAt(0)&&a.push("/"),a.push(Uc$1(c,"/"==c.charAt(0)?Wc$1:Xc$1,!0));(c=this.h.toString())&&a.push("?",c);(c=this.o)&&a.push("#",Uc$1(c,Yc$1));return a.join("")};function N$1(a){return new U$1(a)}
    function Oc$1(a,b,c){a.j=c?Tc$1(b,!0):b;a.j&&(a.j=a.j.replace(/:$/,""));}function Pc$1(a,b,c){a.i=c?Tc$1(b,!0):b;}function Qc$1(a,b){if(b){b=Number(b);if(isNaN(b)||0>b)throw Error("Bad port number "+b);a.m=b;}else a.m=null;}function Sc$1(a,b,c){b instanceof Rc$1?(a.h=b,Zc$1(a.h,a.g)):(c||(b=Uc$1(b,$c$1)),a.h=new Rc$1(b,a.g));}function R(a,b,c){a.h.set(b,c);}function jc$1(a){R(a,"zx",Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^Date.now()).toString(36));return a}
    function ad(a){return a instanceof U$1?N$1(a):new U$1(a,void 0)}function bd(a,b,c,d){var e=new U$1(null,void 0);a&&Oc$1(e,a);b&&Pc$1(e,b);c&&Qc$1(e,c);d&&(e.l=d);return e}function Tc$1(a,b){return a?b?decodeURI(a.replace(/%25/g,"%2525")):decodeURIComponent(a):""}function Uc$1(a,b,c){return "string"===typeof a?(a=encodeURI(a).replace(b,cd),c&&(a=a.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),a):null}function cd(a){a=a.charCodeAt(0);return "%"+(a>>4&15).toString(16)+(a&15).toString(16)}
    var Vc$1=/[#\/\?@]/g,Xc$1=/[#\?:]/g,Wc$1=/[#\?]/g,$c$1=/[#\?@]/g,Yc$1=/#/g;function Rc$1(a,b){this.h=this.g=null;this.i=a||null;this.j=!!b;}function V(a){a.g||(a.g=new S,a.h=0,a.i&&Nc$1(a.i,function(b,c){a.add(decodeURIComponent(b.replace(/\+/g," ")),c);}));}k$1=Rc$1.prototype;k$1.add=function(a,b){V(this);this.i=null;a=W$1(this,a);var c=this.g.get(a);c||this.g.set(a,c=[]);c.push(b);this.h+=1;return this};
    function dd(a,b){V(a);b=W$1(a,b);T(a.g.h,b)&&(a.i=null,a.h-=a.g.get(b).length,a=a.g,T(a.h,b)&&(delete a.h[b],a.i--,a.g.length>2*a.i&&Lc$1(a)));}function ed(a,b){V(a);b=W$1(a,b);return T(a.g.h,b)}k$1.forEach=function(a,b){V(this);this.g.forEach(function(c,d){na$1(c,function(e){a.call(b,e,d,this);},this);},this);};k$1.T=function(){V(this);for(var a=this.g.R(),b=this.g.T(),c=[],d=0;d<b.length;d++)for(var e=a[d],f=0;f<e.length;f++)c.push(b[d]);return c};
    k$1.R=function(a){V(this);var b=[];if("string"===typeof a)ed(this,a)&&(b=qa$1(b,this.g.get(W$1(this,a))));else {a=this.g.R();for(var c=0;c<a.length;c++)b=qa$1(b,a[c]);}return b};k$1.set=function(a,b){V(this);this.i=null;a=W$1(this,a);ed(this,a)&&(this.h-=this.g.get(a).length);this.g.set(a,[b]);this.h+=1;return this};k$1.get=function(a,b){if(!a)return b;a=this.R(a);return 0<a.length?String(a[0]):b};function mc$1(a,b,c){dd(a,b);0<c.length&&(a.i=null,a.g.set(W$1(a,b),ra$1(c)),a.h+=c.length);}
    k$1.toString=function(){if(this.i)return this.i;if(!this.g)return "";for(var a=[],b=this.g.T(),c=0;c<b.length;c++){var d=b[c],e=encodeURIComponent(String(d));d=this.R(d);for(var f=0;f<d.length;f++){var h=e;""!==d[f]&&(h+="="+encodeURIComponent(String(d[f])));a.push(h);}}return this.i=a.join("&")};function W$1(a,b){b=String(b);a.j&&(b=b.toLowerCase());return b}function Zc$1(a,b){b&&!a.j&&(V(a),a.i=null,a.g.forEach(function(c,d){var e=d.toLowerCase();d!=e&&(dd(this,d),mc$1(this,e,c));},a));a.j=b;}var fd=class{constructor(a,b){this.h=a;this.g=b;}};function gd(a){this.l=a||hd;l.PerformanceNavigationTiming?(a=l.performance.getEntriesByType("navigation"),a=0<a.length&&("hq"==a[0].nextHopProtocol||"h2"==a[0].nextHopProtocol)):a=!!(l.g&&l.g.Ea&&l.g.Ea()&&l.g.Ea().Zb);this.j=a?this.l:1;this.g=null;1<this.j&&(this.g=new Set);this.h=null;this.i=[];}var hd=10;function id(a){return a.h?!0:a.g?a.g.size>=a.j:!1}function Cc$1(a){return a.h?1:a.g?a.g.size:0}function yc$1(a,b){return a.h?a.h==b:a.g?a.g.has(b):!1}function Dc$1(a,b){a.g?a.g.add(b):a.h=b;}
    function Fc$1(a,b){a.h&&a.h==b?a.h=null:a.g&&a.g.has(b)&&a.g.delete(b);}gd.prototype.cancel=function(){this.i=jd(this);if(this.h)this.h.cancel(),this.h=null;else if(this.g&&0!==this.g.size){for(const a of this.g.values())a.cancel();this.g.clear();}};function jd(a){if(null!=a.h)return a.i.concat(a.h.D);if(null!=a.g&&0!==a.g.size){let b=a.i;for(const c of a.g.values())b=b.concat(c.D);return b}return ra$1(a.i)}function kd(){}kd.prototype.stringify=function(a){return l.JSON.stringify(a,void 0)};kd.prototype.parse=function(a){return l.JSON.parse(a,void 0)};function ld(){this.g=new kd;}function md(a,b,c){const d=c||"";try{Kc$1(a,function(e,f){let h=e;p(e)&&(h=rb(e));b.push(d+f+"="+encodeURIComponent(h));});}catch(e){throw b.push(d+"type="+encodeURIComponent("_badmap")),e;}}function nd(a,b){const c=new Mb;if(l.Image){const d=new Image;d.onload=ja$1(od,c,d,"TestLoadImage: loaded",!0,b);d.onerror=ja$1(od,c,d,"TestLoadImage: error",!1,b);d.onabort=ja$1(od,c,d,"TestLoadImage: abort",!1,b);d.ontimeout=ja$1(od,c,d,"TestLoadImage: timeout",!1,b);l.setTimeout(function(){if(d.ontimeout)d.ontimeout();},1E4);d.src=a;}else b(!1);}function od(a,b,c,d,e){try{b.onload=null,b.onerror=null,b.onabort=null,b.ontimeout=null,e(d);}catch(f){}}function pd(a){this.l=a.$b||null;this.j=a.ib||!1;}t(pd,Yb);pd.prototype.g=function(){return new qd(this.l,this.j)};pd.prototype.i=function(a){return function(){return a}}({});function qd(a,b){C$1.call(this);this.D=a;this.u=b;this.m=void 0;this.readyState=rd;this.status=0;this.responseType=this.responseText=this.response=this.statusText="";this.onreadystatechange=null;this.v=new Headers;this.h=null;this.C="GET";this.B="";this.g=!1;this.A=this.j=this.l=null;}t(qd,C$1);var rd=0;k$1=qd.prototype;
    k$1.open=function(a,b){if(this.readyState!=rd)throw this.abort(),Error("Error reopening a connection");this.C=a;this.B=b;this.readyState=1;sd(this);};k$1.send=function(a){if(1!=this.readyState)throw this.abort(),Error("need to call open() first. ");this.g=!0;const b={headers:this.v,method:this.C,credentials:this.m,cache:void 0};a&&(b.body=a);(this.D||l).fetch(new Request(this.B,b)).then(this.Va.bind(this),this.ha.bind(this));};
    k$1.abort=function(){this.response=this.responseText="";this.v=new Headers;this.status=0;this.j&&this.j.cancel("Request was aborted.");1<=this.readyState&&this.g&&4!=this.readyState&&(this.g=!1,td(this));this.readyState=rd;};
    k$1.Va=function(a){if(this.g&&(this.l=a,this.h||(this.status=this.l.status,this.statusText=this.l.statusText,this.h=a.headers,this.readyState=2,sd(this)),this.g&&(this.readyState=3,sd(this),this.g)))if("arraybuffer"===this.responseType)a.arrayBuffer().then(this.Ta.bind(this),this.ha.bind(this));else if("undefined"!==typeof l.ReadableStream&&"body"in a){this.j=a.body.getReader();if(this.u){if(this.responseType)throw Error('responseType must be empty for "streamBinaryChunks" mode responses.');this.response=
    [];}else this.response=this.responseText="",this.A=new TextDecoder;ud(this);}else a.text().then(this.Ua.bind(this),this.ha.bind(this));};function ud(a){a.j.read().then(a.Sa.bind(a)).catch(a.ha.bind(a));}k$1.Sa=function(a){if(this.g){if(this.u&&a.value)this.response.push(a.value);else if(!this.u){var b=a.value?a.value:new Uint8Array(0);if(b=this.A.decode(b,{stream:!a.done}))this.response=this.responseText+=b;}a.done?td(this):sd(this);3==this.readyState&&ud(this);}};
    k$1.Ua=function(a){this.g&&(this.response=this.responseText=a,td(this));};k$1.Ta=function(a){this.g&&(this.response=a,td(this));};k$1.ha=function(){this.g&&td(this);};function td(a){a.readyState=4;a.l=null;a.j=null;a.A=null;sd(a);}k$1.setRequestHeader=function(a,b){this.v.append(a,b);};k$1.getResponseHeader=function(a){return this.h?this.h.get(a.toLowerCase())||"":""};
    k$1.getAllResponseHeaders=function(){if(!this.h)return "";const a=[],b=this.h.entries();for(var c=b.next();!c.done;)c=c.value,a.push(c[0]+": "+c[1]),c=b.next();return a.join("\r\n")};function sd(a){a.onreadystatechange&&a.onreadystatechange.call(a);}Object.defineProperty(qd.prototype,"withCredentials",{get:function(){return "include"===this.m},set:function(a){this.m=a?"include":"same-origin";}});var vd=l.JSON.parse;function X$1(a){C$1.call(this);this.headers=new S;this.u=a||null;this.h=!1;this.C=this.g=null;this.H="";this.m=0;this.j="";this.l=this.F=this.v=this.D=!1;this.B=0;this.A=null;this.J=wd;this.K=this.L=!1;}t(X$1,C$1);var wd="",xd=/^https?$/i,yd=["POST","PUT"];k$1=X$1.prototype;
    k$1.ea=function(a,b,c,d){if(this.g)throw Error("[goog.net.XhrIo] Object is active with another request="+this.H+"; newUri="+a);b=b?b.toUpperCase():"GET";this.H=a;this.j="";this.m=0;this.D=!1;this.h=!0;this.g=this.u?this.u.g():cc$1.g();this.C=this.u?Zb(this.u):Zb(cc$1);this.g.onreadystatechange=q$1(this.Fa,this);try{this.F=!0,this.g.open(b,String(a),!0),this.F=!1;}catch(f){zd(this,f);return}a=c||"";const e=new S(this.headers);d&&Kc$1(d,function(f,h){e.set(h,f);});d=oa$1(e.T());c=l.FormData&&a instanceof l.FormData;
    !(0<=ma$1(yd,b))||d||c||e.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8");e.forEach(function(f,h){this.g.setRequestHeader(h,f);},this);this.J&&(this.g.responseType=this.J);"withCredentials"in this.g&&this.g.withCredentials!==this.L&&(this.g.withCredentials=this.L);try{Ad(this),0<this.B&&((this.K=Bd(this.g))?(this.g.timeout=this.B,this.g.ontimeout=q$1(this.pa,this)):this.A=Gb(this.pa,this.B,this)),this.v=!0,this.g.send(a),this.v=!1;}catch(f){zd(this,f);}};
    function Bd(a){return y$1&&Ra$1()&&"number"===typeof a.timeout&&void 0!==a.ontimeout}function pa$1(a){return "content-type"==a.toLowerCase()}k$1.pa=function(){"undefined"!=typeof goog&&this.g&&(this.j="Timed out after "+this.B+"ms, aborting",this.m=8,D$1(this,"timeout"),this.abort(8));};function zd(a,b){a.h=!1;a.g&&(a.l=!0,a.g.abort(),a.l=!1);a.j=b;a.m=5;Cd(a);Dd(a);}function Cd(a){a.D||(a.D=!0,D$1(a,"complete"),D$1(a,"error"));}
    k$1.abort=function(a){this.g&&this.h&&(this.h=!1,this.l=!0,this.g.abort(),this.l=!1,this.m=a||7,D$1(this,"complete"),D$1(this,"abort"),Dd(this));};k$1.M=function(){this.g&&(this.h&&(this.h=!1,this.l=!0,this.g.abort(),this.l=!1),Dd(this,!0));X$1.Z.M.call(this);};k$1.Fa=function(){this.s||(this.F||this.v||this.l?Ed(this):this.cb());};k$1.cb=function(){Ed(this);};
    function Ed(a){if(a.h&&"undefined"!=typeof goog&&(!a.C[1]||4!=O$1(a)||2!=a.ba()))if(a.v&&4==O$1(a))Gb(a.Fa,0,a);else if(D$1(a,"readystatechange"),4==O$1(a)){a.h=!1;try{const n=a.ba();a:switch(n){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var b=!0;break a;default:b=!1;}var c;if(!(c=b)){var d;if(d=0===n){var e=String(a.H).match(Mc$1)[1]||null;if(!e&&l.self&&l.self.location){var f=l.self.location.protocol;e=f.substr(0,f.length-1);}d=!xd.test(e?e.toLowerCase():"");}c=d;}if(c)D$1(a,"complete"),D$1(a,
    "success");else {a.m=6;try{var h=2<O$1(a)?a.g.statusText:"";}catch(u){h="";}a.j=h+" ["+a.ba()+"]";Cd(a);}}finally{Dd(a);}}}function Dd(a,b){if(a.g){Ad(a);const c=a.g,d=a.C[0]?aa$1:null;a.g=null;a.C=null;b||D$1(a,"ready");try{c.onreadystatechange=d;}catch(e){}}}function Ad(a){a.g&&a.K&&(a.g.ontimeout=null);a.A&&(l.clearTimeout(a.A),a.A=null);}function O$1(a){return a.g?a.g.readyState:0}k$1.ba=function(){try{return 2<O$1(this)?this.g.status:-1}catch(a){return -1}};
    k$1.ga=function(){try{return this.g?this.g.responseText:""}catch(a){return ""}};k$1.Qa=function(a){if(this.g){var b=this.g.responseText;a&&0==b.indexOf(a)&&(b=b.substring(a.length));return vd(b)}};function oc$1(a){try{if(!a.g)return null;if("response"in a.g)return a.g.response;switch(a.J){case wd:case "text":return a.g.responseText;case "arraybuffer":if("mozResponseArrayBuffer"in a.g)return a.g.mozResponseArrayBuffer}return null}catch(b){return null}}k$1.Da=function(){return this.m};
    k$1.La=function(){return "string"===typeof this.j?this.j:String(this.j)};function Fd(a){let b="";xa$1(a,function(c,d){b+=d;b+=":";b+=c;b+="\r\n";});return b}function Gd(a,b,c){a:{for(d in c){var d=!1;break a}d=!0;}d||(c=Fd(c),"string"===typeof a?(null!=c&&encodeURIComponent(String(c))):R(a,b,c));}function Hd(a,b,c){return c&&c.internalChannelParams?c.internalChannelParams[a]||b:b}
    function Id(a){this.za=0;this.l=[];this.h=new Mb;this.la=this.oa=this.F=this.W=this.g=this.sa=this.D=this.aa=this.o=this.P=this.s=null;this.Za=this.V=0;this.Xa=Hd("failFast",!1,a);this.N=this.v=this.u=this.m=this.j=null;this.X=!0;this.I=this.ta=this.U=-1;this.Y=this.A=this.C=0;this.Pa=Hd("baseRetryDelayMs",5E3,a);this.$a=Hd("retryDelaySeedMs",1E4,a);this.Ya=Hd("forwardChannelMaxRetries",2,a);this.ra=Hd("forwardChannelRequestTimeoutMs",2E4,a);this.qa=a&&a.xmlHttpFactory||void 0;this.Ba=a&&a.Yb||!1;
    this.K=void 0;this.H=a&&a.supportsCrossDomainXhr||!1;this.J="";this.i=new gd(a&&a.concurrentRequestLimit);this.Ca=new ld;this.ja=a&&a.fastHandshake||!1;this.Ra=a&&a.Wb||!1;a&&a.Aa&&this.h.Aa();a&&a.forceLongPolling&&(this.X=!1);this.$=!this.ja&&this.X&&a&&a.detectBufferingProxy||!1;this.ka=void 0;this.O=0;this.L=!1;this.B=null;this.Wa=!a||!1!==a.Xb;}k$1=Id.prototype;k$1.ma=8;k$1.G=1;
    function Ic$1(a){Jd(a);if(3==a.G){var b=a.V++,c=N$1(a.F);R(c,"SID",a.J);R(c,"RID",b);R(c,"TYPE","terminate");Kd(a,c);b=new M$1(a,a.h,b,void 0);b.K=2;b.v=jc$1(N$1(c));c=!1;l.navigator&&l.navigator.sendBeacon&&(c=l.navigator.sendBeacon(b.v.toString(),""));!c&&l.Image&&((new Image).src=b.v,c=!0);c||(b.g=nc$1(b.l,null),b.g.ea(b.v));b.F=Date.now();lc$1(b);}Ld(a);}k$1.hb=function(a){try{this.h.info("Origin Trials invoked: "+a);}catch(b){}};function Ac$1(a){a.g&&(wc$1(a),a.g.cancel(),a.g=null);}
    function Jd(a){Ac$1(a);a.u&&(l.clearTimeout(a.u),a.u=null);zc$1(a);a.i.cancel();a.m&&("number"===typeof a.m&&l.clearTimeout(a.m),a.m=null);}function Md(a,b){a.l.push(new fd(a.Za++,b));3==a.G&&Hc$1(a);}function Hc$1(a){id(a.i)||a.m||(a.m=!0,zb(a.Ha,a),a.C=0);}function Nd(a,b){if(Cc$1(a.i)>=a.i.j-(a.m?1:0))return !1;if(a.m)return a.l=b.D.concat(a.l),!0;if(1==a.G||2==a.G||a.C>=(a.Xa?0:a.Ya))return !1;a.m=K$1(q$1(a.Ha,a,b),Od(a,a.C));a.C++;return !0}
    k$1.Ha=function(a){if(this.m)if(this.m=null,1==this.G){if(!a){this.V=Math.floor(1E5*Math.random());a=this.V++;const e=new M$1(this,this.h,a,void 0);let f=this.s;this.P&&(f?(f=ya$1(f),Aa$1(f,this.P)):f=this.P);null===this.o&&(e.H=f);if(this.ja)a:{var b=0;for(var c=0;c<this.l.length;c++){b:{var d=this.l[c];if("__data__"in d.g&&(d=d.g.__data__,"string"===typeof d)){d=d.length;break b}d=void 0;}if(void 0===d)break;b+=d;if(4096<b){b=c;break a}if(4096===b||c===this.l.length-1){b=c+1;break a}}b=1E3;}else b=1E3;b=
    Pd(this,e,b);c=N$1(this.F);R(c,"RID",a);R(c,"CVER",22);this.D&&R(c,"X-HTTP-Session-Id",this.D);Kd(this,c);this.o&&f&&Gd(c,this.o,f);Dc$1(this.i,e);this.Ra&&R(c,"TYPE","init");this.ja?(R(c,"$req",b),R(c,"SID","null"),e.$=!0,ic$1(e,c,null)):ic$1(e,c,b);this.G=2;}}else 3==this.G&&(a?Qd(this,a):0==this.l.length||id(this.i)||Qd(this));};
    function Qd(a,b){var c;b?c=b.m:c=a.V++;const d=N$1(a.F);R(d,"SID",a.J);R(d,"RID",c);R(d,"AID",a.U);Kd(a,d);a.o&&a.s&&Gd(d,a.o,a.s);c=new M$1(a,a.h,c,a.C+1);null===a.o&&(c.H=a.s);b&&(a.l=b.D.concat(a.l));b=Pd(a,c,1E3);c.setTimeout(Math.round(.5*a.ra)+Math.round(.5*a.ra*Math.random()));Dc$1(a.i,c);ic$1(c,d,b);}function Kd(a,b){a.j&&Kc$1({},function(c,d){R(b,d,c);});}
    function Pd(a,b,c){c=Math.min(a.l.length,c);var d=a.j?q$1(a.j.Oa,a.j,a):null;a:{var e=a.l;let f=-1;for(;;){const h=["count="+c];-1==f?0<c?(f=e[0].h,h.push("ofs="+f)):f=0:h.push("ofs="+f);let n=!0;for(let u=0;u<c;u++){let m=e[u].h;const r=e[u].g;m-=f;if(0>m)f=Math.max(0,e[u].h-100),n=!1;else try{md(r,h,"req"+m+"_");}catch(G){d&&d(r);}}if(n){d=h.join("&");break a}}}a=a.l.splice(0,c);b.D=a;return d}function Gc$1(a){a.g||a.u||(a.Y=1,zb(a.Ga,a),a.A=0);}
    function Bc$1(a){if(a.g||a.u||3<=a.A)return !1;a.Y++;a.u=K$1(q$1(a.Ga,a),Od(a,a.A));a.A++;return !0}k$1.Ga=function(){this.u=null;Rd(this);if(this.$&&!(this.L||null==this.g||0>=this.O)){var a=2*this.O;this.h.info("BP detection timer enabled: "+a);this.B=K$1(q$1(this.bb,this),a);}};k$1.bb=function(){this.B&&(this.B=null,this.h.info("BP detection timeout reached."),this.h.info("Buffering proxy detected and switch to long-polling!"),this.N=!1,this.L=!0,J$1(10),Ac$1(this),Rd(this));};
    function wc$1(a){null!=a.B&&(l.clearTimeout(a.B),a.B=null);}function Rd(a){a.g=new M$1(a,a.h,"rpc",a.Y);null===a.o&&(a.g.H=a.s);a.g.O=0;var b=N$1(a.oa);R(b,"RID","rpc");R(b,"SID",a.J);R(b,"CI",a.N?"0":"1");R(b,"AID",a.U);Kd(a,b);R(b,"TYPE","xmlhttp");a.o&&a.s&&Gd(b,a.o,a.s);a.K&&a.g.setTimeout(a.K);var c=a.g;a=a.la;c.K=1;c.v=jc$1(N$1(b));c.s=null;c.U=!0;kc$1(c,a);}k$1.ab=function(){null!=this.v&&(this.v=null,Ac$1(this),Bc$1(this),J$1(19));};function zc$1(a){null!=a.v&&(l.clearTimeout(a.v),a.v=null);}
    function uc$1(a,b){var c=null;if(a.g==b){zc$1(a);wc$1(a);a.g=null;var d=2;}else if(yc$1(a.i,b))c=b.D,Fc$1(a.i,b),d=1;else return;a.I=b.N;if(0!=a.G)if(b.i)if(1==d){c=b.s?b.s.length:0;b=Date.now()-b.F;var e=a.C;d=Sb();D$1(d,new Vb(d,c));Hc$1(a);}else Gc$1(a);else if(e=b.o,3==e||0==e&&0<a.I||!(1==d&&Nd(a,b)||2==d&&Bc$1(a)))switch(c&&0<c.length&&(b=a.i,b.i=b.i.concat(c)),e){case 1:Q$1(a,5);break;case 4:Q$1(a,10);break;case 3:Q$1(a,6);break;default:Q$1(a,2);}}
    function Od(a,b){let c=a.Pa+Math.floor(Math.random()*a.$a);a.j||(c*=2);return c*b}function Q$1(a,b){a.h.info("Error code "+b);if(2==b){var c=null;a.j&&(c=null);var d=q$1(a.jb,a);c||(c=new U$1("//www.google.com/images/cleardot.gif"),l.location&&"http"==l.location.protocol||Oc$1(c,"https"),jc$1(c));nd(c.toString(),d);}else J$1(2);a.G=0;a.j&&a.j.va(b);Ld(a);Jd(a);}k$1.jb=function(a){a?(this.h.info("Successfully pinged google.com"),J$1(2)):(this.h.info("Failed to ping google.com"),J$1(1));};
    function Ld(a){a.G=0;a.I=-1;if(a.j){if(0!=jd(a.i).length||0!=a.l.length)a.i.i.length=0,ra$1(a.l),a.l.length=0;a.j.ua();}}function Ec$1(a,b,c){let d=ad(c);if(""!=d.i)b&&Pc$1(d,b+"."+d.i),Qc$1(d,d.m);else {const e=l.location;d=bd(e.protocol,b?b+"."+e.hostname:e.hostname,+e.port,c);}a.aa&&xa$1(a.aa,function(e,f){R(d,f,e);});b=a.D;c=a.sa;b&&c&&R(d,b,c);R(d,"VER",a.ma);Kd(a,d);return d}
    function nc$1(a,b,c){if(b&&!a.H)throw Error("Can't create secondary domain capable XhrIo object.");b=c&&a.Ba&&!a.qa?new X$1(new pd({ib:!0})):new X$1(a.qa);b.L=a.H;return b}function Sd(){}k$1=Sd.prototype;k$1.xa=function(){};k$1.wa=function(){};k$1.va=function(){};k$1.ua=function(){};k$1.Oa=function(){};function Td(){if(y$1&&!(10<=Number(Ua$1)))throw Error("Environmental error: no available transport.");}Td.prototype.g=function(a,b){return new Y$1(a,b)};
    function Y$1(a,b){C$1.call(this);this.g=new Id(b);this.l=a;this.h=b&&b.messageUrlParams||null;a=b&&b.messageHeaders||null;b&&b.clientProtocolHeaderRequired&&(a?a["X-Client-Protocol"]="webchannel":a={"X-Client-Protocol":"webchannel"});this.g.s=a;a=b&&b.initMessageHeaders||null;b&&b.messageContentType&&(a?a["X-WebChannel-Content-Type"]=b.messageContentType:a={"X-WebChannel-Content-Type":b.messageContentType});b&&b.ya&&(a?a["X-WebChannel-Client-Profile"]=b.ya:a={"X-WebChannel-Client-Profile":b.ya});this.g.P=
    a;(a=b&&b.httpHeadersOverwriteParam)&&!sa$1(a)&&(this.g.o=a);this.A=b&&b.supportsCrossDomainXhr||!1;this.v=b&&b.sendRawJson||!1;(b=b&&b.httpSessionIdParam)&&!sa$1(b)&&(this.g.D=b,a=this.h,null!==a&&b in a&&(a=this.h,b in a&&delete a[b]));this.j=new Z$1(this);}t(Y$1,C$1);Y$1.prototype.m=function(){this.g.j=this.j;this.A&&(this.g.H=!0);var a=this.g,b=this.l,c=this.h||void 0;a.Wa&&(a.h.info("Origin Trials enabled."),zb(q$1(a.hb,a,b)));J$1(0);a.W=b;a.aa=c||{};a.N=a.X;a.F=Ec$1(a,null,a.W);Hc$1(a);};Y$1.prototype.close=function(){Ic$1(this.g);};
    Y$1.prototype.u=function(a){if("string"===typeof a){var b={};b.__data__=a;Md(this.g,b);}else this.v?(b={},b.__data__=rb(a),Md(this.g,b)):Md(this.g,a);};Y$1.prototype.M=function(){this.g.j=null;delete this.j;Ic$1(this.g);delete this.g;Y$1.Z.M.call(this);};function Ud(a){ac$1.call(this);var b=a.__sm__;if(b){a:{for(const c in b){a=c;break a}a=void 0;}if(this.i=a)a=this.i,b=null!==b&&a in b?b[a]:void 0;this.data=b;}else this.data=a;}t(Ud,ac$1);function Vd(){bc$1.call(this);this.status=1;}t(Vd,bc$1);function Z$1(a){this.g=a;}
    t(Z$1,Sd);Z$1.prototype.xa=function(){D$1(this.g,"a");};Z$1.prototype.wa=function(a){D$1(this.g,new Ud(a));};Z$1.prototype.va=function(a){D$1(this.g,new Vd());};Z$1.prototype.ua=function(){D$1(this.g,"b");};/*

     Copyright 2017 Google LLC

     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
    */
    Td.prototype.createWebChannel=Td.prototype.g;Y$1.prototype.send=Y$1.prototype.u;Y$1.prototype.open=Y$1.prototype.m;Y$1.prototype.close=Y$1.prototype.close;Wb.NO_ERROR=0;Wb.TIMEOUT=8;Wb.HTTP_ERROR=6;Xb.COMPLETE="complete";$b.EventType=L$1;L$1.OPEN="a";L$1.CLOSE="b";L$1.ERROR="c";L$1.MESSAGE="d";C$1.prototype.listen=C$1.prototype.N;X$1.prototype.listenOnce=X$1.prototype.O;X$1.prototype.getLastError=X$1.prototype.La;X$1.prototype.getLastErrorCode=X$1.prototype.Da;X$1.prototype.getStatus=X$1.prototype.ba;X$1.prototype.getResponseJson=X$1.prototype.Qa;
    X$1.prototype.getResponseText=X$1.prototype.ga;X$1.prototype.send=X$1.prototype.ea;var createWebChannelTransport = function(){return new Td};var getStatEventTarget = function(){return Sb()};var ErrorCode = Wb;var EventType = Xb;var Event$1 = H$1;var Stat = {rb:0,ub:1,vb:2,Ob:3,Tb:4,Qb:5,Rb:6,Pb:7,Nb:8,Sb:9,PROXY:10,NOPROXY:11,Lb:12,Hb:13,Ib:14,Gb:15,Jb:16,Kb:17,nb:18,mb:19,ob:20};var FetchXmlHttpFactory = pd;var WebChannel = $b;
    var XhrIo = X$1;

    const D = "@firebase/firestore";

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Simple wrapper around a nullable UID. Mostly exists to make code more
     * readable.
     */
    class C {
        constructor(t) {
            this.uid = t;
        }
        isAuthenticated() {
            return null != this.uid;
        }
        /**
         * Returns a key representing this user, suitable for inclusion in a
         * dictionary.
         */    toKey() {
            return this.isAuthenticated() ? "uid:" + this.uid : "anonymous-user";
        }
        isEqual(t) {
            return t.uid === this.uid;
        }
    }

    /** A user with a null UID. */ C.UNAUTHENTICATED = new C(null), 
    // TODO(mikelehen): Look into getting a proper uid-equivalent for
    // non-FirebaseAuth providers.
    C.GOOGLE_CREDENTIALS = new C("google-credentials-uid"), C.FIRST_PARTY = new C("first-party-uid"), 
    C.MOCK_USER = new C("mock-user");

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    let x$1 = "9.9.0";

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const N = new Logger("@firebase/firestore");

    // Helper methods are needed because variables can't be exported as read/write
    function k() {
        return N.logLevel;
    }

    /**
     * Sets the verbosity of Cloud Firestore logs (debug, error, or silent).
     *
     * @param logLevel - The verbosity you set for activity and error logging. Can
     *   be any of the following values:
     *
     *   <ul>
     *     <li>`debug` for the most verbose logging level, primarily for
     *     debugging.</li>
     *     <li>`error` to log errors only.</li>
     *     <li><code>`silent` to turn off logging.</li>
     *   </ul>
     */ function O(t) {
        N.setLogLevel(t);
    }

    function M(t, ...e) {
        if (N.logLevel <= LogLevel.DEBUG) {
            const n = e.map(B);
            N.debug(`Firestore (${x$1}): ${t}`, ...n);
        }
    }

    function F(t, ...e) {
        if (N.logLevel <= LogLevel.ERROR) {
            const n = e.map(B);
            N.error(`Firestore (${x$1}): ${t}`, ...n);
        }
    }

    /**
     * @internal
     */ function $(t, ...e) {
        if (N.logLevel <= LogLevel.WARN) {
            const n = e.map(B);
            N.warn(`Firestore (${x$1}): ${t}`, ...n);
        }
    }

    /**
     * Converts an additional log parameter to a string representation.
     */ function B(t) {
        if ("string" == typeof t) return t;
        try {
            return e = t, JSON.stringify(e);
        } catch (e) {
            // Converting to JSON failed, just log the object directly
            return t;
        }
        /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
        /** Formats an object as a JSON string, suitable for logging. */
        var e;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Unconditionally fails, throwing an Error with the given message.
     * Messages are stripped in production builds.
     *
     * Returns `never` and can be used in expressions:
     * @example
     * let futureVar = fail('not implemented yet');
     */ function L(t = "Unexpected state") {
        // Log the failure in addition to throw an exception, just in case the
        // exception is swallowed.
        const e = `FIRESTORE (${x$1}) INTERNAL ASSERTION FAILED: ` + t;
        // NOTE: We don't use FirestoreError here because these are internal failures
        // that cannot be handled by the user. (Also it would create a circular
        // dependency between the error and assert modules which doesn't work.)
        throw F(e), new Error(e);
    }

    /**
     * Fails if the given assertion condition is false, throwing an Error with the
     * given message if it did.
     *
     * Messages are stripped in production builds.
     */ function U(t, e) {
        t || L();
    }

    /**
     * Fails if the given assertion condition is false, throwing an Error with the
     * given message if it did.
     *
     * The code of callsites invoking this function are stripped out in production
     * builds. Any side-effects of code within the debugAssert() invocation will not
     * happen in this case.
     *
     * @internal
     */ function q(t, e) {
        t || L();
    }

    /**
     * Casts `obj` to `T`. In non-production builds, verifies that `obj` is an
     * instance of `T` before casting.
     */ function K(t, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    e) {
        return t;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ const G = {
        // Causes are copied from:
        // https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h
        /** Not an error; returned on success. */
        OK: "ok",
        /** The operation was cancelled (typically by the caller). */
        CANCELLED: "cancelled",
        /** Unknown error or an error from a different error domain. */
        UNKNOWN: "unknown",
        /**
         * Client specified an invalid argument. Note that this differs from
         * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are
         * problematic regardless of the state of the system (e.g., a malformed file
         * name).
         */
        INVALID_ARGUMENT: "invalid-argument",
        /**
         * Deadline expired before operation could complete. For operations that
         * change the state of the system, this error may be returned even if the
         * operation has completed successfully. For example, a successful response
         * from a server could have been delayed long enough for the deadline to
         * expire.
         */
        DEADLINE_EXCEEDED: "deadline-exceeded",
        /** Some requested entity (e.g., file or directory) was not found. */
        NOT_FOUND: "not-found",
        /**
         * Some entity that we attempted to create (e.g., file or directory) already
         * exists.
         */
        ALREADY_EXISTS: "already-exists",
        /**
         * The caller does not have permission to execute the specified operation.
         * PERMISSION_DENIED must not be used for rejections caused by exhausting
         * some resource (use RESOURCE_EXHAUSTED instead for those errors).
         * PERMISSION_DENIED must not be used if the caller can not be identified
         * (use UNAUTHENTICATED instead for those errors).
         */
        PERMISSION_DENIED: "permission-denied",
        /**
         * The request does not have valid authentication credentials for the
         * operation.
         */
        UNAUTHENTICATED: "unauthenticated",
        /**
         * Some resource has been exhausted, perhaps a per-user quota, or perhaps the
         * entire file system is out of space.
         */
        RESOURCE_EXHAUSTED: "resource-exhausted",
        /**
         * Operation was rejected because the system is not in a state required for
         * the operation's execution. For example, directory to be deleted may be
         * non-empty, an rmdir operation is applied to a non-directory, etc.
         *
         * A litmus test that may help a service implementor in deciding
         * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:
         *  (a) Use UNAVAILABLE if the client can retry just the failing call.
         *  (b) Use ABORTED if the client should retry at a higher-level
         *      (e.g., restarting a read-modify-write sequence).
         *  (c) Use FAILED_PRECONDITION if the client should not retry until
         *      the system state has been explicitly fixed. E.g., if an "rmdir"
         *      fails because the directory is non-empty, FAILED_PRECONDITION
         *      should be returned since the client should not retry unless
         *      they have first fixed up the directory by deleting files from it.
         *  (d) Use FAILED_PRECONDITION if the client performs conditional
         *      REST Get/Update/Delete on a resource and the resource on the
         *      server does not match the condition. E.g., conflicting
         *      read-modify-write on the same resource.
         */
        FAILED_PRECONDITION: "failed-precondition",
        /**
         * The operation was aborted, typically due to a concurrency issue like
         * sequencer check failures, transaction aborts, etc.
         *
         * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
         * and UNAVAILABLE.
         */
        ABORTED: "aborted",
        /**
         * Operation was attempted past the valid range. E.g., seeking or reading
         * past end of file.
         *
         * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed
         * if the system state changes. For example, a 32-bit file system will
         * generate INVALID_ARGUMENT if asked to read at an offset that is not in the
         * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from
         * an offset past the current file size.
         *
         * There is a fair bit of overlap between FAILED_PRECONDITION and
         * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)
         * when it applies so that callers who are iterating through a space can
         * easily look for an OUT_OF_RANGE error to detect when they are done.
         */
        OUT_OF_RANGE: "out-of-range",
        /** Operation is not implemented or not supported/enabled in this service. */
        UNIMPLEMENTED: "unimplemented",
        /**
         * Internal errors. Means some invariants expected by underlying System has
         * been broken. If you see one of these errors, Something is very broken.
         */
        INTERNAL: "internal",
        /**
         * The service is currently unavailable. This is a most likely a transient
         * condition and may be corrected by retrying with a backoff.
         *
         * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
         * and UNAVAILABLE.
         */
        UNAVAILABLE: "unavailable",
        /** Unrecoverable data loss or corruption. */
        DATA_LOSS: "data-loss"
    };

    /** An error returned by a Firestore operation. */ class Q extends FirebaseError {
        /** @hideconstructor */
        constructor(
        /**
         * The backend error code associated with this error.
         */
        t, 
        /**
         * A custom error description.
         */
        e) {
            super(t, e), this.code = t, this.message = e, 
            // HACK: We write a toString property directly because Error is not a real
            // class and so inheritance does not work correctly. We could alternatively
            // do the same "back-door inheritance" trick that FirebaseError does.
            this.toString = () => `${this.name}: [code=${this.code}]: ${this.message}`;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class j {
        constructor() {
            this.promise = new Promise(((t, e) => {
                this.resolve = t, this.reject = e;
            }));
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class W {
        constructor(t, e) {
            this.user = e, this.type = "OAuth", this.headers = new Map, this.headers.set("Authorization", `Bearer ${t}`);
        }
    }

    /**
     * A CredentialsProvider that always yields an empty token.
     * @internal
     */ class z {
        getToken() {
            return Promise.resolve(null);
        }
        invalidateToken() {}
        start(t, e) {
            // Fire with initial user.
            t.enqueueRetryable((() => e(C.UNAUTHENTICATED)));
        }
        shutdown() {}
    }

    /**
     * A CredentialsProvider that always returns a constant token. Used for
     * emulator token mocking.
     */ class H {
        constructor(t) {
            this.token = t, 
            /**
             * Stores the listener registered with setChangeListener()
             * This isn't actually necessary since the UID never changes, but we use this
             * to verify the listen contract is adhered to in tests.
             */
            this.changeListener = null;
        }
        getToken() {
            return Promise.resolve(this.token);
        }
        invalidateToken() {}
        start(t, e) {
            this.changeListener = e, 
            // Fire with initial user.
            t.enqueueRetryable((() => e(this.token.user)));
        }
        shutdown() {
            this.changeListener = null;
        }
    }

    class J {
        constructor(t) {
            this.t = t, 
            /** Tracks the current User. */
            this.currentUser = C.UNAUTHENTICATED, 
            /**
             * Counter used to detect if the token changed while a getToken request was
             * outstanding.
             */
            this.i = 0, this.forceRefresh = !1, this.auth = null;
        }
        start(t, e) {
            let n = this.i;
            // A change listener that prevents double-firing for the same token change.
                    const s = t => this.i !== n ? (n = this.i, e(t)) : Promise.resolve();
            // A promise that can be waited on to block on the next token change.
            // This promise is re-created after each change.
                    let i = new j;
            this.o = () => {
                this.i++, this.currentUser = this.u(), i.resolve(), i = new j, t.enqueueRetryable((() => s(this.currentUser)));
            };
            const r = () => {
                const e = i;
                t.enqueueRetryable((async () => {
                    await e.promise, await s(this.currentUser);
                }));
            }, o = t => {
                M("FirebaseAuthCredentialsProvider", "Auth detected"), this.auth = t, this.auth.addAuthTokenListener(this.o), 
                r();
            };
            this.t.onInit((t => o(t))), 
            // Our users can initialize Auth right after Firestore, so we give it
            // a chance to register itself with the component framework before we
            // determine whether to start up in unauthenticated mode.
            setTimeout((() => {
                if (!this.auth) {
                    const t = this.t.getImmediate({
                        optional: !0
                    });
                    t ? o(t) : (
                    // If auth is still not available, proceed with `null` user
                    M("FirebaseAuthCredentialsProvider", "Auth not yet detected"), i.resolve(), i = new j);
                }
            }), 0), r();
        }
        getToken() {
            // Take note of the current value of the tokenCounter so that this method
            // can fail (with an ABORTED error) if there is a token change while the
            // request is outstanding.
            const t = this.i, e = this.forceRefresh;
            return this.forceRefresh = !1, this.auth ? this.auth.getToken(e).then((e => 
            // Cancel the request since the token changed while the request was
            // outstanding so the response is potentially for a previous user (which
            // user, we can't be sure).
            this.i !== t ? (M("FirebaseAuthCredentialsProvider", "getToken aborted due to token change."), 
            this.getToken()) : e ? (U("string" == typeof e.accessToken), new W(e.accessToken, this.currentUser)) : null)) : Promise.resolve(null);
        }
        invalidateToken() {
            this.forceRefresh = !0;
        }
        shutdown() {
            this.auth && this.auth.removeAuthTokenListener(this.o);
        }
        // Auth.getUid() can return null even with a user logged in. It is because
        // getUid() is synchronous, but the auth code populating Uid is asynchronous.
        // This method should only be called in the AuthTokenListener callback
        // to guarantee to get the actual user.
        u() {
            const t = this.auth && this.auth.getUid();
            return U(null === t || "string" == typeof t), new C(t);
        }
    }

    /*
     * FirstPartyToken provides a fresh token each time its value
     * is requested, because if the token is too old, requests will be rejected.
     * Technically this may no longer be necessary since the SDK should gracefully
     * recover from unauthenticated errors (see b/33147818 for context), but it's
     * safer to keep the implementation as-is.
     */ class Y {
        constructor(t, e, n) {
            this.type = "FirstParty", this.user = C.FIRST_PARTY, this.headers = new Map, this.headers.set("X-Goog-AuthUser", e);
            const s = t.auth.getAuthHeaderValueForFirstParty([]);
            s && this.headers.set("Authorization", s), n && this.headers.set("X-Goog-Iam-Authorization-Token", n);
        }
    }

    /*
     * Provides user credentials required for the Firestore JavaScript SDK
     * to authenticate the user, using technique that is only available
     * to applications hosted by Google.
     */ class X {
        constructor(t, e, n) {
            this.h = t, this.l = e, this.m = n;
        }
        getToken() {
            return Promise.resolve(new Y(this.h, this.l, this.m));
        }
        start(t, e) {
            // Fire with initial uid.
            t.enqueueRetryable((() => e(C.FIRST_PARTY)));
        }
        shutdown() {}
        invalidateToken() {}
    }

    class Z {
        constructor(t) {
            this.value = t, this.type = "AppCheck", this.headers = new Map, t && t.length > 0 && this.headers.set("x-firebase-appcheck", this.value);
        }
    }

    class tt {
        constructor(t) {
            this.g = t, this.forceRefresh = !1, this.appCheck = null, this.p = null;
        }
        start(t, e) {
            const n = t => {
                null != t.error && M("FirebaseAppCheckTokenProvider", `Error getting App Check token; using placeholder token instead. Error: ${t.error.message}`);
                const n = t.token !== this.p;
                return this.p = t.token, M("FirebaseAppCheckTokenProvider", `Received ${n ? "new" : "existing"} token.`), 
                n ? e(t.token) : Promise.resolve();
            };
            this.o = e => {
                t.enqueueRetryable((() => n(e)));
            };
            const s = t => {
                M("FirebaseAppCheckTokenProvider", "AppCheck detected"), this.appCheck = t, this.appCheck.addTokenListener(this.o);
            };
            this.g.onInit((t => s(t))), 
            // Our users can initialize AppCheck after Firestore, so we give it
            // a chance to register itself with the component framework.
            setTimeout((() => {
                if (!this.appCheck) {
                    const t = this.g.getImmediate({
                        optional: !0
                    });
                    t ? s(t) : 
                    // If AppCheck is still not available, proceed without it.
                    M("FirebaseAppCheckTokenProvider", "AppCheck not yet detected");
                }
            }), 0);
        }
        getToken() {
            const t = this.forceRefresh;
            return this.forceRefresh = !1, this.appCheck ? this.appCheck.getToken(t).then((t => t ? (U("string" == typeof t.token), 
            this.p = t.token, new Z(t.token)) : null)) : Promise.resolve(null);
        }
        invalidateToken() {
            this.forceRefresh = !0;
        }
        shutdown() {
            this.appCheck && this.appCheck.removeTokenListener(this.o);
        }
    }

    /**
     * Builds a CredentialsProvider depending on the type of
     * the credentials passed in.
     */
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Generates `nBytes` of random bytes.
     *
     * If `nBytes < 0` , an error will be thrown.
     */
    function nt(t) {
        // Polyfills for IE and WebWorker by using `self` and `msCrypto` when `crypto` is not available.
        const e = 
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        "undefined" != typeof self && (self.crypto || self.msCrypto), n = new Uint8Array(t);
        if (e && "function" == typeof e.getRandomValues) e.getRandomValues(n); else 
        // Falls back to Math.random
        for (let e = 0; e < t; e++) n[e] = Math.floor(256 * Math.random());
        return n;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class st {
        static I() {
            // Alphanumeric characters
            const t = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", e = Math.floor(256 / t.length) * t.length;
            // The largest byte value that is a multiple of `char.length`.
                    let n = "";
            for (;n.length < 20; ) {
                const s = nt(40);
                for (let i = 0; i < s.length; ++i) 
                // Only accept values that are [0, maxMultiple), this ensures they can
                // be evenly mapped to indices of `chars` via a modulo operation.
                n.length < 20 && s[i] < e && (n += t.charAt(s[i] % t.length));
            }
            return n;
        }
    }

    function it(t, e) {
        return t < e ? -1 : t > e ? 1 : 0;
    }

    /** Helper to compare arrays using isEqual(). */ function rt(t, e, n) {
        return t.length === e.length && t.every(((t, s) => n(t, e[s])));
    }

    /**
     * Returns the immediate lexicographically-following string. This is useful to
     * construct an inclusive range for indexeddb iterators.
     */ function ot(t) {
        // Return the input string, with an additional NUL byte appended.
        return t + "\0";
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // The earliest date supported by Firestore timestamps (0001-01-01T00:00:00Z).
    /**
     * A `Timestamp` represents a point in time independent of any time zone or
     * calendar, represented as seconds and fractions of seconds at nanosecond
     * resolution in UTC Epoch time.
     *
     * It is encoded using the Proleptic Gregorian Calendar which extends the
     * Gregorian calendar backwards to year one. It is encoded assuming all minutes
     * are 60 seconds long, i.e. leap seconds are "smeared" so that no leap second
     * table is needed for interpretation. Range is from 0001-01-01T00:00:00Z to
     * 9999-12-31T23:59:59.999999999Z.
     *
     * For examples and further specifications, refer to the
     * {@link https://github.com/google/protobuf/blob/master/src/google/protobuf/timestamp.proto | Timestamp definition}.
     */
    class ut {
        /**
         * Creates a new timestamp.
         *
         * @param seconds - The number of seconds of UTC time since Unix epoch
         *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
         *     9999-12-31T23:59:59Z inclusive.
         * @param nanoseconds - The non-negative fractions of a second at nanosecond
         *     resolution. Negative second values with fractions must still have
         *     non-negative nanoseconds values that count forward in time. Must be
         *     from 0 to 999,999,999 inclusive.
         */
        constructor(
        /**
         * The number of seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z.
         */
        t, 
        /**
         * The fractions of a second at nanosecond resolution.*
         */
        e) {
            if (this.seconds = t, this.nanoseconds = e, e < 0) throw new Q(G.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + e);
            if (e >= 1e9) throw new Q(G.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + e);
            if (t < -62135596800) throw new Q(G.INVALID_ARGUMENT, "Timestamp seconds out of range: " + t);
            // This will break in the year 10,000.
                    if (t >= 253402300800) throw new Q(G.INVALID_ARGUMENT, "Timestamp seconds out of range: " + t);
        }
        /**
         * Creates a new timestamp with the current date, with millisecond precision.
         *
         * @returns a new timestamp representing the current date.
         */    static now() {
            return ut.fromMillis(Date.now());
        }
        /**
         * Creates a new timestamp from the given date.
         *
         * @param date - The date to initialize the `Timestamp` from.
         * @returns A new `Timestamp` representing the same point in time as the given
         *     date.
         */    static fromDate(t) {
            return ut.fromMillis(t.getTime());
        }
        /**
         * Creates a new timestamp from the given number of milliseconds.
         *
         * @param milliseconds - Number of milliseconds since Unix epoch
         *     1970-01-01T00:00:00Z.
         * @returns A new `Timestamp` representing the same point in time as the given
         *     number of milliseconds.
         */    static fromMillis(t) {
            const e = Math.floor(t / 1e3), n = Math.floor(1e6 * (t - 1e3 * e));
            return new ut(e, n);
        }
        /**
         * Converts a `Timestamp` to a JavaScript `Date` object. This conversion
         * causes a loss of precision since `Date` objects only support millisecond
         * precision.
         *
         * @returns JavaScript `Date` object representing the same point in time as
         *     this `Timestamp`, with millisecond precision.
         */    toDate() {
            return new Date(this.toMillis());
        }
        /**
         * Converts a `Timestamp` to a numeric timestamp (in milliseconds since
         * epoch). This operation causes a loss of precision.
         *
         * @returns The point in time corresponding to this timestamp, represented as
         *     the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.
         */    toMillis() {
            return 1e3 * this.seconds + this.nanoseconds / 1e6;
        }
        _compareTo(t) {
            return this.seconds === t.seconds ? it(this.nanoseconds, t.nanoseconds) : it(this.seconds, t.seconds);
        }
        /**
         * Returns true if this `Timestamp` is equal to the provided one.
         *
         * @param other - The `Timestamp` to compare against.
         * @returns true if this `Timestamp` is equal to the provided one.
         */    isEqual(t) {
            return t.seconds === this.seconds && t.nanoseconds === this.nanoseconds;
        }
        /** Returns a textual representation of this `Timestamp`. */    toString() {
            return "Timestamp(seconds=" + this.seconds + ", nanoseconds=" + this.nanoseconds + ")";
        }
        /** Returns a JSON-serializable representation of this `Timestamp`. */    toJSON() {
            return {
                seconds: this.seconds,
                nanoseconds: this.nanoseconds
            };
        }
        /**
         * Converts this object to a primitive string, which allows `Timestamp` objects
         * to be compared using the `>`, `<=`, `>=` and `>` operators.
         */    valueOf() {
            // This method returns a string of the form <seconds>.<nanoseconds> where
            // <seconds> is translated to have a non-negative value and both <seconds>
            // and <nanoseconds> are left-padded with zeroes to be a consistent length.
            // Strings with this format then have a lexiographical ordering that matches
            // the expected ordering. The <seconds> translation is done to avoid having
            // a leading negative sign (i.e. a leading '-' character) in its string
            // representation, which would affect its lexiographical ordering.
            const t = this.seconds - -62135596800;
            // Note: Up to 12 decimal digits are required to represent all valid
            // 'seconds' values.
                    return String(t).padStart(12, "0") + "." + String(this.nanoseconds).padStart(9, "0");
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A version of a document in Firestore. This corresponds to the version
     * timestamp, such as update_time or read_time.
     */ class ct {
        constructor(t) {
            this.timestamp = t;
        }
        static fromTimestamp(t) {
            return new ct(t);
        }
        static min() {
            return new ct(new ut(0, 0));
        }
        static max() {
            return new ct(new ut(253402300799, 999999999));
        }
        compareTo(t) {
            return this.timestamp._compareTo(t.timestamp);
        }
        isEqual(t) {
            return this.timestamp.isEqual(t.timestamp);
        }
        /** Returns a number representation of the version for use in spec tests. */    toMicroseconds() {
            // Convert to microseconds.
            return 1e6 * this.timestamp.seconds + this.timestamp.nanoseconds / 1e3;
        }
        toString() {
            return "SnapshotVersion(" + this.timestamp.toString() + ")";
        }
        toTimestamp() {
            return this.timestamp;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Path represents an ordered sequence of string segments.
     */
    class at {
        constructor(t, e, n) {
            void 0 === e ? e = 0 : e > t.length && L(), void 0 === n ? n = t.length - e : n > t.length - e && L(), 
            this.segments = t, this.offset = e, this.len = n;
        }
        get length() {
            return this.len;
        }
        isEqual(t) {
            return 0 === at.comparator(this, t);
        }
        child(t) {
            const e = this.segments.slice(this.offset, this.limit());
            return t instanceof at ? t.forEach((t => {
                e.push(t);
            })) : e.push(t), this.construct(e);
        }
        /** The index of one past the last segment of the path. */    limit() {
            return this.offset + this.length;
        }
        popFirst(t) {
            return t = void 0 === t ? 1 : t, this.construct(this.segments, this.offset + t, this.length - t);
        }
        popLast() {
            return this.construct(this.segments, this.offset, this.length - 1);
        }
        firstSegment() {
            return this.segments[this.offset];
        }
        lastSegment() {
            return this.get(this.length - 1);
        }
        get(t) {
            return this.segments[this.offset + t];
        }
        isEmpty() {
            return 0 === this.length;
        }
        isPrefixOf(t) {
            if (t.length < this.length) return !1;
            for (let e = 0; e < this.length; e++) if (this.get(e) !== t.get(e)) return !1;
            return !0;
        }
        isImmediateParentOf(t) {
            if (this.length + 1 !== t.length) return !1;
            for (let e = 0; e < this.length; e++) if (this.get(e) !== t.get(e)) return !1;
            return !0;
        }
        forEach(t) {
            for (let e = this.offset, n = this.limit(); e < n; e++) t(this.segments[e]);
        }
        toArray() {
            return this.segments.slice(this.offset, this.limit());
        }
        static comparator(t, e) {
            const n = Math.min(t.length, e.length);
            for (let s = 0; s < n; s++) {
                const n = t.get(s), i = e.get(s);
                if (n < i) return -1;
                if (n > i) return 1;
            }
            return t.length < e.length ? -1 : t.length > e.length ? 1 : 0;
        }
    }

    /**
     * A slash-separated path for navigating resources (documents and collections)
     * within Firestore.
     *
     * @internal
     */ class ht extends at {
        construct(t, e, n) {
            return new ht(t, e, n);
        }
        canonicalString() {
            // NOTE: The client is ignorant of any path segments containing escape
            // sequences (e.g. __id123__) and just passes them through raw (they exist
            // for legacy reasons and should not be used frequently).
            return this.toArray().join("/");
        }
        toString() {
            return this.canonicalString();
        }
        /**
         * Creates a resource path from the given slash-delimited string. If multiple
         * arguments are provided, all components are combined. Leading and trailing
         * slashes from all components are ignored.
         */    static fromString(...t) {
            // NOTE: The client is ignorant of any path segments containing escape
            // sequences (e.g. __id123__) and just passes them through raw (they exist
            // for legacy reasons and should not be used frequently).
            const e = [];
            for (const n of t) {
                if (n.indexOf("//") >= 0) throw new Q(G.INVALID_ARGUMENT, `Invalid segment (${n}). Paths must not contain // in them.`);
                // Strip leading and traling slashed.
                            e.push(...n.split("/").filter((t => t.length > 0)));
            }
            return new ht(e);
        }
        static emptyPath() {
            return new ht([]);
        }
    }

    const lt = /^[_a-zA-Z][_a-zA-Z0-9]*$/;

    /**
     * A dot-separated path for navigating sub-objects within a document.
     * @internal
     */ class ft extends at {
        construct(t, e, n) {
            return new ft(t, e, n);
        }
        /**
         * Returns true if the string could be used as a segment in a field path
         * without escaping.
         */    static isValidIdentifier(t) {
            return lt.test(t);
        }
        canonicalString() {
            return this.toArray().map((t => (t = t.replace(/\\/g, "\\\\").replace(/`/g, "\\`"), 
            ft.isValidIdentifier(t) || (t = "`" + t + "`"), t))).join(".");
        }
        toString() {
            return this.canonicalString();
        }
        /**
         * Returns true if this field references the key of a document.
         */    isKeyField() {
            return 1 === this.length && "__name__" === this.get(0);
        }
        /**
         * The field designating the key of a document.
         */    static keyField() {
            return new ft([ "__name__" ]);
        }
        /**
         * Parses a field string from the given server-formatted string.
         *
         * - Splitting the empty string is not allowed (for now at least).
         * - Empty segments within the string (e.g. if there are two consecutive
         *   separators) are not allowed.
         *
         * TODO(b/37244157): we should make this more strict. Right now, it allows
         * non-identifier path components, even if they aren't escaped.
         */    static fromServerFormat(t) {
            const e = [];
            let n = "", s = 0;
            const i = () => {
                if (0 === n.length) throw new Q(G.INVALID_ARGUMENT, `Invalid field path (${t}). Paths must not be empty, begin with '.', end with '.', or contain '..'`);
                e.push(n), n = "";
            };
            let r = !1;
            for (;s < t.length; ) {
                const e = t[s];
                if ("\\" === e) {
                    if (s + 1 === t.length) throw new Q(G.INVALID_ARGUMENT, "Path has trailing escape character: " + t);
                    const e = t[s + 1];
                    if ("\\" !== e && "." !== e && "`" !== e) throw new Q(G.INVALID_ARGUMENT, "Path has invalid escape sequence: " + t);
                    n += e, s += 2;
                } else "`" === e ? (r = !r, s++) : "." !== e || r ? (n += e, s++) : (i(), s++);
            }
            if (i(), r) throw new Q(G.INVALID_ARGUMENT, "Unterminated ` in path: " + t);
            return new ft(e);
        }
        static emptyPath() {
            return new ft([]);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @internal
     */ class dt {
        constructor(t) {
            this.path = t;
        }
        static fromPath(t) {
            return new dt(ht.fromString(t));
        }
        static fromName(t) {
            return new dt(ht.fromString(t).popFirst(5));
        }
        static empty() {
            return new dt(ht.emptyPath());
        }
        get collectionGroup() {
            return this.path.popLast().lastSegment();
        }
        /** Returns true if the document is in the specified collectionId. */    hasCollectionId(t) {
            return this.path.length >= 2 && this.path.get(this.path.length - 2) === t;
        }
        /** Returns the collection group (i.e. the name of the parent collection) for this key. */    getCollectionGroup() {
            return this.path.get(this.path.length - 2);
        }
        /** Returns the fully qualified path to the parent collection. */    getCollectionPath() {
            return this.path.popLast();
        }
        isEqual(t) {
            return null !== t && 0 === ht.comparator(this.path, t.path);
        }
        toString() {
            return this.path.toString();
        }
        static comparator(t, e) {
            return ht.comparator(t.path, e.path);
        }
        static isDocumentKey(t) {
            return t.length % 2 == 0;
        }
        /**
         * Creates and returns a new document key with the given segments.
         *
         * @param segments - The segments of the path to the document
         * @returns A new instance of DocumentKey
         */    static fromSegments(t) {
            return new dt(new ht(t.slice()));
        }
    }

    /**
     * @license
     * Copyright 2021 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * The initial mutation batch id for each index. Gets updated during index
     * backfill.
     */
    /**
     * An index definition for field indexes in Firestore.
     *
     * Every index is associated with a collection. The definition contains a list
     * of fields and their index kind (which can be `ASCENDING`, `DESCENDING` or
     * `CONTAINS` for ArrayContains/ArrayContainsAny queries).
     *
     * Unlike the backend, the SDK does not differentiate between collection or
     * collection group-scoped indices. Every index can be used for both single
     * collection and collection group queries.
     */
    class _t {
        constructor(
        /**
         * The index ID. Returns -1 if the index ID is not available (e.g. the index
         * has not yet been persisted).
         */
        t, 
        /** The collection ID this index applies to. */
        e, 
        /** The field segments for this index. */
        n, 
        /** Shows how up-to-date the index is for the current user. */
        s) {
            this.indexId = t, this.collectionGroup = e, this.fields = n, this.indexState = s;
        }
    }

    /** An ID for an index that has not yet been added to persistence.  */
    /** Returns the ArrayContains/ArrayContainsAny segment for this index. */
    function wt(t) {
        return t.fields.find((t => 2 /* CONTAINS */ === t.kind));
    }

    /** Returns all directional (ascending/descending) segments for this index. */ function mt(t) {
        return t.fields.filter((t => 2 /* CONTAINS */ !== t.kind));
    }

    /**
     * Returns the order of the document key component for the given index.
     *
     * PORTING NOTE: This is only used in the Web IndexedDb implementation.
     */ _t.UNKNOWN_ID = -1;

    /** An index component consisting of field path and index type.  */
    class gt {
        constructor(
        /** The field path of the component. */
        t, 
        /** The fields sorting order. */
        e) {
            this.fieldPath = t, this.kind = e;
        }
    }

    /**
     * Stores the "high water mark" that indicates how updated the Index is for the
     * current user.
     */ class yt {
        constructor(
        /**
         * Indicates when the index was last updated (relative to other indexes).
         */
        t, 
        /** The the latest indexed read time, document and batch id. */
        e) {
            this.sequenceNumber = t, this.offset = e;
        }
        /** The state of an index that has not yet been backfilled. */    static empty() {
            return new yt(0, Tt.min());
        }
    }

    /**
     * Creates an offset that matches all documents with a read time higher than
     * `readTime`.
     */ function pt(t, e) {
        // We want to create an offset that matches all documents with a read time
        // greater than the provided read time. To do so, we technically need to
        // create an offset for `(readTime, MAX_DOCUMENT_KEY)`. While we could use
        // Unicode codepoints to generate MAX_DOCUMENT_KEY, it is much easier to use
        // `(readTime + 1, DocumentKey.empty())` since `> DocumentKey.empty()` matches
        // all valid document IDs.
        const n = t.toTimestamp().seconds, s = t.toTimestamp().nanoseconds + 1, i = ct.fromTimestamp(1e9 === s ? new ut(n + 1, 0) : new ut(n, s));
        return new Tt(i, dt.empty(), e);
    }

    /** Creates a new offset based on the provided document. */ function It(t) {
        return new Tt(t.readTime, t.key, -1);
    }

    /**
     * Stores the latest read time, document and batch ID that were processed for an
     * index.
     */ class Tt {
        constructor(
        /**
         * The latest read time version that has been indexed by Firestore for this
         * field index.
         */
        t, 
        /**
         * The key of the last document that was indexed for this query. Use
         * `DocumentKey.empty()` if no document has been indexed.
         */
        e, 
        /*
         * The largest mutation batch id that's been processed by Firestore.
         */
        n) {
            this.readTime = t, this.documentKey = e, this.largestBatchId = n;
        }
        /** Returns an offset that sorts before all regular offsets. */    static min() {
            return new Tt(ct.min(), dt.empty(), -1);
        }
        /** Returns an offset that sorts after all regular offsets. */    static max() {
            return new Tt(ct.max(), dt.empty(), -1);
        }
    }

    function Et(t, e) {
        let n = t.readTime.compareTo(e.readTime);
        return 0 !== n ? n : (n = dt.comparator(t.documentKey, e.documentKey), 0 !== n ? n : it(t.largestBatchId, e.largestBatchId));
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // TODO(indexing): Remove this constant
    const At = "The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab.";

    /**
     * A base class representing a persistence transaction, encapsulating both the
     * transaction's sequence numbers as well as a list of onCommitted listeners.
     *
     * When you call Persistence.runTransaction(), it will create a transaction and
     * pass it to your callback. You then pass it to any method that operates
     * on persistence.
     */
    class Rt {
        constructor() {
            this.onCommittedListeners = [];
        }
        addOnCommittedListener(t) {
            this.onCommittedListeners.push(t);
        }
        raiseOnCommittedEvent() {
            this.onCommittedListeners.forEach((t => t()));
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Verifies the error thrown by a LocalStore operation. If a LocalStore
     * operation fails because the primary lease has been taken by another client,
     * we ignore the error (the persistence layer will immediately call
     * `applyPrimaryLease` to propagate the primary state change). All other errors
     * are re-thrown.
     *
     * @param err - An error returned by a LocalStore operation.
     * @returns A Promise that resolves after we recovered, or the original error.
     */ async function bt(t) {
        if (t.code !== G.FAILED_PRECONDITION || t.message !== At) throw t;
        M("LocalStore", "Unexpectedly lost primary lease");
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * PersistencePromise is essentially a re-implementation of Promise except
     * it has a .next() method instead of .then() and .next() and .catch() callbacks
     * are executed synchronously when a PersistencePromise resolves rather than
     * asynchronously (Promise implementations use setImmediate() or similar).
     *
     * This is necessary to interoperate with IndexedDB which will automatically
     * commit transactions if control is returned to the event loop without
     * synchronously initiating another operation on the transaction.
     *
     * NOTE: .then() and .catch() only allow a single consumer, unlike normal
     * Promises.
     */ class Pt {
        constructor(t) {
            // NOTE: next/catchCallback will always point to our own wrapper functions,
            // not the user's raw next() or catch() callbacks.
            this.nextCallback = null, this.catchCallback = null, 
            // When the operation resolves, we'll set result or error and mark isDone.
            this.result = void 0, this.error = void 0, this.isDone = !1, 
            // Set to true when .then() or .catch() are called and prevents additional
            // chaining.
            this.callbackAttached = !1, t((t => {
                this.isDone = !0, this.result = t, this.nextCallback && 
                // value should be defined unless T is Void, but we can't express
                // that in the type system.
                this.nextCallback(t);
            }), (t => {
                this.isDone = !0, this.error = t, this.catchCallback && this.catchCallback(t);
            }));
        }
        catch(t) {
            return this.next(void 0, t);
        }
        next(t, e) {
            return this.callbackAttached && L(), this.callbackAttached = !0, this.isDone ? this.error ? this.wrapFailure(e, this.error) : this.wrapSuccess(t, this.result) : new Pt(((n, s) => {
                this.nextCallback = e => {
                    this.wrapSuccess(t, e).next(n, s);
                }, this.catchCallback = t => {
                    this.wrapFailure(e, t).next(n, s);
                };
            }));
        }
        toPromise() {
            return new Promise(((t, e) => {
                this.next(t, e);
            }));
        }
        wrapUserFunction(t) {
            try {
                const e = t();
                return e instanceof Pt ? e : Pt.resolve(e);
            } catch (t) {
                return Pt.reject(t);
            }
        }
        wrapSuccess(t, e) {
            return t ? this.wrapUserFunction((() => t(e))) : Pt.resolve(e);
        }
        wrapFailure(t, e) {
            return t ? this.wrapUserFunction((() => t(e))) : Pt.reject(e);
        }
        static resolve(t) {
            return new Pt(((e, n) => {
                e(t);
            }));
        }
        static reject(t) {
            return new Pt(((e, n) => {
                n(t);
            }));
        }
        static waitFor(
        // Accept all Promise types in waitFor().
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        t) {
            return new Pt(((e, n) => {
                let s = 0, i = 0, r = !1;
                t.forEach((t => {
                    ++s, t.next((() => {
                        ++i, r && i === s && e();
                    }), (t => n(t)));
                })), r = !0, i === s && e();
            }));
        }
        /**
         * Given an array of predicate functions that asynchronously evaluate to a
         * boolean, implements a short-circuiting `or` between the results. Predicates
         * will be evaluated until one of them returns `true`, then stop. The final
         * result will be whether any of them returned `true`.
         */    static or(t) {
            let e = Pt.resolve(!1);
            for (const n of t) e = e.next((t => t ? Pt.resolve(t) : n()));
            return e;
        }
        static forEach(t, e) {
            const n = [];
            return t.forEach(((t, s) => {
                n.push(e.call(this, t, s));
            })), this.waitFor(n);
        }
        /**
         * Concurrently map all array elements through asynchronous function.
         */    static mapArray(t, e) {
            return new Pt(((n, s) => {
                const i = t.length, r = new Array(i);
                let o = 0;
                for (let u = 0; u < i; u++) {
                    const c = u;
                    e(t[c]).next((t => {
                        r[c] = t, ++o, o === i && n(r);
                    }), (t => s(t)));
                }
            }));
        }
        /**
         * An alternative to recursive PersistencePromise calls, that avoids
         * potential memory problems from unbounded chains of promises.
         *
         * The `action` will be called repeatedly while `condition` is true.
         */    static doWhile(t, e) {
            return new Pt(((n, s) => {
                const i = () => {
                    !0 === t() ? e().next((() => {
                        i();
                    }), s) : n();
                };
                i();
            }));
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // References to `window` are guarded by SimpleDb.isAvailable()
    /* eslint-disable no-restricted-globals */
    /**
     * Wraps an IDBTransaction and exposes a store() method to get a handle to a
     * specific object store.
     */
    class vt {
        constructor(t, e) {
            this.action = t, this.transaction = e, this.aborted = !1, 
            /**
             * A `Promise` that resolves with the result of the IndexedDb transaction.
             */
            this.T = new j, this.transaction.oncomplete = () => {
                this.T.resolve();
            }, this.transaction.onabort = () => {
                e.error ? this.T.reject(new Dt(t, e.error)) : this.T.resolve();
            }, this.transaction.onerror = e => {
                const n = Ot(e.target.error);
                this.T.reject(new Dt(t, n));
            };
        }
        static open(t, e, n, s) {
            try {
                return new vt(e, t.transaction(s, n));
            } catch (t) {
                throw new Dt(e, t);
            }
        }
        get A() {
            return this.T.promise;
        }
        abort(t) {
            t && this.T.reject(t), this.aborted || (M("SimpleDb", "Aborting transaction:", t ? t.message : "Client-initiated abort"), 
            this.aborted = !0, this.transaction.abort());
        }
        R() {
            // If the browser supports V3 IndexedDB, we invoke commit() explicitly to
            // speed up index DB processing if the event loop remains blocks.
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            const t = this.transaction;
            this.aborted || "function" != typeof t.commit || t.commit();
        }
        /**
         * Returns a SimpleDbStore<KeyType, ValueType> for the specified store. All
         * operations performed on the SimpleDbStore happen within the context of this
         * transaction and it cannot be used anymore once the transaction is
         * completed.
         *
         * Note that we can't actually enforce that the KeyType and ValueType are
         * correct, but they allow type safety through the rest of the consuming code.
         */    store(t) {
            const e = this.transaction.objectStore(t);
            return new xt(e);
        }
    }

    /**
     * Provides a wrapper around IndexedDb with a simplified interface that uses
     * Promise-like return values to chain operations. Real promises cannot be used
     * since .then() continuations are executed asynchronously (e.g. via
     * .setImmediate), which would cause IndexedDB to end the transaction.
     * See PersistencePromise for more details.
     */ class Vt {
        /*
         * Creates a new SimpleDb wrapper for IndexedDb database `name`.
         *
         * Note that `version` must not be a downgrade. IndexedDB does not support
         * downgrading the schema version. We currently do not support any way to do
         * versioning outside of IndexedDB's versioning mechanism, as only
         * version-upgrade transactions are allowed to do things like create
         * objectstores.
         */
        constructor(t, e, n) {
            this.name = t, this.version = e, this.P = n;
            // NOTE: According to https://bugs.webkit.org/show_bug.cgi?id=197050, the
            // bug we're checking for should exist in iOS >= 12.2 and < 13, but for
            // whatever reason it's much harder to hit after 12.2 so we only proactively
            // log on 12.2.
            12.2 === Vt.v(getUA()) && F("Firestore persistence suffers from a bug in iOS 12.2 Safari that may cause your app to stop working. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.");
        }
        /** Deletes the specified database. */    static delete(t) {
            return M("SimpleDb", "Removing database:", t), Nt(window.indexedDB.deleteDatabase(t)).toPromise();
        }
        /** Returns true if IndexedDB is available in the current environment. */    static V() {
            if (!isIndexedDBAvailable()) return !1;
            if (Vt.S()) return !0;
            // We extensively use indexed array values and compound keys,
            // which IE and Edge do not support. However, they still have indexedDB
            // defined on the window, so we need to check for them here and make sure
            // to return that persistence is not enabled for those browsers.
            // For tracking support of this feature, see here:
            // https://developer.microsoft.com/en-us/microsoft-edge/platform/status/indexeddbarraysandmultientrysupport/
            // Check the UA string to find out the browser.
                    const t = getUA(), e = Vt.v(t), n = 0 < e && e < 10, s = Vt.D(t), i = 0 < s && s < 4.5;
            // IE 10
            // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';
            // IE 11
            // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';
            // Edge
            // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML,
            // like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';
            // iOS Safari: Disable for users running iOS version < 10.
                    return !(t.indexOf("MSIE ") > 0 || t.indexOf("Trident/") > 0 || t.indexOf("Edge/") > 0 || n || i);
        }
        /**
         * Returns true if the backing IndexedDB store is the Node IndexedDBShim
         * (see https://github.com/axemclion/IndexedDBShim).
         */    static S() {
            var t;
            return "undefined" != typeof process && "YES" === (null === (t = process.env) || void 0 === t ? void 0 : t.C);
        }
        /** Helper to get a typed SimpleDbStore from a transaction. */    static N(t, e) {
            return t.store(e);
        }
        // visible for testing
        /** Parse User Agent to determine iOS version. Returns -1 if not found. */
        static v(t) {
            const e = t.match(/i(?:phone|pad|pod) os ([\d_]+)/i), n = e ? e[1].split("_").slice(0, 2).join(".") : "-1";
            return Number(n);
        }
        // visible for testing
        /** Parse User Agent to determine Android version. Returns -1 if not found. */
        static D(t) {
            const e = t.match(/Android ([\d.]+)/i), n = e ? e[1].split(".").slice(0, 2).join(".") : "-1";
            return Number(n);
        }
        /**
         * Opens the specified database, creating or upgrading it if necessary.
         */    async k(t) {
            return this.db || (M("SimpleDb", "Opening database:", this.name), this.db = await new Promise(((e, n) => {
                // TODO(mikelehen): Investigate browser compatibility.
                // https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB
                // suggests IE9 and older WebKit browsers handle upgrade
                // differently. They expect setVersion, as described here:
                // https://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeRequest/setVersion
                const s = indexedDB.open(this.name, this.version);
                s.onsuccess = t => {
                    const n = t.target.result;
                    e(n);
                }, s.onblocked = () => {
                    n(new Dt(t, "Cannot upgrade IndexedDB schema while another tab is open. Close all tabs that access Firestore and reload this page to proceed."));
                }, s.onerror = e => {
                    const s = e.target.error;
                    "VersionError" === s.name ? n(new Q(G.FAILED_PRECONDITION, "A newer version of the Firestore SDK was previously used and so the persisted data is not compatible with the version of the SDK you are now using. The SDK will operate with persistence disabled. If you need persistence, please re-upgrade to a newer version of the SDK or else clear the persisted IndexedDB data for your app to start fresh.")) : "InvalidStateError" === s.name ? n(new Q(G.FAILED_PRECONDITION, "Unable to open an IndexedDB connection. This could be due to running in a private browsing session on a browser whose private browsing sessions do not support IndexedDB: " + s)) : n(new Dt(t, s));
                }, s.onupgradeneeded = t => {
                    M("SimpleDb", 'Database "' + this.name + '" requires upgrade from version:', t.oldVersion);
                    const e = t.target.result;
                    this.P.O(e, s.transaction, t.oldVersion, this.version).next((() => {
                        M("SimpleDb", "Database upgrade to version " + this.version + " complete");
                    }));
                };
            }))), this.M && (this.db.onversionchange = t => this.M(t)), this.db;
        }
        F(t) {
            this.M = t, this.db && (this.db.onversionchange = e => t(e));
        }
        async runTransaction(t, e, n, s) {
            const i = "readonly" === e;
            let r = 0;
            for (;;) {
                ++r;
                try {
                    this.db = await this.k(t);
                    const e = vt.open(this.db, t, i ? "readonly" : "readwrite", n), r = s(e).next((t => (e.R(), 
                    t))).catch((t => (
                    // Abort the transaction if there was an error.
                    e.abort(t), Pt.reject(t)))).toPromise();
                    // As noted above, errors are propagated by aborting the transaction. So
                    // we swallow any error here to avoid the browser logging it as unhandled.
                    return r.catch((() => {})), 
                    // Wait for the transaction to complete (i.e. IndexedDb's onsuccess event to
                    // fire), but still return the original transactionFnResult back to the
                    // caller.
                    await e.A, r;
                } catch (t) {
                    const e = t, n = "FirebaseError" !== e.name && r < 3;
                    // TODO(schmidt-sebastian): We could probably be smarter about this and
                    // not retry exceptions that are likely unrecoverable (such as quota
                    // exceeded errors).
                    // Note: We cannot use an instanceof check for FirestoreException, since the
                    // exception is wrapped in a generic error by our async/await handling.
                                    if (M("SimpleDb", "Transaction failed with error:", e.message, "Retrying:", n), 
                    this.close(), !n) return Promise.reject(e);
                }
            }
        }
        close() {
            this.db && this.db.close(), this.db = void 0;
        }
    }

    /**
     * A controller for iterating over a key range or index. It allows an iterate
     * callback to delete the currently-referenced object, or jump to a new key
     * within the key range or index.
     */ class St {
        constructor(t) {
            this.$ = t, this.B = !1, this.L = null;
        }
        get isDone() {
            return this.B;
        }
        get U() {
            return this.L;
        }
        set cursor(t) {
            this.$ = t;
        }
        /**
         * This function can be called to stop iteration at any point.
         */    done() {
            this.B = !0;
        }
        /**
         * This function can be called to skip to that next key, which could be
         * an index or a primary key.
         */    q(t) {
            this.L = t;
        }
        /**
         * Delete the current cursor value from the object store.
         *
         * NOTE: You CANNOT do this with a keysOnly query.
         */    delete() {
            return Nt(this.$.delete());
        }
    }

    /** An error that wraps exceptions that thrown during IndexedDB execution. */ class Dt extends Q {
        constructor(t, e) {
            super(G.UNAVAILABLE, `IndexedDB transaction '${t}' failed: ${e}`), this.name = "IndexedDbTransactionError";
        }
    }

    /** Verifies whether `e` is an IndexedDbTransactionError. */ function Ct(t) {
        // Use name equality, as instanceof checks on errors don't work with errors
        // that wrap other errors.
        return "IndexedDbTransactionError" === t.name;
    }

    /**
     * A wrapper around an IDBObjectStore providing an API that:
     *
     * 1) Has generic KeyType / ValueType parameters to provide strongly-typed
     * methods for acting against the object store.
     * 2) Deals with IndexedDB's onsuccess / onerror event callbacks, making every
     * method return a PersistencePromise instead.
     * 3) Provides a higher-level API to avoid needing to do excessive wrapping of
     * intermediate IndexedDB types (IDBCursorWithValue, etc.)
     */ class xt {
        constructor(t) {
            this.store = t;
        }
        put(t, e) {
            let n;
            return void 0 !== e ? (M("SimpleDb", "PUT", this.store.name, t, e), n = this.store.put(e, t)) : (M("SimpleDb", "PUT", this.store.name, "<auto-key>", t), 
            n = this.store.put(t)), Nt(n);
        }
        /**
         * Adds a new value into an Object Store and returns the new key. Similar to
         * IndexedDb's `add()`, this method will fail on primary key collisions.
         *
         * @param value - The object to write.
         * @returns The key of the value to add.
         */    add(t) {
            M("SimpleDb", "ADD", this.store.name, t, t);
            return Nt(this.store.add(t));
        }
        /**
         * Gets the object with the specified key from the specified store, or null
         * if no object exists with the specified key.
         *
         * @key The key of the object to get.
         * @returns The object with the specified key or null if no object exists.
         */    get(t) {
            // We're doing an unsafe cast to ValueType.
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return Nt(this.store.get(t)).next((e => (
            // Normalize nonexistence to null.
            void 0 === e && (e = null), M("SimpleDb", "GET", this.store.name, t, e), e)));
        }
        delete(t) {
            M("SimpleDb", "DELETE", this.store.name, t);
            return Nt(this.store.delete(t));
        }
        /**
         * If we ever need more of the count variants, we can add overloads. For now,
         * all we need is to count everything in a store.
         *
         * Returns the number of rows in the store.
         */    count() {
            M("SimpleDb", "COUNT", this.store.name);
            return Nt(this.store.count());
        }
        K(t, e) {
            const n = this.options(t, e);
            // Use `getAll()` if the browser supports IndexedDB v3, as it is roughly
            // 20% faster. Unfortunately, getAll() does not support custom indices.
                    if (n.index || "function" != typeof this.store.getAll) {
                const t = this.cursor(n), e = [];
                return this.G(t, ((t, n) => {
                    e.push(n);
                })).next((() => e));
            }
            {
                const t = this.store.getAll(n.range);
                return new Pt(((e, n) => {
                    t.onerror = t => {
                        n(t.target.error);
                    }, t.onsuccess = t => {
                        e(t.target.result);
                    };
                }));
            }
        }
        /**
         * Loads the first `count` elements from the provided index range. Loads all
         * elements if no limit is provided.
         */    j(t, e) {
            const n = this.store.getAll(t, null === e ? void 0 : e);
            return new Pt(((t, e) => {
                n.onerror = t => {
                    e(t.target.error);
                }, n.onsuccess = e => {
                    t(e.target.result);
                };
            }));
        }
        W(t, e) {
            M("SimpleDb", "DELETE ALL", this.store.name);
            const n = this.options(t, e);
            n.H = !1;
            const s = this.cursor(n);
            return this.G(s, ((t, e, n) => n.delete()));
        }
        J(t, e) {
            let n;
            e ? n = t : (n = {}, e = t);
            const s = this.cursor(n);
            return this.G(s, e);
        }
        /**
         * Iterates over a store, but waits for the given callback to complete for
         * each entry before iterating the next entry. This allows the callback to do
         * asynchronous work to determine if this iteration should continue.
         *
         * The provided callback should return `true` to continue iteration, and
         * `false` otherwise.
         */    Y(t) {
            const e = this.cursor({});
            return new Pt(((n, s) => {
                e.onerror = t => {
                    const e = Ot(t.target.error);
                    s(e);
                }, e.onsuccess = e => {
                    const s = e.target.result;
                    s ? t(s.primaryKey, s.value).next((t => {
                        t ? s.continue() : n();
                    })) : n();
                };
            }));
        }
        G(t, e) {
            const n = [];
            return new Pt(((s, i) => {
                t.onerror = t => {
                    i(t.target.error);
                }, t.onsuccess = t => {
                    const i = t.target.result;
                    if (!i) return void s();
                    const r = new St(i), o = e(i.primaryKey, i.value, r);
                    if (o instanceof Pt) {
                        const t = o.catch((t => (r.done(), Pt.reject(t))));
                        n.push(t);
                    }
                    r.isDone ? s() : null === r.U ? i.continue() : i.continue(r.U);
                };
            })).next((() => Pt.waitFor(n)));
        }
        options(t, e) {
            let n;
            return void 0 !== t && ("string" == typeof t ? n = t : e = t), {
                index: n,
                range: e
            };
        }
        cursor(t) {
            let e = "next";
            if (t.reverse && (e = "prev"), t.index) {
                const n = this.store.index(t.index);
                return t.H ? n.openKeyCursor(t.range, e) : n.openCursor(t.range, e);
            }
            return this.store.openCursor(t.range, e);
        }
    }

    /**
     * Wraps an IDBRequest in a PersistencePromise, using the onsuccess / onerror
     * handlers to resolve / reject the PersistencePromise as appropriate.
     */ function Nt(t) {
        return new Pt(((e, n) => {
            t.onsuccess = t => {
                const n = t.target.result;
                e(n);
            }, t.onerror = t => {
                const e = Ot(t.target.error);
                n(e);
            };
        }));
    }

    // Guard so we only report the error once.
    let kt = !1;

    function Ot(t) {
        const e = Vt.v(getUA());
        if (e >= 12.2 && e < 13) {
            const e = "An internal error was encountered in the Indexed Database server";
            if (t.message.indexOf(e) >= 0) {
                // Wrap error in a more descriptive one.
                const t = new Q("internal", `IOS_INDEXEDDB_BUG1: IndexedDb has thrown '${e}'. This is likely due to an unavoidable bug in iOS. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.`);
                return kt || (kt = !0, 
                // Throw a global exception outside of this promise chain, for the user to
                // potentially catch.
                setTimeout((() => {
                    throw t;
                }), 0)), t;
            }
        }
        return t;
    }

    /** This class is responsible for the scheduling of Index Backfiller. */
    class Mt {
        constructor(t, e) {
            this.asyncQueue = t, this.X = e, this.task = null;
        }
        start() {
        }
        stop() {
            this.task && (this.task.cancel(), this.task = null);
        }
        get started() {
            return null !== this.task;
        }
        Z(t) {
            M("IndexBackiller", `Scheduled in ${t}ms`), this.task = this.asyncQueue.enqueueAfterDelay("index_backfill" /* IndexBackfill */ , t, (async () => {
                this.task = null;
                try {
                    M("IndexBackiller", `Documents written: ${await this.X.tt()}`);
                } catch (t) {
                    Ct(t) ? M("IndexBackiller", "Ignoring IndexedDB error during index backfill: ", t) : await bt(t);
                }
                await this.Z(1);
            }));
        }
    }

    /** Implements the steps for backfilling indexes. */ class Ft {
        constructor(
        /**
         * LocalStore provides access to IndexManager and LocalDocumentView.
         * These properties will update when the user changes. Consequently,
         * making a local copy of IndexManager and LocalDocumentView will require
         * updates over time. The simpler solution is to rely on LocalStore to have
         * an up-to-date references to IndexManager and LocalDocumentStore.
         */
        t, e) {
            this.localStore = t, this.persistence = e;
        }
        async tt(t = 50) {
            return this.persistence.runTransaction("Backfill Indexes", "readwrite-primary", (e => this.et(e, t)));
        }
        /** Writes index entries until the cap is reached. Returns the number of documents processed. */    et(t, e) {
            const n = new Set;
            let s = e, i = !0;
            return Pt.doWhile((() => !0 === i && s > 0), (() => this.localStore.indexManager.getNextCollectionGroupToUpdate(t).next((e => {
                if (null !== e && !n.has(e)) return M("IndexBackiller", `Processing collection: ${e}`), 
                this.nt(t, e, s).next((t => {
                    s -= t, n.add(e);
                }));
                i = !1;
            })))).next((() => e - s));
        }
        /**
         * Writes entries for the provided collection group. Returns the number of documents processed.
         */    nt(t, e, n) {
            // Use the earliest offset of all field indexes to query the local cache.
            return this.localStore.indexManager.getMinOffsetFromCollectionGroup(t, e).next((s => this.localStore.localDocuments.getNextDocuments(t, e, s, n).next((n => {
                const i = n.changes;
                return this.localStore.indexManager.updateIndexEntries(t, i).next((() => this.st(s, n))).next((n => (M("IndexBackiller", `Updating offset: ${n}`), 
                this.localStore.indexManager.updateCollectionGroup(t, e, n)))).next((() => i.size));
            }))));
        }
        /** Returns the next offset based on the provided documents. */    st(t, e) {
            let n = t;
            return e.changes.forEach(((t, e) => {
                const s = It(e);
                Et(s, n) > 0 && (n = s);
            })), new Tt(n.readTime, n.documentKey, Math.max(e.batchId, t.largestBatchId));
        }
    }

    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * `ListenSequence` is a monotonic sequence. It is initialized with a minimum value to
     * exceed. All subsequent calls to next will return increasing values. If provided with a
     * `SequenceNumberSyncer`, it will additionally bump its next value when told of a new value, as
     * well as write out sequence numbers that it produces via `next()`.
     */ class $t {
        constructor(t, e) {
            this.previousValue = t, e && (e.sequenceNumberHandler = t => this.it(t), this.rt = t => e.writeSequenceNumber(t));
        }
        it(t) {
            return this.previousValue = Math.max(t, this.previousValue), this.previousValue;
        }
        next() {
            const t = ++this.previousValue;
            return this.rt && this.rt(t), t;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function Bt(t) {
        let e = 0;
        for (const n in t) Object.prototype.hasOwnProperty.call(t, n) && e++;
        return e;
    }

    function Lt(t, e) {
        for (const n in t) Object.prototype.hasOwnProperty.call(t, n) && e(n, t[n]);
    }

    function Ut(t) {
        for (const e in t) if (Object.prototype.hasOwnProperty.call(t, e)) return !1;
        return !0;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // An immutable sorted map implementation, based on a Left-leaning Red-Black
    // tree.
    $t.ot = -1;

    class qt {
        constructor(t, e) {
            this.comparator = t, this.root = e || Gt.EMPTY;
        }
        // Returns a copy of the map, with the specified key/value added or replaced.
        insert(t, e) {
            return new qt(this.comparator, this.root.insert(t, e, this.comparator).copy(null, null, Gt.BLACK, null, null));
        }
        // Returns a copy of the map, with the specified key removed.
        remove(t) {
            return new qt(this.comparator, this.root.remove(t, this.comparator).copy(null, null, Gt.BLACK, null, null));
        }
        // Returns the value of the node with the given key, or null.
        get(t) {
            let e = this.root;
            for (;!e.isEmpty(); ) {
                const n = this.comparator(t, e.key);
                if (0 === n) return e.value;
                n < 0 ? e = e.left : n > 0 && (e = e.right);
            }
            return null;
        }
        // Returns the index of the element in this sorted map, or -1 if it doesn't
        // exist.
        indexOf(t) {
            // Number of nodes that were pruned when descending right
            let e = 0, n = this.root;
            for (;!n.isEmpty(); ) {
                const s = this.comparator(t, n.key);
                if (0 === s) return e + n.left.size;
                s < 0 ? n = n.left : (
                // Count all nodes left of the node plus the node itself
                e += n.left.size + 1, n = n.right);
            }
            // Node not found
                    return -1;
        }
        isEmpty() {
            return this.root.isEmpty();
        }
        // Returns the total number of nodes in the map.
        get size() {
            return this.root.size;
        }
        // Returns the minimum key in the map.
        minKey() {
            return this.root.minKey();
        }
        // Returns the maximum key in the map.
        maxKey() {
            return this.root.maxKey();
        }
        // Traverses the map in key order and calls the specified action function
        // for each key/value pair. If action returns true, traversal is aborted.
        // Returns the first truthy value returned by action, or the last falsey
        // value returned by action.
        inorderTraversal(t) {
            return this.root.inorderTraversal(t);
        }
        forEach(t) {
            this.inorderTraversal(((e, n) => (t(e, n), !1)));
        }
        toString() {
            const t = [];
            return this.inorderTraversal(((e, n) => (t.push(`${e}:${n}`), !1))), `{${t.join(", ")}}`;
        }
        // Traverses the map in reverse key order and calls the specified action
        // function for each key/value pair. If action returns true, traversal is
        // aborted.
        // Returns the first truthy value returned by action, or the last falsey
        // value returned by action.
        reverseTraversal(t) {
            return this.root.reverseTraversal(t);
        }
        // Returns an iterator over the SortedMap.
        getIterator() {
            return new Kt(this.root, null, this.comparator, !1);
        }
        getIteratorFrom(t) {
            return new Kt(this.root, t, this.comparator, !1);
        }
        getReverseIterator() {
            return new Kt(this.root, null, this.comparator, !0);
        }
        getReverseIteratorFrom(t) {
            return new Kt(this.root, t, this.comparator, !0);
        }
    }

     // end SortedMap
    // An iterator over an LLRBNode.
    class Kt {
        constructor(t, e, n, s) {
            this.isReverse = s, this.nodeStack = [];
            let i = 1;
            for (;!t.isEmpty(); ) if (i = e ? n(t.key, e) : 1, 
            // flip the comparison if we're going in reverse
            e && s && (i *= -1), i < 0) 
            // This node is less than our start key. ignore it
            t = this.isReverse ? t.left : t.right; else {
                if (0 === i) {
                    // This node is exactly equal to our start key. Push it on the stack,
                    // but stop iterating;
                    this.nodeStack.push(t);
                    break;
                }
                // This node is greater than our start key, add it to the stack and move
                // to the next one
                this.nodeStack.push(t), t = this.isReverse ? t.right : t.left;
            }
        }
        getNext() {
            let t = this.nodeStack.pop();
            const e = {
                key: t.key,
                value: t.value
            };
            if (this.isReverse) for (t = t.left; !t.isEmpty(); ) this.nodeStack.push(t), t = t.right; else for (t = t.right; !t.isEmpty(); ) this.nodeStack.push(t), 
            t = t.left;
            return e;
        }
        hasNext() {
            return this.nodeStack.length > 0;
        }
        peek() {
            if (0 === this.nodeStack.length) return null;
            const t = this.nodeStack[this.nodeStack.length - 1];
            return {
                key: t.key,
                value: t.value
            };
        }
    }

     // end SortedMapIterator
    // Represents a node in a Left-leaning Red-Black tree.
    class Gt {
        constructor(t, e, n, s, i) {
            this.key = t, this.value = e, this.color = null != n ? n : Gt.RED, this.left = null != s ? s : Gt.EMPTY, 
            this.right = null != i ? i : Gt.EMPTY, this.size = this.left.size + 1 + this.right.size;
        }
        // Returns a copy of the current node, optionally replacing pieces of it.
        copy(t, e, n, s, i) {
            return new Gt(null != t ? t : this.key, null != e ? e : this.value, null != n ? n : this.color, null != s ? s : this.left, null != i ? i : this.right);
        }
        isEmpty() {
            return !1;
        }
        // Traverses the tree in key order and calls the specified action function
        // for each node. If action returns true, traversal is aborted.
        // Returns the first truthy value returned by action, or the last falsey
        // value returned by action.
        inorderTraversal(t) {
            return this.left.inorderTraversal(t) || t(this.key, this.value) || this.right.inorderTraversal(t);
        }
        // Traverses the tree in reverse key order and calls the specified action
        // function for each node. If action returns true, traversal is aborted.
        // Returns the first truthy value returned by action, or the last falsey
        // value returned by action.
        reverseTraversal(t) {
            return this.right.reverseTraversal(t) || t(this.key, this.value) || this.left.reverseTraversal(t);
        }
        // Returns the minimum node in the tree.
        min() {
            return this.left.isEmpty() ? this : this.left.min();
        }
        // Returns the maximum key in the tree.
        minKey() {
            return this.min().key;
        }
        // Returns the maximum key in the tree.
        maxKey() {
            return this.right.isEmpty() ? this.key : this.right.maxKey();
        }
        // Returns new tree, with the key/value added.
        insert(t, e, n) {
            let s = this;
            const i = n(t, s.key);
            return s = i < 0 ? s.copy(null, null, null, s.left.insert(t, e, n), null) : 0 === i ? s.copy(null, e, null, null, null) : s.copy(null, null, null, null, s.right.insert(t, e, n)), 
            s.fixUp();
        }
        removeMin() {
            if (this.left.isEmpty()) return Gt.EMPTY;
            let t = this;
            return t.left.isRed() || t.left.left.isRed() || (t = t.moveRedLeft()), t = t.copy(null, null, null, t.left.removeMin(), null), 
            t.fixUp();
        }
        // Returns new tree, with the specified item removed.
        remove(t, e) {
            let n, s = this;
            if (e(t, s.key) < 0) s.left.isEmpty() || s.left.isRed() || s.left.left.isRed() || (s = s.moveRedLeft()), 
            s = s.copy(null, null, null, s.left.remove(t, e), null); else {
                if (s.left.isRed() && (s = s.rotateRight()), s.right.isEmpty() || s.right.isRed() || s.right.left.isRed() || (s = s.moveRedRight()), 
                0 === e(t, s.key)) {
                    if (s.right.isEmpty()) return Gt.EMPTY;
                    n = s.right.min(), s = s.copy(n.key, n.value, null, null, s.right.removeMin());
                }
                s = s.copy(null, null, null, null, s.right.remove(t, e));
            }
            return s.fixUp();
        }
        isRed() {
            return this.color;
        }
        // Returns new tree after performing any needed rotations.
        fixUp() {
            let t = this;
            return t.right.isRed() && !t.left.isRed() && (t = t.rotateLeft()), t.left.isRed() && t.left.left.isRed() && (t = t.rotateRight()), 
            t.left.isRed() && t.right.isRed() && (t = t.colorFlip()), t;
        }
        moveRedLeft() {
            let t = this.colorFlip();
            return t.right.left.isRed() && (t = t.copy(null, null, null, null, t.right.rotateRight()), 
            t = t.rotateLeft(), t = t.colorFlip()), t;
        }
        moveRedRight() {
            let t = this.colorFlip();
            return t.left.left.isRed() && (t = t.rotateRight(), t = t.colorFlip()), t;
        }
        rotateLeft() {
            const t = this.copy(null, null, Gt.RED, null, this.right.left);
            return this.right.copy(null, null, this.color, t, null);
        }
        rotateRight() {
            const t = this.copy(null, null, Gt.RED, this.left.right, null);
            return this.left.copy(null, null, this.color, null, t);
        }
        colorFlip() {
            const t = this.left.copy(null, null, !this.left.color, null, null), e = this.right.copy(null, null, !this.right.color, null, null);
            return this.copy(null, null, !this.color, t, e);
        }
        // For testing.
        checkMaxDepth() {
            const t = this.check();
            return Math.pow(2, t) <= this.size + 1;
        }
        // In a balanced RB tree, the black-depth (number of black nodes) from root to
        // leaves is equal on both sides.  This function verifies that or asserts.
        check() {
            if (this.isRed() && this.left.isRed()) throw L();
            if (this.right.isRed()) throw L();
            const t = this.left.check();
            if (t !== this.right.check()) throw L();
            return t + (this.isRed() ? 0 : 1);
        }
    }

     // end LLRBNode
    // Empty node is shared between all LLRB trees.
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    Gt.EMPTY = null, Gt.RED = !0, Gt.BLACK = !1;

    // end LLRBEmptyNode
    Gt.EMPTY = new 
    // Represents an empty node (a leaf node in the Red-Black Tree).
    class {
        constructor() {
            this.size = 0;
        }
        get key() {
            throw L();
        }
        get value() {
            throw L();
        }
        get color() {
            throw L();
        }
        get left() {
            throw L();
        }
        get right() {
            throw L();
        }
        // Returns a copy of the current node.
        copy(t, e, n, s, i) {
            return this;
        }
        // Returns a copy of the tree, with the specified key/value added.
        insert(t, e, n) {
            return new Gt(t, e);
        }
        // Returns a copy of the tree, with the specified key removed.
        remove(t, e) {
            return this;
        }
        isEmpty() {
            return !0;
        }
        inorderTraversal(t) {
            return !1;
        }
        reverseTraversal(t) {
            return !1;
        }
        minKey() {
            return null;
        }
        maxKey() {
            return null;
        }
        isRed() {
            return !1;
        }
        // For testing.
        checkMaxDepth() {
            return !0;
        }
        check() {
            return 0;
        }
    };

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * SortedSet is an immutable (copy-on-write) collection that holds elements
     * in order specified by the provided comparator.
     *
     * NOTE: if provided comparator returns 0 for two elements, we consider them to
     * be equal!
     */
    class Qt {
        constructor(t) {
            this.comparator = t, this.data = new qt(this.comparator);
        }
        has(t) {
            return null !== this.data.get(t);
        }
        first() {
            return this.data.minKey();
        }
        last() {
            return this.data.maxKey();
        }
        get size() {
            return this.data.size;
        }
        indexOf(t) {
            return this.data.indexOf(t);
        }
        /** Iterates elements in order defined by "comparator" */    forEach(t) {
            this.data.inorderTraversal(((e, n) => (t(e), !1)));
        }
        /** Iterates over `elem`s such that: range[0] &lt;= elem &lt; range[1]. */    forEachInRange(t, e) {
            const n = this.data.getIteratorFrom(t[0]);
            for (;n.hasNext(); ) {
                const s = n.getNext();
                if (this.comparator(s.key, t[1]) >= 0) return;
                e(s.key);
            }
        }
        /**
         * Iterates over `elem`s such that: start &lt;= elem until false is returned.
         */    forEachWhile(t, e) {
            let n;
            for (n = void 0 !== e ? this.data.getIteratorFrom(e) : this.data.getIterator(); n.hasNext(); ) {
                if (!t(n.getNext().key)) return;
            }
        }
        /** Finds the least element greater than or equal to `elem`. */    firstAfterOrEqual(t) {
            const e = this.data.getIteratorFrom(t);
            return e.hasNext() ? e.getNext().key : null;
        }
        getIterator() {
            return new jt(this.data.getIterator());
        }
        getIteratorFrom(t) {
            return new jt(this.data.getIteratorFrom(t));
        }
        /** Inserts or updates an element */    add(t) {
            return this.copy(this.data.remove(t).insert(t, !0));
        }
        /** Deletes an element */    delete(t) {
            return this.has(t) ? this.copy(this.data.remove(t)) : this;
        }
        isEmpty() {
            return this.data.isEmpty();
        }
        unionWith(t) {
            let e = this;
            // Make sure `result` always refers to the larger one of the two sets.
                    return e.size < t.size && (e = t, t = this), t.forEach((t => {
                e = e.add(t);
            })), e;
        }
        isEqual(t) {
            if (!(t instanceof Qt)) return !1;
            if (this.size !== t.size) return !1;
            const e = this.data.getIterator(), n = t.data.getIterator();
            for (;e.hasNext(); ) {
                const t = e.getNext().key, s = n.getNext().key;
                if (0 !== this.comparator(t, s)) return !1;
            }
            return !0;
        }
        toArray() {
            const t = [];
            return this.forEach((e => {
                t.push(e);
            })), t;
        }
        toString() {
            const t = [];
            return this.forEach((e => t.push(e))), "SortedSet(" + t.toString() + ")";
        }
        copy(t) {
            const e = new Qt(this.comparator);
            return e.data = t, e;
        }
    }

    class jt {
        constructor(t) {
            this.iter = t;
        }
        getNext() {
            return this.iter.getNext().key;
        }
        hasNext() {
            return this.iter.hasNext();
        }
    }

    /**
     * Compares two sorted sets for equality using their natural ordering. The
     * method computes the intersection and invokes `onAdd` for every element that
     * is in `after` but not `before`. `onRemove` is invoked for every element in
     * `before` but missing from `after`.
     *
     * The method creates a copy of both `before` and `after` and runs in O(n log
     * n), where n is the size of the two lists.
     *
     * @param before - The elements that exist in the original set.
     * @param after - The elements to diff against the original set.
     * @param comparator - The comparator for the elements in before and after.
     * @param onAdd - A function to invoke for every element that is part of `
     * after` but not `before`.
     * @param onRemove - A function to invoke for every element that is part of
     * `before` but not `after`.
     */
    /**
     * Returns the next element from the iterator or `undefined` if none available.
     */
    function Wt(t) {
        return t.hasNext() ? t.getNext() : void 0;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Provides a set of fields that can be used to partially patch a document.
     * FieldMask is used in conjunction with ObjectValue.
     * Examples:
     *   foo - Overwrites foo entirely with the provided value. If foo is not
     *         present in the companion ObjectValue, the field is deleted.
     *   foo.bar - Overwrites only the field bar of the object foo.
     *             If foo is not an object, foo is replaced with an object
     *             containing foo
     */ class zt {
        constructor(t) {
            this.fields = t, 
            // TODO(dimond): validation of FieldMask
            // Sort the field mask to support `FieldMask.isEqual()` and assert below.
            t.sort(ft.comparator);
        }
        static empty() {
            return new zt([]);
        }
        /**
         * Returns a new FieldMask object that is the result of adding all the given
         * fields paths to this field mask.
         */    unionWith(t) {
            let e = new Qt(ft.comparator);
            for (const t of this.fields) e = e.add(t);
            for (const n of t) e = e.add(n);
            return new zt(e.toArray());
        }
        /**
         * Verifies that `fieldPath` is included by at least one field in this field
         * mask.
         *
         * This is an O(n) operation, where `n` is the size of the field mask.
         */    covers(t) {
            for (const e of this.fields) if (e.isPrefixOf(t)) return !0;
            return !1;
        }
        isEqual(t) {
            return rt(this.fields, t.fields, ((t, e) => t.isEqual(e)));
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Converts a Base64 encoded string to a binary string. */
    /** True if and only if the Base64 conversion functions are available. */
    function Ht() {
        return "undefined" != typeof atob;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Immutable class that represents a "proto" byte string.
     *
     * Proto byte strings can either be Base64-encoded strings or Uint8Arrays when
     * sent on the wire. This class abstracts away this differentiation by holding
     * the proto byte string in a common class that must be converted into a string
     * before being sent as a proto.
     * @internal
     */ class Jt {
        constructor(t) {
            this.binaryString = t;
        }
        static fromBase64String(t) {
            const e = atob(t);
            return new Jt(e);
        }
        static fromUint8Array(t) {
            // TODO(indexing); Remove the copy of the byte string here as this method
            // is frequently called during indexing.
            const e = 
            /**
     * Helper function to convert an Uint8array to a binary string.
     */
            function(t) {
                let e = "";
                for (let n = 0; n < t.length; ++n) e += String.fromCharCode(t[n]);
                return e;
            }
            /**
     * Helper function to convert a binary string to an Uint8Array.
     */ (t);
            return new Jt(e);
        }
        [Symbol.iterator]() {
            let t = 0;
            return {
                next: () => t < this.binaryString.length ? {
                    value: this.binaryString.charCodeAt(t++),
                    done: !1
                } : {
                    value: void 0,
                    done: !0
                }
            };
        }
        toBase64() {
            return t = this.binaryString, btoa(t);
            /** Converts a binary string to a Base64 encoded string. */
            var t;
        }
        toUint8Array() {
            return function(t) {
                const e = new Uint8Array(t.length);
                for (let n = 0; n < t.length; n++) e[n] = t.charCodeAt(n);
                return e;
            }
            /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
            // A RegExp matching ISO 8601 UTC timestamps with optional fraction.
            (this.binaryString);
        }
        approximateByteSize() {
            return 2 * this.binaryString.length;
        }
        compareTo(t) {
            return it(this.binaryString, t.binaryString);
        }
        isEqual(t) {
            return this.binaryString === t.binaryString;
        }
    }

    Jt.EMPTY_BYTE_STRING = new Jt("");

    const Yt = new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);

    /**
     * Converts the possible Proto values for a timestamp value into a "seconds and
     * nanos" representation.
     */ function Xt(t) {
        // The json interface (for the browser) will return an iso timestamp string,
        // while the proto js library (for node) will return a
        // google.protobuf.Timestamp instance.
        if (U(!!t), "string" == typeof t) {
            // The date string can have higher precision (nanos) than the Date class
            // (millis), so we do some custom parsing here.
            // Parse the nanos right out of the string.
            let e = 0;
            const n = Yt.exec(t);
            if (U(!!n), n[1]) {
                // Pad the fraction out to 9 digits (nanos).
                let t = n[1];
                t = (t + "000000000").substr(0, 9), e = Number(t);
            }
            // Parse the date to get the seconds.
                    const s = new Date(t);
            return {
                seconds: Math.floor(s.getTime() / 1e3),
                nanos: e
            };
        }
        return {
            seconds: Zt(t.seconds),
            nanos: Zt(t.nanos)
        };
    }

    /**
     * Converts the possible Proto types for numbers into a JavaScript number.
     * Returns 0 if the value is not numeric.
     */ function Zt(t) {
        // TODO(bjornick): Handle int64 greater than 53 bits.
        return "number" == typeof t ? t : "string" == typeof t ? Number(t) : 0;
    }

    /** Converts the possible Proto types for Blobs into a ByteString. */ function te(t) {
        return "string" == typeof t ? Jt.fromBase64String(t) : Jt.fromUint8Array(t);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Represents a locally-applied ServerTimestamp.
     *
     * Server Timestamps are backed by MapValues that contain an internal field
     * `__type__` with a value of `server_timestamp`. The previous value and local
     * write time are stored in its `__previous_value__` and `__local_write_time__`
     * fields respectively.
     *
     * Notes:
     * - ServerTimestampValue instances are created as the result of applying a
     *   transform. They can only exist in the local view of a document. Therefore
     *   they do not need to be parsed or serialized.
     * - When evaluated locally (e.g. for snapshot.data()), they by default
     *   evaluate to `null`. This behavior can be configured by passing custom
     *   FieldValueOptions to value().
     * - With respect to other ServerTimestampValues, they sort by their
     *   localWriteTime.
     */ function ee(t) {
        var e, n;
        return "server_timestamp" === (null === (n = ((null === (e = null == t ? void 0 : t.mapValue) || void 0 === e ? void 0 : e.fields) || {}).__type__) || void 0 === n ? void 0 : n.stringValue);
    }

    /**
     * Creates a new ServerTimestamp proto value (using the internal format).
     */
    /**
     * Returns the value of the field before this ServerTimestamp was set.
     *
     * Preserving the previous values allows the user to display the last resoled
     * value until the backend responds with the timestamp.
     */
    function ne(t) {
        const e = t.mapValue.fields.__previous_value__;
        return ee(e) ? ne(e) : e;
    }

    /**
     * Returns the local time at which this timestamp was first set.
     */ function se(t) {
        const e = Xt(t.mapValue.fields.__local_write_time__.timestampValue);
        return new ut(e.seconds, e.nanos);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class ie {
        /**
         * Constructs a DatabaseInfo using the provided host, databaseId and
         * persistenceKey.
         *
         * @param databaseId - The database to use.
         * @param appId - The Firebase App Id.
         * @param persistenceKey - A unique identifier for this Firestore's local
         * storage (used in conjunction with the databaseId).
         * @param host - The Firestore backend host to connect to.
         * @param ssl - Whether to use SSL when connecting.
         * @param forceLongPolling - Whether to use the forceLongPolling option
         * when using WebChannel as the network transport.
         * @param autoDetectLongPolling - Whether to use the detectBufferingProxy
         * option when using WebChannel as the network transport.
         * @param useFetchStreams Whether to use the Fetch API instead of
         * XMLHTTPRequest
         */
        constructor(t, e, n, s, i, r, o, u) {
            this.databaseId = t, this.appId = e, this.persistenceKey = n, this.host = s, this.ssl = i, 
            this.forceLongPolling = r, this.autoDetectLongPolling = o, this.useFetchStreams = u;
        }
    }

    /** The default database name for a project. */
    /**
     * Represents the database ID a Firestore client is associated with.
     * @internal
     */
    class re {
        constructor(t, e) {
            this.projectId = t, this.database = e || "(default)";
        }
        static empty() {
            return new re("", "");
        }
        get isDefaultDatabase() {
            return "(default)" === this.database;
        }
        isEqual(t) {
            return t instanceof re && t.projectId === this.projectId && t.database === this.database;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Sentinel value that sorts before any Mutation Batch ID. */
    /**
     * Returns whether a variable is either undefined or null.
     */
    function oe(t) {
        return null == t;
    }

    /** Returns whether the value represents -0. */ function ue(t) {
        // Detect if the value is -0.0. Based on polyfill from
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
        return 0 === t && 1 / t == -1 / 0;
    }

    /**
     * Returns whether a value is an integer and in the safe integer range
     * @param value - The value to test for being an integer and in the safe range
     */ function ce(t) {
        return "number" == typeof t && Number.isInteger(t) && !ue(t) && t <= Number.MAX_SAFE_INTEGER && t >= Number.MIN_SAFE_INTEGER;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ const ae = {
        mapValue: {
            fields: {
                __type__: {
                    stringValue: "__max__"
                }
            }
        }
    }, he = {
        nullValue: "NULL_VALUE"
    };

    /** Extracts the backend's type order for the provided value. */
    function le(t) {
        return "nullValue" in t ? 0 /* NullValue */ : "booleanValue" in t ? 1 /* BooleanValue */ : "integerValue" in t || "doubleValue" in t ? 2 /* NumberValue */ : "timestampValue" in t ? 3 /* TimestampValue */ : "stringValue" in t ? 5 /* StringValue */ : "bytesValue" in t ? 6 /* BlobValue */ : "referenceValue" in t ? 7 /* RefValue */ : "geoPointValue" in t ? 8 /* GeoPointValue */ : "arrayValue" in t ? 9 /* ArrayValue */ : "mapValue" in t ? ee(t) ? 4 /* ServerTimestampValue */ : be(t) ? 9007199254740991 /* MaxValue */ : 10 /* ObjectValue */ : L();
    }

    /** Tests `left` and `right` for equality based on the backend semantics. */ function fe(t, e) {
        if (t === e) return !0;
        const n = le(t);
        if (n !== le(e)) return !1;
        switch (n) {
          case 0 /* NullValue */ :
          case 9007199254740991 /* MaxValue */ :
            return !0;

          case 1 /* BooleanValue */ :
            return t.booleanValue === e.booleanValue;

          case 4 /* ServerTimestampValue */ :
            return se(t).isEqual(se(e));

          case 3 /* TimestampValue */ :
            return function(t, e) {
                if ("string" == typeof t.timestampValue && "string" == typeof e.timestampValue && t.timestampValue.length === e.timestampValue.length) 
                // Use string equality for ISO 8601 timestamps
                return t.timestampValue === e.timestampValue;
                const n = Xt(t.timestampValue), s = Xt(e.timestampValue);
                return n.seconds === s.seconds && n.nanos === s.nanos;
            }(t, e);

          case 5 /* StringValue */ :
            return t.stringValue === e.stringValue;

          case 6 /* BlobValue */ :
            return function(t, e) {
                return te(t.bytesValue).isEqual(te(e.bytesValue));
            }(t, e);

          case 7 /* RefValue */ :
            return t.referenceValue === e.referenceValue;

          case 8 /* GeoPointValue */ :
            return function(t, e) {
                return Zt(t.geoPointValue.latitude) === Zt(e.geoPointValue.latitude) && Zt(t.geoPointValue.longitude) === Zt(e.geoPointValue.longitude);
            }(t, e);

          case 2 /* NumberValue */ :
            return function(t, e) {
                if ("integerValue" in t && "integerValue" in e) return Zt(t.integerValue) === Zt(e.integerValue);
                if ("doubleValue" in t && "doubleValue" in e) {
                    const n = Zt(t.doubleValue), s = Zt(e.doubleValue);
                    return n === s ? ue(n) === ue(s) : isNaN(n) && isNaN(s);
                }
                return !1;
            }(t, e);

          case 9 /* ArrayValue */ :
            return rt(t.arrayValue.values || [], e.arrayValue.values || [], fe);

          case 10 /* ObjectValue */ :
            return function(t, e) {
                const n = t.mapValue.fields || {}, s = e.mapValue.fields || {};
                if (Bt(n) !== Bt(s)) return !1;
                for (const t in n) if (n.hasOwnProperty(t) && (void 0 === s[t] || !fe(n[t], s[t]))) return !1;
                return !0;
            }
            /** Returns true if the ArrayValue contains the specified element. */ (t, e);

          default:
            return L();
        }
    }

    function de(t, e) {
        return void 0 !== (t.values || []).find((t => fe(t, e)));
    }

    function _e(t, e) {
        if (t === e) return 0;
        const n = le(t), s = le(e);
        if (n !== s) return it(n, s);
        switch (n) {
          case 0 /* NullValue */ :
          case 9007199254740991 /* MaxValue */ :
            return 0;

          case 1 /* BooleanValue */ :
            return it(t.booleanValue, e.booleanValue);

          case 2 /* NumberValue */ :
            return function(t, e) {
                const n = Zt(t.integerValue || t.doubleValue), s = Zt(e.integerValue || e.doubleValue);
                return n < s ? -1 : n > s ? 1 : n === s ? 0 : 
                // one or both are NaN.
                isNaN(n) ? isNaN(s) ? 0 : -1 : 1;
            }(t, e);

          case 3 /* TimestampValue */ :
            return we(t.timestampValue, e.timestampValue);

          case 4 /* ServerTimestampValue */ :
            return we(se(t), se(e));

          case 5 /* StringValue */ :
            return it(t.stringValue, e.stringValue);

          case 6 /* BlobValue */ :
            return function(t, e) {
                const n = te(t), s = te(e);
                return n.compareTo(s);
            }(t.bytesValue, e.bytesValue);

          case 7 /* RefValue */ :
            return function(t, e) {
                const n = t.split("/"), s = e.split("/");
                for (let t = 0; t < n.length && t < s.length; t++) {
                    const e = it(n[t], s[t]);
                    if (0 !== e) return e;
                }
                return it(n.length, s.length);
            }(t.referenceValue, e.referenceValue);

          case 8 /* GeoPointValue */ :
            return function(t, e) {
                const n = it(Zt(t.latitude), Zt(e.latitude));
                if (0 !== n) return n;
                return it(Zt(t.longitude), Zt(e.longitude));
            }(t.geoPointValue, e.geoPointValue);

          case 9 /* ArrayValue */ :
            return function(t, e) {
                const n = t.values || [], s = e.values || [];
                for (let t = 0; t < n.length && t < s.length; ++t) {
                    const e = _e(n[t], s[t]);
                    if (e) return e;
                }
                return it(n.length, s.length);
            }(t.arrayValue, e.arrayValue);

          case 10 /* ObjectValue */ :
            return function(t, e) {
                if (t === ae.mapValue && e === ae.mapValue) return 0;
                if (t === ae.mapValue) return 1;
                if (e === ae.mapValue) return -1;
                const n = t.fields || {}, s = Object.keys(n), i = e.fields || {}, r = Object.keys(i);
                // Even though MapValues are likely sorted correctly based on their insertion
                // order (e.g. when received from the backend), local modifications can bring
                // elements out of order. We need to re-sort the elements to ensure that
                // canonical IDs are independent of insertion order.
                s.sort(), r.sort();
                for (let t = 0; t < s.length && t < r.length; ++t) {
                    const e = it(s[t], r[t]);
                    if (0 !== e) return e;
                    const o = _e(n[s[t]], i[r[t]]);
                    if (0 !== o) return o;
                }
                return it(s.length, r.length);
            }
            /**
     * Generates the canonical ID for the provided field value (as used in Target
     * serialization).
     */ (t.mapValue, e.mapValue);

          default:
            throw L();
        }
    }

    function we(t, e) {
        if ("string" == typeof t && "string" == typeof e && t.length === e.length) return it(t, e);
        const n = Xt(t), s = Xt(e), i = it(n.seconds, s.seconds);
        return 0 !== i ? i : it(n.nanos, s.nanos);
    }

    function me(t) {
        return ge(t);
    }

    function ge(t) {
        return "nullValue" in t ? "null" : "booleanValue" in t ? "" + t.booleanValue : "integerValue" in t ? "" + t.integerValue : "doubleValue" in t ? "" + t.doubleValue : "timestampValue" in t ? function(t) {
            const e = Xt(t);
            return `time(${e.seconds},${e.nanos})`;
        }(t.timestampValue) : "stringValue" in t ? t.stringValue : "bytesValue" in t ? te(t.bytesValue).toBase64() : "referenceValue" in t ? (n = t.referenceValue, 
        dt.fromName(n).toString()) : "geoPointValue" in t ? `geo(${(e = t.geoPointValue).latitude},${e.longitude})` : "arrayValue" in t ? function(t) {
            let e = "[", n = !0;
            for (const s of t.values || []) n ? n = !1 : e += ",", e += ge(s);
            return e + "]";
        }
        /** Returns a reference value for the provided database and key. */ (t.arrayValue) : "mapValue" in t ? function(t) {
            // Iteration order in JavaScript is not guaranteed. To ensure that we generate
            // matching canonical IDs for identical maps, we need to sort the keys.
            const e = Object.keys(t.fields || {}).sort();
            let n = "{", s = !0;
            for (const i of e) s ? s = !1 : n += ",", n += `${i}:${ge(t.fields[i])}`;
            return n + "}";
        }(t.mapValue) : L();
        var e, n;
    }

    function ye(t, e) {
        return {
            referenceValue: `projects/${t.projectId}/databases/${t.database}/documents/${e.path.canonicalString()}`
        };
    }

    /** Returns true if `value` is an IntegerValue . */ function pe(t) {
        return !!t && "integerValue" in t;
    }

    /** Returns true if `value` is a DoubleValue. */
    /** Returns true if `value` is an ArrayValue. */
    function Ie(t) {
        return !!t && "arrayValue" in t;
    }

    /** Returns true if `value` is a NullValue. */ function Te(t) {
        return !!t && "nullValue" in t;
    }

    /** Returns true if `value` is NaN. */ function Ee(t) {
        return !!t && "doubleValue" in t && isNaN(Number(t.doubleValue));
    }

    /** Returns true if `value` is a MapValue. */ function Ae(t) {
        return !!t && "mapValue" in t;
    }

    /** Creates a deep copy of `source`. */ function Re(t) {
        if (t.geoPointValue) return {
            geoPointValue: Object.assign({}, t.geoPointValue)
        };
        if (t.timestampValue && "object" == typeof t.timestampValue) return {
            timestampValue: Object.assign({}, t.timestampValue)
        };
        if (t.mapValue) {
            const e = {
                mapValue: {
                    fields: {}
                }
            };
            return Lt(t.mapValue.fields, ((t, n) => e.mapValue.fields[t] = Re(n))), e;
        }
        if (t.arrayValue) {
            const e = {
                arrayValue: {
                    values: []
                }
            };
            for (let n = 0; n < (t.arrayValue.values || []).length; ++n) e.arrayValue.values[n] = Re(t.arrayValue.values[n]);
            return e;
        }
        return Object.assign({}, t);
    }

    /** Returns true if the Value represents the canonical {@link #MAX_VALUE} . */ function be(t) {
        return "__max__" === (((t.mapValue || {}).fields || {}).__type__ || {}).stringValue;
    }

    /** Returns the lowest value for the given value type (inclusive). */ function Pe(t) {
        return "nullValue" in t ? he : "booleanValue" in t ? {
            booleanValue: !1
        } : "integerValue" in t || "doubleValue" in t ? {
            doubleValue: NaN
        } : "timestampValue" in t ? {
            timestampValue: {
                seconds: Number.MIN_SAFE_INTEGER
            }
        } : "stringValue" in t ? {
            stringValue: ""
        } : "bytesValue" in t ? {
            bytesValue: ""
        } : "referenceValue" in t ? ye(re.empty(), dt.empty()) : "geoPointValue" in t ? {
            geoPointValue: {
                latitude: -90,
                longitude: -180
            }
        } : "arrayValue" in t ? {
            arrayValue: {}
        } : "mapValue" in t ? {
            mapValue: {}
        } : L();
    }

    /** Returns the largest value for the given value type (exclusive). */ function ve(t) {
        return "nullValue" in t ? {
            booleanValue: !1
        } : "booleanValue" in t ? {
            doubleValue: NaN
        } : "integerValue" in t || "doubleValue" in t ? {
            timestampValue: {
                seconds: Number.MIN_SAFE_INTEGER
            }
        } : "timestampValue" in t ? {
            stringValue: ""
        } : "stringValue" in t ? {
            bytesValue: ""
        } : "bytesValue" in t ? ye(re.empty(), dt.empty()) : "referenceValue" in t ? {
            geoPointValue: {
                latitude: -90,
                longitude: -180
            }
        } : "geoPointValue" in t ? {
            arrayValue: {}
        } : "arrayValue" in t ? {
            mapValue: {}
        } : "mapValue" in t ? ae : L();
    }

    function Ve(t, e) {
        const n = _e(t.value, e.value);
        return 0 !== n ? n : t.inclusive && !e.inclusive ? -1 : !t.inclusive && e.inclusive ? 1 : 0;
    }

    function Se(t, e) {
        const n = _e(t.value, e.value);
        return 0 !== n ? n : t.inclusive && !e.inclusive ? 1 : !t.inclusive && e.inclusive ? -1 : 0;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An ObjectValue represents a MapValue in the Firestore Proto and offers the
     * ability to add and remove fields (via the ObjectValueBuilder).
     */ class De {
        constructor(t) {
            this.value = t;
        }
        static empty() {
            return new De({
                mapValue: {}
            });
        }
        /**
         * Returns the value at the given path or null.
         *
         * @param path - the path to search
         * @returns The value at the path or null if the path is not set.
         */    field(t) {
            if (t.isEmpty()) return this.value;
            {
                let e = this.value;
                for (let n = 0; n < t.length - 1; ++n) if (e = (e.mapValue.fields || {})[t.get(n)], 
                !Ae(e)) return null;
                return e = (e.mapValue.fields || {})[t.lastSegment()], e || null;
            }
        }
        /**
         * Sets the field to the provided value.
         *
         * @param path - The field path to set.
         * @param value - The value to set.
         */    set(t, e) {
            this.getFieldsMap(t.popLast())[t.lastSegment()] = Re(e);
        }
        /**
         * Sets the provided fields to the provided values.
         *
         * @param data - A map of fields to values (or null for deletes).
         */    setAll(t) {
            let e = ft.emptyPath(), n = {}, s = [];
            t.forEach(((t, i) => {
                if (!e.isImmediateParentOf(i)) {
                    // Insert the accumulated changes at this parent location
                    const t = this.getFieldsMap(e);
                    this.applyChanges(t, n, s), n = {}, s = [], e = i.popLast();
                }
                t ? n[i.lastSegment()] = Re(t) : s.push(i.lastSegment());
            }));
            const i = this.getFieldsMap(e);
            this.applyChanges(i, n, s);
        }
        /**
         * Removes the field at the specified path. If there is no field at the
         * specified path, nothing is changed.
         *
         * @param path - The field path to remove.
         */    delete(t) {
            const e = this.field(t.popLast());
            Ae(e) && e.mapValue.fields && delete e.mapValue.fields[t.lastSegment()];
        }
        isEqual(t) {
            return fe(this.value, t.value);
        }
        /**
         * Returns the map that contains the leaf element of `path`. If the parent
         * entry does not yet exist, or if it is not a map, a new map will be created.
         */    getFieldsMap(t) {
            let e = this.value;
            e.mapValue.fields || (e.mapValue = {
                fields: {}
            });
            for (let n = 0; n < t.length; ++n) {
                let s = e.mapValue.fields[t.get(n)];
                Ae(s) && s.mapValue.fields || (s = {
                    mapValue: {
                        fields: {}
                    }
                }, e.mapValue.fields[t.get(n)] = s), e = s;
            }
            return e.mapValue.fields;
        }
        /**
         * Modifies `fieldsMap` by adding, replacing or deleting the specified
         * entries.
         */    applyChanges(t, e, n) {
            Lt(e, ((e, n) => t[e] = n));
            for (const e of n) delete t[e];
        }
        clone() {
            return new De(Re(this.value));
        }
    }

    /**
     * Returns a FieldMask built from all fields in a MapValue.
     */ function Ce(t) {
        const e = [];
        return Lt(t.fields, ((t, n) => {
            const s = new ft([ t ]);
            if (Ae(n)) {
                const t = Ce(n.mapValue).fields;
                if (0 === t.length) 
                // Preserve the empty map by adding it to the FieldMask.
                e.push(s); else 
                // For nested and non-empty ObjectValues, add the FieldPath of the
                // leaf nodes.
                for (const n of t) e.push(s.child(n));
            } else 
            // For nested and non-empty ObjectValues, add the FieldPath of the leaf
            // nodes.
            e.push(s);
        })), new zt(e);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Represents a document in Firestore with a key, version, data and whether it
     * has local mutations applied to it.
     *
     * Documents can transition between states via `convertToFoundDocument()`,
     * `convertToNoDocument()` and `convertToUnknownDocument()`. If a document does
     * not transition to one of these states even after all mutations have been
     * applied, `isValidDocument()` returns false and the document should be removed
     * from all views.
     */ class xe {
        constructor(t, e, n, s, i, r) {
            this.key = t, this.documentType = e, this.version = n, this.readTime = s, this.data = i, 
            this.documentState = r;
        }
        /**
         * Creates a document with no known version or data, but which can serve as
         * base document for mutations.
         */    static newInvalidDocument(t) {
            return new xe(t, 0 /* INVALID */ , ct.min(), ct.min(), De.empty(), 0 /* SYNCED */);
        }
        /**
         * Creates a new document that is known to exist with the given data at the
         * given version.
         */    static newFoundDocument(t, e, n) {
            return new xe(t, 1 /* FOUND_DOCUMENT */ , e, ct.min(), n, 0 /* SYNCED */);
        }
        /** Creates a new document that is known to not exist at the given version. */    static newNoDocument(t, e) {
            return new xe(t, 2 /* NO_DOCUMENT */ , e, ct.min(), De.empty(), 0 /* SYNCED */);
        }
        /**
         * Creates a new document that is known to exist at the given version but
         * whose data is not known (e.g. a document that was updated without a known
         * base document).
         */    static newUnknownDocument(t, e) {
            return new xe(t, 3 /* UNKNOWN_DOCUMENT */ , e, ct.min(), De.empty(), 2 /* HAS_COMMITTED_MUTATIONS */);
        }
        /**
         * Changes the document type to indicate that it exists and that its version
         * and data are known.
         */    convertToFoundDocument(t, e) {
            return this.version = t, this.documentType = 1 /* FOUND_DOCUMENT */ , this.data = e, 
            this.documentState = 0 /* SYNCED */ , this;
        }
        /**
         * Changes the document type to indicate that it doesn't exist at the given
         * version.
         */    convertToNoDocument(t) {
            return this.version = t, this.documentType = 2 /* NO_DOCUMENT */ , this.data = De.empty(), 
            this.documentState = 0 /* SYNCED */ , this;
        }
        /**
         * Changes the document type to indicate that it exists at a given version but
         * that its data is not known (e.g. a document that was updated without a known
         * base document).
         */    convertToUnknownDocument(t) {
            return this.version = t, this.documentType = 3 /* UNKNOWN_DOCUMENT */ , this.data = De.empty(), 
            this.documentState = 2 /* HAS_COMMITTED_MUTATIONS */ , this;
        }
        setHasCommittedMutations() {
            return this.documentState = 2 /* HAS_COMMITTED_MUTATIONS */ , this;
        }
        setHasLocalMutations() {
            return this.documentState = 1 /* HAS_LOCAL_MUTATIONS */ , this.version = ct.min(), 
            this;
        }
        setReadTime(t) {
            return this.readTime = t, this;
        }
        get hasLocalMutations() {
            return 1 /* HAS_LOCAL_MUTATIONS */ === this.documentState;
        }
        get hasCommittedMutations() {
            return 2 /* HAS_COMMITTED_MUTATIONS */ === this.documentState;
        }
        get hasPendingWrites() {
            return this.hasLocalMutations || this.hasCommittedMutations;
        }
        isValidDocument() {
            return 0 /* INVALID */ !== this.documentType;
        }
        isFoundDocument() {
            return 1 /* FOUND_DOCUMENT */ === this.documentType;
        }
        isNoDocument() {
            return 2 /* NO_DOCUMENT */ === this.documentType;
        }
        isUnknownDocument() {
            return 3 /* UNKNOWN_DOCUMENT */ === this.documentType;
        }
        isEqual(t) {
            return t instanceof xe && this.key.isEqual(t.key) && this.version.isEqual(t.version) && this.documentType === t.documentType && this.documentState === t.documentState && this.data.isEqual(t.data);
        }
        mutableCopy() {
            return new xe(this.key, this.documentType, this.version, this.readTime, this.data.clone(), this.documentState);
        }
        toString() {
            return `Document(${this.key}, ${this.version}, ${JSON.stringify(this.data.value)}, {documentType: ${this.documentType}}), {documentState: ${this.documentState}})`;
        }
    }

    /**
     * Compares the value for field `field` in the provided documents. Throws if
     * the field does not exist in both documents.
     */
    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // Visible for testing
    class Ne {
        constructor(t, e = null, n = [], s = [], i = null, r = null, o = null) {
            this.path = t, this.collectionGroup = e, this.orderBy = n, this.filters = s, this.limit = i, 
            this.startAt = r, this.endAt = o, this.ut = null;
        }
    }

    /**
     * Initializes a Target with a path and optional additional query constraints.
     * Path must currently be empty if this is a collection group query.
     *
     * NOTE: you should always construct `Target` from `Query.toTarget` instead of
     * using this factory method, because `Query` provides an implicit `orderBy`
     * property.
     */ function ke(t, e = null, n = [], s = [], i = null, r = null, o = null) {
        return new Ne(t, e, n, s, i, r, o);
    }

    function Oe(t) {
        const e = K(t);
        if (null === e.ut) {
            let t = e.path.canonicalString();
            null !== e.collectionGroup && (t += "|cg:" + e.collectionGroup), t += "|f:", t += e.filters.map((t => {
                return (e = t).field.canonicalString() + e.op.toString() + me(e.value);
                var e;
            })).join(","), t += "|ob:", t += e.orderBy.map((t => function(t) {
                // TODO(b/29183165): Make this collision robust.
                return t.field.canonicalString() + t.dir;
            }(t))).join(","), oe(e.limit) || (t += "|l:", t += e.limit), e.startAt && (t += "|lb:", 
            t += e.startAt.inclusive ? "b:" : "a:", t += e.startAt.position.map((t => me(t))).join(",")), 
            e.endAt && (t += "|ub:", t += e.endAt.inclusive ? "a:" : "b:", t += e.endAt.position.map((t => me(t))).join(",")), 
            e.ut = t;
        }
        return e.ut;
    }

    function Me(t) {
        let e = t.path.canonicalString();
        return null !== t.collectionGroup && (e += " collectionGroup=" + t.collectionGroup), 
        t.filters.length > 0 && (e += `, filters: [${t.filters.map((t => {
        return `${(e = t).field.canonicalString()} ${e.op} ${me(e.value)}`;
        /** Returns a debug description for `filter`. */
        var e;
        /** Filter that matches on key fields (i.e. '__name__'). */    })).join(", ")}]`), 
        oe(t.limit) || (e += ", limit: " + t.limit), t.orderBy.length > 0 && (e += `, orderBy: [${t.orderBy.map((t => function(t) {
        return `${t.field.canonicalString()} (${t.dir})`;
    }(t))).join(", ")}]`), t.startAt && (e += ", startAt: ", e += t.startAt.inclusive ? "b:" : "a:", 
        e += t.startAt.position.map((t => me(t))).join(",")), t.endAt && (e += ", endAt: ", 
        e += t.endAt.inclusive ? "a:" : "b:", e += t.endAt.position.map((t => me(t))).join(",")), 
        `Target(${e})`;
    }

    function Fe(t, e) {
        if (t.limit !== e.limit) return !1;
        if (t.orderBy.length !== e.orderBy.length) return !1;
        for (let n = 0; n < t.orderBy.length; n++) if (!Ze(t.orderBy[n], e.orderBy[n])) return !1;
        if (t.filters.length !== e.filters.length) return !1;
        for (let i = 0; i < t.filters.length; i++) if (n = t.filters[i], s = e.filters[i], 
        n.op !== s.op || !n.field.isEqual(s.field) || !fe(n.value, s.value)) return !1;
        var n, s;
        return t.collectionGroup === e.collectionGroup && (!!t.path.isEqual(e.path) && (!!en$1(t.startAt, e.startAt) && en$1(t.endAt, e.endAt)));
    }

    function $e(t) {
        return dt.isDocumentKey(t.path) && null === t.collectionGroup && 0 === t.filters.length;
    }

    /** Returns the field filters that target the given field path. */ function Be(t, e) {
        return t.filters.filter((t => t instanceof qe && t.field.isEqual(e)));
    }

    /**
     * Returns the values that are used in ARRAY_CONTAINS or ARRAY_CONTAINS_ANY
     * filters. Returns `null` if there are no such filters.
     */
    /**
     * Returns the value to use as the lower bound for ascending index segment at
     * the provided `fieldPath` (or the upper bound for an descending segment).
     */
    function Le(t, e, n) {
        let s = he, i = !0;
        // Process all filters to find a value for the current field segment
        for (const n of Be(t, e)) {
            let t = he, e = !0;
            switch (n.op) {
              case "<" /* LESS_THAN */ :
              case "<=" /* LESS_THAN_OR_EQUAL */ :
                t = Pe(n.value);
                break;

              case "==" /* EQUAL */ :
              case "in" /* IN */ :
              case ">=" /* GREATER_THAN_OR_EQUAL */ :
                t = n.value;
                break;

              case ">" /* GREATER_THAN */ :
                t = n.value, e = !1;
                break;

              case "!=" /* NOT_EQUAL */ :
              case "not-in" /* NOT_IN */ :
                t = he;
     // Remaining filters cannot be used as lower bounds.
                    }
            Ve({
                value: s,
                inclusive: i
            }, {
                value: t,
                inclusive: e
            }) < 0 && (s = t, i = e);
        }
        // If there is an additional bound, compare the values against the existing
        // range to see if we can narrow the scope.
            if (null !== n) for (let r = 0; r < t.orderBy.length; ++r) {
            if (t.orderBy[r].field.isEqual(e)) {
                const t = n.position[r];
                Ve({
                    value: s,
                    inclusive: i
                }, {
                    value: t,
                    inclusive: n.inclusive
                }) < 0 && (s = t, i = n.inclusive);
                break;
            }
        }
        return {
            value: s,
            inclusive: i
        };
    }

    /**
     * Returns the value to use as the upper bound for ascending index segment at
     * the provided `fieldPath` (or the lower bound for a descending segment).
     */ function Ue(t, e, n) {
        let s = ae, i = !0;
        // Process all filters to find a value for the current field segment
        for (const n of Be(t, e)) {
            let t = ae, e = !0;
            switch (n.op) {
              case ">=" /* GREATER_THAN_OR_EQUAL */ :
              case ">" /* GREATER_THAN */ :
                t = ve(n.value), e = !1;
                break;

              case "==" /* EQUAL */ :
              case "in" /* IN */ :
              case "<=" /* LESS_THAN_OR_EQUAL */ :
                t = n.value;
                break;

              case "<" /* LESS_THAN */ :
                t = n.value, e = !1;
                break;

              case "!=" /* NOT_EQUAL */ :
              case "not-in" /* NOT_IN */ :
                t = ae;
     // Remaining filters cannot be used as upper bounds.
                    }
            Se({
                value: s,
                inclusive: i
            }, {
                value: t,
                inclusive: e
            }) > 0 && (s = t, i = e);
        }
        // If there is an additional bound, compare the values against the existing
        // range to see if we can narrow the scope.
            if (null !== n) for (let r = 0; r < t.orderBy.length; ++r) {
            if (t.orderBy[r].field.isEqual(e)) {
                const t = n.position[r];
                Se({
                    value: s,
                    inclusive: i
                }, {
                    value: t,
                    inclusive: n.inclusive
                }) > 0 && (s = t, i = n.inclusive);
                break;
            }
        }
        return {
            value: s,
            inclusive: i
        };
    }

    /** Returns the number of segments of a perfect index for this target. */ class qe extends class {} {
        constructor(t, e, n) {
            super(), this.field = t, this.op = e, this.value = n;
        }
        /**
         * Creates a filter based on the provided arguments.
         */    static create(t, e, n) {
            return t.isKeyField() ? "in" /* IN */ === e || "not-in" /* NOT_IN */ === e ? this.ct(t, e, n) : new Ke(t, e, n) : "array-contains" /* ARRAY_CONTAINS */ === e ? new We(t, n) : "in" /* IN */ === e ? new ze(t, n) : "not-in" /* NOT_IN */ === e ? new He(t, n) : "array-contains-any" /* ARRAY_CONTAINS_ANY */ === e ? new Je(t, n) : new qe(t, e, n);
        }
        static ct(t, e, n) {
            return "in" /* IN */ === e ? new Ge(t, n) : new Qe(t, n);
        }
        matches(t) {
            const e = t.data.field(this.field);
            // Types do not have to match in NOT_EQUAL filters.
                    return "!=" /* NOT_EQUAL */ === this.op ? null !== e && this.at(_e(e, this.value)) : null !== e && le(this.value) === le(e) && this.at(_e(e, this.value));
            // Only compare types with matching backend order (such as double and int).
            }
        at(t) {
            switch (this.op) {
              case "<" /* LESS_THAN */ :
                return t < 0;

              case "<=" /* LESS_THAN_OR_EQUAL */ :
                return t <= 0;

              case "==" /* EQUAL */ :
                return 0 === t;

              case "!=" /* NOT_EQUAL */ :
                return 0 !== t;

              case ">" /* GREATER_THAN */ :
                return t > 0;

              case ">=" /* GREATER_THAN_OR_EQUAL */ :
                return t >= 0;

              default:
                return L();
            }
        }
        ht() {
            return [ "<" /* LESS_THAN */ , "<=" /* LESS_THAN_OR_EQUAL */ , ">" /* GREATER_THAN */ , ">=" /* GREATER_THAN_OR_EQUAL */ , "!=" /* NOT_EQUAL */ , "not-in" /* NOT_IN */ ].indexOf(this.op) >= 0;
        }
    }

    class Ke extends qe {
        constructor(t, e, n) {
            super(t, e, n), this.key = dt.fromName(n.referenceValue);
        }
        matches(t) {
            const e = dt.comparator(t.key, this.key);
            return this.at(e);
        }
    }

    /** Filter that matches on key fields within an array. */ class Ge extends qe {
        constructor(t, e) {
            super(t, "in" /* IN */ , e), this.keys = je("in" /* IN */ , e);
        }
        matches(t) {
            return this.keys.some((e => e.isEqual(t.key)));
        }
    }

    /** Filter that matches on key fields not present within an array. */ class Qe extends qe {
        constructor(t, e) {
            super(t, "not-in" /* NOT_IN */ , e), this.keys = je("not-in" /* NOT_IN */ , e);
        }
        matches(t) {
            return !this.keys.some((e => e.isEqual(t.key)));
        }
    }

    function je(t, e) {
        var n;
        return ((null === (n = e.arrayValue) || void 0 === n ? void 0 : n.values) || []).map((t => dt.fromName(t.referenceValue)));
    }

    /** A Filter that implements the array-contains operator. */ class We extends qe {
        constructor(t, e) {
            super(t, "array-contains" /* ARRAY_CONTAINS */ , e);
        }
        matches(t) {
            const e = t.data.field(this.field);
            return Ie(e) && de(e.arrayValue, this.value);
        }
    }

    /** A Filter that implements the IN operator. */ class ze extends qe {
        constructor(t, e) {
            super(t, "in" /* IN */ , e);
        }
        matches(t) {
            const e = t.data.field(this.field);
            return null !== e && de(this.value.arrayValue, e);
        }
    }

    /** A Filter that implements the not-in operator. */ class He extends qe {
        constructor(t, e) {
            super(t, "not-in" /* NOT_IN */ , e);
        }
        matches(t) {
            if (de(this.value.arrayValue, {
                nullValue: "NULL_VALUE"
            })) return !1;
            const e = t.data.field(this.field);
            return null !== e && !de(this.value.arrayValue, e);
        }
    }

    /** A Filter that implements the array-contains-any operator. */ class Je extends qe {
        constructor(t, e) {
            super(t, "array-contains-any" /* ARRAY_CONTAINS_ANY */ , e);
        }
        matches(t) {
            const e = t.data.field(this.field);
            return !(!Ie(e) || !e.arrayValue.values) && e.arrayValue.values.some((t => de(this.value.arrayValue, t)));
        }
    }

    /**
     * Represents a bound of a query.
     *
     * The bound is specified with the given components representing a position and
     * whether it's just before or just after the position (relative to whatever the
     * query order is).
     *
     * The position represents a logical index position for a query. It's a prefix
     * of values for the (potentially implicit) order by clauses of a query.
     *
     * Bound provides a function to determine whether a document comes before or
     * after a bound. This is influenced by whether the position is just before or
     * just after the provided values.
     */ class Ye {
        constructor(t, e) {
            this.position = t, this.inclusive = e;
        }
    }

    /**
     * An ordering on a field, in some Direction. Direction defaults to ASCENDING.
     */ class Xe {
        constructor(t, e = "asc" /* ASCENDING */) {
            this.field = t, this.dir = e;
        }
    }

    function Ze(t, e) {
        return t.dir === e.dir && t.field.isEqual(e.field);
    }

    function tn(t, e, n) {
        let s = 0;
        for (let i = 0; i < t.position.length; i++) {
            const r = e[i], o = t.position[i];
            if (r.field.isKeyField()) s = dt.comparator(dt.fromName(o.referenceValue), n.key); else {
                s = _e(o, n.data.field(r.field));
            }
            if ("desc" /* DESCENDING */ === r.dir && (s *= -1), 0 !== s) break;
        }
        return s;
    }

    /**
     * Returns true if a document sorts after a bound using the provided sort
     * order.
     */ function en$1(t, e) {
        if (null === t) return null === e;
        if (null === e) return !1;
        if (t.inclusive !== e.inclusive || t.position.length !== e.position.length) return !1;
        for (let n = 0; n < t.position.length; n++) {
            if (!fe(t.position[n], e.position[n])) return !1;
        }
        return !0;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Query encapsulates all the query attributes we support in the SDK. It can
     * be run against the LocalStore, as well as be converted to a `Target` to
     * query the RemoteStore results.
     *
     * Visible for testing.
     */ class nn {
        /**
         * Initializes a Query with a path and optional additional query constraints.
         * Path must currently be empty if this is a collection group query.
         */
        constructor(t, e = null, n = [], s = [], i = null, r = "F" /* First */ , o = null, u = null) {
            this.path = t, this.collectionGroup = e, this.explicitOrderBy = n, this.filters = s, 
            this.limit = i, this.limitType = r, this.startAt = o, this.endAt = u, this.lt = null, 
            // The corresponding `Target` of this `Query` instance.
            this.ft = null, this.startAt, this.endAt;
        }
    }

    /** Creates a new Query instance with the options provided. */ function sn(t, e, n, s, i, r, o, u) {
        return new nn(t, e, n, s, i, r, o, u);
    }

    /** Creates a new Query for a query that matches all documents at `path` */ function rn(t) {
        return new nn(t);
    }

    /**
     * Helper to convert a collection group query into a collection query at a
     * specific path. This is used when executing collection group queries, since
     * we have to split the query into a set of collection queries at multiple
     * paths.
     */
    /**
     * Returns true if this query does not specify any query constraints that
     * could remove results.
     */
    function on(t) {
        return 0 === t.filters.length && null === t.limit && null == t.startAt && null == t.endAt && (0 === t.explicitOrderBy.length || 1 === t.explicitOrderBy.length && t.explicitOrderBy[0].field.isKeyField());
    }

    function un(t) {
        return t.explicitOrderBy.length > 0 ? t.explicitOrderBy[0].field : null;
    }

    function cn(t) {
        for (const e of t.filters) if (e.ht()) return e.field;
        return null;
    }

    /**
     * Checks if any of the provided Operators are included in the query and
     * returns the first one that is, or null if none are.
     */
    /**
     * Returns whether the query matches a collection group rather than a specific
     * collection.
     */
    function an(t) {
        return null !== t.collectionGroup;
    }

    /**
     * Returns the implicit order by constraint that is used to execute the Query,
     * which can be different from the order by constraints the user provided (e.g.
     * the SDK and backend always orders by `__name__`).
     */ function hn(t) {
        const e = K(t);
        if (null === e.lt) {
            e.lt = [];
            const t = cn(e), n = un(e);
            if (null !== t && null === n) 
            // In order to implicitly add key ordering, we must also add the
            // inequality filter field for it to be a valid query.
            // Note that the default inequality field and key ordering is ascending.
            t.isKeyField() || e.lt.push(new Xe(t)), e.lt.push(new Xe(ft.keyField(), "asc" /* ASCENDING */)); else {
                let t = !1;
                for (const n of e.explicitOrderBy) e.lt.push(n), n.field.isKeyField() && (t = !0);
                if (!t) {
                    // The order of the implicit key ordering always matches the last
                    // explicit order by
                    const t = e.explicitOrderBy.length > 0 ? e.explicitOrderBy[e.explicitOrderBy.length - 1].dir : "asc" /* ASCENDING */;
                    e.lt.push(new Xe(ft.keyField(), t));
                }
            }
        }
        return e.lt;
    }

    /**
     * Converts this `Query` instance to it's corresponding `Target` representation.
     */ function ln(t) {
        const e = K(t);
        if (!e.ft) if ("F" /* First */ === e.limitType) e.ft = ke(e.path, e.collectionGroup, hn(e), e.filters, e.limit, e.startAt, e.endAt); else {
            // Flip the orderBy directions since we want the last results
            const t = [];
            for (const n of hn(e)) {
                const e = "desc" /* DESCENDING */ === n.dir ? "asc" /* ASCENDING */ : "desc" /* DESCENDING */;
                t.push(new Xe(n.field, e));
            }
            // We need to swap the cursors to match the now-flipped query ordering.
                    const n = e.endAt ? new Ye(e.endAt.position, e.endAt.inclusive) : null, s = e.startAt ? new Ye(e.startAt.position, e.startAt.inclusive) : null;
            // Now return as a LimitType.First query.
            e.ft = ke(e.path, e.collectionGroup, t, e.filters, e.limit, n, s);
        }
        return e.ft;
    }

    function fn(t, e, n) {
        return new nn(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), e, n, t.startAt, t.endAt);
    }

    function dn(t, e) {
        return Fe(ln(t), ln(e)) && t.limitType === e.limitType;
    }

    // TODO(b/29183165): This is used to get a unique string from a query to, for
    // example, use as a dictionary key, but the implementation is subject to
    // collisions. Make it collision-free.
    function _n(t) {
        return `${Oe(ln(t))}|lt:${t.limitType}`;
    }

    function wn(t) {
        return `Query(target=${Me(ln(t))}; limitType=${t.limitType})`;
    }

    /** Returns whether `doc` matches the constraints of `query`. */ function mn(t, e) {
        return e.isFoundDocument() && function(t, e) {
            const n = e.key.path;
            return null !== t.collectionGroup ? e.key.hasCollectionId(t.collectionGroup) && t.path.isPrefixOf(n) : dt.isDocumentKey(t.path) ? t.path.isEqual(n) : t.path.isImmediateParentOf(n);
        }
        /**
     * A document must have a value for every ordering clause in order to show up
     * in the results.
     */ (t, e) && function(t, e) {
            for (const n of t.explicitOrderBy) 
            // order by key always matches
            if (!n.field.isKeyField() && null === e.data.field(n.field)) return !1;
            return !0;
        }(t, e) && function(t, e) {
            for (const n of t.filters) if (!n.matches(e)) return !1;
            return !0;
        }
        /** Makes sure a document is within the bounds, if provided. */ (t, e) && function(t, e) {
            if (t.startAt && !
            /**
     * Returns true if a document sorts before a bound using the provided sort
     * order.
     */
            function(t, e, n) {
                const s = tn(t, e, n);
                return t.inclusive ? s <= 0 : s < 0;
            }(t.startAt, hn(t), e)) return !1;
            if (t.endAt && !function(t, e, n) {
                const s = tn(t, e, n);
                return t.inclusive ? s >= 0 : s > 0;
            }(t.endAt, hn(t), e)) return !1;
            return !0;
        }
        /**
     * Returns the collection group that this query targets.
     *
     * PORTING NOTE: This is only used in the Web SDK to facilitate multi-tab
     * synchronization for query results.
     */ (t, e);
    }

    function gn(t) {
        return t.collectionGroup || (t.path.length % 2 == 1 ? t.path.lastSegment() : t.path.get(t.path.length - 2));
    }

    /**
     * Returns a new comparator function that can be used to compare two documents
     * based on the Query's ordering constraint.
     */ function yn(t) {
        return (e, n) => {
            let s = !1;
            for (const i of hn(t)) {
                const t = pn(i, e, n);
                if (0 !== t) return t;
                s = s || i.field.isKeyField();
            }
            return 0;
        };
    }

    function pn(t, e, n) {
        const s = t.field.isKeyField() ? dt.comparator(e.key, n.key) : function(t, e, n) {
            const s = e.data.field(t), i = n.data.field(t);
            return null !== s && null !== i ? _e(s, i) : L();
        }(t.field, e, n);
        switch (t.dir) {
          case "asc" /* ASCENDING */ :
            return s;

          case "desc" /* DESCENDING */ :
            return -1 * s;

          default:
            return L();
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns an DoubleValue for `value` that is encoded based the serializer's
     * `useProto3Json` setting.
     */ function In(t, e) {
        if (t.dt) {
            if (isNaN(e)) return {
                doubleValue: "NaN"
            };
            if (e === 1 / 0) return {
                doubleValue: "Infinity"
            };
            if (e === -1 / 0) return {
                doubleValue: "-Infinity"
            };
        }
        return {
            doubleValue: ue(e) ? "-0" : e
        };
    }

    /**
     * Returns an IntegerValue for `value`.
     */ function Tn(t) {
        return {
            integerValue: "" + t
        };
    }

    /**
     * Returns a value for a number that's appropriate to put into a proto.
     * The return value is an IntegerValue if it can safely represent the value,
     * otherwise a DoubleValue is returned.
     */ function En(t, e) {
        return ce(e) ? Tn(e) : In(t, e);
    }

    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Used to represent a field transform on a mutation. */ class An {
        constructor() {
            // Make sure that the structural type of `TransformOperation` is unique.
            // See https://github.com/microsoft/TypeScript/issues/5451
            this._ = void 0;
        }
    }

    /**
     * Computes the local transform result against the provided `previousValue`,
     * optionally using the provided localWriteTime.
     */ function Rn(t, e, n) {
        return t instanceof vn ? function(t, e) {
            const n = {
                fields: {
                    __type__: {
                        stringValue: "server_timestamp"
                    },
                    __local_write_time__: {
                        timestampValue: {
                            seconds: t.seconds,
                            nanos: t.nanoseconds
                        }
                    }
                }
            };
            return e && (n.fields.__previous_value__ = e), {
                mapValue: n
            };
        }(n, e) : t instanceof Vn ? Sn(t, e) : t instanceof Dn ? Cn(t, e) : function(t, e) {
            // PORTING NOTE: Since JavaScript's integer arithmetic is limited to 53 bit
            // precision and resolves overflows by reducing precision, we do not
            // manually cap overflows at 2^63.
            const n = Pn(t, e), s = Nn(n) + Nn(t._t);
            return pe(n) && pe(t._t) ? Tn(s) : In(t.wt, s);
        }(t, e);
    }

    /**
     * Computes a final transform result after the transform has been acknowledged
     * by the server, potentially using the server-provided transformResult.
     */ function bn(t, e, n) {
        // The server just sends null as the transform result for array operations,
        // so we have to calculate a result the same as we do for local
        // applications.
        return t instanceof Vn ? Sn(t, e) : t instanceof Dn ? Cn(t, e) : n;
    }

    /**
     * If this transform operation is not idempotent, returns the base value to
     * persist for this transform. If a base value is returned, the transform
     * operation is always applied to this base value, even if document has
     * already been updated.
     *
     * Base values provide consistent behavior for non-idempotent transforms and
     * allow us to return the same latency-compensated value even if the backend
     * has already applied the transform operation. The base value is null for
     * idempotent transforms, as they can be re-played even if the backend has
     * already applied them.
     *
     * @returns a base value to store along with the mutation, or null for
     * idempotent transforms.
     */ function Pn(t, e) {
        return t instanceof xn ? pe(n = e) || function(t) {
            return !!t && "doubleValue" in t;
        }
        /** Returns true if `value` is either an IntegerValue or a DoubleValue. */ (n) ? e : {
            integerValue: 0
        } : null;
        var n;
    }

    /** Transforms a value into a server-generated timestamp. */
    class vn extends An {}

    /** Transforms an array value via a union operation. */ class Vn extends An {
        constructor(t) {
            super(), this.elements = t;
        }
    }

    function Sn(t, e) {
        const n = kn(e);
        for (const e of t.elements) n.some((t => fe(t, e))) || n.push(e);
        return {
            arrayValue: {
                values: n
            }
        };
    }

    /** Transforms an array value via a remove operation. */ class Dn extends An {
        constructor(t) {
            super(), this.elements = t;
        }
    }

    function Cn(t, e) {
        let n = kn(e);
        for (const e of t.elements) n = n.filter((t => !fe(t, e)));
        return {
            arrayValue: {
                values: n
            }
        };
    }

    /**
     * Implements the backend semantics for locally computed NUMERIC_ADD (increment)
     * transforms. Converts all field values to integers or doubles, but unlike the
     * backend does not cap integer values at 2^63. Instead, JavaScript number
     * arithmetic is used and precision loss can occur for values greater than 2^53.
     */ class xn extends An {
        constructor(t, e) {
            super(), this.wt = t, this._t = e;
        }
    }

    function Nn(t) {
        return Zt(t.integerValue || t.doubleValue);
    }

    function kn(t) {
        return Ie(t) && t.arrayValue.values ? t.arrayValue.values.slice() : [];
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** A field path and the TransformOperation to perform upon it. */ class On {
        constructor(t, e) {
            this.field = t, this.transform = e;
        }
    }

    function Mn(t, e) {
        return t.field.isEqual(e.field) && function(t, e) {
            return t instanceof Vn && e instanceof Vn || t instanceof Dn && e instanceof Dn ? rt(t.elements, e.elements, fe) : t instanceof xn && e instanceof xn ? fe(t._t, e._t) : t instanceof vn && e instanceof vn;
        }(t.transform, e.transform);
    }

    /** The result of successfully applying a mutation to the backend. */
    class Fn {
        constructor(
        /**
         * The version at which the mutation was committed:
         *
         * - For most operations, this is the updateTime in the WriteResult.
         * - For deletes, the commitTime of the WriteResponse (because deletes are
         *   not stored and have no updateTime).
         *
         * Note that these versions can be different: No-op writes will not change
         * the updateTime even though the commitTime advances.
         */
        t, 
        /**
         * The resulting fields returned from the backend after a mutation
         * containing field transforms has been committed. Contains one FieldValue
         * for each FieldTransform that was in the mutation.
         *
         * Will be empty if the mutation did not contain any field transforms.
         */
        e) {
            this.version = t, this.transformResults = e;
        }
    }

    /**
     * Encodes a precondition for a mutation. This follows the model that the
     * backend accepts with the special case of an explicit "empty" precondition
     * (meaning no precondition).
     */ class $n {
        constructor(t, e) {
            this.updateTime = t, this.exists = e;
        }
        /** Creates a new empty Precondition. */    static none() {
            return new $n;
        }
        /** Creates a new Precondition with an exists flag. */    static exists(t) {
            return new $n(void 0, t);
        }
        /** Creates a new Precondition based on a version a document exists at. */    static updateTime(t) {
            return new $n(t);
        }
        /** Returns whether this Precondition is empty. */    get isNone() {
            return void 0 === this.updateTime && void 0 === this.exists;
        }
        isEqual(t) {
            return this.exists === t.exists && (this.updateTime ? !!t.updateTime && this.updateTime.isEqual(t.updateTime) : !t.updateTime);
        }
    }

    /** Returns true if the preconditions is valid for the given document. */ function Bn(t, e) {
        return void 0 !== t.updateTime ? e.isFoundDocument() && e.version.isEqual(t.updateTime) : void 0 === t.exists || t.exists === e.isFoundDocument();
    }

    /**
     * A mutation describes a self-contained change to a document. Mutations can
     * create, replace, delete, and update subsets of documents.
     *
     * Mutations not only act on the value of the document but also its version.
     *
     * For local mutations (mutations that haven't been committed yet), we preserve
     * the existing version for Set and Patch mutations. For Delete mutations, we
     * reset the version to 0.
     *
     * Here's the expected transition table.
     *
     * MUTATION           APPLIED TO            RESULTS IN
     *
     * SetMutation        Document(v3)          Document(v3)
     * SetMutation        NoDocument(v3)        Document(v0)
     * SetMutation        InvalidDocument(v0)   Document(v0)
     * PatchMutation      Document(v3)          Document(v3)
     * PatchMutation      NoDocument(v3)        NoDocument(v3)
     * PatchMutation      InvalidDocument(v0)   UnknownDocument(v3)
     * DeleteMutation     Document(v3)          NoDocument(v0)
     * DeleteMutation     NoDocument(v3)        NoDocument(v0)
     * DeleteMutation     InvalidDocument(v0)   NoDocument(v0)
     *
     * For acknowledged mutations, we use the updateTime of the WriteResponse as
     * the resulting version for Set and Patch mutations. As deletes have no
     * explicit update time, we use the commitTime of the WriteResponse for
     * Delete mutations.
     *
     * If a mutation is acknowledged by the backend but fails the precondition check
     * locally, we transition to an `UnknownDocument` and rely on Watch to send us
     * the updated version.
     *
     * Field transforms are used only with Patch and Set Mutations. We use the
     * `updateTransforms` message to store transforms, rather than the `transforms`s
     * messages.
     *
     * ## Subclassing Notes
     *
     * Every type of mutation needs to implement its own applyToRemoteDocument() and
     * applyToLocalView() to implement the actual behavior of applying the mutation
     * to some source document (see `setMutationApplyToRemoteDocument()` for an
     * example).
     */ class Ln {}

    /**
     * A utility method to calculate a `Mutation` representing the overlay from the
     * final state of the document, and a `FieldMask` representing the fields that
     * are mutated by the local mutations.
     */ function Un(t, e) {
        if (!t.hasLocalMutations || e && 0 === e.fields.length) return null;
        // mask is null when sets or deletes are applied to the current document.
            if (null === e) return t.isNoDocument() ? new Yn(t.key, $n.none()) : new jn(t.key, t.data, $n.none());
        {
            const n = t.data, s = De.empty();
            let i = new Qt(ft.comparator);
            for (let t of e.fields) if (!i.has(t)) {
                let e = n.field(t);
                // If we are deleting a nested field, we take the immediate parent as
                // the mask used to construct the resulting mutation.
                // Justification: Nested fields can create parent fields implicitly. If
                // only a leaf entry is deleted in later mutations, the parent field
                // should still remain, but we may have lost this information.
                // Consider mutation (foo.bar 1), then mutation (foo.bar delete()).
                // This leaves the final result (foo, {}). Despite the fact that `doc`
                // has the correct result, `foo` is not in `mask`, and the resulting
                // mutation would miss `foo`.
                            null === e && t.length > 1 && (t = t.popLast(), e = n.field(t)), null === e ? s.delete(t) : s.set(t, e), 
                i = i.add(t);
            }
            return new Wn(t.key, s, new zt(i.toArray()), $n.none());
        }
    }

    /**
     * Applies this mutation to the given document for the purposes of computing a
     * new remote document. If the input document doesn't match the expected state
     * (e.g. it is invalid or outdated), the document type may transition to
     * unknown.
     *
     * @param mutation - The mutation to apply.
     * @param document - The document to mutate. The input document can be an
     *     invalid document if the client has no knowledge of the pre-mutation state
     *     of the document.
     * @param mutationResult - The result of applying the mutation from the backend.
     */ function qn(t, e, n) {
        t instanceof jn ? function(t, e, n) {
            // Unlike setMutationApplyToLocalView, if we're applying a mutation to a
            // remote document the server has accepted the mutation so the precondition
            // must have held.
            const s = t.value.clone(), i = Hn(t.fieldTransforms, e, n.transformResults);
            s.setAll(i), e.convertToFoundDocument(n.version, s).setHasCommittedMutations();
        }(t, e, n) : t instanceof Wn ? function(t, e, n) {
            if (!Bn(t.precondition, e)) 
            // Since the mutation was not rejected, we know that the precondition
            // matched on the backend. We therefore must not have the expected version
            // of the document in our cache and convert to an UnknownDocument with a
            // known updateTime.
            return void e.convertToUnknownDocument(n.version);
            const s = Hn(t.fieldTransforms, e, n.transformResults), i = e.data;
            i.setAll(zn(t)), i.setAll(s), e.convertToFoundDocument(n.version, i).setHasCommittedMutations();
        }(t, e, n) : function(t, e, n) {
            // Unlike applyToLocalView, if we're applying a mutation to a remote
            // document the server has accepted the mutation so the precondition must
            // have held.
            e.convertToNoDocument(n.version).setHasCommittedMutations();
        }(0, e, n);
    }

    /**
     * Applies this mutation to the given document for the purposes of computing
     * the new local view of a document. If the input document doesn't match the
     * expected state, the document is not modified.
     *
     * @param mutation - The mutation to apply.
     * @param document - The document to mutate. The input document can be an
     *     invalid document if the client has no knowledge of the pre-mutation state
     *     of the document.
     * @param previousMask - The fields that have been updated before applying this mutation.
     * @param localWriteTime - A timestamp indicating the local write time of the
     *     batch this mutation is a part of.
     * @returns A `FieldMask` representing the fields that are changed by applying this mutation.
     */ function Kn(t, e, n, s) {
        return t instanceof jn ? function(t, e, n, s) {
            if (!Bn(t.precondition, e)) 
            // The mutation failed to apply (e.g. a document ID created with add()
            // caused a name collision).
            return n;
            const i = t.value.clone(), r = Jn(t.fieldTransforms, s, e);
            return i.setAll(r), e.convertToFoundDocument(e.version, i).setHasLocalMutations(), 
            null;
     // SetMutation overwrites all fields.
            }
        /**
     * A mutation that modifies fields of the document at the given key with the
     * given values. The values are applied through a field mask:
     *
     *  * When a field is in both the mask and the values, the corresponding field
     *    is updated.
     *  * When a field is in neither the mask nor the values, the corresponding
     *    field is unmodified.
     *  * When a field is in the mask but not in the values, the corresponding field
     *    is deleted.
     *  * When a field is not in the mask but is in the values, the values map is
     *    ignored.
     */ (t, e, n, s) : t instanceof Wn ? function(t, e, n, s) {
            if (!Bn(t.precondition, e)) return n;
            const i = Jn(t.fieldTransforms, s, e), r = e.data;
            if (r.setAll(zn(t)), r.setAll(i), e.convertToFoundDocument(e.version, r).setHasLocalMutations(), 
            null === n) return null;
            return n.unionWith(t.fieldMask.fields).unionWith(t.fieldTransforms.map((t => t.field)));
        }
        /**
     * Returns a FieldPath/Value map with the content of the PatchMutation.
     */ (t, e, n, s) : function(t, e, n) {
            if (Bn(t.precondition, e)) return e.convertToNoDocument(e.version).setHasLocalMutations(), 
            null;
            return n;
        }
        /**
     * A mutation that verifies the existence of the document at the given key with
     * the provided precondition.
     *
     * The `verify` operation is only used in Transactions, and this class serves
     * primarily to facilitate serialization into protos.
     */ (t, e, n);
    }

    /**
     * If this mutation is not idempotent, returns the base value to persist with
     * this mutation. If a base value is returned, the mutation is always applied
     * to this base value, even if document has already been updated.
     *
     * The base value is a sparse object that consists of only the document
     * fields for which this mutation contains a non-idempotent transformation
     * (e.g. a numeric increment). The provided value guarantees consistent
     * behavior for non-idempotent transforms and allow us to return the same
     * latency-compensated value even if the backend has already applied the
     * mutation. The base value is null for idempotent mutations, as they can be
     * re-played even if the backend has already applied them.
     *
     * @returns a base value to store along with the mutation, or null for
     * idempotent mutations.
     */ function Gn(t, e) {
        let n = null;
        for (const s of t.fieldTransforms) {
            const t = e.data.field(s.field), i = Pn(s.transform, t || null);
            null != i && (null === n && (n = De.empty()), n.set(s.field, i));
        }
        return n || null;
    }

    function Qn(t, e) {
        return t.type === e.type && (!!t.key.isEqual(e.key) && (!!t.precondition.isEqual(e.precondition) && (!!function(t, e) {
            return void 0 === t && void 0 === e || !(!t || !e) && rt(t, e, ((t, e) => Mn(t, e)));
        }(t.fieldTransforms, e.fieldTransforms) && (0 /* Set */ === t.type ? t.value.isEqual(e.value) : 1 /* Patch */ !== t.type || t.data.isEqual(e.data) && t.fieldMask.isEqual(e.fieldMask)))));
    }

    /**
     * A mutation that creates or replaces the document at the given key with the
     * object value contents.
     */ class jn extends Ln {
        constructor(t, e, n, s = []) {
            super(), this.key = t, this.value = e, this.precondition = n, this.fieldTransforms = s, 
            this.type = 0 /* Set */;
        }
        getFieldMask() {
            return null;
        }
    }

    class Wn extends Ln {
        constructor(t, e, n, s, i = []) {
            super(), this.key = t, this.data = e, this.fieldMask = n, this.precondition = s, 
            this.fieldTransforms = i, this.type = 1 /* Patch */;
        }
        getFieldMask() {
            return this.fieldMask;
        }
    }

    function zn(t) {
        const e = new Map;
        return t.fieldMask.fields.forEach((n => {
            if (!n.isEmpty()) {
                const s = t.data.field(n);
                e.set(n, s);
            }
        })), e;
    }

    /**
     * Creates a list of "transform results" (a transform result is a field value
     * representing the result of applying a transform) for use after a mutation
     * containing transforms has been acknowledged by the server.
     *
     * @param fieldTransforms - The field transforms to apply the result to.
     * @param mutableDocument - The current state of the document after applying all
     * previous mutations.
     * @param serverTransformResults - The transform results received by the server.
     * @returns The transform results list.
     */ function Hn(t, e, n) {
        const s = new Map;
        U(t.length === n.length);
        for (let i = 0; i < n.length; i++) {
            const r = t[i], o = r.transform, u = e.data.field(r.field);
            s.set(r.field, bn(o, u, n[i]));
        }
        return s;
    }

    /**
     * Creates a list of "transform results" (a transform result is a field value
     * representing the result of applying a transform) for use when applying a
     * transform locally.
     *
     * @param fieldTransforms - The field transforms to apply the result to.
     * @param localWriteTime - The local time of the mutation (used to
     *     generate ServerTimestampValues).
     * @param mutableDocument - The document to apply transforms on.
     * @returns The transform results list.
     */ function Jn(t, e, n) {
        const s = new Map;
        for (const i of t) {
            const t = i.transform, r = n.data.field(i.field);
            s.set(i.field, Rn(t, r, e));
        }
        return s;
    }

    /** A mutation that deletes the document at the given key. */ class Yn extends Ln {
        constructor(t, e) {
            super(), this.key = t, this.precondition = e, this.type = 2 /* Delete */ , this.fieldTransforms = [];
        }
        getFieldMask() {
            return null;
        }
    }

    class Xn extends Ln {
        constructor(t, e) {
            super(), this.key = t, this.precondition = e, this.type = 3 /* Verify */ , this.fieldTransforms = [];
        }
        getFieldMask() {
            return null;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class Zn {
        // TODO(b/33078163): just use simplest form of existence filter for now
        constructor(t) {
            this.count = t;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Error Codes describing the different ways GRPC can fail. These are copied
     * directly from GRPC's sources here:
     *
     * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h
     *
     * Important! The names of these identifiers matter because the string forms
     * are used for reverse lookups from the webchannel stream. Do NOT change the
     * names of these identifiers or change this into a const enum.
     */ var ts, es;

    /**
     * Determines whether an error code represents a permanent error when received
     * in response to a non-write operation.
     *
     * See isPermanentWriteError for classifying write errors.
     */
    function ns(t) {
        switch (t) {
          default:
            return L();

          case G.CANCELLED:
          case G.UNKNOWN:
          case G.DEADLINE_EXCEEDED:
          case G.RESOURCE_EXHAUSTED:
          case G.INTERNAL:
          case G.UNAVAILABLE:
     // Unauthenticated means something went wrong with our token and we need
            // to retry with new credentials which will happen automatically.
                  case G.UNAUTHENTICATED:
            return !1;

          case G.INVALID_ARGUMENT:
          case G.NOT_FOUND:
          case G.ALREADY_EXISTS:
          case G.PERMISSION_DENIED:
          case G.FAILED_PRECONDITION:
     // Aborted might be retried in some scenarios, but that is dependant on
            // the context and should handled individually by the calling code.
            // See https://cloud.google.com/apis/design/errors.
                  case G.ABORTED:
          case G.OUT_OF_RANGE:
          case G.UNIMPLEMENTED:
          case G.DATA_LOSS:
            return !0;
        }
    }

    /**
     * Determines whether an error code represents a permanent error when received
     * in response to a write operation.
     *
     * Write operations must be handled specially because as of b/119437764, ABORTED
     * errors on the write stream should be retried too (even though ABORTED errors
     * are not generally retryable).
     *
     * Note that during the initial handshake on the write stream an ABORTED error
     * signals that we should discard our stream token (i.e. it is permanent). This
     * means a handshake error should be classified with isPermanentError, above.
     */
    /**
     * Maps an error Code from GRPC status code number, like 0, 1, or 14. These
     * are not the same as HTTP status codes.
     *
     * @returns The Code equivalent to the given GRPC status code. Fails if there
     *     is no match.
     */
    function ss(t) {
        if (void 0 === t) 
        // This shouldn't normally happen, but in certain error cases (like trying
        // to send invalid proto messages) we may get an error with no GRPC code.
        return F("GRPC error has no .code"), G.UNKNOWN;
        switch (t) {
          case ts.OK:
            return G.OK;

          case ts.CANCELLED:
            return G.CANCELLED;

          case ts.UNKNOWN:
            return G.UNKNOWN;

          case ts.DEADLINE_EXCEEDED:
            return G.DEADLINE_EXCEEDED;

          case ts.RESOURCE_EXHAUSTED:
            return G.RESOURCE_EXHAUSTED;

          case ts.INTERNAL:
            return G.INTERNAL;

          case ts.UNAVAILABLE:
            return G.UNAVAILABLE;

          case ts.UNAUTHENTICATED:
            return G.UNAUTHENTICATED;

          case ts.INVALID_ARGUMENT:
            return G.INVALID_ARGUMENT;

          case ts.NOT_FOUND:
            return G.NOT_FOUND;

          case ts.ALREADY_EXISTS:
            return G.ALREADY_EXISTS;

          case ts.PERMISSION_DENIED:
            return G.PERMISSION_DENIED;

          case ts.FAILED_PRECONDITION:
            return G.FAILED_PRECONDITION;

          case ts.ABORTED:
            return G.ABORTED;

          case ts.OUT_OF_RANGE:
            return G.OUT_OF_RANGE;

          case ts.UNIMPLEMENTED:
            return G.UNIMPLEMENTED;

          case ts.DATA_LOSS:
            return G.DATA_LOSS;

          default:
            return L();
        }
    }

    /**
     * Converts an HTTP response's error status to the equivalent error code.
     *
     * @param status - An HTTP error response status ("FAILED_PRECONDITION",
     * "UNKNOWN", etc.)
     * @returns The equivalent Code. Non-matching responses are mapped to
     *     Code.UNKNOWN.
     */ (es = ts || (ts = {}))[es.OK = 0] = "OK", es[es.CANCELLED = 1] = "CANCELLED", 
    es[es.UNKNOWN = 2] = "UNKNOWN", es[es.INVALID_ARGUMENT = 3] = "INVALID_ARGUMENT", 
    es[es.DEADLINE_EXCEEDED = 4] = "DEADLINE_EXCEEDED", es[es.NOT_FOUND = 5] = "NOT_FOUND", 
    es[es.ALREADY_EXISTS = 6] = "ALREADY_EXISTS", es[es.PERMISSION_DENIED = 7] = "PERMISSION_DENIED", 
    es[es.UNAUTHENTICATED = 16] = "UNAUTHENTICATED", es[es.RESOURCE_EXHAUSTED = 8] = "RESOURCE_EXHAUSTED", 
    es[es.FAILED_PRECONDITION = 9] = "FAILED_PRECONDITION", es[es.ABORTED = 10] = "ABORTED", 
    es[es.OUT_OF_RANGE = 11] = "OUT_OF_RANGE", es[es.UNIMPLEMENTED = 12] = "UNIMPLEMENTED", 
    es[es.INTERNAL = 13] = "INTERNAL", es[es.UNAVAILABLE = 14] = "UNAVAILABLE", es[es.DATA_LOSS = 15] = "DATA_LOSS";

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A map implementation that uses objects as keys. Objects must have an
     * associated equals function and must be immutable. Entries in the map are
     * stored together with the key being produced from the mapKeyFn. This map
     * automatically handles collisions of keys.
     */
    class is {
        constructor(t, e) {
            this.mapKeyFn = t, this.equalsFn = e, 
            /**
             * The inner map for a key/value pair. Due to the possibility of collisions we
             * keep a list of entries that we do a linear search through to find an actual
             * match. Note that collisions should be rare, so we still expect near
             * constant time lookups in practice.
             */
            this.inner = {}, 
            /** The number of entries stored in the map */
            this.innerSize = 0;
        }
        /** Get a value for this key, or undefined if it does not exist. */    get(t) {
            const e = this.mapKeyFn(t), n = this.inner[e];
            if (void 0 !== n) for (const [e, s] of n) if (this.equalsFn(e, t)) return s;
        }
        has(t) {
            return void 0 !== this.get(t);
        }
        /** Put this key and value in the map. */    set(t, e) {
            const n = this.mapKeyFn(t), s = this.inner[n];
            if (void 0 === s) return this.inner[n] = [ [ t, e ] ], void this.innerSize++;
            for (let n = 0; n < s.length; n++) if (this.equalsFn(s[n][0], t)) 
            // This is updating an existing entry and does not increase `innerSize`.
            return void (s[n] = [ t, e ]);
            s.push([ t, e ]), this.innerSize++;
        }
        /**
         * Remove this key from the map. Returns a boolean if anything was deleted.
         */    delete(t) {
            const e = this.mapKeyFn(t), n = this.inner[e];
            if (void 0 === n) return !1;
            for (let s = 0; s < n.length; s++) if (this.equalsFn(n[s][0], t)) return 1 === n.length ? delete this.inner[e] : n.splice(s, 1), 
            this.innerSize--, !0;
            return !1;
        }
        forEach(t) {
            Lt(this.inner, ((e, n) => {
                for (const [e, s] of n) t(e, s);
            }));
        }
        isEmpty() {
            return Ut(this.inner);
        }
        size() {
            return this.innerSize;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ const rs = new qt(dt.comparator);

    function os() {
        return rs;
    }

    const us = new qt(dt.comparator);

    function cs(...t) {
        let e = us;
        for (const n of t) e = e.insert(n.key, n);
        return e;
    }

    function as(t) {
        let e = us;
        return t.forEach(((t, n) => e = e.insert(t, n.overlayedDocument))), e;
    }

    function hs() {
        return fs();
    }

    function ls() {
        return fs();
    }

    function fs() {
        return new is((t => t.toString()), ((t, e) => t.isEqual(e)));
    }

    const ds = new qt(dt.comparator);

    const _s = new Qt(dt.comparator);

    function ws(...t) {
        let e = _s;
        for (const n of t) e = e.add(n);
        return e;
    }

    const ms = new Qt(it);

    function gs() {
        return ms;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An event from the RemoteStore. It is split into targetChanges (changes to the
     * state or the set of documents in our watched targets) and documentUpdates
     * (changes to the actual documents).
     */ class ys {
        constructor(
        /**
         * The snapshot version this event brings us up to, or MIN if not set.
         */
        t, 
        /**
         * A map from target to changes to the target. See TargetChange.
         */
        e, 
        /**
         * A set of targets that is known to be inconsistent. Listens for these
         * targets should be re-established without resume tokens.
         */
        n, 
        /**
         * A set of which documents have changed or been deleted, along with the
         * doc's new values (if not deleted).
         */
        s, 
        /**
         * A set of which document updates are due only to limbo resolution targets.
         */
        i) {
            this.snapshotVersion = t, this.targetChanges = e, this.targetMismatches = n, this.documentUpdates = s, 
            this.resolvedLimboDocuments = i;
        }
        /**
         * HACK: Views require RemoteEvents in order to determine whether the view is
         * CURRENT, but secondary tabs don't receive remote events. So this method is
         * used to create a synthesized RemoteEvent that can be used to apply a
         * CURRENT status change to a View, for queries executed in a different tab.
         */
        // PORTING NOTE: Multi-tab only
        static createSynthesizedRemoteEventForCurrentChange(t, e) {
            const n = new Map;
            return n.set(t, ps.createSynthesizedTargetChangeForCurrentChange(t, e)), new ys(ct.min(), n, gs(), os(), ws());
        }
    }

    /**
     * A TargetChange specifies the set of changes for a specific target as part of
     * a RemoteEvent. These changes track which documents are added, modified or
     * removed, as well as the target's resume token and whether the target is
     * marked CURRENT.
     * The actual changes *to* documents are not part of the TargetChange since
     * documents may be part of multiple targets.
     */ class ps {
        constructor(
        /**
         * An opaque, server-assigned token that allows watching a query to be resumed
         * after disconnecting without retransmitting all the data that matches the
         * query. The resume token essentially identifies a point in time from which
         * the server should resume sending results.
         */
        t, 
        /**
         * The "current" (synced) status of this target. Note that "current"
         * has special meaning in the RPC protocol that implies that a target is
         * both up-to-date and consistent with the rest of the watch stream.
         */
        e, 
        /**
         * The set of documents that were newly assigned to this target as part of
         * this remote event.
         */
        n, 
        /**
         * The set of documents that were already assigned to this target but received
         * an update during this remote event.
         */
        s, 
        /**
         * The set of documents that were removed from this target as part of this
         * remote event.
         */
        i) {
            this.resumeToken = t, this.current = e, this.addedDocuments = n, this.modifiedDocuments = s, 
            this.removedDocuments = i;
        }
        /**
         * This method is used to create a synthesized TargetChanges that can be used to
         * apply a CURRENT status change to a View (for queries executed in a different
         * tab) or for new queries (to raise snapshots with correct CURRENT status).
         */    static createSynthesizedTargetChangeForCurrentChange(t, e) {
            return new ps(Jt.EMPTY_BYTE_STRING, e, ws(), ws(), ws());
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Represents a changed document and a list of target ids to which this change
     * applies.
     *
     * If document has been deleted NoDocument will be provided.
     */ class Is {
        constructor(
        /** The new document applies to all of these targets. */
        t, 
        /** The new document is removed from all of these targets. */
        e, 
        /** The key of the document for this change. */
        n, 
        /**
         * The new document or NoDocument if it was deleted. Is null if the
         * document went out of view without the server sending a new document.
         */
        s) {
            this.gt = t, this.removedTargetIds = e, this.key = n, this.yt = s;
        }
    }

    class Ts {
        constructor(t, e) {
            this.targetId = t, this.It = e;
        }
    }

    class Es {
        constructor(
        /** What kind of change occurred to the watch target. */
        t, 
        /** The target IDs that were added/removed/set. */
        e, 
        /**
         * An opaque, server-assigned token that allows watching a target to be
         * resumed after disconnecting without retransmitting all the data that
         * matches the target. The resume token essentially identifies a point in
         * time from which the server should resume sending results.
         */
        n = Jt.EMPTY_BYTE_STRING
        /** An RPC error indicating why the watch failed. */ , s = null) {
            this.state = t, this.targetIds = e, this.resumeToken = n, this.cause = s;
        }
    }

    /** Tracks the internal state of a Watch target. */ class As {
        constructor() {
            /**
             * The number of pending responses (adds or removes) that we are waiting on.
             * We only consider targets active that have no pending responses.
             */
            this.Tt = 0, 
            /**
             * Keeps track of the document changes since the last raised snapshot.
             *
             * These changes are continuously updated as we receive document updates and
             * always reflect the current set of changes against the last issued snapshot.
             */
            this.Et = Ps(), 
            /** See public getters for explanations of these fields. */
            this.At = Jt.EMPTY_BYTE_STRING, this.Rt = !1, 
            /**
             * Whether this target state should be included in the next snapshot. We
             * initialize to true so that newly-added targets are included in the next
             * RemoteEvent.
             */
            this.bt = !0;
        }
        /**
         * Whether this target has been marked 'current'.
         *
         * 'Current' has special meaning in the RPC protocol: It implies that the
         * Watch backend has sent us all changes up to the point at which the target
         * was added and that the target is consistent with the rest of the watch
         * stream.
         */    get current() {
            return this.Rt;
        }
        /** The last resume token sent to us for this target. */    get resumeToken() {
            return this.At;
        }
        /** Whether this target has pending target adds or target removes. */    get Pt() {
            return 0 !== this.Tt;
        }
        /** Whether we have modified any state that should trigger a snapshot. */    get vt() {
            return this.bt;
        }
        /**
         * Applies the resume token to the TargetChange, but only when it has a new
         * value. Empty resumeTokens are discarded.
         */    Vt(t) {
            t.approximateByteSize() > 0 && (this.bt = !0, this.At = t);
        }
        /**
         * Creates a target change from the current set of changes.
         *
         * To reset the document changes after raising this snapshot, call
         * `clearPendingChanges()`.
         */    St() {
            let t = ws(), e = ws(), n = ws();
            return this.Et.forEach(((s, i) => {
                switch (i) {
                  case 0 /* Added */ :
                    t = t.add(s);
                    break;

                  case 2 /* Modified */ :
                    e = e.add(s);
                    break;

                  case 1 /* Removed */ :
                    n = n.add(s);
                    break;

                  default:
                    L();
                }
            })), new ps(this.At, this.Rt, t, e, n);
        }
        /**
         * Resets the document changes and sets `hasPendingChanges` to false.
         */    Dt() {
            this.bt = !1, this.Et = Ps();
        }
        Ct(t, e) {
            this.bt = !0, this.Et = this.Et.insert(t, e);
        }
        xt(t) {
            this.bt = !0, this.Et = this.Et.remove(t);
        }
        Nt() {
            this.Tt += 1;
        }
        kt() {
            this.Tt -= 1;
        }
        Ot() {
            this.bt = !0, this.Rt = !0;
        }
    }

    /**
     * A helper class to accumulate watch changes into a RemoteEvent.
     */
    class Rs {
        constructor(t) {
            this.Mt = t, 
            /** The internal state of all tracked targets. */
            this.Ft = new Map, 
            /** Keeps track of the documents to update since the last raised snapshot. */
            this.$t = os(), 
            /** A mapping of document keys to their set of target IDs. */
            this.Bt = bs(), 
            /**
             * A list of targets with existence filter mismatches. These targets are
             * known to be inconsistent and their listens needs to be re-established by
             * RemoteStore.
             */
            this.Lt = new Qt(it);
        }
        /**
         * Processes and adds the DocumentWatchChange to the current set of changes.
         */    Ut(t) {
            for (const e of t.gt) t.yt && t.yt.isFoundDocument() ? this.qt(e, t.yt) : this.Kt(e, t.key, t.yt);
            for (const e of t.removedTargetIds) this.Kt(e, t.key, t.yt);
        }
        /** Processes and adds the WatchTargetChange to the current set of changes. */    Gt(t) {
            this.forEachTarget(t, (e => {
                const n = this.Qt(e);
                switch (t.state) {
                  case 0 /* NoChange */ :
                    this.jt(e) && n.Vt(t.resumeToken);
                    break;

                  case 1 /* Added */ :
                    // We need to decrement the number of pending acks needed from watch
                    // for this targetId.
                    n.kt(), n.Pt || 
                    // We have a freshly added target, so we need to reset any state
                    // that we had previously. This can happen e.g. when remove and add
                    // back a target for existence filter mismatches.
                    n.Dt(), n.Vt(t.resumeToken);
                    break;

                  case 2 /* Removed */ :
                    // We need to keep track of removed targets to we can post-filter and
                    // remove any target changes.
                    // We need to decrement the number of pending acks needed from watch
                    // for this targetId.
                    n.kt(), n.Pt || this.removeTarget(e);
                    break;

                  case 3 /* Current */ :
                    this.jt(e) && (n.Ot(), n.Vt(t.resumeToken));
                    break;

                  case 4 /* Reset */ :
                    this.jt(e) && (
                    // Reset the target and synthesizes removes for all existing
                    // documents. The backend will re-add any documents that still
                    // match the target before it sends the next global snapshot.
                    this.Wt(e), n.Vt(t.resumeToken));
                    break;

                  default:
                    L();
                }
            }));
        }
        /**
         * Iterates over all targetIds that the watch change applies to: either the
         * targetIds explicitly listed in the change or the targetIds of all currently
         * active targets.
         */    forEachTarget(t, e) {
            t.targetIds.length > 0 ? t.targetIds.forEach(e) : this.Ft.forEach(((t, n) => {
                this.jt(n) && e(n);
            }));
        }
        /**
         * Handles existence filters and synthesizes deletes for filter mismatches.
         * Targets that are invalidated by filter mismatches are added to
         * `pendingTargetResets`.
         */    zt(t) {
            const e = t.targetId, n = t.It.count, s = this.Ht(e);
            if (s) {
                const t = s.target;
                if ($e(t)) if (0 === n) {
                    // The existence filter told us the document does not exist. We deduce
                    // that this document does not exist and apply a deleted document to
                    // our updates. Without applying this deleted document there might be
                    // another query that will raise this document as part of a snapshot
                    // until it is resolved, essentially exposing inconsistency between
                    // queries.
                    const n = new dt(t.path);
                    this.Kt(e, n, xe.newNoDocument(n, ct.min()));
                } else U(1 === n); else {
                    this.Jt(e) !== n && (
                    // Existence filter mismatch: We reset the mapping and raise a new
                    // snapshot with `isFromCache:true`.
                    this.Wt(e), this.Lt = this.Lt.add(e));
                }
            }
        }
        /**
         * Converts the currently accumulated state into a remote event at the
         * provided snapshot version. Resets the accumulated changes before returning.
         */    Yt(t) {
            const e = new Map;
            this.Ft.forEach(((n, s) => {
                const i = this.Ht(s);
                if (i) {
                    if (n.current && $e(i.target)) {
                        // Document queries for document that don't exist can produce an empty
                        // result set. To update our local cache, we synthesize a document
                        // delete if we have not previously received the document. This
                        // resolves the limbo state of the document, removing it from
                        // limboDocumentRefs.
                        // TODO(dimond): Ideally we would have an explicit lookup target
                        // instead resulting in an explicit delete message and we could
                        // remove this special logic.
                        const e = new dt(i.target.path);
                        null !== this.$t.get(e) || this.Xt(s, e) || this.Kt(s, e, xe.newNoDocument(e, t));
                    }
                    n.vt && (e.set(s, n.St()), n.Dt());
                }
            }));
            let n = ws();
            // We extract the set of limbo-only document updates as the GC logic
            // special-cases documents that do not appear in the target cache.
            
            // TODO(gsoltis): Expand on this comment once GC is available in the JS
            // client.
                    this.Bt.forEach(((t, e) => {
                let s = !0;
                e.forEachWhile((t => {
                    const e = this.Ht(t);
                    return !e || 2 /* LimboResolution */ === e.purpose || (s = !1, !1);
                })), s && (n = n.add(t));
            })), this.$t.forEach(((e, n) => n.setReadTime(t)));
            const s = new ys(t, e, this.Lt, this.$t, n);
            return this.$t = os(), this.Bt = bs(), this.Lt = new Qt(it), s;
        }
        /**
         * Adds the provided document to the internal list of document updates and
         * its document key to the given target's mapping.
         */
        // Visible for testing.
        qt(t, e) {
            if (!this.jt(t)) return;
            const n = this.Xt(t, e.key) ? 2 /* Modified */ : 0 /* Added */;
            this.Qt(t).Ct(e.key, n), this.$t = this.$t.insert(e.key, e), this.Bt = this.Bt.insert(e.key, this.Zt(e.key).add(t));
        }
        /**
         * Removes the provided document from the target mapping. If the
         * document no longer matches the target, but the document's state is still
         * known (e.g. we know that the document was deleted or we received the change
         * that caused the filter mismatch), the new document can be provided
         * to update the remote document cache.
         */
        // Visible for testing.
        Kt(t, e, n) {
            if (!this.jt(t)) return;
            const s = this.Qt(t);
            this.Xt(t, e) ? s.Ct(e, 1 /* Removed */) : 
            // The document may have entered and left the target before we raised a
            // snapshot, so we can just ignore the change.
            s.xt(e), this.Bt = this.Bt.insert(e, this.Zt(e).delete(t)), n && (this.$t = this.$t.insert(e, n));
        }
        removeTarget(t) {
            this.Ft.delete(t);
        }
        /**
         * Returns the current count of documents in the target. This includes both
         * the number of documents that the LocalStore considers to be part of the
         * target as well as any accumulated changes.
         */    Jt(t) {
            const e = this.Qt(t).St();
            return this.Mt.getRemoteKeysForTarget(t).size + e.addedDocuments.size - e.removedDocuments.size;
        }
        /**
         * Increment the number of acks needed from watch before we can consider the
         * server to be 'in-sync' with the client's active targets.
         */    Nt(t) {
            this.Qt(t).Nt();
        }
        Qt(t) {
            let e = this.Ft.get(t);
            return e || (e = new As, this.Ft.set(t, e)), e;
        }
        Zt(t) {
            let e = this.Bt.get(t);
            return e || (e = new Qt(it), this.Bt = this.Bt.insert(t, e)), e;
        }
        /**
         * Verifies that the user is still interested in this target (by calling
         * `getTargetDataForTarget()`) and that we are not waiting for pending ADDs
         * from watch.
         */    jt(t) {
            const e = null !== this.Ht(t);
            return e || M("WatchChangeAggregator", "Detected inactive target", t), e;
        }
        /**
         * Returns the TargetData for an active target (i.e. a target that the user
         * is still interested in that has no outstanding target change requests).
         */    Ht(t) {
            const e = this.Ft.get(t);
            return e && e.Pt ? null : this.Mt.te(t);
        }
        /**
         * Resets the state of a Watch target to its initial state (e.g. sets
         * 'current' to false, clears the resume token and removes its target mapping
         * from all documents).
         */    Wt(t) {
            this.Ft.set(t, new As);
            this.Mt.getRemoteKeysForTarget(t).forEach((e => {
                this.Kt(t, e, /*updatedDocument=*/ null);
            }));
        }
        /**
         * Returns whether the LocalStore considers the document to be part of the
         * specified target.
         */    Xt(t, e) {
            return this.Mt.getRemoteKeysForTarget(t).has(e);
        }
    }

    function bs() {
        return new qt(dt.comparator);
    }

    function Ps() {
        return new qt(dt.comparator);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ const vs = (() => {
        const t = {
            asc: "ASCENDING",
            desc: "DESCENDING"
        };
        return t;
    })(), Vs = (() => {
        const t = {
            "<": "LESS_THAN",
            "<=": "LESS_THAN_OR_EQUAL",
            ">": "GREATER_THAN",
            ">=": "GREATER_THAN_OR_EQUAL",
            "==": "EQUAL",
            "!=": "NOT_EQUAL",
            "array-contains": "ARRAY_CONTAINS",
            in: "IN",
            "not-in": "NOT_IN",
            "array-contains-any": "ARRAY_CONTAINS_ANY"
        };
        return t;
    })();

    /**
     * This class generates JsonObject values for the Datastore API suitable for
     * sending to either GRPC stub methods or via the JSON/HTTP REST API.
     *
     * The serializer supports both Protobuf.js and Proto3 JSON formats. By
     * setting `useProto3Json` to true, the serializer will use the Proto3 JSON
     * format.
     *
     * For a description of the Proto3 JSON format check
     * https://developers.google.com/protocol-buffers/docs/proto3#json
     *
     * TODO(klimt): We can remove the databaseId argument if we keep the full
     * resource name in documents.
     */
    class Ss {
        constructor(t, e) {
            this.databaseId = t, this.dt = e;
        }
    }

    /**
     * Returns a value for a Date that's appropriate to put into a proto.
     */
    function Ds(t, e) {
        if (t.dt) {
            return `${new Date(1e3 * e.seconds).toISOString().replace(/\.\d*/, "").replace("Z", "")}.${("000000000" + e.nanoseconds).slice(-9)}Z`;
        }
        return {
            seconds: "" + e.seconds,
            nanos: e.nanoseconds
        };
    }

    /**
     * Returns a value for bytes that's appropriate to put in a proto.
     *
     * Visible for testing.
     */
    function Cs(t, e) {
        return t.dt ? e.toBase64() : e.toUint8Array();
    }

    /**
     * Returns a ByteString based on the proto string value.
     */ function xs(t, e) {
        return Ds(t, e.toTimestamp());
    }

    function Ns(t) {
        return U(!!t), ct.fromTimestamp(function(t) {
            const e = Xt(t);
            return new ut(e.seconds, e.nanos);
        }(t));
    }

    function ks(t, e) {
        return function(t) {
            return new ht([ "projects", t.projectId, "databases", t.database ]);
        }(t).child("documents").child(e).canonicalString();
    }

    function Os(t) {
        const e = ht.fromString(t);
        return U(ui(e)), e;
    }

    function Ms(t, e) {
        return ks(t.databaseId, e.path);
    }

    function Fs(t, e) {
        const n = Os(e);
        if (n.get(1) !== t.databaseId.projectId) throw new Q(G.INVALID_ARGUMENT, "Tried to deserialize key from different project: " + n.get(1) + " vs " + t.databaseId.projectId);
        if (n.get(3) !== t.databaseId.database) throw new Q(G.INVALID_ARGUMENT, "Tried to deserialize key from different database: " + n.get(3) + " vs " + t.databaseId.database);
        return new dt(Us(n));
    }

    function $s(t, e) {
        return ks(t.databaseId, e);
    }

    function Bs(t) {
        const e = Os(t);
        // In v1beta1 queries for collections at the root did not have a trailing
        // "/documents". In v1 all resource paths contain "/documents". Preserve the
        // ability to read the v1beta1 form for compatibility with queries persisted
        // in the local target cache.
            return 4 === e.length ? ht.emptyPath() : Us(e);
    }

    function Ls(t) {
        return new ht([ "projects", t.databaseId.projectId, "databases", t.databaseId.database ]).canonicalString();
    }

    function Us(t) {
        return U(t.length > 4 && "documents" === t.get(4)), t.popFirst(5);
    }

    /** Creates a Document proto from key and fields (but no create/update time) */ function qs(t, e, n) {
        return {
            name: Ms(t, e),
            fields: n.value.mapValue.fields
        };
    }

    function Ks(t, e, n) {
        const s = Fs(t, e.name), i = Ns(e.updateTime), r = new De({
            mapValue: {
                fields: e.fields
            }
        }), o = xe.newFoundDocument(s, i, r);
        return n && o.setHasCommittedMutations(), n ? o.setHasCommittedMutations() : o;
    }

    function Gs(t, e) {
        return "found" in e ? function(t, e) {
            U(!!e.found), e.found.name, e.found.updateTime;
            const n = Fs(t, e.found.name), s = Ns(e.found.updateTime), i = new De({
                mapValue: {
                    fields: e.found.fields
                }
            });
            return xe.newFoundDocument(n, s, i);
        }(t, e) : "missing" in e ? function(t, e) {
            U(!!e.missing), U(!!e.readTime);
            const n = Fs(t, e.missing), s = Ns(e.readTime);
            return xe.newNoDocument(n, s);
        }(t, e) : L();
    }

    function Qs(t, e) {
        let n;
        if ("targetChange" in e) {
            e.targetChange;
            // proto3 default value is unset in JSON (undefined), so use 'NO_CHANGE'
            // if unset
            const s = function(t) {
                return "NO_CHANGE" === t ? 0 /* NoChange */ : "ADD" === t ? 1 /* Added */ : "REMOVE" === t ? 2 /* Removed */ : "CURRENT" === t ? 3 /* Current */ : "RESET" === t ? 4 /* Reset */ : L();
            }(e.targetChange.targetChangeType || "NO_CHANGE"), i = e.targetChange.targetIds || [], r = function(t, e) {
                return t.dt ? (U(void 0 === e || "string" == typeof e), Jt.fromBase64String(e || "")) : (U(void 0 === e || e instanceof Uint8Array), 
                Jt.fromUint8Array(e || new Uint8Array));
            }(t, e.targetChange.resumeToken), o = e.targetChange.cause, u = o && function(t) {
                const e = void 0 === t.code ? G.UNKNOWN : ss(t.code);
                return new Q(e, t.message || "");
            }
            /**
     * Returns a value for a number (or null) that's appropriate to put into
     * a google.protobuf.Int32Value proto.
     * DO NOT USE THIS FOR ANYTHING ELSE.
     * This method cheats. It's typed as returning "number" because that's what
     * our generated proto interfaces say Int32Value must be. But GRPC actually
     * expects a { value: <number> } struct.
     */ (o);
            n = new Es(s, i, r, u || null);
        } else if ("documentChange" in e) {
            e.documentChange;
            const s = e.documentChange;
            s.document, s.document.name, s.document.updateTime;
            const i = Fs(t, s.document.name), r = Ns(s.document.updateTime), o = new De({
                mapValue: {
                    fields: s.document.fields
                }
            }), u = xe.newFoundDocument(i, r, o), c = s.targetIds || [], a = s.removedTargetIds || [];
            n = new Is(c, a, u.key, u);
        } else if ("documentDelete" in e) {
            e.documentDelete;
            const s = e.documentDelete;
            s.document;
            const i = Fs(t, s.document), r = s.readTime ? Ns(s.readTime) : ct.min(), o = xe.newNoDocument(i, r), u = s.removedTargetIds || [];
            n = new Is([], u, o.key, o);
        } else if ("documentRemove" in e) {
            e.documentRemove;
            const s = e.documentRemove;
            s.document;
            const i = Fs(t, s.document), r = s.removedTargetIds || [];
            n = new Is([], r, i, null);
        } else {
            if (!("filter" in e)) return L();
            {
                e.filter;
                const t = e.filter;
                t.targetId;
                const s = t.count || 0, i = new Zn(s), r = t.targetId;
                n = new Ts(r, i);
            }
        }
        return n;
    }

    function js(t, e) {
        let n;
        if (e instanceof jn) n = {
            update: qs(t, e.key, e.value)
        }; else if (e instanceof Yn) n = {
            delete: Ms(t, e.key)
        }; else if (e instanceof Wn) n = {
            update: qs(t, e.key, e.data),
            updateMask: oi(e.fieldMask)
        }; else {
            if (!(e instanceof Xn)) return L();
            n = {
                verify: Ms(t, e.key)
            };
        }
        return e.fieldTransforms.length > 0 && (n.updateTransforms = e.fieldTransforms.map((t => function(t, e) {
            const n = e.transform;
            if (n instanceof vn) return {
                fieldPath: e.field.canonicalString(),
                setToServerValue: "REQUEST_TIME"
            };
            if (n instanceof Vn) return {
                fieldPath: e.field.canonicalString(),
                appendMissingElements: {
                    values: n.elements
                }
            };
            if (n instanceof Dn) return {
                fieldPath: e.field.canonicalString(),
                removeAllFromArray: {
                    values: n.elements
                }
            };
            if (n instanceof xn) return {
                fieldPath: e.field.canonicalString(),
                increment: n._t
            };
            throw L();
        }(0, t)))), e.precondition.isNone || (n.currentDocument = function(t, e) {
            return void 0 !== e.updateTime ? {
                updateTime: xs(t, e.updateTime)
            } : void 0 !== e.exists ? {
                exists: e.exists
            } : L();
        }(t, e.precondition)), n;
    }

    function Ws(t, e) {
        const n = e.currentDocument ? function(t) {
            return void 0 !== t.updateTime ? $n.updateTime(Ns(t.updateTime)) : void 0 !== t.exists ? $n.exists(t.exists) : $n.none();
        }(e.currentDocument) : $n.none(), s = e.updateTransforms ? e.updateTransforms.map((e => function(t, e) {
            let n = null;
            if ("setToServerValue" in e) U("REQUEST_TIME" === e.setToServerValue), n = new vn; else if ("appendMissingElements" in e) {
                const t = e.appendMissingElements.values || [];
                n = new Vn(t);
            } else if ("removeAllFromArray" in e) {
                const t = e.removeAllFromArray.values || [];
                n = new Dn(t);
            } else "increment" in e ? n = new xn(t, e.increment) : L();
            const s = ft.fromServerFormat(e.fieldPath);
            return new On(s, n);
        }(t, e))) : [];
        if (e.update) {
            e.update.name;
            const i = Fs(t, e.update.name), r = new De({
                mapValue: {
                    fields: e.update.fields
                }
            });
            if (e.updateMask) {
                const t = function(t) {
                    const e = t.fieldPaths || [];
                    return new zt(e.map((t => ft.fromServerFormat(t))));
                }(e.updateMask);
                return new Wn(i, r, t, n, s);
            }
            return new jn(i, r, n, s);
        }
        if (e.delete) {
            const s = Fs(t, e.delete);
            return new Yn(s, n);
        }
        if (e.verify) {
            const s = Fs(t, e.verify);
            return new Xn(s, n);
        }
        return L();
    }

    function zs(t, e) {
        return t && t.length > 0 ? (U(void 0 !== e), t.map((t => function(t, e) {
            // NOTE: Deletes don't have an updateTime.
            let n = t.updateTime ? Ns(t.updateTime) : Ns(e);
            return n.isEqual(ct.min()) && (
            // The Firestore Emulator currently returns an update time of 0 for
            // deletes of non-existing documents (rather than null). This breaks the
            // test "get deleted doc while offline with source=cache" as NoDocuments
            // with version 0 are filtered by IndexedDb's RemoteDocumentCache.
            // TODO(#2149): Remove this when Emulator is fixed
            n = Ns(e)), new Fn(n, t.transformResults || []);
        }(t, e)))) : [];
    }

    function Hs(t, e) {
        return {
            documents: [ $s(t, e.path) ]
        };
    }

    function Js(t, e) {
        // Dissect the path into parent, collectionId, and optional key filter.
        const n = {
            structuredQuery: {}
        }, s = e.path;
        null !== e.collectionGroup ? (n.parent = $s(t, s), n.structuredQuery.from = [ {
            collectionId: e.collectionGroup,
            allDescendants: !0
        } ]) : (n.parent = $s(t, s.popLast()), n.structuredQuery.from = [ {
            collectionId: s.lastSegment()
        } ]);
        const i = function(t) {
            if (0 === t.length) return;
            const e = t.map((t => 
            // visible for testing
            function(t) {
                if ("==" /* EQUAL */ === t.op) {
                    if (Ee(t.value)) return {
                        unaryFilter: {
                            field: ni(t.field),
                            op: "IS_NAN"
                        }
                    };
                    if (Te(t.value)) return {
                        unaryFilter: {
                            field: ni(t.field),
                            op: "IS_NULL"
                        }
                    };
                } else if ("!=" /* NOT_EQUAL */ === t.op) {
                    if (Ee(t.value)) return {
                        unaryFilter: {
                            field: ni(t.field),
                            op: "IS_NOT_NAN"
                        }
                    };
                    if (Te(t.value)) return {
                        unaryFilter: {
                            field: ni(t.field),
                            op: "IS_NOT_NULL"
                        }
                    };
                }
                return {
                    fieldFilter: {
                        field: ni(t.field),
                        op: ei(t.op),
                        value: t.value
                    }
                };
            }(t)));
            if (1 === e.length) return e[0];
            return {
                compositeFilter: {
                    op: "AND",
                    filters: e
                }
            };
        }(e.filters);
        i && (n.structuredQuery.where = i);
        const r = function(t) {
            if (0 === t.length) return;
            return t.map((t => 
            // visible for testing
            function(t) {
                return {
                    field: ni(t.field),
                    direction: ti(t.dir)
                };
            }(t)));
        }(e.orderBy);
        r && (n.structuredQuery.orderBy = r);
        const o = function(t, e) {
            return t.dt || oe(e) ? e : {
                value: e
            };
        }
        /**
     * Returns a number (or null) from a google.protobuf.Int32Value proto.
     */ (t, e.limit);
        var u;
        return null !== o && (n.structuredQuery.limit = o), e.startAt && (n.structuredQuery.startAt = {
            before: (u = e.startAt).inclusive,
            values: u.position
        }), e.endAt && (n.structuredQuery.endAt = function(t) {
            return {
                before: !t.inclusive,
                values: t.position
            };
        }(e.endAt)), n;
    }

    function Ys(t) {
        let e = Bs(t.parent);
        const n = t.structuredQuery, s = n.from ? n.from.length : 0;
        let i = null;
        if (s > 0) {
            U(1 === s);
            const t = n.from[0];
            t.allDescendants ? i = t.collectionId : e = e.child(t.collectionId);
        }
        let r = [];
        n.where && (r = Zs(n.where));
        let o = [];
        n.orderBy && (o = n.orderBy.map((t => function(t) {
            return new Xe(si(t.field), 
            // visible for testing
            function(t) {
                switch (t) {
                  case "ASCENDING":
                    return "asc" /* ASCENDING */;

                  case "DESCENDING":
                    return "desc" /* DESCENDING */;

                  default:
                    return;
                }
            }
            // visible for testing
            (t.direction));
        }(t))));
        let u = null;
        n.limit && (u = function(t) {
            let e;
            return e = "object" == typeof t ? t.value : t, oe(e) ? null : e;
        }(n.limit));
        let c = null;
        n.startAt && (c = function(t) {
            const e = !!t.before, n = t.values || [];
            return new Ye(n, e);
        }(n.startAt));
        let a = null;
        return n.endAt && (a = function(t) {
            const e = !t.before, n = t.values || [];
            return new Ye(n, e);
        }
        // visible for testing
        (n.endAt)), sn(e, i, o, r, u, "F" /* First */ , c, a);
    }

    function Xs(t, e) {
        const n = function(t, e) {
            switch (e) {
              case 0 /* Listen */ :
                return null;

              case 1 /* ExistenceFilterMismatch */ :
                return "existence-filter-mismatch";

              case 2 /* LimboResolution */ :
                return "limbo-document";

              default:
                return L();
            }
        }(0, e.purpose);
        return null == n ? null : {
            "goog-listen-tags": n
        };
    }

    function Zs(t) {
        return t ? void 0 !== t.unaryFilter ? [ ri(t) ] : void 0 !== t.fieldFilter ? [ ii(t) ] : void 0 !== t.compositeFilter ? t.compositeFilter.filters.map((t => Zs(t))).reduce(((t, e) => t.concat(e))) : L() : [];
    }

    function ti(t) {
        return vs[t];
    }

    function ei(t) {
        return Vs[t];
    }

    function ni(t) {
        return {
            fieldPath: t.canonicalString()
        };
    }

    function si(t) {
        return ft.fromServerFormat(t.fieldPath);
    }

    function ii(t) {
        return qe.create(si(t.fieldFilter.field), function(t) {
            switch (t) {
              case "EQUAL":
                return "==" /* EQUAL */;

              case "NOT_EQUAL":
                return "!=" /* NOT_EQUAL */;

              case "GREATER_THAN":
                return ">" /* GREATER_THAN */;

              case "GREATER_THAN_OR_EQUAL":
                return ">=" /* GREATER_THAN_OR_EQUAL */;

              case "LESS_THAN":
                return "<" /* LESS_THAN */;

              case "LESS_THAN_OR_EQUAL":
                return "<=" /* LESS_THAN_OR_EQUAL */;

              case "ARRAY_CONTAINS":
                return "array-contains" /* ARRAY_CONTAINS */;

              case "IN":
                return "in" /* IN */;

              case "NOT_IN":
                return "not-in" /* NOT_IN */;

              case "ARRAY_CONTAINS_ANY":
                return "array-contains-any" /* ARRAY_CONTAINS_ANY */;

              default:
                return L();
            }
        }(t.fieldFilter.op), t.fieldFilter.value);
    }

    function ri(t) {
        switch (t.unaryFilter.op) {
          case "IS_NAN":
            const e = si(t.unaryFilter.field);
            return qe.create(e, "==" /* EQUAL */ , {
                doubleValue: NaN
            });

          case "IS_NULL":
            const n = si(t.unaryFilter.field);
            return qe.create(n, "==" /* EQUAL */ , {
                nullValue: "NULL_VALUE"
            });

          case "IS_NOT_NAN":
            const s = si(t.unaryFilter.field);
            return qe.create(s, "!=" /* NOT_EQUAL */ , {
                doubleValue: NaN
            });

          case "IS_NOT_NULL":
            const i = si(t.unaryFilter.field);
            return qe.create(i, "!=" /* NOT_EQUAL */ , {
                nullValue: "NULL_VALUE"
            });

          default:
            return L();
        }
    }

    function oi(t) {
        const e = [];
        return t.fields.forEach((t => e.push(t.canonicalString()))), {
            fieldPaths: e
        };
    }

    function ui(t) {
        // Resource names have at least 4 components (project ID, database ID)
        return t.length >= 4 && "projects" === t.get(0) && "databases" === t.get(2);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Encodes a resource path into a IndexedDb-compatible string form.
     */
    function ci(t) {
        let e = "";
        for (let n = 0; n < t.length; n++) e.length > 0 && (e = hi(e)), e = ai(t.get(n), e);
        return hi(e);
    }

    /** Encodes a single segment of a resource path into the given result */ function ai(t, e) {
        let n = e;
        const s = t.length;
        for (let e = 0; e < s; e++) {
            const s = t.charAt(e);
            switch (s) {
              case "\0":
                n += "";
                break;

              case "":
                n += "";
                break;

              default:
                n += s;
            }
        }
        return n;
    }

    /** Encodes a path separator into the given result */ function hi(t) {
        return t + "";
    }

    /**
     * Decodes the given IndexedDb-compatible string form of a resource path into
     * a ResourcePath instance. Note that this method is not suitable for use with
     * decoding resource names from the server; those are One Platform format
     * strings.
     */ function li(t) {
        // Event the empty path must encode as a path of at least length 2. A path
        // with exactly 2 must be the empty path.
        const e = t.length;
        if (U(e >= 2), 2 === e) return U("" === t.charAt(0) && "" === t.charAt(1)), ht.emptyPath();
        // Escape characters cannot exist past the second-to-last position in the
        // source value.
            const n = e - 2, s = [];
        let i = "";
        for (let r = 0; r < e; ) {
            // The last two characters of a valid encoded path must be a separator, so
            // there must be an end to this segment.
            const e = t.indexOf("", r);
            (e < 0 || e > n) && L();
            switch (t.charAt(e + 1)) {
              case "":
                const n = t.substring(r, e);
                let o;
                0 === i.length ? 
                // Avoid copying for the common case of a segment that excludes \0
                // and \001
                o = n : (i += n, o = i, i = ""), s.push(o);
                break;

              case "":
                i += t.substring(r, e), i += "\0";
                break;

              case "":
                // The escape character can be used in the output to encode itself.
                i += t.substring(r, e + 1);
                break;

              default:
                L();
            }
            r = e + 2;
        }
        return new ht(s);
    }

    /**
     * @license
     * Copyright 2022 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ const fi = [ "userId", "batchId" ];

    /**
     * @license
     * Copyright 2022 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Name of the IndexedDb object store.
     *
     * Note that the name 'owner' is chosen to ensure backwards compatibility with
     * older clients that only supported single locked access to the persistence
     * layer.
     */
    /**
     * Creates a [userId, encodedPath] key for use in the DbDocumentMutations
     * index to iterate over all at document mutations for a given path or lower.
     */
    function di(t, e) {
        return [ t, ci(e) ];
    }

    /**
     * Creates a full index key of [userId, encodedPath, batchId] for inserting
     * and deleting into the DbDocumentMutations index.
     */ function _i(t, e, n) {
        return [ t, ci(e), n ];
    }

    /**
     * Because we store all the useful information for this store in the key,
     * there is no useful information to store as the value. The raw (unencoded)
     * path cannot be stored because IndexedDb doesn't store prototype
     * information.
     */ const wi = {}, mi = [ "prefixPath", "collectionGroup", "readTime", "documentId" ], gi = [ "prefixPath", "collectionGroup", "documentId" ], yi = [ "collectionGroup", "readTime", "prefixPath", "documentId" ], pi$2 = [ "canonicalId", "targetId" ], Ii = [ "targetId", "path" ], Ti = [ "path", "targetId" ], Ei = [ "collectionId", "parent" ], Ai = [ "indexId", "uid" ], Ri = [ "uid", "sequenceNumber" ], bi = [ "indexId", "uid", "arrayValue", "directionalValue", "orderedDocumentKey", "documentKey" ], Pi = [ "indexId", "uid", "orderedDocumentKey" ], vi = [ "userId", "collectionPath", "documentId" ], Vi = [ "userId", "collectionPath", "largestBatchId" ], Si = [ "userId", "collectionGroup", "largestBatchId" ], Di = [ ...[ ...[ ...[ ...[ "mutationQueues", "mutations", "documentMutations", "remoteDocuments", "targets", "owner", "targetGlobal", "targetDocuments" ], "clientMetadata" ], "remoteDocumentGlobal" ], "collectionParents" ], "bundles", "namedQueries" ], Ci = [ ...Di, "documentOverlays" ], xi = [ "mutationQueues", "mutations", "documentMutations", "remoteDocumentsV14", "targets", "owner", "targetGlobal", "targetDocuments", "clientMetadata", "remoteDocumentGlobal", "collectionParents", "bundles", "namedQueries", "documentOverlays" ], Ni = xi, ki = [ ...Ni, "indexConfiguration", "indexState", "indexEntries" ];

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class Oi extends Rt {
        constructor(t, e) {
            super(), this.ee = t, this.currentSequenceNumber = e;
        }
    }

    function Mi(t, e) {
        const n = K(t);
        return Vt.N(n.ee, e);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A batch of mutations that will be sent as one unit to the backend.
     */ class Fi {
        /**
         * @param batchId - The unique ID of this mutation batch.
         * @param localWriteTime - The original write time of this mutation.
         * @param baseMutations - Mutations that are used to populate the base
         * values when this mutation is applied locally. This can be used to locally
         * overwrite values that are persisted in the remote document cache. Base
         * mutations are never sent to the backend.
         * @param mutations - The user-provided mutations in this mutation batch.
         * User-provided mutations are applied both locally and remotely on the
         * backend.
         */
        constructor(t, e, n, s) {
            this.batchId = t, this.localWriteTime = e, this.baseMutations = n, this.mutations = s;
        }
        /**
         * Applies all the mutations in this MutationBatch to the specified document
         * to compute the state of the remote document
         *
         * @param document - The document to apply mutations to.
         * @param batchResult - The result of applying the MutationBatch to the
         * backend.
         */    applyToRemoteDocument(t, e) {
            const n = e.mutationResults;
            for (let e = 0; e < this.mutations.length; e++) {
                const s = this.mutations[e];
                if (s.key.isEqual(t.key)) {
                    qn(s, t, n[e]);
                }
            }
        }
        /**
         * Computes the local view of a document given all the mutations in this
         * batch.
         *
         * @param document - The document to apply mutations to.
         * @param mutatedFields - Fields that have been updated before applying this mutation batch.
         * @returns A `FieldMask` representing all the fields that are mutated.
         */    applyToLocalView(t, e) {
            // First, apply the base state. This allows us to apply non-idempotent
            // transform against a consistent set of values.
            for (const n of this.baseMutations) n.key.isEqual(t.key) && (e = Kn(n, t, e, this.localWriteTime));
            // Second, apply all user-provided mutations.
                    for (const n of this.mutations) n.key.isEqual(t.key) && (e = Kn(n, t, e, this.localWriteTime));
            return e;
        }
        /**
         * Computes the local view for all provided documents given the mutations in
         * this batch. Returns a `DocumentKey` to `Mutation` map which can be used to
         * replace all the mutation applications.
         */    applyToLocalDocumentSet(t, e) {
            // TODO(mrschmidt): This implementation is O(n^2). If we apply the mutations
            // directly (as done in `applyToLocalView()`), we can reduce the complexity
            // to O(n).
            const n = ls();
            return this.mutations.forEach((s => {
                const i = t.get(s.key), r = i.overlayedDocument;
                // TODO(mutabledocuments): This method should take a MutableDocumentMap
                // and we should remove this cast.
                            let o = this.applyToLocalView(r, i.mutatedFields);
                // Set mutatedFields to null if the document is only from local mutations.
                // This creates a Set or Delete mutation, instead of trying to create a
                // patch mutation as the overlay.
                            o = e.has(s.key) ? null : o;
                const u = Un(r, o);
                null !== u && n.set(s.key, u), r.isValidDocument() || r.convertToNoDocument(ct.min());
            })), n;
        }
        keys() {
            return this.mutations.reduce(((t, e) => t.add(e.key)), ws());
        }
        isEqual(t) {
            return this.batchId === t.batchId && rt(this.mutations, t.mutations, ((t, e) => Qn(t, e))) && rt(this.baseMutations, t.baseMutations, ((t, e) => Qn(t, e)));
        }
    }

    /** The result of applying a mutation batch to the backend. */ class $i {
        constructor(t, e, n, 
        /**
         * A pre-computed mapping from each mutated document to the resulting
         * version.
         */
        s) {
            this.batch = t, this.commitVersion = e, this.mutationResults = n, this.docVersions = s;
        }
        /**
         * Creates a new MutationBatchResult for the given batch and results. There
         * must be one result for each mutation in the batch. This static factory
         * caches a document=&gt;version mapping (docVersions).
         */    static from(t, e, n) {
            U(t.mutations.length === n.length);
            let s = ds;
            const i = t.mutations;
            for (let t = 0; t < i.length; t++) s = s.insert(i[t].key, n[t].version);
            return new $i(t, e, n, s);
        }
    }

    /**
     * @license
     * Copyright 2022 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Representation of an overlay computed by Firestore.
     *
     * Holds information about a mutation and the largest batch id in Firestore when
     * the mutation was created.
     */ class Bi {
        constructor(t, e) {
            this.largestBatchId = t, this.mutation = e;
        }
        getKey() {
            return this.mutation.key;
        }
        isEqual(t) {
            return null !== t && this.mutation === t.mutation;
        }
        toString() {
            return `Overlay{\n      largestBatchId: ${this.largestBatchId},\n      mutation: ${this.mutation.toString()}\n    }`;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An immutable set of metadata that the local store tracks for each target.
     */ class Li {
        constructor(
        /** The target being listened to. */
        t, 
        /**
         * The target ID to which the target corresponds; Assigned by the
         * LocalStore for user listens and by the SyncEngine for limbo watches.
         */
        e, 
        /** The purpose of the target. */
        n, 
        /**
         * The sequence number of the last transaction during which this target data
         * was modified.
         */
        s, 
        /** The latest snapshot version seen for this target. */
        i = ct.min()
        /**
         * The maximum snapshot version at which the associated view
         * contained no limbo documents.
         */ , r = ct.min()
        /**
         * An opaque, server-assigned token that allows watching a target to be
         * resumed after disconnecting without retransmitting all the data that
         * matches the target. The resume token essentially identifies a point in
         * time from which the server should resume sending results.
         */ , o = Jt.EMPTY_BYTE_STRING) {
            this.target = t, this.targetId = e, this.purpose = n, this.sequenceNumber = s, this.snapshotVersion = i, 
            this.lastLimboFreeSnapshotVersion = r, this.resumeToken = o;
        }
        /** Creates a new target data instance with an updated sequence number. */    withSequenceNumber(t) {
            return new Li(this.target, this.targetId, this.purpose, t, this.snapshotVersion, this.lastLimboFreeSnapshotVersion, this.resumeToken);
        }
        /**
         * Creates a new target data instance with an updated resume token and
         * snapshot version.
         */    withResumeToken(t, e) {
            return new Li(this.target, this.targetId, this.purpose, this.sequenceNumber, e, this.lastLimboFreeSnapshotVersion, t);
        }
        /**
         * Creates a new target data instance with an updated last limbo free
         * snapshot version number.
         */    withLastLimboFreeSnapshotVersion(t) {
            return new Li(this.target, this.targetId, this.purpose, this.sequenceNumber, this.snapshotVersion, t, this.resumeToken);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Serializer for values stored in the LocalStore. */ class Ui {
        constructor(t) {
            this.ne = t;
        }
    }

    /** Decodes a remote document from storage locally to a Document. */ function qi(t, e) {
        let n;
        if (e.document) n = Ks(t.ne, e.document, !!e.hasCommittedMutations); else if (e.noDocument) {
            const t = dt.fromSegments(e.noDocument.path), s = ji(e.noDocument.readTime);
            n = xe.newNoDocument(t, s), e.hasCommittedMutations && n.setHasCommittedMutations();
        } else {
            if (!e.unknownDocument) return L();
            {
                const t = dt.fromSegments(e.unknownDocument.path), s = ji(e.unknownDocument.version);
                n = xe.newUnknownDocument(t, s);
            }
        }
        return e.readTime && n.setReadTime(function(t) {
            const e = new ut(t[0], t[1]);
            return ct.fromTimestamp(e);
        }(e.readTime)), n;
    }

    /** Encodes a document for storage locally. */ function Ki(t, e) {
        const n = e.key, s = {
            prefixPath: n.getCollectionPath().popLast().toArray(),
            collectionGroup: n.collectionGroup,
            documentId: n.path.lastSegment(),
            readTime: Gi(e.readTime),
            hasCommittedMutations: e.hasCommittedMutations
        };
        if (e.isFoundDocument()) s.document = function(t, e) {
            return {
                name: Ms(t, e.key),
                fields: e.data.value.mapValue.fields,
                updateTime: Ds(t, e.version.toTimestamp())
            };
        }(t.ne, e); else if (e.isNoDocument()) s.noDocument = {
            path: n.path.toArray(),
            readTime: Qi(e.version)
        }; else {
            if (!e.isUnknownDocument()) return L();
            s.unknownDocument = {
                path: n.path.toArray(),
                version: Qi(e.version)
            };
        }
        return s;
    }

    function Gi(t) {
        const e = t.toTimestamp();
        return [ e.seconds, e.nanoseconds ];
    }

    function Qi(t) {
        const e = t.toTimestamp();
        return {
            seconds: e.seconds,
            nanoseconds: e.nanoseconds
        };
    }

    function ji(t) {
        const e = new ut(t.seconds, t.nanoseconds);
        return ct.fromTimestamp(e);
    }

    /** Encodes a batch of mutations into a DbMutationBatch for local storage. */
    /** Decodes a DbMutationBatch into a MutationBatch */
    function Wi(t, e) {
        const n = (e.baseMutations || []).map((e => Ws(t.ne, e)));
        // Squash old transform mutations into existing patch or set mutations.
        // The replacement of representing `transforms` with `update_transforms`
        // on the SDK means that old `transform` mutations stored in IndexedDB need
        // to be updated to `update_transforms`.
        // TODO(b/174608374): Remove this code once we perform a schema migration.
            for (let t = 0; t < e.mutations.length - 1; ++t) {
            const n = e.mutations[t];
            if (t + 1 < e.mutations.length && void 0 !== e.mutations[t + 1].transform) {
                const s = e.mutations[t + 1];
                n.updateTransforms = s.transform.fieldTransforms, e.mutations.splice(t + 1, 1), 
                ++t;
            }
        }
        const s = e.mutations.map((e => Ws(t.ne, e))), i = ut.fromMillis(e.localWriteTimeMs);
        return new Fi(e.batchId, i, n, s);
    }

    /** Decodes a DbTarget into TargetData */ function zi(t) {
        const e = ji(t.readTime), n = void 0 !== t.lastLimboFreeSnapshotVersion ? ji(t.lastLimboFreeSnapshotVersion) : ct.min();
        let s;
        var i;
        return void 0 !== t.query.documents ? (U(1 === (i = t.query).documents.length), 
        s = ln(rn(Bs(i.documents[0])))) : s = function(t) {
            return ln(Ys(t));
        }(t.query), new Li(s, t.targetId, 0 /* Listen */ , t.lastListenSequenceNumber, e, n, Jt.fromBase64String(t.resumeToken));
    }

    /** Encodes TargetData into a DbTarget for storage locally. */ function Hi(t, e) {
        const n = Qi(e.snapshotVersion), s = Qi(e.lastLimboFreeSnapshotVersion);
        let i;
        i = $e(e.target) ? Hs(t.ne, e.target) : Js(t.ne, e.target);
        // We can't store the resumeToken as a ByteString in IndexedDb, so we
        // convert it to a base64 string for storage.
            const r = e.resumeToken.toBase64();
        // lastListenSequenceNumber is always 0 until we do real GC.
            return {
            targetId: e.targetId,
            canonicalId: Oe(e.target),
            readTime: n,
            resumeToken: r,
            lastListenSequenceNumber: e.sequenceNumber,
            lastLimboFreeSnapshotVersion: s,
            query: i
        };
    }

    /**
     * A helper function for figuring out what kind of query has been stored.
     */
    /**
     * Encodes a `BundledQuery` from bundle proto to a Query object.
     *
     * This reconstructs the original query used to build the bundle being loaded,
     * including features exists only in SDKs (for example: limit-to-last).
     */
    function Ji(t) {
        const e = Ys({
            parent: t.parent,
            structuredQuery: t.structuredQuery
        });
        return "LAST" === t.limitType ? fn(e, e.limit, "L" /* Last */) : e;
    }

    /** Encodes a NamedQuery proto object to a NamedQuery model object. */
    /** Encodes a DbDocumentOverlay object to an Overlay model object. */
    function Yi(t, e) {
        return new Bi(e.largestBatchId, Ws(t.ne, e.overlayMutation));
    }

    /** Decodes an Overlay model object into a DbDocumentOverlay object. */
    /**
     * Returns the DbDocumentOverlayKey corresponding to the given user and
     * document key.
     */
    function Xi(t, e) {
        const n = e.path.lastSegment();
        return [ t, ci(e.path.popLast()), n ];
    }

    function Zi(t, e, n, s) {
        return {
            indexId: t,
            uid: e.uid || "",
            sequenceNumber: n,
            readTime: Qi(s.readTime),
            documentKey: ci(s.documentKey.path),
            largestBatchId: s.largestBatchId
        };
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class tr {
        getBundleMetadata(t, e) {
            return er(t).get(e).next((t => {
                if (t) return {
                    id: (e = t).bundleId,
                    createTime: ji(e.createTime),
                    version: e.version
                };
                /** Encodes a DbBundle to a BundleMetadata object. */
                var e;
                /** Encodes a BundleMetadata to a DbBundle. */        }));
        }
        saveBundleMetadata(t, e) {
            return er(t).put({
                bundleId: (n = e).id,
                createTime: Qi(Ns(n.createTime)),
                version: n.version
            });
            var n;
            /** Encodes a DbNamedQuery to a NamedQuery. */    }
        getNamedQuery(t, e) {
            return nr(t).get(e).next((t => {
                if (t) return {
                    name: (e = t).name,
                    query: Ji(e.bundledQuery),
                    readTime: ji(e.readTime)
                };
                var e;
                /** Encodes a NamedQuery from a bundle proto to a DbNamedQuery. */        }));
        }
        saveNamedQuery(t, e) {
            return nr(t).put(function(t) {
                return {
                    name: t.name,
                    readTime: Qi(Ns(t.readTime)),
                    bundledQuery: t.bundledQuery
                };
            }(e));
        }
    }

    /**
     * Helper to get a typed SimpleDbStore for the bundles object store.
     */ function er(t) {
        return Mi(t, "bundles");
    }

    /**
     * Helper to get a typed SimpleDbStore for the namedQueries object store.
     */ function nr(t) {
        return Mi(t, "namedQueries");
    }

    /**
     * @license
     * Copyright 2022 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Implementation of DocumentOverlayCache using IndexedDb.
     */ class sr {
        /**
         * @param serializer - The document serializer.
         * @param userId - The userId for which we are accessing overlays.
         */
        constructor(t, e) {
            this.wt = t, this.userId = e;
        }
        static se(t, e) {
            const n = e.uid || "";
            return new sr(t, n);
        }
        getOverlay(t, e) {
            return ir(t).get(Xi(this.userId, e)).next((t => t ? Yi(this.wt, t) : null));
        }
        getOverlays(t, e) {
            const n = hs();
            return Pt.forEach(e, (e => this.getOverlay(t, e).next((t => {
                null !== t && n.set(e, t);
            })))).next((() => n));
        }
        saveOverlays(t, e, n) {
            const s = [];
            return n.forEach(((n, i) => {
                const r = new Bi(e, i);
                s.push(this.ie(t, r));
            })), Pt.waitFor(s);
        }
        removeOverlaysForBatchId(t, e, n) {
            const s = new Set;
            // Get the set of unique collection paths.
                    e.forEach((t => s.add(ci(t.getCollectionPath()))));
            const i = [];
            return s.forEach((e => {
                const s = IDBKeyRange.bound([ this.userId, e, n ], [ this.userId, e, n + 1 ], 
                /*lowerOpen=*/ !1, 
                /*upperOpen=*/ !0);
                i.push(ir(t).W("collectionPathOverlayIndex", s));
            })), Pt.waitFor(i);
        }
        getOverlaysForCollection(t, e, n) {
            const s = hs(), i = ci(e), r = IDBKeyRange.bound([ this.userId, i, n ], [ this.userId, i, Number.POSITIVE_INFINITY ], 
            /*lowerOpen=*/ !0);
            return ir(t).K("collectionPathOverlayIndex", r).next((t => {
                for (const e of t) {
                    const t = Yi(this.wt, e);
                    s.set(t.getKey(), t);
                }
                return s;
            }));
        }
        getOverlaysForCollectionGroup(t, e, n, s) {
            const i = hs();
            let r;
            // We want batch IDs larger than `sinceBatchId`, and so the lower bound
            // is not inclusive.
                    const o = IDBKeyRange.bound([ this.userId, e, n ], [ this.userId, e, Number.POSITIVE_INFINITY ], 
            /*lowerOpen=*/ !0);
            return ir(t).J({
                index: "collectionGroupOverlayIndex",
                range: o
            }, ((t, e, n) => {
                // We do not want to return partial batch overlays, even if the size
                // of the result set exceeds the given `count` argument. Therefore, we
                // continue to aggregate results even after the result size exceeds
                // `count` if there are more overlays from the `currentBatchId`.
                const o = Yi(this.wt, e);
                i.size() < s || o.largestBatchId === r ? (i.set(o.getKey(), o), r = o.largestBatchId) : n.done();
            })).next((() => i));
        }
        ie(t, e) {
            return ir(t).put(function(t, e, n) {
                const [s, i, r] = Xi(e, n.mutation.key);
                return {
                    userId: e,
                    collectionPath: i,
                    documentId: r,
                    collectionGroup: n.mutation.key.getCollectionGroup(),
                    largestBatchId: n.largestBatchId,
                    overlayMutation: js(t.ne, n.mutation)
                };
            }(this.wt, this.userId, e));
        }
    }

    /**
     * Helper to get a typed SimpleDbStore for the document overlay object store.
     */ function ir(t) {
        return Mi(t, "documentOverlays");
    }

    /**
     * @license
     * Copyright 2021 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // Note: This code is copied from the backend. Code that is not used by
    // Firestore was removed.
    /** Firestore index value writer.  */
    class rr {
        constructor() {}
        // The write methods below short-circuit writing terminators for values
        // containing a (terminating) truncated value.
        // As an example, consider the resulting encoding for:
        // ["bar", [2, "foo"]] -> (STRING, "bar", TERM, ARRAY, NUMBER, 2, STRING, "foo", TERM, TERM, TERM)
        // ["bar", [2, truncated("foo")]] -> (STRING, "bar", TERM, ARRAY, NUMBER, 2, STRING, "foo", TRUNC)
        // ["bar", truncated(["foo"])] -> (STRING, "bar", TERM, ARRAY. STRING, "foo", TERM, TRUNC)
        /** Writes an index value.  */
        re(t, e) {
            this.oe(t, e), 
            // Write separator to split index values
            // (see go/firestore-storage-format#encodings).
            e.ue();
        }
        oe(t, e) {
            if ("nullValue" in t) this.ce(e, 5); else if ("booleanValue" in t) this.ce(e, 10), 
            e.ae(t.booleanValue ? 1 : 0); else if ("integerValue" in t) this.ce(e, 15), e.ae(Zt(t.integerValue)); else if ("doubleValue" in t) {
                const n = Zt(t.doubleValue);
                isNaN(n) ? this.ce(e, 13) : (this.ce(e, 15), ue(n) ? 
                // -0.0, 0 and 0.0 are all considered the same
                e.ae(0) : e.ae(n));
            } else if ("timestampValue" in t) {
                const n = t.timestampValue;
                this.ce(e, 20), "string" == typeof n ? e.he(n) : (e.he(`${n.seconds || ""}`), e.ae(n.nanos || 0));
            } else if ("stringValue" in t) this.le(t.stringValue, e), this.fe(e); else if ("bytesValue" in t) this.ce(e, 30), 
            e.de(te(t.bytesValue)), this.fe(e); else if ("referenceValue" in t) this._e(t.referenceValue, e); else if ("geoPointValue" in t) {
                const n = t.geoPointValue;
                this.ce(e, 45), e.ae(n.latitude || 0), e.ae(n.longitude || 0);
            } else "mapValue" in t ? be(t) ? this.ce(e, Number.MAX_SAFE_INTEGER) : (this.we(t.mapValue, e), 
            this.fe(e)) : "arrayValue" in t ? (this.me(t.arrayValue, e), this.fe(e)) : L();
        }
        le(t, e) {
            this.ce(e, 25), this.ge(t, e);
        }
        ge(t, e) {
            e.he(t);
        }
        we(t, e) {
            const n = t.fields || {};
            this.ce(e, 55);
            for (const t of Object.keys(n)) this.le(t, e), this.oe(n[t], e);
        }
        me(t, e) {
            const n = t.values || [];
            this.ce(e, 50);
            for (const t of n) this.oe(t, e);
        }
        _e(t, e) {
            this.ce(e, 37);
            dt.fromName(t).path.forEach((t => {
                this.ce(e, 60), this.ge(t, e);
            }));
        }
        ce(t, e) {
            t.ae(e);
        }
        fe(t) {
            // While the SDK does not implement truncation, the truncation marker is
            // used to terminate all variable length values (which are strings, bytes,
            // references, arrays and maps).
            t.ae(2);
        }
    }

    rr.ye = new rr;

    /**
     * Counts the number of zeros in a byte.
     *
     * Visible for testing.
     */
    function or(t) {
        if (0 === t) return 8;
        let e = 0;
        return t >> 4 == 0 && (
        // Test if the first four bits are zero.
        e += 4, t <<= 4), t >> 6 == 0 && (
        // Test if the first two (or next two) bits are zero.
        e += 2, t <<= 2), t >> 7 == 0 && (
        // Test if the remaining bit is zero.
        e += 1), e;
    }

    /** Counts the number of leading zeros in the given byte array. */
    /**
     * Returns the number of bytes required to store "value". Leading zero bytes
     * are skipped.
     */
    function ur(t) {
        // This is just the number of bytes for the unsigned representation of the number.
        const e = 64 - function(t) {
            let e = 0;
            for (let n = 0; n < 8; ++n) {
                const s = or(255 & t[n]);
                if (e += s, 8 !== s) break;
            }
            return e;
        }(t);
        return Math.ceil(e / 8);
    }

    /**
     * OrderedCodeWriter is a minimal-allocation implementation of the writing
     * behavior defined by the backend.
     *
     * The code is ported from its Java counterpart.
     */ class cr {
        constructor() {
            this.buffer = new Uint8Array(1024), this.position = 0;
        }
        pe(t) {
            const e = t[Symbol.iterator]();
            let n = e.next();
            for (;!n.done; ) this.Ie(n.value), n = e.next();
            this.Te();
        }
        Ee(t) {
            const e = t[Symbol.iterator]();
            let n = e.next();
            for (;!n.done; ) this.Ae(n.value), n = e.next();
            this.Re();
        }
        /** Writes utf8 bytes into this byte sequence, ascending. */    be(t) {
            for (const e of t) {
                const t = e.charCodeAt(0);
                if (t < 128) this.Ie(t); else if (t < 2048) this.Ie(960 | t >>> 6), this.Ie(128 | 63 & t); else if (e < "\ud800" || "\udbff" < e) this.Ie(480 | t >>> 12), 
                this.Ie(128 | 63 & t >>> 6), this.Ie(128 | 63 & t); else {
                    const t = e.codePointAt(0);
                    this.Ie(240 | t >>> 18), this.Ie(128 | 63 & t >>> 12), this.Ie(128 | 63 & t >>> 6), 
                    this.Ie(128 | 63 & t);
                }
            }
            this.Te();
        }
        /** Writes utf8 bytes into this byte sequence, descending */    Pe(t) {
            for (const e of t) {
                const t = e.charCodeAt(0);
                if (t < 128) this.Ae(t); else if (t < 2048) this.Ae(960 | t >>> 6), this.Ae(128 | 63 & t); else if (e < "\ud800" || "\udbff" < e) this.Ae(480 | t >>> 12), 
                this.Ae(128 | 63 & t >>> 6), this.Ae(128 | 63 & t); else {
                    const t = e.codePointAt(0);
                    this.Ae(240 | t >>> 18), this.Ae(128 | 63 & t >>> 12), this.Ae(128 | 63 & t >>> 6), 
                    this.Ae(128 | 63 & t);
                }
            }
            this.Re();
        }
        ve(t) {
            // Values are encoded with a single byte length prefix, followed by the
            // actual value in big-endian format with leading 0 bytes dropped.
            const e = this.Ve(t), n = ur(e);
            this.Se(1 + n), this.buffer[this.position++] = 255 & n;
            // Write the length
            for (let t = e.length - n; t < e.length; ++t) this.buffer[this.position++] = 255 & e[t];
        }
        De(t) {
            // Values are encoded with a single byte length prefix, followed by the
            // inverted value in big-endian format with leading 0 bytes dropped.
            const e = this.Ve(t), n = ur(e);
            this.Se(1 + n), this.buffer[this.position++] = ~(255 & n);
            // Write the length
            for (let t = e.length - n; t < e.length; ++t) this.buffer[this.position++] = ~(255 & e[t]);
        }
        /**
         * Writes the "infinity" byte sequence that sorts after all other byte
         * sequences written in ascending order.
         */    Ce() {
            this.xe(255), this.xe(255);
        }
        /**
         * Writes the "infinity" byte sequence that sorts before all other byte
         * sequences written in descending order.
         */    Ne() {
            this.ke(255), this.ke(255);
        }
        /**
         * Resets the buffer such that it is the same as when it was newly
         * constructed.
         */    reset() {
            this.position = 0;
        }
        seed(t) {
            this.Se(t.length), this.buffer.set(t, this.position), this.position += t.length;
        }
        /** Makes a copy of the encoded bytes in this buffer.  */    Oe() {
            return this.buffer.slice(0, this.position);
        }
        /**
         * Encodes `val` into an encoding so that the order matches the IEEE 754
         * floating-point comparison results with the following exceptions:
         *   -0.0 < 0.0
         *   all non-NaN < NaN
         *   NaN = NaN
         */    Ve(t) {
            const e = 
            /** Converts a JavaScript number to a byte array (using big endian encoding). */
            function(t) {
                const e = new DataView(new ArrayBuffer(8));
                return e.setFloat64(0, t, /* littleEndian= */ !1), new Uint8Array(e.buffer);
            }(t), n = 0 != (128 & e[0]);
            // Check if the first bit is set. We use a bit mask since value[0] is
            // encoded as a number from 0 to 255.
                    // Revert the two complement to get natural ordering
            e[0] ^= n ? 255 : 128;
            for (let t = 1; t < e.length; ++t) e[t] ^= n ? 255 : 0;
            return e;
        }
        /** Writes a single byte ascending to the buffer. */    Ie(t) {
            const e = 255 & t;
            0 === e ? (this.xe(0), this.xe(255)) : 255 === e ? (this.xe(255), this.xe(0)) : this.xe(e);
        }
        /** Writes a single byte descending to the buffer.  */    Ae(t) {
            const e = 255 & t;
            0 === e ? (this.ke(0), this.ke(255)) : 255 === e ? (this.ke(255), this.ke(0)) : this.ke(t);
        }
        Te() {
            this.xe(0), this.xe(1);
        }
        Re() {
            this.ke(0), this.ke(1);
        }
        xe(t) {
            this.Se(1), this.buffer[this.position++] = t;
        }
        ke(t) {
            this.Se(1), this.buffer[this.position++] = ~t;
        }
        Se(t) {
            const e = t + this.position;
            if (e <= this.buffer.length) return;
            // Try doubling.
                    let n = 2 * this.buffer.length;
            // Still not big enough? Just allocate the right size.
                    n < e && (n = e);
            // Create the new buffer.
                    const s = new Uint8Array(n);
            s.set(this.buffer), // copy old data
            this.buffer = s;
        }
    }

    class ar {
        constructor(t) {
            this.Me = t;
        }
        de(t) {
            this.Me.pe(t);
        }
        he(t) {
            this.Me.be(t);
        }
        ae(t) {
            this.Me.ve(t);
        }
        ue() {
            this.Me.Ce();
        }
    }

    class hr {
        constructor(t) {
            this.Me = t;
        }
        de(t) {
            this.Me.Ee(t);
        }
        he(t) {
            this.Me.Pe(t);
        }
        ae(t) {
            this.Me.De(t);
        }
        ue() {
            this.Me.Ne();
        }
    }

    /**
     * Implements `DirectionalIndexByteEncoder` using `OrderedCodeWriter` for the
     * actual encoding.
     */ class lr {
        constructor() {
            this.Me = new cr, this.Fe = new ar(this.Me), this.$e = new hr(this.Me);
        }
        seed(t) {
            this.Me.seed(t);
        }
        Be(t) {
            return 0 /* ASCENDING */ === t ? this.Fe : this.$e;
        }
        Oe() {
            return this.Me.Oe();
        }
        reset() {
            this.Me.reset();
        }
    }

    /**
     * @license
     * Copyright 2022 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Represents an index entry saved by the SDK in persisted storage. */ class fr {
        constructor(t, e, n, s) {
            this.indexId = t, this.documentKey = e, this.arrayValue = n, this.directionalValue = s;
        }
        /**
         * Returns an IndexEntry entry that sorts immediately after the current
         * directional value.
         */    Le() {
            const t = this.directionalValue.length, e = 0 === t || 255 === this.directionalValue[t - 1] ? t + 1 : t, n = new Uint8Array(e);
            return n.set(this.directionalValue, 0), e !== t ? n.set([ 0 ], this.directionalValue.length) : ++n[n.length - 1], 
            new fr(this.indexId, this.documentKey, this.arrayValue, n);
        }
    }

    function dr(t, e) {
        let n = t.indexId - e.indexId;
        return 0 !== n ? n : (n = _r(t.arrayValue, e.arrayValue), 0 !== n ? n : (n = _r(t.directionalValue, e.directionalValue), 
        0 !== n ? n : dt.comparator(t.documentKey, e.documentKey)));
    }

    function _r(t, e) {
        for (let n = 0; n < t.length && n < e.length; ++n) {
            const s = t[n] - e[n];
            if (0 !== s) return s;
        }
        return t.length - e.length;
    }

    /**
     * @license
     * Copyright 2022 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A light query planner for Firestore.
     *
     * This class matches a `FieldIndex` against a Firestore Query `Target`. It
     * determines whether a given index can be used to serve the specified target.
     *
     * The following table showcases some possible index configurations:
     *
     * Query                                               | Index
     * -----------------------------------------------------------------------------
     * where('a', '==', 'a').where('b', '==', 'b')         | a ASC, b DESC
     * where('a', '==', 'a').where('b', '==', 'b')         | a ASC
     * where('a', '==', 'a').where('b', '==', 'b')         | b DESC
     * where('a', '>=', 'a').orderBy('a')                  | a ASC
     * where('a', '>=', 'a').orderBy('a', 'desc')          | a DESC
     * where('a', '>=', 'a').orderBy('a').orderBy('b')     | a ASC, b ASC
     * where('a', '>=', 'a').orderBy('a').orderBy('b')     | a ASC
     * where('a', 'array-contains', 'a').orderBy('b')      | a CONTAINS, b ASCENDING
     * where('a', 'array-contains', 'a').orderBy('b')      | a CONTAINS
     */ class wr {
        constructor(t) {
            this.collectionId = null != t.collectionGroup ? t.collectionGroup : t.path.lastSegment(), 
            this.Ue = t.orderBy, this.qe = [];
            for (const e of t.filters) {
                const t = e;
                t.ht() ? this.Ke = t : this.qe.push(t);
            }
        }
        /**
         * Returns whether the index can be used to serve the TargetIndexMatcher's
         * target.
         *
         * An index is considered capable of serving the target when:
         * - The target uses all index segments for its filters and orderBy clauses.
         *   The target can have additional filter and orderBy clauses, but not
         *   fewer.
         * - If an ArrayContains/ArrayContainsAnyfilter is used, the index must also
         *   have a corresponding `CONTAINS` segment.
         * - All directional index segments can be mapped to the target as a series of
         *   equality filters, a single inequality filter and a series of orderBy
         *   clauses.
         * - The segments that represent the equality filters may appear out of order.
         * - The optional segment for the inequality filter must appear after all
         *   equality segments.
         * - The segments that represent that orderBy clause of the target must appear
         *   in order after all equality and inequality segments. Single orderBy
         *   clauses cannot be skipped, but a continuous orderBy suffix may be
         *   omitted.
         */    Ge(t) {
            // If there is an array element, find a matching filter.
            const e = wt(t);
            if (void 0 !== e && !this.Qe(e)) return !1;
            const n = mt(t);
            let s = 0, i = 0;
            // Process all equalities first. Equalities can appear out of order.
            for (;s < n.length && this.Qe(n[s]); ++s) ;
            // If we already have processed all segments, all segments are used to serve
            // the equality filters and we do not need to map any segments to the
            // target's inequality and orderBy clauses.
                    if (s === n.length) return !0;
            // If there is an inequality filter, the next segment must match both the
            // filter and the first orderBy clause.
                    if (void 0 !== this.Ke) {
                const t = n[s];
                if (!this.je(this.Ke, t) || !this.We(this.Ue[i++], t)) return !1;
                ++s;
            }
            // All remaining segments need to represent the prefix of the target's
            // orderBy.
                    for (;s < n.length; ++s) {
                const t = n[s];
                if (i >= this.Ue.length || !this.We(this.Ue[i++], t)) return !1;
            }
            return !0;
        }
        Qe(t) {
            for (const e of this.qe) if (this.je(e, t)) return !0;
            return !1;
        }
        je(t, e) {
            if (void 0 === t || !t.field.isEqual(e.fieldPath)) return !1;
            const n = "array-contains" /* ARRAY_CONTAINS */ === t.op || "array-contains-any" /* ARRAY_CONTAINS_ANY */ === t.op;
            return 2 /* CONTAINS */ === e.kind === n;
        }
        We(t, e) {
            return !!t.field.isEqual(e.fieldPath) && (0 /* ASCENDING */ === e.kind && "asc" /* ASCENDING */ === t.dir || 1 /* DESCENDING */ === e.kind && "desc" /* DESCENDING */ === t.dir);
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An in-memory implementation of IndexManager.
     */ class mr {
        constructor() {
            this.ze = new gr;
        }
        addToCollectionParentIndex(t, e) {
            return this.ze.add(e), Pt.resolve();
        }
        getCollectionParents(t, e) {
            return Pt.resolve(this.ze.getEntries(e));
        }
        addFieldIndex(t, e) {
            // Field indices are not supported with memory persistence.
            return Pt.resolve();
        }
        deleteFieldIndex(t, e) {
            // Field indices are not supported with memory persistence.
            return Pt.resolve();
        }
        getDocumentsMatchingTarget(t, e) {
            // Field indices are not supported with memory persistence.
            return Pt.resolve(null);
        }
        getIndexType(t, e) {
            // Field indices are not supported with memory persistence.
            return Pt.resolve(0 /* NONE */);
        }
        getFieldIndexes(t, e) {
            // Field indices are not supported with memory persistence.
            return Pt.resolve([]);
        }
        getNextCollectionGroupToUpdate(t) {
            // Field indices are not supported with memory persistence.
            return Pt.resolve(null);
        }
        getMinOffset(t, e) {
            return Pt.resolve(Tt.min());
        }
        getMinOffsetFromCollectionGroup(t, e) {
            return Pt.resolve(Tt.min());
        }
        updateCollectionGroup(t, e, n) {
            // Field indices are not supported with memory persistence.
            return Pt.resolve();
        }
        updateIndexEntries(t, e) {
            // Field indices are not supported with memory persistence.
            return Pt.resolve();
        }
    }

    /**
     * Internal implementation of the collection-parent index exposed by MemoryIndexManager.
     * Also used for in-memory caching by IndexedDbIndexManager and initial index population
     * in indexeddb_schema.ts
     */ class gr {
        constructor() {
            this.index = {};
        }
        // Returns false if the entry already existed.
        add(t) {
            const e = t.lastSegment(), n = t.popLast(), s = this.index[e] || new Qt(ht.comparator), i = !s.has(n);
            return this.index[e] = s.add(n), i;
        }
        has(t) {
            const e = t.lastSegment(), n = t.popLast(), s = this.index[e];
            return s && s.has(n);
        }
        getEntries(t) {
            return (this.index[t] || new Qt(ht.comparator)).toArray();
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ const yr = new Uint8Array(0);

    /**
     * A persisted implementation of IndexManager.
     *
     * PORTING NOTE: Unlike iOS and Android, the Web SDK does not memoize index
     * data as it supports multi-tab access.
     */
    class pr {
        constructor(t, e) {
            this.user = t, this.databaseId = e, 
            /**
             * An in-memory copy of the index entries we've already written since the SDK
             * launched. Used to avoid re-writing the same entry repeatedly.
             *
             * This is *NOT* a complete cache of what's in persistence and so can never be
             * used to satisfy reads.
             */
            this.He = new gr, 
            /**
             * Maps from a target to its equivalent list of sub-targets. Each sub-target
             * contains only one term from the target's disjunctive normal form (DNF).
             */
            this.Je = new is((t => Oe(t)), ((t, e) => Fe(t, e))), this.uid = t.uid || "";
        }
        /**
         * Adds a new entry to the collection parent index.
         *
         * Repeated calls for the same collectionPath should be avoided within a
         * transaction as IndexedDbIndexManager only caches writes once a transaction
         * has been committed.
         */    addToCollectionParentIndex(t, e) {
            if (!this.He.has(e)) {
                const n = e.lastSegment(), s = e.popLast();
                t.addOnCommittedListener((() => {
                    // Add the collection to the in memory cache only if the transaction was
                    // successfully committed.
                    this.He.add(e);
                }));
                const i = {
                    collectionId: n,
                    parent: ci(s)
                };
                return Ir(t).put(i);
            }
            return Pt.resolve();
        }
        getCollectionParents(t, e) {
            const n = [], s = IDBKeyRange.bound([ e, "" ], [ ot(e), "" ], 
            /*lowerOpen=*/ !1, 
            /*upperOpen=*/ !0);
            return Ir(t).K(s).next((t => {
                for (const s of t) {
                    // This collectionId guard shouldn't be necessary (and isn't as long
                    // as we're running in a real browser), but there's a bug in
                    // indexeddbshim that breaks our range in our tests running in node:
                    // https://github.com/axemclion/IndexedDBShim/issues/334
                    if (s.collectionId !== e) break;
                    n.push(li(s.parent));
                }
                return n;
            }));
        }
        addFieldIndex(t, e) {
            // TODO(indexing): Verify that the auto-incrementing index ID works in
            // Safari & Firefox.
            const n = Er(t), s = function(t) {
                return {
                    indexId: t.indexId,
                    collectionGroup: t.collectionGroup,
                    fields: t.fields.map((t => [ t.fieldPath.canonicalString(), t.kind ]))
                };
            }(e);
            delete s.indexId;
            // `indexId` is auto-populated by IndexedDb
            const i = n.add(s);
            if (e.indexState) {
                const n = Ar(t);
                return i.next((t => {
                    n.put(Zi(t, this.user, e.indexState.sequenceNumber, e.indexState.offset));
                }));
            }
            return i.next();
        }
        deleteFieldIndex(t, e) {
            const n = Er(t), s = Ar(t), i = Tr(t);
            return n.delete(e.indexId).next((() => s.delete(IDBKeyRange.bound([ e.indexId ], [ e.indexId + 1 ], 
            /*lowerOpen=*/ !1, 
            /*upperOpen=*/ !0)))).next((() => i.delete(IDBKeyRange.bound([ e.indexId ], [ e.indexId + 1 ], 
            /*lowerOpen=*/ !1, 
            /*upperOpen=*/ !0))));
        }
        getDocumentsMatchingTarget(t, e) {
            const n = Tr(t);
            let s = !0;
            const i = new Map;
            return Pt.forEach(this.Ye(e), (e => this.Xe(t, e).next((t => {
                s && (s = !!t), i.set(e, t);
            })))).next((() => {
                if (s) {
                    let t = ws();
                    const s = [];
                    return Pt.forEach(i, ((i, r) => {
                        /** Returns a debug representation of the field index */
                        var o;
                        M("IndexedDbIndexManager", `Using index ${o = i, `id=${o.indexId}|cg=${o.collectionGroup}|f=${o.fields.map((t => `${t.fieldPath}:${t.kind}`)).join(",")}`} to execute ${Oe(e)}`);
                        const u = function(t, e) {
                            const n = wt(e);
                            if (void 0 === n) return null;
                            for (const e of Be(t, n.fieldPath)) switch (e.op) {
                              case "array-contains-any" /* ARRAY_CONTAINS_ANY */ :
                                return e.value.arrayValue.values || [];

                              case "array-contains" /* ARRAY_CONTAINS */ :
                                return [ e.value ];
                                // Remaining filters are not array filters.
                                                    }
                            return null;
                        }
                        /**
     * Returns the list of values that are used in != or NOT_IN filters. Returns
     * `null` if there are no such filters.
     */ (r, i), c = function(t, e) {
                            const n = new Map;
                            for (const s of mt(e)) for (const e of Be(t, s.fieldPath)) switch (e.op) {
                              case "==" /* EQUAL */ :
                              case "in" /* IN */ :
                                // Encode equality prefix, which is encoded in the index value before
                                // the inequality (e.g. `a == 'a' && b != 'b'` is encoded to
                                // `value != 'ab'`).
                                n.set(s.fieldPath.canonicalString(), e.value);
                                break;

                              case "not-in" /* NOT_IN */ :
                              case "!=" /* NOT_EQUAL */ :
                                // NotIn/NotEqual is always a suffix. There cannot be any remaining
                                // segments and hence we can return early here.
                                return n.set(s.fieldPath.canonicalString(), e.value), Array.from(n.values());
                                // Remaining filters cannot be used as notIn bounds.
                                                    }
                            return null;
                        }
                        /**
     * Returns a lower bound of field values that can be used as a starting point to
     * scan the index defined by `fieldIndex`. Returns `MIN_VALUE` if no lower bound
     * exists.
     */ (r, i), a = function(t, e) {
                            const n = [];
                            let s = !0;
                            // For each segment, retrieve a lower bound if there is a suitable filter or
                            // startAt.
                                                    for (const i of mt(e)) {
                                const e = 0 /* ASCENDING */ === i.kind ? Le(t, i.fieldPath, t.startAt) : Ue(t, i.fieldPath, t.startAt);
                                n.push(e.value), s && (s = e.inclusive);
                            }
                            return new Ye(n, s);
                        }
                        /**
     * Returns an upper bound of field values that can be used as an ending point
     * when scanning the index defined by `fieldIndex`. Returns `MAX_VALUE` if no
     * upper bound exists.
     */ (r, i), h = function(t, e) {
                            const n = [];
                            let s = !0;
                            // For each segment, retrieve an upper bound if there is a suitable filter or
                            // endAt.
                                                    for (const i of mt(e)) {
                                const e = 0 /* ASCENDING */ === i.kind ? Ue(t, i.fieldPath, t.endAt) : Le(t, i.fieldPath, t.endAt);
                                n.push(e.value), s && (s = e.inclusive);
                            }
                            return new Ye(n, s);
                        }(r, i), l = this.Ze(i, r, a), f = this.Ze(i, r, h), d = this.tn(i, r, c), _ = this.en(i.indexId, u, l, a.inclusive, f, h.inclusive, d);
                        return Pt.forEach(_, (i => n.j(i, e.limit).next((e => {
                            e.forEach((e => {
                                const n = dt.fromSegments(e.documentKey);
                                t.has(n) || (t = t.add(n), s.push(n));
                            }));
                        }))));
                    })).next((() => s));
                }
                return Pt.resolve(null);
            }));
        }
        Ye(t) {
            let e = this.Je.get(t);
            return e || (
            // TODO(orquery): Implement DNF transform
            e = [ t ], this.Je.set(t, e), e);
        }
        /**
         * Constructs a key range query on `DbIndexEntryStore` that unions all
         * bounds.
         */    en(t, e, n, s, i, r, o) {
            // The number of total index scans we union together. This is similar to a
            // distributed normal form, but adapted for array values. We create a single
            // index range per value in an ARRAY_CONTAINS or ARRAY_CONTAINS_ANY filter
            // combined with the values from the query bounds.
            const u = (null != e ? e.length : 1) * Math.max(n.length, i.length), c = u / (null != e ? e.length : 1), a = [];
            for (let h = 0; h < u; ++h) {
                const u = e ? this.nn(e[h / c]) : yr, l = this.sn(t, u, n[h % c], s), f = this.rn(t, u, i[h % c], r), d = o.map((e => this.sn(t, u, e, 
                /* inclusive= */ !0)));
                a.push(...this.createRange(l, f, d));
            }
            return a;
        }
        /** Generates the lower bound for `arrayValue` and `directionalValue`. */    sn(t, e, n, s) {
            const i = new fr(t, dt.empty(), e, n);
            return s ? i : i.Le();
        }
        /** Generates the upper bound for `arrayValue` and `directionalValue`. */    rn(t, e, n, s) {
            const i = new fr(t, dt.empty(), e, n);
            return s ? i.Le() : i;
        }
        Xe(t, e) {
            const n = new wr(e), s = null != e.collectionGroup ? e.collectionGroup : e.path.lastSegment();
            return this.getFieldIndexes(t, s).next((t => {
                // Return the index with the most number of segments.
                let e = null;
                for (const s of t) {
                    n.Ge(s) && (!e || s.fields.length > e.fields.length) && (e = s);
                }
                return e;
            }));
        }
        getIndexType(t, e) {
            let n = 2 /* FULL */;
            return Pt.forEach(this.Ye(e), (e => this.Xe(t, e).next((t => {
                t ? 0 /* NONE */ !== n && t.fields.length < function(t) {
                    let e = new Qt(ft.comparator), n = !1;
                    for (const s of t.filters) {
                        // TODO(orquery): Use the flattened filters here
                        const t = s;
                        // __name__ is not an explicit segment of any index, so we don't need to
                        // count it.
                                            t.field.isKeyField() || (
                        // ARRAY_CONTAINS or ARRAY_CONTAINS_ANY filters must be counted separately.
                        // For instance, it is possible to have an index for "a ARRAY a ASC". Even
                        // though these are on the same field, they should be counted as two
                        // separate segments in an index.
                        "array-contains" /* ARRAY_CONTAINS */ === t.op || "array-contains-any" /* ARRAY_CONTAINS_ANY */ === t.op ? n = !0 : e = e.add(t.field));
                    }
                    for (const n of t.orderBy) 
                    // __name__ is not an explicit segment of any index, so we don't need to
                    // count it.
                    n.field.isKeyField() || (e = e.add(n.field));
                    return e.size + (n ? 1 : 0);
                }(e) && (n = 1 /* PARTIAL */) : n = 0 /* NONE */;
            })))).next((() => n));
        }
        /**
         * Returns the byte encoded form of the directional values in the field index.
         * Returns `null` if the document does not have all fields specified in the
         * index.
         */    on(t, e) {
            const n = new lr;
            for (const s of mt(t)) {
                const t = e.data.field(s.fieldPath);
                if (null == t) return null;
                const i = n.Be(s.kind);
                rr.ye.re(t, i);
            }
            return n.Oe();
        }
        /** Encodes a single value to the ascending index format. */    nn(t) {
            const e = new lr;
            return rr.ye.re(t, e.Be(0 /* ASCENDING */)), e.Oe();
        }
        /**
         * Returns an encoded form of the document key that sorts based on the key
         * ordering of the field index.
         */    un(t, e) {
            const n = new lr;
            return rr.ye.re(ye(this.databaseId, e), n.Be(function(t) {
                const e = mt(t);
                return 0 === e.length ? 0 /* ASCENDING */ : e[e.length - 1].kind;
            }(t))), n.Oe();
        }
        /**
         * Encodes the given field values according to the specification in `target`.
         * For IN queries, a list of possible values is returned.
         */    tn(t, e, n) {
            if (null === n) return [];
            let s = [];
            s.push(new lr);
            let i = 0;
            for (const r of mt(t)) {
                const t = n[i++];
                for (const n of s) if (this.cn(e, r.fieldPath) && Ie(t)) s = this.an(s, r, t); else {
                    const e = n.Be(r.kind);
                    rr.ye.re(t, e);
                }
            }
            return this.hn(s);
        }
        /**
         * Encodes the given bounds according to the specification in `target`. For IN
         * queries, a list of possible values is returned.
         */    Ze(t, e, n) {
            return this.tn(t, e, n.position);
        }
        /** Returns the byte representation for the provided encoders. */    hn(t) {
            const e = [];
            for (let n = 0; n < t.length; ++n) e[n] = t[n].Oe();
            return e;
        }
        /**
         * Creates a separate encoder for each element of an array.
         *
         * The method appends each value to all existing encoders (e.g. filter("a",
         * "==", "a1").filter("b", "in", ["b1", "b2"]) becomes ["a1,b1", "a1,b2"]). A
         * list of new encoders is returned.
         */    an(t, e, n) {
            const s = [ ...t ], i = [];
            for (const t of n.arrayValue.values || []) for (const n of s) {
                const s = new lr;
                s.seed(n.Oe()), rr.ye.re(t, s.Be(e.kind)), i.push(s);
            }
            return i;
        }
        cn(t, e) {
            return !!t.filters.find((t => t instanceof qe && t.field.isEqual(e) && ("in" /* IN */ === t.op || "not-in" /* NOT_IN */ === t.op)));
        }
        getFieldIndexes(t, e) {
            const n = Er(t), s = Ar(t);
            return (e ? n.K("collectionGroupIndex", IDBKeyRange.bound(e, e)) : n.K()).next((t => {
                const e = [];
                return Pt.forEach(t, (t => s.get([ t.indexId, this.uid ]).next((n => {
                    e.push(function(t, e) {
                        const n = e ? new yt(e.sequenceNumber, new Tt(ji(e.readTime), new dt(li(e.documentKey)), e.largestBatchId)) : yt.empty(), s = t.fields.map((([t, e]) => new gt(ft.fromServerFormat(t), e)));
                        return new _t(t.indexId, t.collectionGroup, s, n);
                    }(t, n));
                })))).next((() => e));
            }));
        }
        getNextCollectionGroupToUpdate(t) {
            return this.getFieldIndexes(t).next((t => 0 === t.length ? null : (t.sort(((t, e) => {
                const n = t.indexState.sequenceNumber - e.indexState.sequenceNumber;
                return 0 !== n ? n : it(t.collectionGroup, e.collectionGroup);
            })), t[0].collectionGroup)));
        }
        updateCollectionGroup(t, e, n) {
            const s = Er(t), i = Ar(t);
            return this.ln(t).next((t => s.K("collectionGroupIndex", IDBKeyRange.bound(e, e)).next((e => Pt.forEach(e, (e => i.put(Zi(e.indexId, this.user, t, n))))))));
        }
        updateIndexEntries(t, e) {
            // Porting Note: `getFieldIndexes()` on Web does not cache index lookups as
            // it could be used across different IndexedDB transactions. As any cached
            // data might be invalidated by other multi-tab clients, we can only trust
            // data within a single IndexedDB transaction. We therefore add a cache
            // here.
            const n = new Map;
            return Pt.forEach(e, ((e, s) => {
                const i = n.get(e.collectionGroup);
                return (i ? Pt.resolve(i) : this.getFieldIndexes(t, e.collectionGroup)).next((i => (n.set(e.collectionGroup, i), 
                Pt.forEach(i, (n => this.fn(t, e, n).next((e => {
                    const i = this.dn(s, n);
                    return e.isEqual(i) ? Pt.resolve() : this._n(t, s, n, e, i);
                })))))));
            }));
        }
        wn(t, e, n, s) {
            return Tr(t).put({
                indexId: s.indexId,
                uid: this.uid,
                arrayValue: s.arrayValue,
                directionalValue: s.directionalValue,
                orderedDocumentKey: this.un(n, e.key),
                documentKey: e.key.path.toArray()
            });
        }
        mn(t, e, n, s) {
            return Tr(t).delete([ s.indexId, this.uid, s.arrayValue, s.directionalValue, this.un(n, e.key), e.key.path.toArray() ]);
        }
        fn(t, e, n) {
            const s = Tr(t);
            let i = new Qt(dr);
            return s.J({
                index: "documentKeyIndex",
                range: IDBKeyRange.only([ n.indexId, this.uid, this.un(n, e) ])
            }, ((t, s) => {
                i = i.add(new fr(n.indexId, e, s.arrayValue, s.directionalValue));
            })).next((() => i));
        }
        /** Creates the index entries for the given document. */    dn(t, e) {
            let n = new Qt(dr);
            const s = this.on(e, t);
            if (null == s) return n;
            const i = wt(e);
            if (null != i) {
                const r = t.data.field(i.fieldPath);
                if (Ie(r)) for (const i of r.arrayValue.values || []) n = n.add(new fr(e.indexId, t.key, this.nn(i), s));
            } else n = n.add(new fr(e.indexId, t.key, yr, s));
            return n;
        }
        /**
         * Updates the index entries for the provided document by deleting entries
         * that are no longer referenced in `newEntries` and adding all newly added
         * entries.
         */    _n(t, e, n, s, i) {
            M("IndexedDbIndexManager", "Updating index entries for document '%s'", e.key);
            const r = [];
            return function(t, e, n, s, i) {
                const r = t.getIterator(), o = e.getIterator();
                let u = Wt(r), c = Wt(o);
                // Walk through the two sets at the same time, using the ordering defined by
                // `comparator`.
                for (;u || c; ) {
                    let t = !1, e = !1;
                    if (u && c) {
                        const s = n(u, c);
                        s < 0 ? 
                        // The element was removed if the next element in our ordered
                        // walkthrough is only in `before`.
                        e = !0 : s > 0 && (
                        // The element was added if the next element in our ordered walkthrough
                        // is only in `after`.
                        t = !0);
                    } else null != u ? e = !0 : t = !0;
                    t ? (s(c), c = Wt(o)) : e ? (i(u), u = Wt(r)) : (u = Wt(r), c = Wt(o));
                }
            }(s, i, dr, (
            /* onAdd= */ s => {
                r.push(this.wn(t, e, n, s));
            }), (
            /* onRemove= */ s => {
                r.push(this.mn(t, e, n, s));
            })), Pt.waitFor(r);
        }
        ln(t) {
            let e = 1;
            return Ar(t).J({
                index: "sequenceNumberIndex",
                reverse: !0,
                range: IDBKeyRange.upperBound([ this.uid, Number.MAX_SAFE_INTEGER ])
            }, ((t, n, s) => {
                s.done(), e = n.sequenceNumber + 1;
            })).next((() => e));
        }
        /**
         * Returns a new set of IDB ranges that splits the existing range and excludes
         * any values that match the `notInValue` from these ranges. As an example,
         * '[foo > 2 && foo != 3]` becomes  `[foo > 2 && < 3, foo > 3]`.
         */    createRange(t, e, n) {
            // The notIn values need to be sorted and unique so that we can return a
            // sorted set of non-overlapping ranges.
            n = n.sort(((t, e) => dr(t, e))).filter(((t, e, n) => !e || 0 !== dr(t, n[e - 1])));
            const s = [];
            s.push(t);
            for (const i of n) {
                const n = dr(i, t), r = dr(i, e);
                if (0 === n) 
                // `notInValue` is the lower bound. We therefore need to raise the bound
                // to the next value.
                s[0] = t.Le(); else if (n > 0 && r < 0) 
                // `notInValue` is in the middle of the range
                s.push(i), s.push(i.Le()); else if (r > 0) 
                // `notInValue` (and all following values) are out of the range
                break;
            }
            s.push(e);
            const i = [];
            for (let t = 0; t < s.length; t += 2) i.push(IDBKeyRange.bound([ s[t].indexId, this.uid, s[t].arrayValue, s[t].directionalValue, yr, [] ], [ s[t + 1].indexId, this.uid, s[t + 1].arrayValue, s[t + 1].directionalValue, yr, [] ]));
            return i;
        }
        getMinOffsetFromCollectionGroup(t, e) {
            return this.getFieldIndexes(t, e).next(Rr);
        }
        getMinOffset(t, e) {
            return Pt.mapArray(this.Ye(e), (e => this.Xe(t, e).next((t => t || L())))).next(Rr);
        }
    }

    /**
     * Helper to get a typed SimpleDbStore for the collectionParents
     * document store.
     */ function Ir(t) {
        return Mi(t, "collectionParents");
    }

    /**
     * Helper to get a typed SimpleDbStore for the index entry object store.
     */ function Tr(t) {
        return Mi(t, "indexEntries");
    }

    /**
     * Helper to get a typed SimpleDbStore for the index configuration object store.
     */ function Er(t) {
        return Mi(t, "indexConfiguration");
    }

    /**
     * Helper to get a typed SimpleDbStore for the index state object store.
     */ function Ar(t) {
        return Mi(t, "indexState");
    }

    function Rr(t) {
        U(0 !== t.length);
        let e = t[0].indexState.offset, n = e.largestBatchId;
        for (let s = 1; s < t.length; s++) {
            const i = t[s].indexState.offset;
            Et(i, e) < 0 && (e = i), n < i.largestBatchId && (n = i.largestBatchId);
        }
        return new Tt(e.readTime, e.documentKey, n);
    }

    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ const br = {
        didRun: !1,
        sequenceNumbersCollected: 0,
        targetsRemoved: 0,
        documentsRemoved: 0
    };

    class Pr {
        constructor(
        // When we attempt to collect, we will only do so if the cache size is greater than this
        // threshold. Passing `COLLECTION_DISABLED` here will cause collection to always be skipped.
        t, 
        // The percentage of sequence numbers that we will attempt to collect
        e, 
        // A cap on the total number of sequence numbers that will be collected. This prevents
        // us from collecting a huge number of sequence numbers if the cache has grown very large.
        n) {
            this.cacheSizeCollectionThreshold = t, this.percentileToCollect = e, this.maximumSequenceNumbersToCollect = n;
        }
        static withCacheSize(t) {
            return new Pr(t, Pr.DEFAULT_COLLECTION_PERCENTILE, Pr.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT);
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Delete a mutation batch and the associated document mutations.
     * @returns A PersistencePromise of the document mutations that were removed.
     */
    function vr(t, e, n) {
        const s = t.store("mutations"), i = t.store("documentMutations"), r = [], o = IDBKeyRange.only(n.batchId);
        let u = 0;
        const c = s.J({
            range: o
        }, ((t, e, n) => (u++, n.delete())));
        r.push(c.next((() => {
            U(1 === u);
        })));
        const a = [];
        for (const t of n.mutations) {
            const s = _i(e, t.key.path, n.batchId);
            r.push(i.delete(s)), a.push(t.key);
        }
        return Pt.waitFor(r).next((() => a));
    }

    /**
     * Returns an approximate size for the given document.
     */ function Vr(t) {
        if (!t) return 0;
        let e;
        if (t.document) e = t.document; else if (t.unknownDocument) e = t.unknownDocument; else {
            if (!t.noDocument) throw L();
            e = t.noDocument;
        }
        return JSON.stringify(e).length;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** A mutation queue for a specific user, backed by IndexedDB. */ Pr.DEFAULT_COLLECTION_PERCENTILE = 10, 
    Pr.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT = 1e3, Pr.DEFAULT = new Pr(41943040, Pr.DEFAULT_COLLECTION_PERCENTILE, Pr.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT), 
    Pr.DISABLED = new Pr(-1, 0, 0);

    class Sr {
        constructor(
        /**
         * The normalized userId (e.g. null UID => "" userId) used to store /
         * retrieve mutations.
         */
        t, e, n, s) {
            this.userId = t, this.wt = e, this.indexManager = n, this.referenceDelegate = s, 
            /**
             * Caches the document keys for pending mutation batches. If the mutation
             * has been removed from IndexedDb, the cached value may continue to
             * be used to retrieve the batch's document keys. To remove a cached value
             * locally, `removeCachedMutationKeys()` should be invoked either directly
             * or through `removeMutationBatches()`.
             *
             * With multi-tab, when the primary client acknowledges or rejects a mutation,
             * this cache is used by secondary clients to invalidate the local
             * view of the documents that were previously affected by the mutation.
             */
            // PORTING NOTE: Multi-tab only.
            this.gn = {};
        }
        /**
         * Creates a new mutation queue for the given user.
         * @param user - The user for which to create a mutation queue.
         * @param serializer - The serializer to use when persisting to IndexedDb.
         */    static se(t, e, n, s) {
            // TODO(mcg): Figure out what constraints there are on userIDs
            // In particular, are there any reserved characters? are empty ids allowed?
            // For the moment store these together in the same mutations table assuming
            // that empty userIDs aren't allowed.
            U("" !== t.uid);
            const i = t.isAuthenticated() ? t.uid : "";
            return new Sr(i, e, n, s);
        }
        checkEmpty(t) {
            let e = !0;
            const n = IDBKeyRange.bound([ this.userId, Number.NEGATIVE_INFINITY ], [ this.userId, Number.POSITIVE_INFINITY ]);
            return Cr(t).J({
                index: "userMutationsIndex",
                range: n
            }, ((t, n, s) => {
                e = !1, s.done();
            })).next((() => e));
        }
        addMutationBatch(t, e, n, s) {
            const i = xr(t), r = Cr(t);
            // The IndexedDb implementation in Chrome (and Firefox) does not handle
            // compound indices that include auto-generated keys correctly. To ensure
            // that the index entry is added correctly in all browsers, we perform two
            // writes: The first write is used to retrieve the next auto-generated Batch
            // ID, and the second write populates the index and stores the actual
            // mutation batch.
            // See: https://bugs.chromium.org/p/chromium/issues/detail?id=701972
            // We write an empty object to obtain key
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return r.add({}).next((o => {
                U("number" == typeof o);
                const u = new Fi(o, e, n, s), c = function(t, e, n) {
                    const s = n.baseMutations.map((e => js(t.ne, e))), i = n.mutations.map((e => js(t.ne, e)));
                    return {
                        userId: e,
                        batchId: n.batchId,
                        localWriteTimeMs: n.localWriteTime.toMillis(),
                        baseMutations: s,
                        mutations: i
                    };
                }(this.wt, this.userId, u), a = [];
                let h = new Qt(((t, e) => it(t.canonicalString(), e.canonicalString())));
                for (const t of s) {
                    const e = _i(this.userId, t.key.path, o);
                    h = h.add(t.key.path.popLast()), a.push(r.put(c)), a.push(i.put(e, wi));
                }
                return h.forEach((e => {
                    a.push(this.indexManager.addToCollectionParentIndex(t, e));
                })), t.addOnCommittedListener((() => {
                    this.gn[o] = u.keys();
                })), Pt.waitFor(a).next((() => u));
            }));
        }
        lookupMutationBatch(t, e) {
            return Cr(t).get(e).next((t => t ? (U(t.userId === this.userId), Wi(this.wt, t)) : null));
        }
        /**
         * Returns the document keys for the mutation batch with the given batchId.
         * For primary clients, this method returns `null` after
         * `removeMutationBatches()` has been called. Secondary clients return a
         * cached result until `removeCachedMutationKeys()` is invoked.
         */
        // PORTING NOTE: Multi-tab only.
        yn(t, e) {
            return this.gn[e] ? Pt.resolve(this.gn[e]) : this.lookupMutationBatch(t, e).next((t => {
                if (t) {
                    const n = t.keys();
                    return this.gn[e] = n, n;
                }
                return null;
            }));
        }
        getNextMutationBatchAfterBatchId(t, e) {
            const n = e + 1, s = IDBKeyRange.lowerBound([ this.userId, n ]);
            let i = null;
            return Cr(t).J({
                index: "userMutationsIndex",
                range: s
            }, ((t, e, s) => {
                e.userId === this.userId && (U(e.batchId >= n), i = Wi(this.wt, e)), s.done();
            })).next((() => i));
        }
        getHighestUnacknowledgedBatchId(t) {
            const e = IDBKeyRange.upperBound([ this.userId, Number.POSITIVE_INFINITY ]);
            let n = -1;
            return Cr(t).J({
                index: "userMutationsIndex",
                range: e,
                reverse: !0
            }, ((t, e, s) => {
                n = e.batchId, s.done();
            })).next((() => n));
        }
        getAllMutationBatches(t) {
            const e = IDBKeyRange.bound([ this.userId, -1 ], [ this.userId, Number.POSITIVE_INFINITY ]);
            return Cr(t).K("userMutationsIndex", e).next((t => t.map((t => Wi(this.wt, t)))));
        }
        getAllMutationBatchesAffectingDocumentKey(t, e) {
            // Scan the document-mutation index starting with a prefix starting with
            // the given documentKey.
            const n = di(this.userId, e.path), s = IDBKeyRange.lowerBound(n), i = [];
            return xr(t).J({
                range: s
            }, ((n, s, r) => {
                const [o, u, c] = n, a = li(u);
                // Only consider rows matching exactly the specific key of
                // interest. Note that because we order by path first, and we
                // order terminators before path separators, we'll encounter all
                // the index rows for documentKey contiguously. In particular, all
                // the rows for documentKey will occur before any rows for
                // documents nested in a subcollection beneath documentKey so we
                // can stop as soon as we hit any such row.
                            if (o === this.userId && e.path.isEqual(a)) 
                // Look up the mutation batch in the store.
                return Cr(t).get(c).next((t => {
                    if (!t) throw L();
                    U(t.userId === this.userId), i.push(Wi(this.wt, t));
                }));
                r.done();
            })).next((() => i));
        }
        getAllMutationBatchesAffectingDocumentKeys(t, e) {
            let n = new Qt(it);
            const s = [];
            return e.forEach((e => {
                const i = di(this.userId, e.path), r = IDBKeyRange.lowerBound(i), o = xr(t).J({
                    range: r
                }, ((t, s, i) => {
                    const [r, o, u] = t, c = li(o);
                    // Only consider rows matching exactly the specific key of
                    // interest. Note that because we order by path first, and we
                    // order terminators before path separators, we'll encounter all
                    // the index rows for documentKey contiguously. In particular, all
                    // the rows for documentKey will occur before any rows for
                    // documents nested in a subcollection beneath documentKey so we
                    // can stop as soon as we hit any such row.
                                    r === this.userId && e.path.isEqual(c) ? n = n.add(u) : i.done();
                }));
                s.push(o);
            })), Pt.waitFor(s).next((() => this.pn(t, n)));
        }
        getAllMutationBatchesAffectingQuery(t, e) {
            const n = e.path, s = n.length + 1, i = di(this.userId, n), r = IDBKeyRange.lowerBound(i);
            // Collect up unique batchIDs encountered during a scan of the index. Use a
            // SortedSet to accumulate batch IDs so they can be traversed in order in a
            // scan of the main table.
            let o = new Qt(it);
            return xr(t).J({
                range: r
            }, ((t, e, i) => {
                const [r, u, c] = t, a = li(u);
                r === this.userId && n.isPrefixOf(a) ? 
                // Rows with document keys more than one segment longer than the
                // query path can't be matches. For example, a query on 'rooms'
                // can't match the document /rooms/abc/messages/xyx.
                // TODO(mcg): we'll need a different scanner when we implement
                // ancestor queries.
                a.length === s && (o = o.add(c)) : i.done();
            })).next((() => this.pn(t, o)));
        }
        pn(t, e) {
            const n = [], s = [];
            // TODO(rockwood): Implement this using iterate.
            return e.forEach((e => {
                s.push(Cr(t).get(e).next((t => {
                    if (null === t) throw L();
                    U(t.userId === this.userId), n.push(Wi(this.wt, t));
                })));
            })), Pt.waitFor(s).next((() => n));
        }
        removeMutationBatch(t, e) {
            return vr(t.ee, this.userId, e).next((n => (t.addOnCommittedListener((() => {
                this.In(e.batchId);
            })), Pt.forEach(n, (e => this.referenceDelegate.markPotentiallyOrphaned(t, e))))));
        }
        /**
         * Clears the cached keys for a mutation batch. This method should be
         * called by secondary clients after they process mutation updates.
         *
         * Note that this method does not have to be called from primary clients as
         * the corresponding cache entries are cleared when an acknowledged or
         * rejected batch is removed from the mutation queue.
         */
        // PORTING NOTE: Multi-tab only
        In(t) {
            delete this.gn[t];
        }
        performConsistencyCheck(t) {
            return this.checkEmpty(t).next((e => {
                if (!e) return Pt.resolve();
                // Verify that there are no entries in the documentMutations index if
                // the queue is empty.
                            const n = IDBKeyRange.lowerBound([ this.userId ]);
                const s = [];
                return xr(t).J({
                    range: n
                }, ((t, e, n) => {
                    if (t[0] === this.userId) {
                        const e = li(t[1]);
                        s.push(e);
                    } else n.done();
                })).next((() => {
                    U(0 === s.length);
                }));
            }));
        }
        containsKey(t, e) {
            return Dr(t, this.userId, e);
        }
        // PORTING NOTE: Multi-tab only (state is held in memory in other clients).
        /** Returns the mutation queue's metadata from IndexedDb. */
        Tn(t) {
            return Nr(t).get(this.userId).next((t => t || {
                userId: this.userId,
                lastAcknowledgedBatchId: -1,
                lastStreamToken: ""
            }));
        }
    }

    /**
     * @returns true if the mutation queue for the given user contains a pending
     *         mutation for the given key.
     */ function Dr(t, e, n) {
        const s = di(e, n.path), i = s[1], r = IDBKeyRange.lowerBound(s);
        let o = !1;
        return xr(t).J({
            range: r,
            H: !0
        }, ((t, n, s) => {
            const [r, u, /*batchID*/ c] = t;
            r === e && u === i && (o = !0), s.done();
        })).next((() => o));
    }

    /** Returns true if any mutation queue contains the given document. */
    /**
     * Helper to get a typed SimpleDbStore for the mutations object store.
     */
    function Cr(t) {
        return Mi(t, "mutations");
    }

    /**
     * Helper to get a typed SimpleDbStore for the mutationQueues object store.
     */ function xr(t) {
        return Mi(t, "documentMutations");
    }

    /**
     * Helper to get a typed SimpleDbStore for the mutationQueues object store.
     */ function Nr(t) {
        return Mi(t, "mutationQueues");
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Offset to ensure non-overlapping target ids. */
    /**
     * Generates monotonically increasing target IDs for sending targets to the
     * watch stream.
     *
     * The client constructs two generators, one for the target cache, and one for
     * for the sync engine (to generate limbo documents targets). These
     * generators produce non-overlapping IDs (by using even and odd IDs
     * respectively).
     *
     * By separating the target ID space, the query cache can generate target IDs
     * that persist across client restarts, while sync engine can independently
     * generate in-memory target IDs that are transient and can be reused after a
     * restart.
     */
    class kr {
        constructor(t) {
            this.En = t;
        }
        next() {
            return this.En += 2, this.En;
        }
        static An() {
            // The target cache generator must return '2' in its first call to `next()`
            // as there is no differentiation in the protocol layer between an unset
            // number and the number '0'. If we were to sent a target with target ID
            // '0', the backend would consider it unset and replace it with its own ID.
            return new kr(0);
        }
        static Rn() {
            // Sync engine assigns target IDs for limbo document detection.
            return new kr(-1);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class Or {
        constructor(t, e) {
            this.referenceDelegate = t, this.wt = e;
        }
        // PORTING NOTE: We don't cache global metadata for the target cache, since
        // some of it (in particular `highestTargetId`) can be modified by secondary
        // tabs. We could perhaps be more granular (and e.g. still cache
        // `lastRemoteSnapshotVersion` in memory) but for simplicity we currently go
        // to IndexedDb whenever we need to read metadata. We can revisit if it turns
        // out to have a meaningful performance impact.
        allocateTargetId(t) {
            return this.bn(t).next((e => {
                const n = new kr(e.highestTargetId);
                return e.highestTargetId = n.next(), this.Pn(t, e).next((() => e.highestTargetId));
            }));
        }
        getLastRemoteSnapshotVersion(t) {
            return this.bn(t).next((t => ct.fromTimestamp(new ut(t.lastRemoteSnapshotVersion.seconds, t.lastRemoteSnapshotVersion.nanoseconds))));
        }
        getHighestSequenceNumber(t) {
            return this.bn(t).next((t => t.highestListenSequenceNumber));
        }
        setTargetsMetadata(t, e, n) {
            return this.bn(t).next((s => (s.highestListenSequenceNumber = e, n && (s.lastRemoteSnapshotVersion = n.toTimestamp()), 
            e > s.highestListenSequenceNumber && (s.highestListenSequenceNumber = e), this.Pn(t, s))));
        }
        addTargetData(t, e) {
            return this.vn(t, e).next((() => this.bn(t).next((n => (n.targetCount += 1, this.Vn(e, n), 
            this.Pn(t, n))))));
        }
        updateTargetData(t, e) {
            return this.vn(t, e);
        }
        removeTargetData(t, e) {
            return this.removeMatchingKeysForTargetId(t, e.targetId).next((() => Mr(t).delete(e.targetId))).next((() => this.bn(t))).next((e => (U(e.targetCount > 0), 
            e.targetCount -= 1, this.Pn(t, e))));
        }
        /**
         * Drops any targets with sequence number less than or equal to the upper bound, excepting those
         * present in `activeTargetIds`. Document associations for the removed targets are also removed.
         * Returns the number of targets removed.
         */    removeTargets(t, e, n) {
            let s = 0;
            const i = [];
            return Mr(t).J(((r, o) => {
                const u = zi(o);
                u.sequenceNumber <= e && null === n.get(u.targetId) && (s++, i.push(this.removeTargetData(t, u)));
            })).next((() => Pt.waitFor(i))).next((() => s));
        }
        /**
         * Call provided function with each `TargetData` that we have cached.
         */    forEachTarget(t, e) {
            return Mr(t).J(((t, n) => {
                const s = zi(n);
                e(s);
            }));
        }
        bn(t) {
            return Fr(t).get("targetGlobalKey").next((t => (U(null !== t), t)));
        }
        Pn(t, e) {
            return Fr(t).put("targetGlobalKey", e);
        }
        vn(t, e) {
            return Mr(t).put(Hi(this.wt, e));
        }
        /**
         * In-place updates the provided metadata to account for values in the given
         * TargetData. Saving is done separately. Returns true if there were any
         * changes to the metadata.
         */    Vn(t, e) {
            let n = !1;
            return t.targetId > e.highestTargetId && (e.highestTargetId = t.targetId, n = !0), 
            t.sequenceNumber > e.highestListenSequenceNumber && (e.highestListenSequenceNumber = t.sequenceNumber, 
            n = !0), n;
        }
        getTargetCount(t) {
            return this.bn(t).next((t => t.targetCount));
        }
        getTargetData(t, e) {
            // Iterating by the canonicalId may yield more than one result because
            // canonicalId values are not required to be unique per target. This query
            // depends on the queryTargets index to be efficient.
            const n = Oe(e), s = IDBKeyRange.bound([ n, Number.NEGATIVE_INFINITY ], [ n, Number.POSITIVE_INFINITY ]);
            let i = null;
            return Mr(t).J({
                range: s,
                index: "queryTargetsIndex"
            }, ((t, n, s) => {
                const r = zi(n);
                // After finding a potential match, check that the target is
                // actually equal to the requested target.
                            Fe(e, r.target) && (i = r, s.done());
            })).next((() => i));
        }
        addMatchingKeys(t, e, n) {
            // PORTING NOTE: The reverse index (documentsTargets) is maintained by
            // IndexedDb.
            const s = [], i = $r(t);
            return e.forEach((e => {
                const r = ci(e.path);
                s.push(i.put({
                    targetId: n,
                    path: r
                })), s.push(this.referenceDelegate.addReference(t, n, e));
            })), Pt.waitFor(s);
        }
        removeMatchingKeys(t, e, n) {
            // PORTING NOTE: The reverse index (documentsTargets) is maintained by
            // IndexedDb.
            const s = $r(t);
            return Pt.forEach(e, (e => {
                const i = ci(e.path);
                return Pt.waitFor([ s.delete([ n, i ]), this.referenceDelegate.removeReference(t, n, e) ]);
            }));
        }
        removeMatchingKeysForTargetId(t, e) {
            const n = $r(t), s = IDBKeyRange.bound([ e ], [ e + 1 ], 
            /*lowerOpen=*/ !1, 
            /*upperOpen=*/ !0);
            return n.delete(s);
        }
        getMatchingKeysForTargetId(t, e) {
            const n = IDBKeyRange.bound([ e ], [ e + 1 ], 
            /*lowerOpen=*/ !1, 
            /*upperOpen=*/ !0), s = $r(t);
            let i = ws();
            return s.J({
                range: n,
                H: !0
            }, ((t, e, n) => {
                const s = li(t[1]), r = new dt(s);
                i = i.add(r);
            })).next((() => i));
        }
        containsKey(t, e) {
            const n = ci(e.path), s = IDBKeyRange.bound([ n ], [ ot(n) ], 
            /*lowerOpen=*/ !1, 
            /*upperOpen=*/ !0);
            let i = 0;
            return $r(t).J({
                index: "documentTargetsIndex",
                H: !0,
                range: s
            }, (([t, e], n, s) => {
                // Having a sentinel row for a document does not count as containing that document;
                // For the target cache, containing the document means the document is part of some
                // target.
                0 !== t && (i++, s.done());
            })).next((() => i > 0));
        }
        /**
         * Looks up a TargetData entry by target ID.
         *
         * @param targetId - The target ID of the TargetData entry to look up.
         * @returns The cached TargetData entry, or null if the cache has no entry for
         * the target.
         */
        // PORTING NOTE: Multi-tab only.
        te(t, e) {
            return Mr(t).get(e).next((t => t ? zi(t) : null));
        }
    }

    /**
     * Helper to get a typed SimpleDbStore for the queries object store.
     */ function Mr(t) {
        return Mi(t, "targets");
    }

    /**
     * Helper to get a typed SimpleDbStore for the target globals object store.
     */ function Fr(t) {
        return Mi(t, "targetGlobal");
    }

    /**
     * Helper to get a typed SimpleDbStore for the document target object store.
     */ function $r(t) {
        return Mi(t, "targetDocuments");
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ function Br([t, e], [n, s]) {
        const i = it(t, n);
        return 0 === i ? it(e, s) : i;
    }

    /**
     * Used to calculate the nth sequence number. Keeps a rolling buffer of the
     * lowest n values passed to `addElement`, and finally reports the largest of
     * them in `maxValue`.
     */ class Lr {
        constructor(t) {
            this.Sn = t, this.buffer = new Qt(Br), this.Dn = 0;
        }
        Cn() {
            return ++this.Dn;
        }
        xn(t) {
            const e = [ t, this.Cn() ];
            if (this.buffer.size < this.Sn) this.buffer = this.buffer.add(e); else {
                const t = this.buffer.last();
                Br(e, t) < 0 && (this.buffer = this.buffer.delete(t).add(e));
            }
        }
        get maxValue() {
            // Guaranteed to be non-empty. If we decide we are not collecting any
            // sequence numbers, nthSequenceNumber below short-circuits. If we have
            // decided that we are collecting n sequence numbers, it's because n is some
            // percentage of the existing sequence numbers. That means we should never
            // be in a situation where we are collecting sequence numbers but don't
            // actually have any.
            return this.buffer.last()[0];
        }
    }

    /**
     * This class is responsible for the scheduling of LRU garbage collection. It handles checking
     * whether or not GC is enabled, as well as which delay to use before the next run.
     */ class Ur {
        constructor(t, e, n) {
            this.garbageCollector = t, this.asyncQueue = e, this.localStore = n, this.Nn = null;
        }
        start() {
            -1 !== this.garbageCollector.params.cacheSizeCollectionThreshold && this.kn(6e4);
        }
        stop() {
            this.Nn && (this.Nn.cancel(), this.Nn = null);
        }
        get started() {
            return null !== this.Nn;
        }
        kn(t) {
            M("LruGarbageCollector", `Garbage collection scheduled in ${t}ms`), this.Nn = this.asyncQueue.enqueueAfterDelay("lru_garbage_collection" /* LruGarbageCollection */ , t, (async () => {
                this.Nn = null;
                try {
                    await this.localStore.collectGarbage(this.garbageCollector);
                } catch (t) {
                    Ct(t) ? M("LruGarbageCollector", "Ignoring IndexedDB error during garbage collection: ", t) : await bt(t);
                }
                await this.kn(3e5);
            }));
        }
    }

    /** Implements the steps for LRU garbage collection. */ class qr {
        constructor(t, e) {
            this.On = t, this.params = e;
        }
        calculateTargetCount(t, e) {
            return this.On.Mn(t).next((t => Math.floor(e / 100 * t)));
        }
        nthSequenceNumber(t, e) {
            if (0 === e) return Pt.resolve($t.ot);
            const n = new Lr(e);
            return this.On.forEachTarget(t, (t => n.xn(t.sequenceNumber))).next((() => this.On.Fn(t, (t => n.xn(t))))).next((() => n.maxValue));
        }
        removeTargets(t, e, n) {
            return this.On.removeTargets(t, e, n);
        }
        removeOrphanedDocuments(t, e) {
            return this.On.removeOrphanedDocuments(t, e);
        }
        collect(t, e) {
            return -1 === this.params.cacheSizeCollectionThreshold ? (M("LruGarbageCollector", "Garbage collection skipped; disabled"), 
            Pt.resolve(br)) : this.getCacheSize(t).next((n => n < this.params.cacheSizeCollectionThreshold ? (M("LruGarbageCollector", `Garbage collection skipped; Cache size ${n} is lower than threshold ${this.params.cacheSizeCollectionThreshold}`), 
            br) : this.$n(t, e)));
        }
        getCacheSize(t) {
            return this.On.getCacheSize(t);
        }
        $n(t, e) {
            let n, s, i, r, o, c, a;
            const h = Date.now();
            return this.calculateTargetCount(t, this.params.percentileToCollect).next((e => (
            // Cap at the configured max
            e > this.params.maximumSequenceNumbersToCollect ? (M("LruGarbageCollector", `Capping sequence numbers to collect down to the maximum of ${this.params.maximumSequenceNumbersToCollect} from ${e}`), 
            s = this.params.maximumSequenceNumbersToCollect) : s = e, r = Date.now(), this.nthSequenceNumber(t, s)))).next((s => (n = s, 
            o = Date.now(), this.removeTargets(t, n, e)))).next((e => (i = e, c = Date.now(), 
            this.removeOrphanedDocuments(t, n)))).next((t => {
                if (a = Date.now(), k() <= LogLevel.DEBUG) {
                    M("LruGarbageCollector", `LRU Garbage Collection\n\tCounted targets in ${r - h}ms\n\tDetermined least recently used ${s} in ` + (o - r) + "ms\n" + `\tRemoved ${i} targets in ` + (c - o) + "ms\n" + `\tRemoved ${t} documents in ` + (a - c) + "ms\n" + `Total Duration: ${a - h}ms`);
                }
                return Pt.resolve({
                    didRun: !0,
                    sequenceNumbersCollected: s,
                    targetsRemoved: i,
                    documentsRemoved: t
                });
            }));
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Provides LRU functionality for IndexedDB persistence. */
    class Kr {
        constructor(t, e) {
            this.db = t, this.garbageCollector = function(t, e) {
                return new qr(t, e);
            }(this, e);
        }
        Mn(t) {
            const e = this.Bn(t);
            return this.db.getTargetCache().getTargetCount(t).next((t => e.next((e => t + e))));
        }
        Bn(t) {
            let e = 0;
            return this.Fn(t, (t => {
                e++;
            })).next((() => e));
        }
        forEachTarget(t, e) {
            return this.db.getTargetCache().forEachTarget(t, e);
        }
        Fn(t, e) {
            return this.Ln(t, ((t, n) => e(n)));
        }
        addReference(t, e, n) {
            return Gr(t, n);
        }
        removeReference(t, e, n) {
            return Gr(t, n);
        }
        removeTargets(t, e, n) {
            return this.db.getTargetCache().removeTargets(t, e, n);
        }
        markPotentiallyOrphaned(t, e) {
            return Gr(t, e);
        }
        /**
         * Returns true if anything would prevent this document from being garbage
         * collected, given that the document in question is not present in any
         * targets and has a sequence number less than or equal to the upper bound for
         * the collection run.
         */    Un(t, e) {
            return function(t, e) {
                let n = !1;
                return Nr(t).Y((s => Dr(t, s, e).next((t => (t && (n = !0), Pt.resolve(!t)))))).next((() => n));
            }(t, e);
        }
        removeOrphanedDocuments(t, e) {
            const n = this.db.getRemoteDocumentCache().newChangeBuffer(), s = [];
            let i = 0;
            return this.Ln(t, ((r, o) => {
                if (o <= e) {
                    const e = this.Un(t, r).next((e => {
                        if (!e) 
                        // Our size accounting requires us to read all documents before
                        // removing them.
                        return i++, n.getEntry(t, r).next((() => (n.removeEntry(r, ct.min()), $r(t).delete([ 0, ci(r.path) ]))));
                    }));
                    s.push(e);
                }
            })).next((() => Pt.waitFor(s))).next((() => n.apply(t))).next((() => i));
        }
        removeTarget(t, e) {
            const n = e.withSequenceNumber(t.currentSequenceNumber);
            return this.db.getTargetCache().updateTargetData(t, n);
        }
        updateLimboDocument(t, e) {
            return Gr(t, e);
        }
        /**
         * Call provided function for each document in the cache that is 'orphaned'. Orphaned
         * means not a part of any target, so the only entry in the target-document index for
         * that document will be the sentinel row (targetId 0), which will also have the sequence
         * number for the last time the document was accessed.
         */    Ln(t, e) {
            const n = $r(t);
            let s, i = $t.ot;
            return n.J({
                index: "documentTargetsIndex"
            }, (([t, n], {path: r, sequenceNumber: o}) => {
                0 === t ? (
                // if nextToReport is valid, report it, this is a new key so the
                // last one must not be a member of any targets.
                i !== $t.ot && e(new dt(li(s)), i), 
                // set nextToReport to be this sequence number. It's the next one we
                // might report, if we don't find any targets for this document.
                // Note that the sequence number must be defined when the targetId
                // is 0.
                i = o, s = r) : 
                // set nextToReport to be invalid, we know we don't need to report
                // this one since we found a target for it.
                i = $t.ot;
            })).next((() => {
                // Since we report sequence numbers after getting to the next key, we
                // need to check if the last key we iterated over was an orphaned
                // document and report it.
                i !== $t.ot && e(new dt(li(s)), i);
            }));
        }
        getCacheSize(t) {
            return this.db.getRemoteDocumentCache().getSize(t);
        }
    }

    function Gr(t, e) {
        return $r(t).put(
        /**
     * @returns A value suitable for writing a sentinel row in the target-document
     * store.
     */
        function(t, e) {
            return {
                targetId: 0,
                path: ci(t.path),
                sequenceNumber: e
            };
        }(e, t.currentSequenceNumber));
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An in-memory buffer of entries to be written to a RemoteDocumentCache.
     * It can be used to batch up a set of changes to be written to the cache, but
     * additionally supports reading entries back with the `getEntry()` method,
     * falling back to the underlying RemoteDocumentCache if no entry is
     * buffered.
     *
     * Entries added to the cache *must* be read first. This is to facilitate
     * calculating the size delta of the pending changes.
     *
     * PORTING NOTE: This class was implemented then removed from other platforms.
     * If byte-counting ends up being needed on the other platforms, consider
     * porting this class as part of that implementation work.
     */ class Qr {
        constructor() {
            // A mapping of document key to the new cache entry that should be written.
            this.changes = new is((t => t.toString()), ((t, e) => t.isEqual(e))), this.changesApplied = !1;
        }
        /**
         * Buffers a `RemoteDocumentCache.addEntry()` call.
         *
         * You can only modify documents that have already been retrieved via
         * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
         */    addEntry(t) {
            this.assertNotApplied(), this.changes.set(t.key, t);
        }
        /**
         * Buffers a `RemoteDocumentCache.removeEntry()` call.
         *
         * You can only remove documents that have already been retrieved via
         * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
         */    removeEntry(t, e) {
            this.assertNotApplied(), this.changes.set(t, xe.newInvalidDocument(t).setReadTime(e));
        }
        /**
         * Looks up an entry in the cache. The buffered changes will first be checked,
         * and if no buffered change applies, this will forward to
         * `RemoteDocumentCache.getEntry()`.
         *
         * @param transaction - The transaction in which to perform any persistence
         *     operations.
         * @param documentKey - The key of the entry to look up.
         * @returns The cached document or an invalid document if we have nothing
         * cached.
         */    getEntry(t, e) {
            this.assertNotApplied();
            const n = this.changes.get(e);
            return void 0 !== n ? Pt.resolve(n) : this.getFromCache(t, e);
        }
        /**
         * Looks up several entries in the cache, forwarding to
         * `RemoteDocumentCache.getEntry()`.
         *
         * @param transaction - The transaction in which to perform any persistence
         *     operations.
         * @param documentKeys - The keys of the entries to look up.
         * @returns A map of cached documents, indexed by key. If an entry cannot be
         *     found, the corresponding key will be mapped to an invalid document.
         */    getEntries(t, e) {
            return this.getAllFromCache(t, e);
        }
        /**
         * Applies buffered changes to the underlying RemoteDocumentCache, using
         * the provided transaction.
         */    apply(t) {
            return this.assertNotApplied(), this.changesApplied = !0, this.applyChanges(t);
        }
        /** Helper to assert this.changes is not null  */    assertNotApplied() {}
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * The RemoteDocumentCache for IndexedDb. To construct, invoke
     * `newIndexedDbRemoteDocumentCache()`.
     */ class jr {
        constructor(t) {
            this.wt = t;
        }
        setIndexManager(t) {
            this.indexManager = t;
        }
        /**
         * Adds the supplied entries to the cache.
         *
         * All calls of `addEntry` are required to go through the RemoteDocumentChangeBuffer
         * returned by `newChangeBuffer()` to ensure proper accounting of metadata.
         */    addEntry(t, e, n) {
            return Jr(t).put(n);
        }
        /**
         * Removes a document from the cache.
         *
         * All calls of `removeEntry`  are required to go through the RemoteDocumentChangeBuffer
         * returned by `newChangeBuffer()` to ensure proper accounting of metadata.
         */    removeEntry(t, e, n) {
            return Jr(t).delete(
            /**
     * Returns a key that can be used for document lookups via the primary key of
     * the DbRemoteDocument object store.
     */
            function(t, e) {
                const n = t.path.toArray();
                return [ 
                /* prefix path */ n.slice(0, n.length - 2), 
                /* collection id */ n[n.length - 2], Gi(e), 
                /* document id */ n[n.length - 1] ];
            }
            /**
     * Returns a key that can be used for document lookups on the
     * `DbRemoteDocumentDocumentCollectionGroupIndex` index.
     */ (e, n));
        }
        /**
         * Updates the current cache size.
         *
         * Callers to `addEntry()` and `removeEntry()` *must* call this afterwards to update the
         * cache's metadata.
         */    updateMetadata(t, e) {
            return this.getMetadata(t).next((n => (n.byteSize += e, this.qn(t, n))));
        }
        getEntry(t, e) {
            let n = xe.newInvalidDocument(e);
            return Jr(t).J({
                index: "documentKeyIndex",
                range: IDBKeyRange.only(Yr(e))
            }, ((t, s) => {
                n = this.Kn(e, s);
            })).next((() => n));
        }
        /**
         * Looks up an entry in the cache.
         *
         * @param documentKey - The key of the entry to look up.
         * @returns The cached document entry and its size.
         */    Gn(t, e) {
            let n = {
                size: 0,
                document: xe.newInvalidDocument(e)
            };
            return Jr(t).J({
                index: "documentKeyIndex",
                range: IDBKeyRange.only(Yr(e))
            }, ((t, s) => {
                n = {
                    document: this.Kn(e, s),
                    size: Vr(s)
                };
            })).next((() => n));
        }
        getEntries(t, e) {
            let n = os();
            return this.Qn(t, e, ((t, e) => {
                const s = this.Kn(t, e);
                n = n.insert(t, s);
            })).next((() => n));
        }
        /**
         * Looks up several entries in the cache.
         *
         * @param documentKeys - The set of keys entries to look up.
         * @returns A map of documents indexed by key and a map of sizes indexed by
         *     key (zero if the document does not exist).
         */    jn(t, e) {
            let n = os(), s = new qt(dt.comparator);
            return this.Qn(t, e, ((t, e) => {
                const i = this.Kn(t, e);
                n = n.insert(t, i), s = s.insert(t, Vr(e));
            })).next((() => ({
                documents: n,
                Wn: s
            })));
        }
        Qn(t, e, n) {
            if (e.isEmpty()) return Pt.resolve();
            let s = new Qt(Zr);
            e.forEach((t => s = s.add(t)));
            const i = IDBKeyRange.bound(Yr(s.first()), Yr(s.last())), r = s.getIterator();
            let o = r.getNext();
            return Jr(t).J({
                index: "documentKeyIndex",
                range: i
            }, ((t, e, s) => {
                const i = dt.fromSegments([ ...e.prefixPath, e.collectionGroup, e.documentId ]);
                // Go through keys not found in cache.
                            for (;o && Zr(o, i) < 0; ) n(o, null), o = r.getNext();
                o && o.isEqual(i) && (
                // Key found in cache.
                n(o, e), o = r.hasNext() ? r.getNext() : null), 
                // Skip to the next key (if there is one).
                o ? s.q(Yr(o)) : s.done();
            })).next((() => {
                // The rest of the keys are not in the cache. One case where `iterate`
                // above won't go through them is when the cache is empty.
                for (;o; ) n(o, null), o = r.hasNext() ? r.getNext() : null;
            }));
        }
        getAllFromCollection(t, e, n) {
            const s = [ e.popLast().toArray(), e.lastSegment(), Gi(n.readTime), n.documentKey.path.isEmpty() ? "" : n.documentKey.path.lastSegment() ], i = [ e.popLast().toArray(), e.lastSegment(), [ Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER ], "" ];
            return Jr(t).K(IDBKeyRange.bound(s, i, !0)).next((t => {
                let e = os();
                for (const n of t) {
                    const t = this.Kn(dt.fromSegments(n.prefixPath.concat(n.collectionGroup, n.documentId)), n);
                    e = e.insert(t.key, t);
                }
                return e;
            }));
        }
        getAllFromCollectionGroup(t, e, n, s) {
            let i = os();
            const r = Xr(e, n), o = Xr(e, Tt.max());
            return Jr(t).J({
                index: "collectionGroupIndex",
                range: IDBKeyRange.bound(r, o, !0)
            }, ((t, e, n) => {
                const r = this.Kn(dt.fromSegments(e.prefixPath.concat(e.collectionGroup, e.documentId)), e);
                i = i.insert(r.key, r), i.size === s && n.done();
            })).next((() => i));
        }
        newChangeBuffer(t) {
            return new zr(this, !!t && t.trackRemovals);
        }
        getSize(t) {
            return this.getMetadata(t).next((t => t.byteSize));
        }
        getMetadata(t) {
            return Hr(t).get("remoteDocumentGlobalKey").next((t => (U(!!t), t)));
        }
        qn(t, e) {
            return Hr(t).put("remoteDocumentGlobalKey", e);
        }
        /**
         * Decodes `dbRemoteDoc` and returns the document (or an invalid document if
         * the document corresponds to the format used for sentinel deletes).
         */    Kn(t, e) {
            if (e) {
                const t = qi(this.wt, e);
                // Whether the document is a sentinel removal and should only be used in the
                // `getNewDocumentChanges()`
                            if (!(t.isNoDocument() && t.version.isEqual(ct.min()))) return t;
            }
            return xe.newInvalidDocument(t);
        }
    }

    /** Creates a new IndexedDbRemoteDocumentCache. */ function Wr(t) {
        return new jr(t);
    }

    /**
     * Handles the details of adding and updating documents in the IndexedDbRemoteDocumentCache.
     *
     * Unlike the MemoryRemoteDocumentChangeBuffer, the IndexedDb implementation computes the size
     * delta for all submitted changes. This avoids having to re-read all documents from IndexedDb
     * when we apply the changes.
     */ class zr extends Qr {
        /**
         * @param documentCache - The IndexedDbRemoteDocumentCache to apply the changes to.
         * @param trackRemovals - Whether to create sentinel deletes that can be tracked by
         * `getNewDocumentChanges()`.
         */
        constructor(t, e) {
            super(), this.zn = t, this.trackRemovals = e, 
            // A map of document sizes and read times prior to applying the changes in
            // this buffer.
            this.Hn = new is((t => t.toString()), ((t, e) => t.isEqual(e)));
        }
        applyChanges(t) {
            const e = [];
            let n = 0, s = new Qt(((t, e) => it(t.canonicalString(), e.canonicalString())));
            return this.changes.forEach(((i, r) => {
                const o = this.Hn.get(i);
                if (e.push(this.zn.removeEntry(t, i, o.readTime)), r.isValidDocument()) {
                    const u = Ki(this.zn.wt, r);
                    s = s.add(i.path.popLast());
                    const c = Vr(u);
                    n += c - o.size, e.push(this.zn.addEntry(t, i, u));
                } else if (n -= o.size, this.trackRemovals) {
                    // In order to track removals, we store a "sentinel delete" in the
                    // RemoteDocumentCache. This entry is represented by a NoDocument
                    // with a version of 0 and ignored by `maybeDecodeDocument()` but
                    // preserved in `getNewDocumentChanges()`.
                    const n = Ki(this.zn.wt, r.convertToNoDocument(ct.min()));
                    e.push(this.zn.addEntry(t, i, n));
                }
            })), s.forEach((n => {
                e.push(this.zn.indexManager.addToCollectionParentIndex(t, n));
            })), e.push(this.zn.updateMetadata(t, n)), Pt.waitFor(e);
        }
        getFromCache(t, e) {
            // Record the size of everything we load from the cache so we can compute a delta later.
            return this.zn.Gn(t, e).next((t => (this.Hn.set(e, {
                size: t.size,
                readTime: t.document.readTime
            }), t.document)));
        }
        getAllFromCache(t, e) {
            // Record the size of everything we load from the cache so we can compute
            // a delta later.
            return this.zn.jn(t, e).next((({documents: t, Wn: e}) => (
            // Note: `getAllFromCache` returns two maps instead of a single map from
            // keys to `DocumentSizeEntry`s. This is to allow returning the
            // `MutableDocumentMap` directly, without a conversion.
            e.forEach(((e, n) => {
                this.Hn.set(e, {
                    size: n,
                    readTime: t.get(e).readTime
                });
            })), t)));
        }
    }

    function Hr(t) {
        return Mi(t, "remoteDocumentGlobal");
    }

    /**
     * Helper to get a typed SimpleDbStore for the remoteDocuments object store.
     */ function Jr(t) {
        return Mi(t, "remoteDocumentsV14");
    }

    /**
     * Returns a key that can be used for document lookups on the
     * `DbRemoteDocumentDocumentKeyIndex` index.
     */ function Yr(t) {
        const e = t.path.toArray();
        return [ 
        /* prefix path */ e.slice(0, e.length - 2), 
        /* collection id */ e[e.length - 2], 
        /* document id */ e[e.length - 1] ];
    }

    function Xr(t, e) {
        const n = e.documentKey.path.toArray();
        return [ 
        /* collection id */ t, Gi(e.readTime), 
        /* prefix path */ n.slice(0, n.length - 2), 
        /* document id */ n.length > 0 ? n[n.length - 1] : "" ];
    }

    /**
     * Comparator that compares document keys according to the primary key sorting
     * used by the `DbRemoteDocumentDocument` store (by prefix path, collection id
     * and then document ID).
     *
     * Visible for testing.
     */ function Zr(t, e) {
        const n = t.path.toArray(), s = e.path.toArray();
        // The ordering is based on https://chromium.googlesource.com/chromium/blink/+/fe5c21fef94dae71c1c3344775b8d8a7f7e6d9ec/Source/modules/indexeddb/IDBKey.cpp#74
        let i = 0;
        for (let t = 0; t < n.length - 2 && t < s.length - 2; ++t) if (i = it(n[t], s[t]), 
        i) return i;
        return i = it(n.length, s.length), i || (i = it(n[n.length - 2], s[s.length - 2]), 
        i || it(n[n.length - 1], s[s.length - 1]));
    }

    /**
     * @license
     * Copyright 2022 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Represents a local view (overlay) of a document, and the fields that are
     * locally mutated.
     */ class to {
        constructor(t, 
        /**
         * The fields that are locally mutated by patch mutations. If the overlayed
         * document is from set or delete mutations, this returns null.
         */
        e) {
            this.overlayedDocument = t, this.mutatedFields = e;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A readonly view of the local state of all documents we're tracking (i.e. we
     * have a cached version in remoteDocumentCache or local mutations for the
     * document). The view is computed by applying the mutations in the
     * MutationQueue to the RemoteDocumentCache.
     */ class eo {
        constructor(t, e, n, s) {
            this.remoteDocumentCache = t, this.mutationQueue = e, this.documentOverlayCache = n, 
            this.indexManager = s;
        }
        /**
         * Get the local view of the document identified by `key`.
         *
         * @returns Local view of the document or null if we don't have any cached
         * state for it.
         */    getDocument(t, e) {
            let n = null;
            return this.documentOverlayCache.getOverlay(t, e).next((s => (n = s, this.getBaseDocument(t, e, n)))).next((t => (null !== n && Kn(n.mutation, t, zt.empty(), ut.now()), 
            t)));
        }
        /**
         * Gets the local view of the documents identified by `keys`.
         *
         * If we don't have cached state for a document in `keys`, a NoDocument will
         * be stored for that key in the resulting set.
         */    getDocuments(t, e) {
            return this.remoteDocumentCache.getEntries(t, e).next((e => this.getLocalViewOfDocuments(t, e, ws()).next((() => e))));
        }
        /**
         * Similar to `getDocuments`, but creates the local view from the given
         * `baseDocs` without retrieving documents from the local store.
         *
         * @param transaction - The transaction this operation is scoped to.
         * @param docs - The documents to apply local mutations to get the local views.
         * @param existenceStateChanged - The set of document keys whose existence state
         *   is changed. This is useful to determine if some documents overlay needs
         *   to be recalculated.
         */    getLocalViewOfDocuments(t, e, n = ws()) {
            const s = hs();
            return this.populateOverlays(t, s, e).next((() => this.computeViews(t, e, s, n).next((t => {
                let e = cs();
                return t.forEach(((t, n) => {
                    e = e.insert(t, n.overlayedDocument);
                })), e;
            }))));
        }
        /**
         * Gets the overlayed documents for the given document map, which will include
         * the local view of those documents and a `FieldMask` indicating which fields
         * are mutated locally, `null` if overlay is a Set or Delete mutation.
         */    getOverlayedDocuments(t, e) {
            const n = hs();
            return this.populateOverlays(t, n, e).next((() => this.computeViews(t, e, n, ws())));
        }
        /**
         * Fetches the overlays for {@code docs} and adds them to provided overlay map
         * if the map does not already contain an entry for the given document key.
         */    populateOverlays(t, e, n) {
            const s = [];
            return n.forEach((t => {
                e.has(t) || s.push(t);
            })), this.documentOverlayCache.getOverlays(t, s).next((t => {
                t.forEach(((t, n) => {
                    e.set(t, n);
                }));
            }));
        }
        /**
         * Computes the local view for the given documents.
         *
         * @param docs - The documents to compute views for. It also has the base
         *   version of the documents.
         * @param overlays - The overlays that need to be applied to the given base
         *   version of the documents.
         * @param existenceStateChanged - A set of documents whose existence states
         *   might have changed. This is used to determine if we need to re-calculate
         *   overlays from mutation queues.
         * @return A map represents the local documents view.
         */    computeViews(t, e, n, s) {
            let i = os();
            const r = fs(), o = fs();
            return e.forEach(((t, e) => {
                const o = n.get(e.key);
                // Recalculate an overlay if the document's existence state changed due to
                // a remote event *and* the overlay is a PatchMutation. This is because
                // document existence state can change if some patch mutation's
                // preconditions are met.
                // NOTE: we recalculate when `overlay` is undefined as well, because there
                // might be a patch mutation whose precondition does not match before the
                // change (hence overlay is undefined), but would now match.
                            s.has(e.key) && (void 0 === o || o.mutation instanceof Wn) ? i = i.insert(e.key, e) : void 0 !== o && (r.set(e.key, o.mutation.getFieldMask()), 
                Kn(o.mutation, e, o.mutation.getFieldMask(), ut.now()));
            })), this.recalculateAndSaveOverlays(t, i).next((t => (t.forEach(((t, e) => r.set(t, e))), 
            e.forEach(((t, e) => {
                var n;
                return o.set(t, new to(e, null !== (n = r.get(t)) && void 0 !== n ? n : null));
            })), o)));
        }
        recalculateAndSaveOverlays(t, e) {
            const n = fs();
            // A reverse lookup map from batch id to the documents within that batch.
                    let s = new qt(((t, e) => t - e)), i = ws();
            return this.mutationQueue.getAllMutationBatchesAffectingDocumentKeys(t, e).next((t => {
                for (const i of t) i.keys().forEach((t => {
                    const r = e.get(t);
                    if (null === r) return;
                    let o = n.get(t) || zt.empty();
                    o = i.applyToLocalView(r, o), n.set(t, o);
                    const u = (s.get(i.batchId) || ws()).add(t);
                    s = s.insert(i.batchId, u);
                }));
            })).next((() => {
                const r = [], o = s.getReverseIterator();
                // Iterate in descending order of batch IDs, and skip documents that are
                // already saved.
                            for (;o.hasNext(); ) {
                    const s = o.getNext(), u = s.key, c = s.value, a = ls();
                    c.forEach((t => {
                        if (!i.has(t)) {
                            const s = Un(e.get(t), n.get(t));
                            null !== s && a.set(t, s), i = i.add(t);
                        }
                    })), r.push(this.documentOverlayCache.saveOverlays(t, u, a));
                }
                return Pt.waitFor(r);
            })).next((() => n));
        }
        /**
         * Recalculates overlays by reading the documents from remote document cache
         * first, and saves them after they are calculated.
         */    recalculateAndSaveOverlaysForDocumentKeys(t, e) {
            return this.remoteDocumentCache.getEntries(t, e).next((e => this.recalculateAndSaveOverlays(t, e)));
        }
        /**
         * Performs a query against the local view of all documents.
         *
         * @param transaction - The persistence transaction.
         * @param query - The query to match documents against.
         * @param offset - Read time and key to start scanning by (exclusive).
         */    getDocumentsMatchingQuery(t, e, n) {
            /**
     * Returns whether the query matches a single document by path (rather than a
     * collection).
     */
            return function(t) {
                return dt.isDocumentKey(t.path) && null === t.collectionGroup && 0 === t.filters.length;
            }(e) ? this.getDocumentsMatchingDocumentQuery(t, e.path) : an(e) ? this.getDocumentsMatchingCollectionGroupQuery(t, e, n) : this.getDocumentsMatchingCollectionQuery(t, e, n);
        }
        /**
         * Given a collection group, returns the next documents that follow the provided offset, along
         * with an updated batch ID.
         *
         * <p>The documents returned by this method are ordered by remote version from the provided
         * offset. If there are no more remote documents after the provided offset, documents with
         * mutations in order of batch id from the offset are returned. Since all documents in a batch are
         * returned together, the total number of documents returned can exceed {@code count}.
         *
         * @param transaction
         * @param collectionGroup The collection group for the documents.
         * @param offset The offset to index into.
         * @param count The number of documents to return
         * @return A LocalWriteResult with the documents that follow the provided offset and the last processed batch id.
         */    getNextDocuments(t, e, n, s) {
            return this.remoteDocumentCache.getAllFromCollectionGroup(t, e, n, s).next((i => {
                const r = s - i.size > 0 ? this.documentOverlayCache.getOverlaysForCollectionGroup(t, e, n.largestBatchId, s - i.size) : Pt.resolve(hs());
                // The callsite will use the largest batch ID together with the latest read time to create
                // a new index offset. Since we only process batch IDs if all remote documents have been read,
                // no overlay will increase the overall read time. This is why we only need to special case
                // the batch id.
                            let o = -1, u = i;
                return r.next((e => Pt.forEach(e, ((e, n) => (o < n.largestBatchId && (o = n.largestBatchId), 
                i.get(e) ? Pt.resolve() : this.getBaseDocument(t, e, n).next((t => {
                    u = u.insert(e, t);
                }))))).next((() => this.populateOverlays(t, e, i))).next((() => this.computeViews(t, u, e, ws()))).next((t => ({
                    batchId: o,
                    changes: as(t)
                })))));
            }));
        }
        getDocumentsMatchingDocumentQuery(t, e) {
            // Just do a simple document lookup.
            return this.getDocument(t, new dt(e)).next((t => {
                let e = cs();
                return t.isFoundDocument() && (e = e.insert(t.key, t)), e;
            }));
        }
        getDocumentsMatchingCollectionGroupQuery(t, e, n) {
            const s = e.collectionGroup;
            let i = cs();
            return this.indexManager.getCollectionParents(t, s).next((r => Pt.forEach(r, (r => {
                const o = function(t, e) {
                    return new nn(e, 
                    /*collectionGroup=*/ null, t.explicitOrderBy.slice(), t.filters.slice(), t.limit, t.limitType, t.startAt, t.endAt);
                }(e, r.child(s));
                return this.getDocumentsMatchingCollectionQuery(t, o, n).next((t => {
                    t.forEach(((t, e) => {
                        i = i.insert(t, e);
                    }));
                }));
            })).next((() => i))));
        }
        getDocumentsMatchingCollectionQuery(t, e, n) {
            // Query the remote documents and overlay mutations.
            let s;
            return this.remoteDocumentCache.getAllFromCollection(t, e.path, n).next((i => (s = i, 
            this.documentOverlayCache.getOverlaysForCollection(t, e.path, n.largestBatchId)))).next((t => {
                // As documents might match the query because of their overlay we need to
                // include documents for all overlays in the initial document set.
                t.forEach(((t, e) => {
                    const n = e.getKey();
                    null === s.get(n) && (s = s.insert(n, xe.newInvalidDocument(n)));
                }));
                // Apply the overlays and match against the query.
                let n = cs();
                return s.forEach(((s, i) => {
                    const r = t.get(s);
                    void 0 !== r && Kn(r.mutation, i, zt.empty(), ut.now()), 
                    // Finally, insert the documents that still match the query
                    mn(e, i) && (n = n.insert(s, i));
                })), n;
            }));
        }
        /** Returns a base document that can be used to apply `overlay`. */    getBaseDocument(t, e, n) {
            return null === n || 1 /* Patch */ === n.mutation.type ? this.remoteDocumentCache.getEntry(t, e) : Pt.resolve(xe.newInvalidDocument(e));
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class no {
        constructor(t) {
            this.wt = t, this.Jn = new Map, this.Yn = new Map;
        }
        getBundleMetadata(t, e) {
            return Pt.resolve(this.Jn.get(e));
        }
        saveBundleMetadata(t, e) {
            /** Decodes a BundleMetadata proto into a BundleMetadata object. */
            var n;
            return this.Jn.set(e.id, {
                id: (n = e).id,
                version: n.version,
                createTime: Ns(n.createTime)
            }), Pt.resolve();
        }
        getNamedQuery(t, e) {
            return Pt.resolve(this.Yn.get(e));
        }
        saveNamedQuery(t, e) {
            return this.Yn.set(e.name, function(t) {
                return {
                    name: t.name,
                    query: Ji(t.bundledQuery),
                    readTime: Ns(t.readTime)
                };
            }(e)), Pt.resolve();
        }
    }

    /**
     * @license
     * Copyright 2022 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An in-memory implementation of DocumentOverlayCache.
     */ class so {
        constructor() {
            // A map sorted by DocumentKey, whose value is a pair of the largest batch id
            // for the overlay and the overlay itself.
            this.overlays = new qt(dt.comparator), this.Xn = new Map;
        }
        getOverlay(t, e) {
            return Pt.resolve(this.overlays.get(e));
        }
        getOverlays(t, e) {
            const n = hs();
            return Pt.forEach(e, (e => this.getOverlay(t, e).next((t => {
                null !== t && n.set(e, t);
            })))).next((() => n));
        }
        saveOverlays(t, e, n) {
            return n.forEach(((n, s) => {
                this.ie(t, e, s);
            })), Pt.resolve();
        }
        removeOverlaysForBatchId(t, e, n) {
            const s = this.Xn.get(n);
            return void 0 !== s && (s.forEach((t => this.overlays = this.overlays.remove(t))), 
            this.Xn.delete(n)), Pt.resolve();
        }
        getOverlaysForCollection(t, e, n) {
            const s = hs(), i = e.length + 1, r = new dt(e.child("")), o = this.overlays.getIteratorFrom(r);
            for (;o.hasNext(); ) {
                const t = o.getNext().value, r = t.getKey();
                if (!e.isPrefixOf(r.path)) break;
                // Documents from sub-collections
                            r.path.length === i && (t.largestBatchId > n && s.set(t.getKey(), t));
            }
            return Pt.resolve(s);
        }
        getOverlaysForCollectionGroup(t, e, n, s) {
            let i = new qt(((t, e) => t - e));
            const r = this.overlays.getIterator();
            for (;r.hasNext(); ) {
                const t = r.getNext().value;
                if (t.getKey().getCollectionGroup() === e && t.largestBatchId > n) {
                    let e = i.get(t.largestBatchId);
                    null === e && (e = hs(), i = i.insert(t.largestBatchId, e)), e.set(t.getKey(), t);
                }
            }
            const o = hs(), u = i.getIterator();
            for (;u.hasNext(); ) {
                if (u.getNext().value.forEach(((t, e) => o.set(t, e))), o.size() >= s) break;
            }
            return Pt.resolve(o);
        }
        ie(t, e, n) {
            // Remove the association of the overlay to its batch id.
            const s = this.overlays.get(n.key);
            if (null !== s) {
                const t = this.Xn.get(s.largestBatchId).delete(n.key);
                this.Xn.set(s.largestBatchId, t);
            }
            this.overlays = this.overlays.insert(n.key, new Bi(e, n));
            // Create the association of this overlay to the given largestBatchId.
            let i = this.Xn.get(e);
            void 0 === i && (i = ws(), this.Xn.set(e, i)), this.Xn.set(e, i.add(n.key));
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A collection of references to a document from some kind of numbered entity
     * (either a target ID or batch ID). As references are added to or removed from
     * the set corresponding events are emitted to a registered garbage collector.
     *
     * Each reference is represented by a DocumentReference object. Each of them
     * contains enough information to uniquely identify the reference. They are all
     * stored primarily in a set sorted by key. A document is considered garbage if
     * there's no references in that set (this can be efficiently checked thanks to
     * sorting by key).
     *
     * ReferenceSet also keeps a secondary set that contains references sorted by
     * IDs. This one is used to efficiently implement removal of all references by
     * some target ID.
     */ class io {
        constructor() {
            // A set of outstanding references to a document sorted by key.
            this.Zn = new Qt(ro.ts), 
            // A set of outstanding references to a document sorted by target id.
            this.es = new Qt(ro.ns);
        }
        /** Returns true if the reference set contains no references. */    isEmpty() {
            return this.Zn.isEmpty();
        }
        /** Adds a reference to the given document key for the given ID. */    addReference(t, e) {
            const n = new ro(t, e);
            this.Zn = this.Zn.add(n), this.es = this.es.add(n);
        }
        /** Add references to the given document keys for the given ID. */    ss(t, e) {
            t.forEach((t => this.addReference(t, e)));
        }
        /**
         * Removes a reference to the given document key for the given
         * ID.
         */    removeReference(t, e) {
            this.rs(new ro(t, e));
        }
        os(t, e) {
            t.forEach((t => this.removeReference(t, e)));
        }
        /**
         * Clears all references with a given ID. Calls removeRef() for each key
         * removed.
         */    us(t) {
            const e = new dt(new ht([])), n = new ro(e, t), s = new ro(e, t + 1), i = [];
            return this.es.forEachInRange([ n, s ], (t => {
                this.rs(t), i.push(t.key);
            })), i;
        }
        cs() {
            this.Zn.forEach((t => this.rs(t)));
        }
        rs(t) {
            this.Zn = this.Zn.delete(t), this.es = this.es.delete(t);
        }
        hs(t) {
            const e = new dt(new ht([])), n = new ro(e, t), s = new ro(e, t + 1);
            let i = ws();
            return this.es.forEachInRange([ n, s ], (t => {
                i = i.add(t.key);
            })), i;
        }
        containsKey(t) {
            const e = new ro(t, 0), n = this.Zn.firstAfterOrEqual(e);
            return null !== n && t.isEqual(n.key);
        }
    }

    class ro {
        constructor(t, e) {
            this.key = t, this.ls = e;
        }
        /** Compare by key then by ID */    static ts(t, e) {
            return dt.comparator(t.key, e.key) || it(t.ls, e.ls);
        }
        /** Compare by ID then by key */    static ns(t, e) {
            return it(t.ls, e.ls) || dt.comparator(t.key, e.key);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class oo {
        constructor(t, e) {
            this.indexManager = t, this.referenceDelegate = e, 
            /**
             * The set of all mutations that have been sent but not yet been applied to
             * the backend.
             */
            this.mutationQueue = [], 
            /** Next value to use when assigning sequential IDs to each mutation batch. */
            this.fs = 1, 
            /** An ordered mapping between documents and the mutations batch IDs. */
            this.ds = new Qt(ro.ts);
        }
        checkEmpty(t) {
            return Pt.resolve(0 === this.mutationQueue.length);
        }
        addMutationBatch(t, e, n, s) {
            const i = this.fs;
            this.fs++, this.mutationQueue.length > 0 && this.mutationQueue[this.mutationQueue.length - 1];
            const r = new Fi(i, e, n, s);
            this.mutationQueue.push(r);
            // Track references by document key and index collection parents.
            for (const e of s) this.ds = this.ds.add(new ro(e.key, i)), this.indexManager.addToCollectionParentIndex(t, e.key.path.popLast());
            return Pt.resolve(r);
        }
        lookupMutationBatch(t, e) {
            return Pt.resolve(this._s(e));
        }
        getNextMutationBatchAfterBatchId(t, e) {
            const n = e + 1, s = this.ws(n), i = s < 0 ? 0 : s;
            // The requested batchId may still be out of range so normalize it to the
            // start of the queue.
                    return Pt.resolve(this.mutationQueue.length > i ? this.mutationQueue[i] : null);
        }
        getHighestUnacknowledgedBatchId() {
            return Pt.resolve(0 === this.mutationQueue.length ? -1 : this.fs - 1);
        }
        getAllMutationBatches(t) {
            return Pt.resolve(this.mutationQueue.slice());
        }
        getAllMutationBatchesAffectingDocumentKey(t, e) {
            const n = new ro(e, 0), s = new ro(e, Number.POSITIVE_INFINITY), i = [];
            return this.ds.forEachInRange([ n, s ], (t => {
                const e = this._s(t.ls);
                i.push(e);
            })), Pt.resolve(i);
        }
        getAllMutationBatchesAffectingDocumentKeys(t, e) {
            let n = new Qt(it);
            return e.forEach((t => {
                const e = new ro(t, 0), s = new ro(t, Number.POSITIVE_INFINITY);
                this.ds.forEachInRange([ e, s ], (t => {
                    n = n.add(t.ls);
                }));
            })), Pt.resolve(this.gs(n));
        }
        getAllMutationBatchesAffectingQuery(t, e) {
            // Use the query path as a prefix for testing if a document matches the
            // query.
            const n = e.path, s = n.length + 1;
            // Construct a document reference for actually scanning the index. Unlike
            // the prefix the document key in this reference must have an even number of
            // segments. The empty segment can be used a suffix of the query path
            // because it precedes all other segments in an ordered traversal.
            let i = n;
            dt.isDocumentKey(i) || (i = i.child(""));
            const r = new ro(new dt(i), 0);
            // Find unique batchIDs referenced by all documents potentially matching the
            // query.
                    let o = new Qt(it);
            return this.ds.forEachWhile((t => {
                const e = t.key.path;
                return !!n.isPrefixOf(e) && (
                // Rows with document keys more than one segment longer than the query
                // path can't be matches. For example, a query on 'rooms' can't match
                // the document /rooms/abc/messages/xyx.
                // TODO(mcg): we'll need a different scanner when we implement
                // ancestor queries.
                e.length === s && (o = o.add(t.ls)), !0);
            }), r), Pt.resolve(this.gs(o));
        }
        gs(t) {
            // Construct an array of matching batches, sorted by batchID to ensure that
            // multiple mutations affecting the same document key are applied in order.
            const e = [];
            return t.forEach((t => {
                const n = this._s(t);
                null !== n && e.push(n);
            })), e;
        }
        removeMutationBatch(t, e) {
            U(0 === this.ys(e.batchId, "removed")), this.mutationQueue.shift();
            let n = this.ds;
            return Pt.forEach(e.mutations, (s => {
                const i = new ro(s.key, e.batchId);
                return n = n.delete(i), this.referenceDelegate.markPotentiallyOrphaned(t, s.key);
            })).next((() => {
                this.ds = n;
            }));
        }
        In(t) {
            // No-op since the memory mutation queue does not maintain a separate cache.
        }
        containsKey(t, e) {
            const n = new ro(e, 0), s = this.ds.firstAfterOrEqual(n);
            return Pt.resolve(e.isEqual(s && s.key));
        }
        performConsistencyCheck(t) {
            return this.mutationQueue.length, Pt.resolve();
        }
        /**
         * Finds the index of the given batchId in the mutation queue and asserts that
         * the resulting index is within the bounds of the queue.
         *
         * @param batchId - The batchId to search for
         * @param action - A description of what the caller is doing, phrased in passive
         * form (e.g. "acknowledged" in a routine that acknowledges batches).
         */    ys(t, e) {
            return this.ws(t);
        }
        /**
         * Finds the index of the given batchId in the mutation queue. This operation
         * is O(1).
         *
         * @returns The computed index of the batch with the given batchId, based on
         * the state of the queue. Note this index can be negative if the requested
         * batchId has already been remvoed from the queue or past the end of the
         * queue if the batchId is larger than the last added batch.
         */    ws(t) {
            if (0 === this.mutationQueue.length) 
            // As an index this is past the end of the queue
            return 0;
            // Examine the front of the queue to figure out the difference between the
            // batchId and indexes in the array. Note that since the queue is ordered
            // by batchId, if the first batch has a larger batchId then the requested
            // batchId doesn't exist in the queue.
                    return t - this.mutationQueue[0].batchId;
        }
        /**
         * A version of lookupMutationBatch that doesn't return a promise, this makes
         * other functions that uses this code easier to read and more efficent.
         */    _s(t) {
            const e = this.ws(t);
            if (e < 0 || e >= this.mutationQueue.length) return null;
            return this.mutationQueue[e];
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * The memory-only RemoteDocumentCache for IndexedDb. To construct, invoke
     * `newMemoryRemoteDocumentCache()`.
     */
    class uo {
        /**
         * @param sizer - Used to assess the size of a document. For eager GC, this is
         * expected to just return 0 to avoid unnecessarily doing the work of
         * calculating the size.
         */
        constructor(t) {
            this.ps = t, 
            /** Underlying cache of documents and their read times. */
            this.docs = new qt(dt.comparator), 
            /** Size of all cached documents. */
            this.size = 0;
        }
        setIndexManager(t) {
            this.indexManager = t;
        }
        /**
         * Adds the supplied entry to the cache and updates the cache size as appropriate.
         *
         * All calls of `addEntry`  are required to go through the RemoteDocumentChangeBuffer
         * returned by `newChangeBuffer()`.
         */    addEntry(t, e) {
            const n = e.key, s = this.docs.get(n), i = s ? s.size : 0, r = this.ps(e);
            return this.docs = this.docs.insert(n, {
                document: e.mutableCopy(),
                size: r
            }), this.size += r - i, this.indexManager.addToCollectionParentIndex(t, n.path.popLast());
        }
        /**
         * Removes the specified entry from the cache and updates the cache size as appropriate.
         *
         * All calls of `removeEntry` are required to go through the RemoteDocumentChangeBuffer
         * returned by `newChangeBuffer()`.
         */    removeEntry(t) {
            const e = this.docs.get(t);
            e && (this.docs = this.docs.remove(t), this.size -= e.size);
        }
        getEntry(t, e) {
            const n = this.docs.get(e);
            return Pt.resolve(n ? n.document.mutableCopy() : xe.newInvalidDocument(e));
        }
        getEntries(t, e) {
            let n = os();
            return e.forEach((t => {
                const e = this.docs.get(t);
                n = n.insert(t, e ? e.document.mutableCopy() : xe.newInvalidDocument(t));
            })), Pt.resolve(n);
        }
        getAllFromCollection(t, e, n) {
            let s = os();
            // Documents are ordered by key, so we can use a prefix scan to narrow down
            // the documents we need to match the query against.
                    const i = new dt(e.child("")), r = this.docs.getIteratorFrom(i);
            for (;r.hasNext(); ) {
                const {key: t, value: {document: i}} = r.getNext();
                if (!e.isPrefixOf(t.path)) break;
                t.path.length > e.length + 1 || (Et(It(i), n) <= 0 || (s = s.insert(i.key, i.mutableCopy())));
            }
            return Pt.resolve(s);
        }
        getAllFromCollectionGroup(t, e, n, s) {
            // This method should only be called from the IndexBackfiller if persistence
            // is enabled.
            L();
        }
        Is(t, e) {
            return Pt.forEach(this.docs, (t => e(t)));
        }
        newChangeBuffer(t) {
            // `trackRemovals` is ignores since the MemoryRemoteDocumentCache keeps
            // a separate changelog and does not need special handling for removals.
            return new co(this);
        }
        getSize(t) {
            return Pt.resolve(this.size);
        }
    }

    /**
     * Creates a new memory-only RemoteDocumentCache.
     *
     * @param sizer - Used to assess the size of a document. For eager GC, this is
     * expected to just return 0 to avoid unnecessarily doing the work of
     * calculating the size.
     */
    /**
     * Handles the details of adding and updating documents in the MemoryRemoteDocumentCache.
     */
    class co extends Qr {
        constructor(t) {
            super(), this.zn = t;
        }
        applyChanges(t) {
            const e = [];
            return this.changes.forEach(((n, s) => {
                s.isValidDocument() ? e.push(this.zn.addEntry(t, s)) : this.zn.removeEntry(n);
            })), Pt.waitFor(e);
        }
        getFromCache(t, e) {
            return this.zn.getEntry(t, e);
        }
        getAllFromCache(t, e) {
            return this.zn.getEntries(t, e);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class ao {
        constructor(t) {
            this.persistence = t, 
            /**
             * Maps a target to the data about that target
             */
            this.Ts = new is((t => Oe(t)), Fe), 
            /** The last received snapshot version. */
            this.lastRemoteSnapshotVersion = ct.min(), 
            /** The highest numbered target ID encountered. */
            this.highestTargetId = 0, 
            /** The highest sequence number encountered. */
            this.Es = 0, 
            /**
             * A ordered bidirectional mapping between documents and the remote target
             * IDs.
             */
            this.As = new io, this.targetCount = 0, this.Rs = kr.An();
        }
        forEachTarget(t, e) {
            return this.Ts.forEach(((t, n) => e(n))), Pt.resolve();
        }
        getLastRemoteSnapshotVersion(t) {
            return Pt.resolve(this.lastRemoteSnapshotVersion);
        }
        getHighestSequenceNumber(t) {
            return Pt.resolve(this.Es);
        }
        allocateTargetId(t) {
            return this.highestTargetId = this.Rs.next(), Pt.resolve(this.highestTargetId);
        }
        setTargetsMetadata(t, e, n) {
            return n && (this.lastRemoteSnapshotVersion = n), e > this.Es && (this.Es = e), 
            Pt.resolve();
        }
        vn(t) {
            this.Ts.set(t.target, t);
            const e = t.targetId;
            e > this.highestTargetId && (this.Rs = new kr(e), this.highestTargetId = e), t.sequenceNumber > this.Es && (this.Es = t.sequenceNumber);
        }
        addTargetData(t, e) {
            return this.vn(e), this.targetCount += 1, Pt.resolve();
        }
        updateTargetData(t, e) {
            return this.vn(e), Pt.resolve();
        }
        removeTargetData(t, e) {
            return this.Ts.delete(e.target), this.As.us(e.targetId), this.targetCount -= 1, 
            Pt.resolve();
        }
        removeTargets(t, e, n) {
            let s = 0;
            const i = [];
            return this.Ts.forEach(((r, o) => {
                o.sequenceNumber <= e && null === n.get(o.targetId) && (this.Ts.delete(r), i.push(this.removeMatchingKeysForTargetId(t, o.targetId)), 
                s++);
            })), Pt.waitFor(i).next((() => s));
        }
        getTargetCount(t) {
            return Pt.resolve(this.targetCount);
        }
        getTargetData(t, e) {
            const n = this.Ts.get(e) || null;
            return Pt.resolve(n);
        }
        addMatchingKeys(t, e, n) {
            return this.As.ss(e, n), Pt.resolve();
        }
        removeMatchingKeys(t, e, n) {
            this.As.os(e, n);
            const s = this.persistence.referenceDelegate, i = [];
            return s && e.forEach((e => {
                i.push(s.markPotentiallyOrphaned(t, e));
            })), Pt.waitFor(i);
        }
        removeMatchingKeysForTargetId(t, e) {
            return this.As.us(e), Pt.resolve();
        }
        getMatchingKeysForTargetId(t, e) {
            const n = this.As.hs(e);
            return Pt.resolve(n);
        }
        containsKey(t, e) {
            return Pt.resolve(this.As.containsKey(e));
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A memory-backed instance of Persistence. Data is stored only in RAM and
     * not persisted across sessions.
     */
    class ho {
        /**
         * The constructor accepts a factory for creating a reference delegate. This
         * allows both the delegate and this instance to have strong references to
         * each other without having nullable fields that would then need to be
         * checked or asserted on every access.
         */
        constructor(t, e) {
            this.bs = {}, this.overlays = {}, this.Ps = new $t(0), this.vs = !1, this.vs = !0, 
            this.referenceDelegate = t(this), this.Vs = new ao(this);
            this.indexManager = new mr, this.remoteDocumentCache = function(t) {
                return new uo(t);
            }((t => this.referenceDelegate.Ss(t))), this.wt = new Ui(e), this.Ds = new no(this.wt);
        }
        start() {
            return Promise.resolve();
        }
        shutdown() {
            // No durable state to ensure is closed on shutdown.
            return this.vs = !1, Promise.resolve();
        }
        get started() {
            return this.vs;
        }
        setDatabaseDeletedListener() {
            // No op.
        }
        setNetworkEnabled() {
            // No op.
        }
        getIndexManager(t) {
            // We do not currently support indices for memory persistence, so we can
            // return the same shared instance of the memory index manager.
            return this.indexManager;
        }
        getDocumentOverlayCache(t) {
            let e = this.overlays[t.toKey()];
            return e || (e = new so, this.overlays[t.toKey()] = e), e;
        }
        getMutationQueue(t, e) {
            let n = this.bs[t.toKey()];
            return n || (n = new oo(e, this.referenceDelegate), this.bs[t.toKey()] = n), n;
        }
        getTargetCache() {
            return this.Vs;
        }
        getRemoteDocumentCache() {
            return this.remoteDocumentCache;
        }
        getBundleCache() {
            return this.Ds;
        }
        runTransaction(t, e, n) {
            M("MemoryPersistence", "Starting transaction:", t);
            const s = new lo(this.Ps.next());
            return this.referenceDelegate.Cs(), n(s).next((t => this.referenceDelegate.xs(s).next((() => t)))).toPromise().then((t => (s.raiseOnCommittedEvent(), 
            t)));
        }
        Ns(t, e) {
            return Pt.or(Object.values(this.bs).map((n => () => n.containsKey(t, e))));
        }
    }

    /**
     * Memory persistence is not actually transactional, but future implementations
     * may have transaction-scoped state.
     */ class lo extends Rt {
        constructor(t) {
            super(), this.currentSequenceNumber = t;
        }
    }

    class fo {
        constructor(t) {
            this.persistence = t, 
            /** Tracks all documents that are active in Query views. */
            this.ks = new io, 
            /** The list of documents that are potentially GCed after each transaction. */
            this.Os = null;
        }
        static Ms(t) {
            return new fo(t);
        }
        get Fs() {
            if (this.Os) return this.Os;
            throw L();
        }
        addReference(t, e, n) {
            return this.ks.addReference(n, e), this.Fs.delete(n.toString()), Pt.resolve();
        }
        removeReference(t, e, n) {
            return this.ks.removeReference(n, e), this.Fs.add(n.toString()), Pt.resolve();
        }
        markPotentiallyOrphaned(t, e) {
            return this.Fs.add(e.toString()), Pt.resolve();
        }
        removeTarget(t, e) {
            this.ks.us(e.targetId).forEach((t => this.Fs.add(t.toString())));
            const n = this.persistence.getTargetCache();
            return n.getMatchingKeysForTargetId(t, e.targetId).next((t => {
                t.forEach((t => this.Fs.add(t.toString())));
            })).next((() => n.removeTargetData(t, e)));
        }
        Cs() {
            this.Os = new Set;
        }
        xs(t) {
            // Remove newly orphaned documents.
            const e = this.persistence.getRemoteDocumentCache().newChangeBuffer();
            return Pt.forEach(this.Fs, (n => {
                const s = dt.fromPath(n);
                return this.$s(t, s).next((t => {
                    t || e.removeEntry(s, ct.min());
                }));
            })).next((() => (this.Os = null, e.apply(t))));
        }
        updateLimboDocument(t, e) {
            return this.$s(t, e).next((t => {
                t ? this.Fs.delete(e.toString()) : this.Fs.add(e.toString());
            }));
        }
        Ss(t) {
            // For eager GC, we don't care about the document size, there are no size thresholds.
            return 0;
        }
        $s(t, e) {
            return Pt.or([ () => Pt.resolve(this.ks.containsKey(e)), () => this.persistence.getTargetCache().containsKey(t, e), () => this.persistence.Ns(t, e) ]);
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Performs database creation and schema upgrades. */ class _o {
        constructor(t) {
            this.wt = t;
        }
        /**
         * Performs database creation and schema upgrades.
         *
         * Note that in production, this method is only ever used to upgrade the schema
         * to SCHEMA_VERSION. Different values of toVersion are only used for testing
         * and local feature development.
         */    O(t, e, n, s) {
            const i = new vt("createOrUpgrade", e);
            n < 1 && s >= 1 && (function(t) {
                t.createObjectStore("owner");
            }(t), function(t) {
                t.createObjectStore("mutationQueues", {
                    keyPath: "userId"
                });
                t.createObjectStore("mutations", {
                    keyPath: "batchId",
                    autoIncrement: !0
                }).createIndex("userMutationsIndex", fi, {
                    unique: !0
                }), t.createObjectStore("documentMutations");
            }
            /**
     * Upgrade function to migrate the 'mutations' store from V1 to V3. Loads
     * and rewrites all data.
     */ (t), wo(t), function(t) {
                t.createObjectStore("remoteDocuments");
            }(t));
            // Migration 2 to populate the targetGlobal object no longer needed since
            // migration 3 unconditionally clears it.
                    let r = Pt.resolve();
            return n < 3 && s >= 3 && (
            // Brand new clients don't need to drop and recreate--only clients that
            // potentially have corrupt data.
            0 !== n && (!function(t) {
                t.deleteObjectStore("targetDocuments"), t.deleteObjectStore("targets"), t.deleteObjectStore("targetGlobal");
            }(t), wo(t)), r = r.next((() => 
            /**
     * Creates the target global singleton row.
     *
     * @param txn - The version upgrade transaction for indexeddb
     */
            function(t) {
                const e = t.store("targetGlobal"), n = {
                    highestTargetId: 0,
                    highestListenSequenceNumber: 0,
                    lastRemoteSnapshotVersion: ct.min().toTimestamp(),
                    targetCount: 0
                };
                return e.put("targetGlobalKey", n);
            }(i)))), n < 4 && s >= 4 && (0 !== n && (
            // Schema version 3 uses auto-generated keys to generate globally unique
            // mutation batch IDs (this was previously ensured internally by the
            // client). To migrate to the new schema, we have to read all mutations
            // and write them back out. We preserve the existing batch IDs to guarantee
            // consistency with other object stores. Any further mutation batch IDs will
            // be auto-generated.
            r = r.next((() => function(t, e) {
                return e.store("mutations").K().next((n => {
                    t.deleteObjectStore("mutations");
                    t.createObjectStore("mutations", {
                        keyPath: "batchId",
                        autoIncrement: !0
                    }).createIndex("userMutationsIndex", fi, {
                        unique: !0
                    });
                    const s = e.store("mutations"), i = n.map((t => s.put(t)));
                    return Pt.waitFor(i);
                }));
            }(t, i)))), r = r.next((() => {
                !function(t) {
                    t.createObjectStore("clientMetadata", {
                        keyPath: "clientId"
                    });
                }(t);
            }))), n < 5 && s >= 5 && (r = r.next((() => this.Bs(i)))), n < 6 && s >= 6 && (r = r.next((() => (function(t) {
                t.createObjectStore("remoteDocumentGlobal");
            }(t), this.Ls(i))))), n < 7 && s >= 7 && (r = r.next((() => this.Us(i)))), n < 8 && s >= 8 && (r = r.next((() => this.qs(t, i)))), 
            n < 9 && s >= 9 && (r = r.next((() => {
                // Multi-Tab used to manage its own changelog, but this has been moved
                // to the DbRemoteDocument object store itself. Since the previous change
                // log only contained transient data, we can drop its object store.
                !function(t) {
                    t.objectStoreNames.contains("remoteDocumentChanges") && t.deleteObjectStore("remoteDocumentChanges");
                }(t);
                // Note: Schema version 9 used to create a read time index for the
                // RemoteDocumentCache. This is now done with schema version 13.
                    }))), n < 10 && s >= 10 && (r = r.next((() => this.Ks(i)))), n < 11 && s >= 11 && (r = r.next((() => {
                !function(t) {
                    t.createObjectStore("bundles", {
                        keyPath: "bundleId"
                    });
                }(t), function(t) {
                    t.createObjectStore("namedQueries", {
                        keyPath: "name"
                    });
                }(t);
            }))), n < 12 && s >= 12 && (r = r.next((() => {
                !function(t) {
                    const e = t.createObjectStore("documentOverlays", {
                        keyPath: vi
                    });
                    e.createIndex("collectionPathOverlayIndex", Vi, {
                        unique: !1
                    }), e.createIndex("collectionGroupOverlayIndex", Si, {
                        unique: !1
                    });
                }(t);
            }))), n < 13 && s >= 13 && (r = r.next((() => function(t) {
                const e = t.createObjectStore("remoteDocumentsV14", {
                    keyPath: mi
                });
                e.createIndex("documentKeyIndex", gi), e.createIndex("collectionGroupIndex", yi);
            }(t))).next((() => this.Gs(t, i))).next((() => t.deleteObjectStore("remoteDocuments")))), 
            n < 14 && s >= 14 && (r = r.next((() => this.Qs(t, i)))), n < 15 && s >= 15 && (r = r.next((() => function(t) {
                t.createObjectStore("indexConfiguration", {
                    keyPath: "indexId",
                    autoIncrement: !0
                }).createIndex("collectionGroupIndex", "collectionGroup", {
                    unique: !1
                });
                t.createObjectStore("indexState", {
                    keyPath: Ai
                }).createIndex("sequenceNumberIndex", Ri, {
                    unique: !1
                });
                t.createObjectStore("indexEntries", {
                    keyPath: bi
                }).createIndex("documentKeyIndex", Pi, {
                    unique: !1
                });
            }(t)))), r;
        }
        Ls(t) {
            let e = 0;
            return t.store("remoteDocuments").J(((t, n) => {
                e += Vr(n);
            })).next((() => {
                const n = {
                    byteSize: e
                };
                return t.store("remoteDocumentGlobal").put("remoteDocumentGlobalKey", n);
            }));
        }
        Bs(t) {
            const e = t.store("mutationQueues"), n = t.store("mutations");
            return e.K().next((e => Pt.forEach(e, (e => {
                const s = IDBKeyRange.bound([ e.userId, -1 ], [ e.userId, e.lastAcknowledgedBatchId ]);
                return n.K("userMutationsIndex", s).next((n => Pt.forEach(n, (n => {
                    U(n.userId === e.userId);
                    const s = Wi(this.wt, n);
                    return vr(t, e.userId, s).next((() => {}));
                }))));
            }))));
        }
        /**
         * Ensures that every document in the remote document cache has a corresponding sentinel row
         * with a sequence number. Missing rows are given the most recently used sequence number.
         */    Us(t) {
            const e = t.store("targetDocuments"), n = t.store("remoteDocuments");
            return t.store("targetGlobal").get("targetGlobalKey").next((t => {
                const s = [];
                return n.J(((n, i) => {
                    const r = new ht(n), o = function(t) {
                        return [ 0, ci(t) ];
                    }(r);
                    s.push(e.get(o).next((n => n ? Pt.resolve() : (n => e.put({
                        targetId: 0,
                        path: ci(n),
                        sequenceNumber: t.highestListenSequenceNumber
                    }))(r))));
                })).next((() => Pt.waitFor(s)));
            }));
        }
        qs(t, e) {
            // Create the index.
            t.createObjectStore("collectionParents", {
                keyPath: Ei
            });
            const n = e.store("collectionParents"), s = new gr, i = t => {
                if (s.add(t)) {
                    const e = t.lastSegment(), s = t.popLast();
                    return n.put({
                        collectionId: e,
                        parent: ci(s)
                    });
                }
            };
            // Helper to add an index entry iff we haven't already written it.
                    // Index existing remote documents.
            return e.store("remoteDocuments").J({
                H: !0
            }, ((t, e) => {
                const n = new ht(t);
                return i(n.popLast());
            })).next((() => e.store("documentMutations").J({
                H: !0
            }, (([t, e, n], s) => {
                const r = li(e);
                return i(r.popLast());
            }))));
        }
        Ks(t) {
            const e = t.store("targets");
            return e.J(((t, n) => {
                const s = zi(n), i = Hi(this.wt, s);
                return e.put(i);
            }));
        }
        Gs(t, e) {
            const n = e.store("remoteDocuments"), s = [];
            return n.J(((t, n) => {
                const i = e.store("remoteDocumentsV14"), r = (o = n, o.document ? new dt(ht.fromString(o.document.name).popFirst(5)) : o.noDocument ? dt.fromSegments(o.noDocument.path) : o.unknownDocument ? dt.fromSegments(o.unknownDocument.path) : L()).path.toArray();
                var o;
                /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */            const u = {
                    prefixPath: r.slice(0, r.length - 2),
                    collectionGroup: r[r.length - 2],
                    documentId: r[r.length - 1],
                    readTime: n.readTime || [ 0, 0 ],
                    unknownDocument: n.unknownDocument,
                    noDocument: n.noDocument,
                    document: n.document,
                    hasCommittedMutations: !!n.hasCommittedMutations
                };
                s.push(i.put(u));
            })).next((() => Pt.waitFor(s)));
        }
        Qs(t, e) {
            const n = e.store("mutations"), s = Wr(this.wt), i = new ho(fo.Ms, this.wt.ne);
            return n.K().next((t => {
                const n = new Map;
                return t.forEach((t => {
                    var e;
                    let s = null !== (e = n.get(t.userId)) && void 0 !== e ? e : ws();
                    Wi(this.wt, t).keys().forEach((t => s = s.add(t))), n.set(t.userId, s);
                })), Pt.forEach(n, ((t, n) => {
                    const r = new C(n), o = sr.se(this.wt, r), u = i.getIndexManager(r), c = Sr.se(r, this.wt, u, i.referenceDelegate);
                    return new eo(s, c, o, u).recalculateAndSaveOverlaysForDocumentKeys(new Oi(e, $t.ot), t).next();
                }));
            }));
        }
    }

    function wo(t) {
        t.createObjectStore("targetDocuments", {
            keyPath: Ii
        }).createIndex("documentTargetsIndex", Ti, {
            unique: !0
        });
        // NOTE: This is unique only because the TargetId is the suffix.
        t.createObjectStore("targets", {
            keyPath: "targetId"
        }).createIndex("queryTargetsIndex", pi$2, {
            unique: !0
        }), t.createObjectStore("targetGlobal");
    }

    const mo = "Failed to obtain exclusive access to the persistence layer. To allow shared access, multi-tab synchronization has to be enabled in all tabs. If you are using `experimentalForceOwningTab:true`, make sure that only one tab has persistence enabled at any given time.";

    /**
     * Oldest acceptable age in milliseconds for client metadata before the client
     * is considered inactive and its associated data is garbage collected.
     */
    /**
     * An IndexedDB-backed instance of Persistence. Data is stored persistently
     * across sessions.
     *
     * On Web only, the Firestore SDKs support shared access to its persistence
     * layer. This allows multiple browser tabs to read and write to IndexedDb and
     * to synchronize state even without network connectivity. Shared access is
     * currently optional and not enabled unless all clients invoke
     * `enablePersistence()` with `{synchronizeTabs:true}`.
     *
     * In multi-tab mode, if multiple clients are active at the same time, the SDK
     * will designate one client as the “primary client”. An effort is made to pick
     * a visible, network-connected and active client, and this client is
     * responsible for letting other clients know about its presence. The primary
     * client writes a unique client-generated identifier (the client ID) to
     * IndexedDb’s “owner” store every 4 seconds. If the primary client fails to
     * update this entry, another client can acquire the lease and take over as
     * primary.
     *
     * Some persistence operations in the SDK are designated as primary-client only
     * operations. This includes the acknowledgment of mutations and all updates of
     * remote documents. The effects of these operations are written to persistence
     * and then broadcast to other tabs via LocalStorage (see
     * `WebStorageSharedClientState`), which then refresh their state from
     * persistence.
     *
     * Similarly, the primary client listens to notifications sent by secondary
     * clients to discover persistence changes written by secondary clients, such as
     * the addition of new mutations and query targets.
     *
     * If multi-tab is not enabled and another tab already obtained the primary
     * lease, IndexedDbPersistence enters a failed state and all subsequent
     * operations will automatically fail.
     *
     * Additionally, there is an optimization so that when a tab is closed, the
     * primary lease is released immediately (this is especially important to make
     * sure that a refreshed tab is able to immediately re-acquire the primary
     * lease). Unfortunately, IndexedDB cannot be reliably used in window.unload
     * since it is an asynchronous API. So in addition to attempting to give up the
     * lease, the leaseholder writes its client ID to a "zombiedClient" entry in
     * LocalStorage which acts as an indicator that another tab should go ahead and
     * take the primary lease immediately regardless of the current lease timestamp.
     *
     * TODO(b/114226234): Remove `synchronizeTabs` section when multi-tab is no
     * longer optional.
     */
    class go {
        constructor(
        /**
         * Whether to synchronize the in-memory state of multiple tabs and share
         * access to local persistence.
         */
        t, e, n, s, i, r, o, u, c, 
        /**
         * If set to true, forcefully obtains database access. Existing tabs will
         * no longer be able to access IndexedDB.
         */
        a, h = 14) {
            if (this.allowTabSynchronization = t, this.persistenceKey = e, this.clientId = n, 
            this.js = i, this.window = r, this.document = o, this.Ws = c, this.zs = a, this.Hs = h, 
            this.Ps = null, this.vs = !1, this.isPrimary = !1, this.networkEnabled = !0, 
            /** Our window.unload handler, if registered. */
            this.Js = null, this.inForeground = !1, 
            /** Our 'visibilitychange' listener if registered. */
            this.Ys = null, 
            /** The client metadata refresh task. */
            this.Xs = null, 
            /** The last time we garbage collected the client metadata object store. */
            this.Zs = Number.NEGATIVE_INFINITY, 
            /** A listener to notify on primary state changes. */
            this.ti = t => Promise.resolve(), !go.V()) throw new Q(G.UNIMPLEMENTED, "This platform is either missing IndexedDB or is known to have an incomplete implementation. Offline persistence has been disabled.");
            this.referenceDelegate = new Kr(this, s), this.ei = e + "main", this.wt = new Ui(u), 
            this.ni = new Vt(this.ei, this.Hs, new _o(this.wt)), this.Vs = new Or(this.referenceDelegate, this.wt), 
            this.remoteDocumentCache = Wr(this.wt), this.Ds = new tr, this.window && this.window.localStorage ? this.si = this.window.localStorage : (this.si = null, 
            !1 === a && F("IndexedDbPersistence", "LocalStorage is unavailable. As a result, persistence may not work reliably. In particular enablePersistence() could fail immediately after refreshing the page."));
        }
        /**
         * Attempt to start IndexedDb persistence.
         *
         * @returns Whether persistence was enabled.
         */    start() {
            // NOTE: This is expected to fail sometimes (in the case of another tab
            // already having the persistence lock), so it's the first thing we should
            // do.
            return this.ii().then((() => {
                if (!this.isPrimary && !this.allowTabSynchronization) 
                // Fail `start()` if `synchronizeTabs` is disabled and we cannot
                // obtain the primary lease.
                throw new Q(G.FAILED_PRECONDITION, mo);
                return this.ri(), this.oi(), this.ui(), this.runTransaction("getHighestListenSequenceNumber", "readonly", (t => this.Vs.getHighestSequenceNumber(t)));
            })).then((t => {
                this.Ps = new $t(t, this.Ws);
            })).then((() => {
                this.vs = !0;
            })).catch((t => (this.ni && this.ni.close(), Promise.reject(t))));
        }
        /**
         * Registers a listener that gets called when the primary state of the
         * instance changes. Upon registering, this listener is invoked immediately
         * with the current primary state.
         *
         * PORTING NOTE: This is only used for Web multi-tab.
         */    ci(t) {
            return this.ti = async e => {
                if (this.started) return t(e);
            }, t(this.isPrimary);
        }
        /**
         * Registers a listener that gets called when the database receives a
         * version change event indicating that it has deleted.
         *
         * PORTING NOTE: This is only used for Web multi-tab.
         */    setDatabaseDeletedListener(t) {
            this.ni.F((async e => {
                // Check if an attempt is made to delete IndexedDB.
                null === e.newVersion && await t();
            }));
        }
        /**
         * Adjusts the current network state in the client's metadata, potentially
         * affecting the primary lease.
         *
         * PORTING NOTE: This is only used for Web multi-tab.
         */    setNetworkEnabled(t) {
            this.networkEnabled !== t && (this.networkEnabled = t, 
            // Schedule a primary lease refresh for immediate execution. The eventual
            // lease update will be propagated via `primaryStateListener`.
            this.js.enqueueAndForget((async () => {
                this.started && await this.ii();
            })));
        }
        /**
         * Updates the client metadata in IndexedDb and attempts to either obtain or
         * extend the primary lease for the local client. Asynchronously notifies the
         * primary state listener if the client either newly obtained or released its
         * primary lease.
         */    ii() {
            return this.runTransaction("updateClientMetadataAndTryBecomePrimary", "readwrite", (t => po(t).put({
                clientId: this.clientId,
                updateTimeMs: Date.now(),
                networkEnabled: this.networkEnabled,
                inForeground: this.inForeground
            }).next((() => {
                if (this.isPrimary) return this.ai(t).next((t => {
                    t || (this.isPrimary = !1, this.js.enqueueRetryable((() => this.ti(!1))));
                }));
            })).next((() => this.hi(t))).next((e => this.isPrimary && !e ? this.li(t).next((() => !1)) : !!e && this.fi(t).next((() => !0)))))).catch((t => {
                if (Ct(t)) 
                // Proceed with the existing state. Any subsequent access to
                // IndexedDB will verify the lease.
                return M("IndexedDbPersistence", "Failed to extend owner lease: ", t), this.isPrimary;
                if (!this.allowTabSynchronization) throw t;
                return M("IndexedDbPersistence", "Releasing owner lease after error during lease refresh", t), 
                /* isPrimary= */ !1;
            })).then((t => {
                this.isPrimary !== t && this.js.enqueueRetryable((() => this.ti(t))), this.isPrimary = t;
            }));
        }
        ai(t) {
            return yo(t).get("owner").next((t => Pt.resolve(this.di(t))));
        }
        _i(t) {
            return po(t).delete(this.clientId);
        }
        /**
         * If the garbage collection threshold has passed, prunes the
         * RemoteDocumentChanges and the ClientMetadata store based on the last update
         * time of all clients.
         */    async wi() {
            if (this.isPrimary && !this.mi(this.Zs, 18e5)) {
                this.Zs = Date.now();
                const t = await this.runTransaction("maybeGarbageCollectMultiClientState", "readwrite-primary", (t => {
                    const e = Mi(t, "clientMetadata");
                    return e.K().next((t => {
                        const n = this.gi(t, 18e5), s = t.filter((t => -1 === n.indexOf(t)));
                        // Delete metadata for clients that are no longer considered active.
                        return Pt.forEach(s, (t => e.delete(t.clientId))).next((() => s));
                    }));
                })).catch((() => []));
                // Delete potential leftover entries that may continue to mark the
                // inactive clients as zombied in LocalStorage.
                // Ideally we'd delete the IndexedDb and LocalStorage zombie entries for
                // the client atomically, but we can't. So we opt to delete the IndexedDb
                // entries first to avoid potentially reviving a zombied client.
                            if (this.si) for (const e of t) this.si.removeItem(this.yi(e.clientId));
            }
        }
        /**
         * Schedules a recurring timer to update the client metadata and to either
         * extend or acquire the primary lease if the client is eligible.
         */    ui() {
            this.Xs = this.js.enqueueAfterDelay("client_metadata_refresh" /* ClientMetadataRefresh */ , 4e3, (() => this.ii().then((() => this.wi())).then((() => this.ui()))));
        }
        /** Checks whether `client` is the local client. */    di(t) {
            return !!t && t.ownerId === this.clientId;
        }
        /**
         * Evaluate the state of all active clients and determine whether the local
         * client is or can act as the holder of the primary lease. Returns whether
         * the client is eligible for the lease, but does not actually acquire it.
         * May return 'false' even if there is no active leaseholder and another
         * (foreground) client should become leaseholder instead.
         */    hi(t) {
            if (this.zs) return Pt.resolve(!0);
            return yo(t).get("owner").next((e => {
                // A client is eligible for the primary lease if:
                // - its network is enabled and the client's tab is in the foreground.
                // - its network is enabled and no other client's tab is in the
                //   foreground.
                // - every clients network is disabled and the client's tab is in the
                //   foreground.
                // - every clients network is disabled and no other client's tab is in
                //   the foreground.
                // - the `forceOwningTab` setting was passed in.
                if (null !== e && this.mi(e.leaseTimestampMs, 5e3) && !this.pi(e.ownerId)) {
                    if (this.di(e) && this.networkEnabled) return !0;
                    if (!this.di(e)) {
                        if (!e.allowTabSynchronization) 
                        // Fail the `canActAsPrimary` check if the current leaseholder has
                        // not opted into multi-tab synchronization. If this happens at
                        // client startup, we reject the Promise returned by
                        // `enablePersistence()` and the user can continue to use Firestore
                        // with in-memory persistence.
                        // If this fails during a lease refresh, we will instead block the
                        // AsyncQueue from executing further operations. Note that this is
                        // acceptable since mixing & matching different `synchronizeTabs`
                        // settings is not supported.
                        // TODO(b/114226234): Remove this check when `synchronizeTabs` can
                        // no longer be turned off.
                        throw new Q(G.FAILED_PRECONDITION, mo);
                        return !1;
                    }
                }
                return !(!this.networkEnabled || !this.inForeground) || po(t).K().next((t => void 0 === this.gi(t, 5e3).find((t => {
                    if (this.clientId !== t.clientId) {
                        const e = !this.networkEnabled && t.networkEnabled, n = !this.inForeground && t.inForeground, s = this.networkEnabled === t.networkEnabled;
                        if (e || n && s) return !0;
                    }
                    return !1;
                }))));
            })).next((t => (this.isPrimary !== t && M("IndexedDbPersistence", `Client ${t ? "is" : "is not"} eligible for a primary lease.`), 
            t)));
        }
        async shutdown() {
            // The shutdown() operations are idempotent and can be called even when
            // start() aborted (e.g. because it couldn't acquire the persistence lease).
            this.vs = !1, this.Ii(), this.Xs && (this.Xs.cancel(), this.Xs = null), this.Ti(), 
            this.Ei(), 
            // Use `SimpleDb.runTransaction` directly to avoid failing if another tab
            // has obtained the primary lease.
            await this.ni.runTransaction("shutdown", "readwrite", [ "owner", "clientMetadata" ], (t => {
                const e = new Oi(t, $t.ot);
                return this.li(e).next((() => this._i(e)));
            })), this.ni.close(), 
            // Remove the entry marking the client as zombied from LocalStorage since
            // we successfully deleted its metadata from IndexedDb.
            this.Ai();
        }
        /**
         * Returns clients that are not zombied and have an updateTime within the
         * provided threshold.
         */    gi(t, e) {
            return t.filter((t => this.mi(t.updateTimeMs, e) && !this.pi(t.clientId)));
        }
        /**
         * Returns the IDs of the clients that are currently active. If multi-tab
         * is not supported, returns an array that only contains the local client's
         * ID.
         *
         * PORTING NOTE: This is only used for Web multi-tab.
         */    Ri() {
            return this.runTransaction("getActiveClients", "readonly", (t => po(t).K().next((t => this.gi(t, 18e5).map((t => t.clientId))))));
        }
        get started() {
            return this.vs;
        }
        getMutationQueue(t, e) {
            return Sr.se(t, this.wt, e, this.referenceDelegate);
        }
        getTargetCache() {
            return this.Vs;
        }
        getRemoteDocumentCache() {
            return this.remoteDocumentCache;
        }
        getIndexManager(t) {
            return new pr(t, this.wt.ne.databaseId);
        }
        getDocumentOverlayCache(t) {
            return sr.se(this.wt, t);
        }
        getBundleCache() {
            return this.Ds;
        }
        runTransaction(t, e, n) {
            M("IndexedDbPersistence", "Starting transaction:", t);
            const s = "readonly" === e ? "readonly" : "readwrite", i = 15 === (r = this.Hs) ? ki : 14 === r ? Ni : 13 === r ? xi : 12 === r ? Ci : 11 === r ? Di : void L();
            /** Returns the object stores for the provided schema. */
            var r;
            let o;
            // Do all transactions as readwrite against all object stores, since we
            // are the only reader/writer.
                    return this.ni.runTransaction(t, s, i, (s => (o = new Oi(s, this.Ps ? this.Ps.next() : $t.ot), 
            "readwrite-primary" === e ? this.ai(o).next((t => !!t || this.hi(o))).next((e => {
                if (!e) throw F(`Failed to obtain primary lease for action '${t}'.`), this.isPrimary = !1, 
                this.js.enqueueRetryable((() => this.ti(!1))), new Q(G.FAILED_PRECONDITION, At);
                return n(o);
            })).next((t => this.fi(o).next((() => t)))) : this.bi(o).next((() => n(o)))))).then((t => (o.raiseOnCommittedEvent(), 
            t)));
        }
        /**
         * Verifies that the current tab is the primary leaseholder or alternatively
         * that the leaseholder has opted into multi-tab synchronization.
         */
        // TODO(b/114226234): Remove this check when `synchronizeTabs` can no longer
        // be turned off.
        bi(t) {
            return yo(t).get("owner").next((t => {
                if (null !== t && this.mi(t.leaseTimestampMs, 5e3) && !this.pi(t.ownerId) && !this.di(t) && !(this.zs || this.allowTabSynchronization && t.allowTabSynchronization)) throw new Q(G.FAILED_PRECONDITION, mo);
            }));
        }
        /**
         * Obtains or extends the new primary lease for the local client. This
         * method does not verify that the client is eligible for this lease.
         */    fi(t) {
            const e = {
                ownerId: this.clientId,
                allowTabSynchronization: this.allowTabSynchronization,
                leaseTimestampMs: Date.now()
            };
            return yo(t).put("owner", e);
        }
        static V() {
            return Vt.V();
        }
        /** Checks the primary lease and removes it if we are the current primary. */    li(t) {
            const e = yo(t);
            return e.get("owner").next((t => this.di(t) ? (M("IndexedDbPersistence", "Releasing primary lease."), 
            e.delete("owner")) : Pt.resolve()));
        }
        /** Verifies that `updateTimeMs` is within `maxAgeMs`. */    mi(t, e) {
            const n = Date.now();
            return !(t < n - e) && (!(t > n) || (F(`Detected an update time that is in the future: ${t} > ${n}`), 
            !1));
        }
        ri() {
            null !== this.document && "function" == typeof this.document.addEventListener && (this.Ys = () => {
                this.js.enqueueAndForget((() => (this.inForeground = "visible" === this.document.visibilityState, 
                this.ii())));
            }, this.document.addEventListener("visibilitychange", this.Ys), this.inForeground = "visible" === this.document.visibilityState);
        }
        Ti() {
            this.Ys && (this.document.removeEventListener("visibilitychange", this.Ys), this.Ys = null);
        }
        /**
         * Attaches a window.unload handler that will synchronously write our
         * clientId to a "zombie client id" location in LocalStorage. This can be used
         * by tabs trying to acquire the primary lease to determine that the lease
         * is no longer valid even if the timestamp is recent. This is particularly
         * important for the refresh case (so the tab correctly re-acquires the
         * primary lease). LocalStorage is used for this rather than IndexedDb because
         * it is a synchronous API and so can be used reliably from  an unload
         * handler.
         */    oi() {
            var t;
            "function" == typeof (null === (t = this.window) || void 0 === t ? void 0 : t.addEventListener) && (this.Js = () => {
                // Note: In theory, this should be scheduled on the AsyncQueue since it
                // accesses internal state. We execute this code directly during shutdown
                // to make sure it gets a chance to run.
                this.Ii(), isSafari() && navigator.appVersion.match(/Version\/1[45]/) && 
                // On Safari 14 and 15, we do not run any cleanup actions as it might
                // trigger a bug that prevents Safari from re-opening IndexedDB during
                // the next page load.
                // See https://bugs.webkit.org/show_bug.cgi?id=226547
                this.js.enterRestrictedMode(/* purgeExistingTasks= */ !0), this.js.enqueueAndForget((() => this.shutdown()));
            }, this.window.addEventListener("pagehide", this.Js));
        }
        Ei() {
            this.Js && (this.window.removeEventListener("pagehide", this.Js), this.Js = null);
        }
        /**
         * Returns whether a client is "zombied" based on its LocalStorage entry.
         * Clients become zombied when their tab closes without running all of the
         * cleanup logic in `shutdown()`.
         */    pi(t) {
            var e;
            try {
                const n = null !== (null === (e = this.si) || void 0 === e ? void 0 : e.getItem(this.yi(t)));
                return M("IndexedDbPersistence", `Client '${t}' ${n ? "is" : "is not"} zombied in LocalStorage`), 
                n;
            } catch (t) {
                // Gracefully handle if LocalStorage isn't working.
                return F("IndexedDbPersistence", "Failed to get zombied client id.", t), !1;
            }
        }
        /**
         * Record client as zombied (a client that had its tab closed). Zombied
         * clients are ignored during primary tab selection.
         */    Ii() {
            if (this.si) try {
                this.si.setItem(this.yi(this.clientId), String(Date.now()));
            } catch (t) {
                // Gracefully handle if LocalStorage isn't available / working.
                F("Failed to set zombie client id.", t);
            }
        }
        /** Removes the zombied client entry if it exists. */    Ai() {
            if (this.si) try {
                this.si.removeItem(this.yi(this.clientId));
            } catch (t) {
                // Ignore
            }
        }
        yi(t) {
            return `firestore_zombie_${this.persistenceKey}_${t}`;
        }
    }

    /**
     * Helper to get a typed SimpleDbStore for the primary client object store.
     */ function yo(t) {
        return Mi(t, "owner");
    }

    /**
     * Helper to get a typed SimpleDbStore for the client metadata object store.
     */ function po(t) {
        return Mi(t, "clientMetadata");
    }

    /**
     * Generates a string used as a prefix when storing data in IndexedDB and
     * LocalStorage.
     */ function Io(t, e) {
        // Use two different prefix formats:
        //   * firestore / persistenceKey / projectID . databaseID / ...
        //   * firestore / persistenceKey / projectID / ...
        // projectIDs are DNS-compatible names and cannot contain dots
        // so there's no danger of collisions.
        let n = t.projectId;
        return t.isDefaultDatabase || (n += "." + t.database), "firestore/" + e + "/" + n + "/";
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A set of changes to what documents are currently in view and out of view for
     * a given query. These changes are sent to the LocalStore by the View (via
     * the SyncEngine) and are used to pin / unpin documents as appropriate.
     */
    class To {
        constructor(t, e, n, s) {
            this.targetId = t, this.fromCache = e, this.Pi = n, this.vi = s;
        }
        static Vi(t, e) {
            let n = ws(), s = ws();
            for (const t of e.docChanges) switch (t.type) {
              case 0 /* Added */ :
                n = n.add(t.doc.key);
                break;

              case 1 /* Removed */ :
                s = s.add(t.doc.key);
     // do nothing
                    }
            return new To(t, e.fromCache, n, s);
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * The Firestore query engine.
     *
     * Firestore queries can be executed in three modes. The Query Engine determines
     * what mode to use based on what data is persisted. The mode only determines
     * the runtime complexity of the query - the result set is equivalent across all
     * implementations.
     *
     * The Query engine will use indexed-based execution if a user has configured
     * any index that can be used to execute query (via `setIndexConfiguration()`).
     * Otherwise, the engine will try to optimize the query by re-using a previously
     * persisted query result. If that is not possible, the query will be executed
     * via a full collection scan.
     *
     * Index-based execution is the default when available. The query engine
     * supports partial indexed execution and merges the result from the index
     * lookup with documents that have not yet been indexed. The index evaluation
     * matches the backend's format and as such, the SDK can use indexing for all
     * queries that the backend supports.
     *
     * If no index exists, the query engine tries to take advantage of the target
     * document mapping in the TargetCache. These mappings exists for all queries
     * that have been synced with the backend at least once and allow the query
     * engine to only read documents that previously matched a query plus any
     * documents that were edited after the query was last listened to.
     *
     * There are some cases when this optimization is not guaranteed to produce
     * the same results as full collection scans. In these cases, query
     * processing falls back to full scans. These cases are:
     *
     * - Limit queries where a document that matched the query previously no longer
     *   matches the query.
     *
     * - Limit queries where a document edit may cause the document to sort below
     *   another document that is in the local cache.
     *
     * - Queries that have never been CURRENT or free of limbo documents.
     */ class Eo {
        constructor() {
            this.Si = !1;
        }
        /** Sets the document view to query against. */    initialize(t, e) {
            this.Di = t, this.indexManager = e, this.Si = !0;
        }
        /** Returns all local documents matching the specified query. */    getDocumentsMatchingQuery(t, e, n, s) {
            return this.Ci(t, e).next((i => i || this.xi(t, e, s, n))).next((n => n || this.Ni(t, e)));
        }
        /**
         * Performs an indexed query that evaluates the query based on a collection's
         * persisted index values. Returns `null` if an index is not available.
         */    Ci(t, e) {
            return Pt.resolve(null);
        }
        /**
         * Performs a query based on the target's persisted query mapping. Returns
         * `null` if the mapping is not available or cannot be used.
         */    xi(t, e, n, s) {
            return on(e) || s.isEqual(ct.min()) ? this.Ni(t, e) : this.Di.getDocuments(t, n).next((i => {
                const r = this.ki(e, i);
                return this.Oi(e, r, n, s) ? this.Ni(t, e) : (k() <= LogLevel.DEBUG && M("QueryEngine", "Re-using previous result from %s to execute query: %s", s.toString(), wn(e)), 
                this.Mi(t, r, e, pt(s, -1)));
            }));
            // Queries that have never seen a snapshot without limbo free documents
            // should also be run as a full collection scan.
            }
        /** Applies the query filter and sorting to the provided documents.  */    ki(t, e) {
            // Sort the documents and re-apply the query filter since previously
            // matching documents do not necessarily still match the query.
            let n = new Qt(yn(t));
            return e.forEach(((e, s) => {
                mn(t, s) && (n = n.add(s));
            })), n;
        }
        /**
         * Determines if a limit query needs to be refilled from cache, making it
         * ineligible for index-free execution.
         *
         * @param query - The query.
         * @param sortedPreviousResults - The documents that matched the query when it
         * was last synchronized, sorted by the query's comparator.
         * @param remoteKeys - The document keys that matched the query at the last
         * snapshot.
         * @param limboFreeSnapshotVersion - The version of the snapshot when the
         * query was last synchronized.
         */    Oi(t, e, n, s) {
            if (null === t.limit) 
            // Queries without limits do not need to be refilled.
            return !1;
            if (n.size !== e.size) 
            // The query needs to be refilled if a previously matching document no
            // longer matches.
            return !0;
            // Limit queries are not eligible for index-free query execution if there is
            // a potential that an older document from cache now sorts before a document
            // that was previously part of the limit. This, however, can only happen if
            // the document at the edge of the limit goes out of limit.
            // If a document that is not the limit boundary sorts differently,
            // the boundary of the limit itself did not change and documents from cache
            // will continue to be "rejected" by this boundary. Therefore, we can ignore
            // any modifications that don't affect the last document.
                    const i = "F" /* First */ === t.limitType ? e.last() : e.first();
            return !!i && (i.hasPendingWrites || i.version.compareTo(s) > 0);
        }
        Ni(t, e) {
            return k() <= LogLevel.DEBUG && M("QueryEngine", "Using full collection scan to execute query:", wn(e)), 
            this.Di.getDocumentsMatchingQuery(t, e, Tt.min());
        }
        /**
         * Combines the results from an indexed execution with the remaining documents
         * that have not yet been indexed.
         */    Mi(t, e, n, s) {
            // Retrieve all results for documents that were updated since the offset.
            return this.Di.getDocumentsMatchingQuery(t, n, s).next((t => (
            // Merge with existing results
            e.forEach((e => {
                t = t.insert(e.key, e);
            })), t)));
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Implements `LocalStore` interface.
     *
     * Note: some field defined in this class might have public access level, but
     * the class is not exported so they are only accessible from this module.
     * This is useful to implement optional features (like bundles) in free
     * functions, such that they are tree-shakeable.
     */
    class Ao {
        constructor(
        /** Manages our in-memory or durable persistence. */
        t, e, n, s) {
            this.persistence = t, this.Fi = e, this.wt = s, 
            /**
             * Maps a targetID to data about its target.
             *
             * PORTING NOTE: We are using an immutable data structure on Web to make re-runs
             * of `applyRemoteEvent()` idempotent.
             */
            this.$i = new qt(it), 
            /** Maps a target to its targetID. */
            // TODO(wuandy): Evaluate if TargetId can be part of Target.
            this.Bi = new is((t => Oe(t)), Fe), 
            /**
             * A per collection group index of the last read time processed by
             * `getNewDocumentChanges()`.
             *
             * PORTING NOTE: This is only used for multi-tab synchronization.
             */
            this.Li = new Map, this.Ui = t.getRemoteDocumentCache(), this.Vs = t.getTargetCache(), 
            this.Ds = t.getBundleCache(), this.qi(n);
        }
        qi(t) {
            // TODO(indexing): Add spec tests that test these components change after a
            // user change
            this.documentOverlayCache = this.persistence.getDocumentOverlayCache(t), this.indexManager = this.persistence.getIndexManager(t), 
            this.mutationQueue = this.persistence.getMutationQueue(t, this.indexManager), this.localDocuments = new eo(this.Ui, this.mutationQueue, this.documentOverlayCache, this.indexManager), 
            this.Ui.setIndexManager(this.indexManager), this.Fi.initialize(this.localDocuments, this.indexManager);
        }
        collectGarbage(t) {
            return this.persistence.runTransaction("Collect garbage", "readwrite-primary", (e => t.collect(e, this.$i)));
        }
    }

    function Ro(
    /** Manages our in-memory or durable persistence. */
    t, e, n, s) {
        return new Ao(t, e, n, s);
    }

    /**
     * Tells the LocalStore that the currently authenticated user has changed.
     *
     * In response the local store switches the mutation queue to the new user and
     * returns any resulting document changes.
     */
    // PORTING NOTE: Android and iOS only return the documents affected by the
    // change.
    async function bo(t, e) {
        const n = K(t);
        return await n.persistence.runTransaction("Handle user change", "readonly", (t => {
            // Swap out the mutation queue, grabbing the pending mutation batches
            // before and after.
            let s;
            return n.mutationQueue.getAllMutationBatches(t).next((i => (s = i, n.qi(e), n.mutationQueue.getAllMutationBatches(t)))).next((e => {
                const i = [], r = [];
                // Union the old/new changed keys.
                let o = ws();
                for (const t of s) {
                    i.push(t.batchId);
                    for (const e of t.mutations) o = o.add(e.key);
                }
                for (const t of e) {
                    r.push(t.batchId);
                    for (const e of t.mutations) o = o.add(e.key);
                }
                // Return the set of all (potentially) changed documents and the list
                // of mutation batch IDs that were affected by change.
                            return n.localDocuments.getDocuments(t, o).next((t => ({
                    Ki: t,
                    removedBatchIds: i,
                    addedBatchIds: r
                })));
            }));
        }));
    }

    /* Accepts locally generated Mutations and commit them to storage. */
    /**
     * Acknowledges the given batch.
     *
     * On the happy path when a batch is acknowledged, the local store will
     *
     *  + remove the batch from the mutation queue;
     *  + apply the changes to the remote document cache;
     *  + recalculate the latency compensated view implied by those changes (there
     *    may be mutations in the queue that affect the documents but haven't been
     *    acknowledged yet); and
     *  + give the changed documents back the sync engine
     *
     * @returns The resulting (modified) documents.
     */
    function Po(t, e) {
        const n = K(t);
        return n.persistence.runTransaction("Acknowledge batch", "readwrite-primary", (t => {
            const s = e.batch.keys(), i = n.Ui.newChangeBuffer({
                trackRemovals: !0
            });
            return function(t, e, n, s) {
                const i = n.batch, r = i.keys();
                let o = Pt.resolve();
                return r.forEach((t => {
                    o = o.next((() => s.getEntry(e, t))).next((e => {
                        const r = n.docVersions.get(t);
                        U(null !== r), e.version.compareTo(r) < 0 && (i.applyToRemoteDocument(e, n), e.isValidDocument() && (
                        // We use the commitVersion as the readTime rather than the
                        // document's updateTime since the updateTime is not advanced
                        // for updates that do not modify the underlying document.
                        e.setReadTime(n.commitVersion), s.addEntry(e)));
                    }));
                })), o.next((() => t.mutationQueue.removeMutationBatch(e, i)));
            }
            /** Returns the local view of the documents affected by a mutation batch. */
            // PORTING NOTE: Multi-Tab only.
            (n, t, e, i).next((() => i.apply(t))).next((() => n.mutationQueue.performConsistencyCheck(t))).next((() => n.documentOverlayCache.removeOverlaysForBatchId(t, s, e.batch.batchId))).next((() => n.localDocuments.recalculateAndSaveOverlaysForDocumentKeys(t, function(t) {
                let e = ws();
                for (let n = 0; n < t.mutationResults.length; ++n) {
                    t.mutationResults[n].transformResults.length > 0 && (e = e.add(t.batch.mutations[n].key));
                }
                return e;
            }
            /**
     * Removes mutations from the MutationQueue for the specified batch;
     * LocalDocuments will be recalculated.
     *
     * @returns The resulting modified documents.
     */ (e)))).next((() => n.localDocuments.getDocuments(t, s)));
        }));
    }

    /**
     * Returns the last consistent snapshot processed (used by the RemoteStore to
     * determine whether to buffer incoming snapshots from the backend).
     */
    function vo(t) {
        const e = K(t);
        return e.persistence.runTransaction("Get last remote snapshot version", "readonly", (t => e.Vs.getLastRemoteSnapshotVersion(t)));
    }

    /**
     * Updates the "ground-state" (remote) documents. We assume that the remote
     * event reflects any write batches that have been acknowledged or rejected
     * (i.e. we do not re-apply local mutations to updates from this event).
     *
     * LocalDocuments are re-calculated if there are remaining mutations in the
     * queue.
     */ function Vo(t, e) {
        const n = K(t), s = e.snapshotVersion;
        let i = n.$i;
        return n.persistence.runTransaction("Apply remote event", "readwrite-primary", (t => {
            const r = n.Ui.newChangeBuffer({
                trackRemovals: !0
            });
            // Reset newTargetDataByTargetMap in case this transaction gets re-run.
                    i = n.$i;
            const o = [];
            e.targetChanges.forEach(((r, u) => {
                const c = i.get(u);
                if (!c) return;
                // Only update the remote keys if the target is still active. This
                // ensures that we can persist the updated target data along with
                // the updated assignment.
                            o.push(n.Vs.removeMatchingKeys(t, r.removedDocuments, u).next((() => n.Vs.addMatchingKeys(t, r.addedDocuments, u))));
                let a = c.withSequenceNumber(t.currentSequenceNumber);
                e.targetMismatches.has(u) ? a = a.withResumeToken(Jt.EMPTY_BYTE_STRING, ct.min()).withLastLimboFreeSnapshotVersion(ct.min()) : r.resumeToken.approximateByteSize() > 0 && (a = a.withResumeToken(r.resumeToken, s)), 
                i = i.insert(u, a), 
                // Update the target data if there are target changes (or if
                // sufficient time has passed since the last update).
                /**
     * Returns true if the newTargetData should be persisted during an update of
     * an active target. TargetData should always be persisted when a target is
     * being released and should not call this function.
     *
     * While the target is active, TargetData updates can be omitted when nothing
     * about the target has changed except metadata like the resume token or
     * snapshot version. Occasionally it's worth the extra write to prevent these
     * values from getting too stale after a crash, but this doesn't have to be
     * too frequent.
     */
                function(t, e, n) {
                    // Always persist target data if we don't already have a resume token.
                    if (0 === t.resumeToken.approximateByteSize()) return !0;
                    // Don't allow resume token changes to be buffered indefinitely. This
                    // allows us to be reasonably up-to-date after a crash and avoids needing
                    // to loop over all active queries on shutdown. Especially in the browser
                    // we may not get time to do anything interesting while the current tab is
                    // closing.
                                    if (e.snapshotVersion.toMicroseconds() - t.snapshotVersion.toMicroseconds() >= 3e8) return !0;
                    // Otherwise if the only thing that has changed about a target is its resume
                    // token it's not worth persisting. Note that the RemoteStore keeps an
                    // in-memory view of the currently active targets which includes the current
                    // resume token, so stream failure or user changes will still use an
                    // up-to-date resume token regardless of what we do here.
                                    return n.addedDocuments.size + n.modifiedDocuments.size + n.removedDocuments.size > 0;
                }
                /**
     * Notifies local store of the changed views to locally pin documents.
     */ (c, a, r) && o.push(n.Vs.updateTargetData(t, a));
            }));
            let u = os(), c = ws();
            // HACK: The only reason we allow a null snapshot version is so that we
            // can synthesize remote events when we get permission denied errors while
            // trying to resolve the state of a locally cached document that is in
            // limbo.
            if (e.documentUpdates.forEach((s => {
                e.resolvedLimboDocuments.has(s) && o.push(n.persistence.referenceDelegate.updateLimboDocument(t, s));
            })), 
            // Each loop iteration only affects its "own" doc, so it's safe to get all
            // the remote documents in advance in a single call.
            o.push(So(t, r, e.documentUpdates).next((t => {
                u = t.Gi, c = t.Qi;
            }))), !s.isEqual(ct.min())) {
                const e = n.Vs.getLastRemoteSnapshotVersion(t).next((e => n.Vs.setTargetsMetadata(t, t.currentSequenceNumber, s)));
                o.push(e);
            }
            return Pt.waitFor(o).next((() => r.apply(t))).next((() => n.localDocuments.getLocalViewOfDocuments(t, u, c))).next((() => u));
        })).then((t => (n.$i = i, t)));
    }

    /**
     * Populates document change buffer with documents from backend or a bundle.
     * Returns the document changes resulting from applying those documents, and
     * also a set of documents whose existence state are changed as a result.
     *
     * @param txn - Transaction to use to read existing documents from storage.
     * @param documentBuffer - Document buffer to collect the resulted changes to be
     *        applied to storage.
     * @param documents - Documents to be applied.
     */ function So(t, e, n) {
        let s = ws(), i = ws();
        return n.forEach((t => s = s.add(t))), e.getEntries(t, s).next((t => {
            let s = os();
            return n.forEach(((n, r) => {
                const o = t.get(n);
                // Check if see if there is a existence state change for this document.
                            r.isFoundDocument() !== o.isFoundDocument() && (i = i.add(n)), 
                // Note: The order of the steps below is important, since we want
                // to ensure that rejected limbo resolutions (which fabricate
                // NoDocuments with SnapshotVersion.min()) never add documents to
                // cache.
                r.isNoDocument() && r.version.isEqual(ct.min()) ? (
                // NoDocuments with SnapshotVersion.min() are used in manufactured
                // events. We remove these documents from cache since we lost
                // access.
                e.removeEntry(n, r.readTime), s = s.insert(n, r)) : !o.isValidDocument() || r.version.compareTo(o.version) > 0 || 0 === r.version.compareTo(o.version) && o.hasPendingWrites ? (e.addEntry(r), 
                s = s.insert(n, r)) : M("LocalStore", "Ignoring outdated watch update for ", n, ". Current version:", o.version, " Watch version:", r.version);
            })), {
                Gi: s,
                Qi: i
            };
        }));
    }

    /**
     * Gets the mutation batch after the passed in batchId in the mutation queue
     * or null if empty.
     * @param afterBatchId - If provided, the batch to search after.
     * @returns The next mutation or null if there wasn't one.
     */
    function Do(t, e) {
        const n = K(t);
        return n.persistence.runTransaction("Get next mutation batch", "readonly", (t => (void 0 === e && (e = -1), 
        n.mutationQueue.getNextMutationBatchAfterBatchId(t, e))));
    }

    /**
     * Reads the current value of a Document with a given key or null if not
     * found - used for testing.
     */
    /**
     * Assigns the given target an internal ID so that its results can be pinned so
     * they don't get GC'd. A target must be allocated in the local store before
     * the store can be used to manage its view.
     *
     * Allocating an already allocated `Target` will return the existing `TargetData`
     * for that `Target`.
     */
    function Co(t, e) {
        const n = K(t);
        return n.persistence.runTransaction("Allocate target", "readwrite", (t => {
            let s;
            return n.Vs.getTargetData(t, e).next((i => i ? (
            // This target has been listened to previously, so reuse the
            // previous targetID.
            // TODO(mcg): freshen last accessed date?
            s = i, Pt.resolve(s)) : n.Vs.allocateTargetId(t).next((i => (s = new Li(e, i, 0 /* Listen */ , t.currentSequenceNumber), 
            n.Vs.addTargetData(t, s).next((() => s)))))));
        })).then((t => {
            // If Multi-Tab is enabled, the existing target data may be newer than
            // the in-memory data
            const s = n.$i.get(t.targetId);
            return (null === s || t.snapshotVersion.compareTo(s.snapshotVersion) > 0) && (n.$i = n.$i.insert(t.targetId, t), 
            n.Bi.set(e, t.targetId)), t;
        }));
    }

    /**
     * Returns the TargetData as seen by the LocalStore, including updates that may
     * have not yet been persisted to the TargetCache.
     */
    // Visible for testing.
    /**
     * Unpins all the documents associated with the given target. If
     * `keepPersistedTargetData` is set to false and Eager GC enabled, the method
     * directly removes the associated target data from the target cache.
     *
     * Releasing a non-existing `Target` is a no-op.
     */
    // PORTING NOTE: `keepPersistedTargetData` is multi-tab only.
    async function xo(t, e, n) {
        const s = K(t), i = s.$i.get(e), r = n ? "readwrite" : "readwrite-primary";
        try {
            n || await s.persistence.runTransaction("Release target", r, (t => s.persistence.referenceDelegate.removeTarget(t, i)));
        } catch (t) {
            if (!Ct(t)) throw t;
            // All `releaseTarget` does is record the final metadata state for the
            // target, but we've been recording this periodically during target
            // activity. If we lose this write this could cause a very slight
            // difference in the order of target deletion during GC, but we
            // don't define exact LRU semantics so this is acceptable.
            M("LocalStore", `Failed to update sequence numbers for target ${e}: ${t}`);
        }
        s.$i = s.$i.remove(e), s.Bi.delete(i.target);
    }

    /**
     * Runs the specified query against the local store and returns the results,
     * potentially taking advantage of query data from previous executions (such
     * as the set of remote keys).
     *
     * @param usePreviousResults - Whether results from previous executions can
     * be used to optimize this query execution.
     */ function No(t, e, n) {
        const s = K(t);
        let i = ct.min(), r = ws();
        return s.persistence.runTransaction("Execute query", "readonly", (t => function(t, e, n) {
            const s = K(t), i = s.Bi.get(n);
            return void 0 !== i ? Pt.resolve(s.$i.get(i)) : s.Vs.getTargetData(e, n);
        }(s, t, ln(e)).next((e => {
            if (e) return i = e.lastLimboFreeSnapshotVersion, s.Vs.getMatchingKeysForTargetId(t, e.targetId).next((t => {
                r = t;
            }));
        })).next((() => s.Fi.getDocumentsMatchingQuery(t, e, n ? i : ct.min(), n ? r : ws()))).next((t => (Mo(s, gn(e), t), 
        {
            documents: t,
            ji: r
        })))));
    }

    // PORTING NOTE: Multi-Tab only.
    function ko(t, e) {
        const n = K(t), s = K(n.Vs), i = n.$i.get(e);
        return i ? Promise.resolve(i.target) : n.persistence.runTransaction("Get target data", "readonly", (t => s.te(t, e).next((t => t ? t.target : null))));
    }

    /**
     * Returns the set of documents that have been updated since the last call.
     * If this is the first call, returns the set of changes since client
     * initialization. Further invocations will return document that have changed
     * since the prior call.
     */
    // PORTING NOTE: Multi-Tab only.
    function Oo(t, e) {
        const n = K(t), s = n.Li.get(e) || ct.min();
        // Get the current maximum read time for the collection. This should always
        // exist, but to reduce the chance for regressions we default to
        // SnapshotVersion.Min()
        // TODO(indexing): Consider removing the default value.
            return n.persistence.runTransaction("Get new document changes", "readonly", (t => n.Ui.getAllFromCollectionGroup(t, e, pt(s, -1), 
        /* limit= */ Number.MAX_SAFE_INTEGER))).then((t => (Mo(n, e, t), t)));
    }

    /** Sets the collection group's maximum read time from the given documents. */
    // PORTING NOTE: Multi-Tab only.
    function Mo(t, e, n) {
        let s = ct.min();
        n.forEach(((t, e) => {
            e.readTime.compareTo(s) > 0 && (s = e.readTime);
        })), t.Li.set(e, s);
    }

    /**
     * Creates a new target using the given bundle name, which will be used to
     * hold the keys of all documents from the bundle in query-document mappings.
     * This ensures that the loaded documents do not get garbage collected
     * right away.
     */
    /**
     * Applies the documents from a bundle to the "ground-state" (remote)
     * documents.
     *
     * LocalDocuments are re-calculated if there are remaining mutations in the
     * queue.
     */
    async function Fo(t, e, n, s) {
        const i = K(t);
        let r = ws(), o = os();
        for (const t of n) {
            const n = e.Wi(t.metadata.name);
            t.document && (r = r.add(n));
            const s = e.zi(t);
            s.setReadTime(e.Hi(t.metadata.readTime)), o = o.insert(n, s);
        }
        const u = i.Ui.newChangeBuffer({
            trackRemovals: !0
        }), c = await Co(i, function(t) {
            // It is OK that the path used for the query is not valid, because this will
            // not be read and queried.
            return ln(rn(ht.fromString(`__bundle__/docs/${t}`)));
        }(s));
        // Allocates a target to hold all document keys from the bundle, such that
        // they will not get garbage collected right away.
            return i.persistence.runTransaction("Apply bundle documents", "readwrite", (t => So(t, u, o).next((e => (u.apply(t), 
        e))).next((e => i.Vs.removeMatchingKeysForTargetId(t, c.targetId).next((() => i.Vs.addMatchingKeys(t, r, c.targetId))).next((() => i.localDocuments.getLocalViewOfDocuments(t, e.Gi, e.Qi))).next((() => e.Gi))))));
    }

    /**
     * Returns a promise of a boolean to indicate if the given bundle has already
     * been loaded and the create time is newer than the current loading bundle.
     */
    /**
     * Saves the given `NamedQuery` to local persistence.
     */
    async function $o(t, e, n = ws()) {
        // Allocate a target for the named query such that it can be resumed
        // from associated read time if users use it to listen.
        // NOTE: this also means if no corresponding target exists, the new target
        // will remain active and will not get collected, unless users happen to
        // unlisten the query somehow.
        const s = await Co(t, ln(Ji(e.bundledQuery))), i = K(t);
        return i.persistence.runTransaction("Save named query", "readwrite", (t => {
            const r = Ns(e.readTime);
            // Simply save the query itself if it is older than what the SDK already
            // has.
                    if (s.snapshotVersion.compareTo(r) >= 0) return i.Ds.saveNamedQuery(t, e);
            // Update existing target data because the query from the bundle is newer.
                    const o = s.withResumeToken(Jt.EMPTY_BYTE_STRING, r);
            return i.$i = i.$i.insert(o.targetId, o), i.Vs.updateTargetData(t, o).next((() => i.Vs.removeMatchingKeysForTargetId(t, s.targetId))).next((() => i.Vs.addMatchingKeys(t, n, s.targetId))).next((() => i.Ds.saveNamedQuery(t, e)));
        }));
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // The format of the LocalStorage key that stores the client state is:
    //     firestore_clients_<persistence_prefix>_<instance_key>
    /** Assembles the key for a client state in WebStorage */
    function Bo(t, e) {
        return `firestore_clients_${t}_${e}`;
    }

    // The format of the WebStorage key that stores the mutation state is:
    //     firestore_mutations_<persistence_prefix>_<batch_id>
    //     (for unauthenticated users)
    // or: firestore_mutations_<persistence_prefix>_<batch_id>_<user_uid>

    // 'user_uid' is last to avoid needing to escape '_' characters that it might
    // contain.
    /** Assembles the key for a mutation batch in WebStorage */
    function Lo(t, e, n) {
        let s = `firestore_mutations_${t}_${n}`;
        return e.isAuthenticated() && (s += `_${e.uid}`), s;
    }

    // The format of the WebStorage key that stores a query target's metadata is:
    //     firestore_targets_<persistence_prefix>_<target_id>
    /** Assembles the key for a query state in WebStorage */
    function Uo(t, e) {
        return `firestore_targets_${t}_${e}`;
    }

    // The WebStorage prefix that stores the primary tab's online state. The
    // format of the key is:
    //     firestore_online_state_<persistence_prefix>
    /**
     * Holds the state of a mutation batch, including its user ID, batch ID and
     * whether the batch is 'pending', 'acknowledged' or 'rejected'.
     */
    // Visible for testing
    class qo {
        constructor(t, e, n, s) {
            this.user = t, this.batchId = e, this.state = n, this.error = s;
        }
        /**
         * Parses a MutationMetadata from its JSON representation in WebStorage.
         * Logs a warning and returns null if the format of the data is not valid.
         */    static Ji(t, e, n) {
            const s = JSON.parse(n);
            let i, r = "object" == typeof s && -1 !== [ "pending", "acknowledged", "rejected" ].indexOf(s.state) && (void 0 === s.error || "object" == typeof s.error);
            return r && s.error && (r = "string" == typeof s.error.message && "string" == typeof s.error.code, 
            r && (i = new Q(s.error.code, s.error.message))), r ? new qo(t, e, s.state, i) : (F("SharedClientState", `Failed to parse mutation state for ID '${e}': ${n}`), 
            null);
        }
        Yi() {
            const t = {
                state: this.state,
                updateTimeMs: Date.now()
            };
            return this.error && (t.error = {
                code: this.error.code,
                message: this.error.message
            }), JSON.stringify(t);
        }
    }

    /**
     * Holds the state of a query target, including its target ID and whether the
     * target is 'not-current', 'current' or 'rejected'.
     */
    // Visible for testing
    class Ko {
        constructor(t, e, n) {
            this.targetId = t, this.state = e, this.error = n;
        }
        /**
         * Parses a QueryTargetMetadata from its JSON representation in WebStorage.
         * Logs a warning and returns null if the format of the data is not valid.
         */    static Ji(t, e) {
            const n = JSON.parse(e);
            let s, i = "object" == typeof n && -1 !== [ "not-current", "current", "rejected" ].indexOf(n.state) && (void 0 === n.error || "object" == typeof n.error);
            return i && n.error && (i = "string" == typeof n.error.message && "string" == typeof n.error.code, 
            i && (s = new Q(n.error.code, n.error.message))), i ? new Ko(t, n.state, s) : (F("SharedClientState", `Failed to parse target state for ID '${t}': ${e}`), 
            null);
        }
        Yi() {
            const t = {
                state: this.state,
                updateTimeMs: Date.now()
            };
            return this.error && (t.error = {
                code: this.error.code,
                message: this.error.message
            }), JSON.stringify(t);
        }
    }

    /**
     * This class represents the immutable ClientState for a client read from
     * WebStorage, containing the list of active query targets.
     */ class Go {
        constructor(t, e) {
            this.clientId = t, this.activeTargetIds = e;
        }
        /**
         * Parses a RemoteClientState from the JSON representation in WebStorage.
         * Logs a warning and returns null if the format of the data is not valid.
         */    static Ji(t, e) {
            const n = JSON.parse(e);
            let s = "object" == typeof n && n.activeTargetIds instanceof Array, i = gs();
            for (let t = 0; s && t < n.activeTargetIds.length; ++t) s = ce(n.activeTargetIds[t]), 
            i = i.add(n.activeTargetIds[t]);
            return s ? new Go(t, i) : (F("SharedClientState", `Failed to parse client data for instance '${t}': ${e}`), 
            null);
        }
    }

    /**
     * This class represents the online state for all clients participating in
     * multi-tab. The online state is only written to by the primary client, and
     * used in secondary clients to update their query views.
     */ class Qo {
        constructor(t, e) {
            this.clientId = t, this.onlineState = e;
        }
        /**
         * Parses a SharedOnlineState from its JSON representation in WebStorage.
         * Logs a warning and returns null if the format of the data is not valid.
         */    static Ji(t) {
            const e = JSON.parse(t);
            return "object" == typeof e && -1 !== [ "Unknown", "Online", "Offline" ].indexOf(e.onlineState) && "string" == typeof e.clientId ? new Qo(e.clientId, e.onlineState) : (F("SharedClientState", `Failed to parse online state: ${t}`), 
            null);
        }
    }

    /**
     * Metadata state of the local client. Unlike `RemoteClientState`, this class is
     * mutable and keeps track of all pending mutations, which allows us to
     * update the range of pending mutation batch IDs as new mutations are added or
     * removed.
     *
     * The data in `LocalClientState` is not read from WebStorage and instead
     * updated via its instance methods. The updated state can be serialized via
     * `toWebStorageJSON()`.
     */
    // Visible for testing.
    class jo {
        constructor() {
            this.activeTargetIds = gs();
        }
        Xi(t) {
            this.activeTargetIds = this.activeTargetIds.add(t);
        }
        Zi(t) {
            this.activeTargetIds = this.activeTargetIds.delete(t);
        }
        /**
         * Converts this entry into a JSON-encoded format we can use for WebStorage.
         * Does not encode `clientId` as it is part of the key in WebStorage.
         */    Yi() {
            const t = {
                activeTargetIds: this.activeTargetIds.toArray(),
                updateTimeMs: Date.now()
            };
            return JSON.stringify(t);
        }
    }

    /**
     * `WebStorageSharedClientState` uses WebStorage (window.localStorage) as the
     * backing store for the SharedClientState. It keeps track of all active
     * clients and supports modifications of the local client's data.
     */ class Wo {
        constructor(t, e, n, s, i) {
            this.window = t, this.js = e, this.persistenceKey = n, this.tr = s, this.syncEngine = null, 
            this.onlineStateHandler = null, this.sequenceNumberHandler = null, this.er = this.nr.bind(this), 
            this.sr = new qt(it), this.started = !1, 
            /**
             * Captures WebStorage events that occur before `start()` is called. These
             * events are replayed once `WebStorageSharedClientState` is started.
             */
            this.ir = [];
            // Escape the special characters mentioned here:
            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions
            const r = n.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
            this.storage = this.window.localStorage, this.currentUser = i, this.rr = Bo(this.persistenceKey, this.tr), 
            this.ur = 
            /** Assembles the key for the current sequence number. */
            function(t) {
                return `firestore_sequence_number_${t}`;
            }
            /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ (this.persistenceKey), this.sr = this.sr.insert(this.tr, new jo), this.cr = new RegExp(`^firestore_clients_${r}_([^_]*)$`), 
            this.ar = new RegExp(`^firestore_mutations_${r}_(\\d+)(?:_(.*))?$`), this.hr = new RegExp(`^firestore_targets_${r}_(\\d+)$`), 
            this.lr = 
            /** Assembles the key for the online state of the primary tab. */
            function(t) {
                return `firestore_online_state_${t}`;
            }
            // The WebStorage prefix that plays as a event to indicate the remote documents
            // might have changed due to some secondary tabs loading a bundle.
            // format of the key is:
            //     firestore_bundle_loaded_v2_<persistenceKey>
            // The version ending with "v2" stores the list of modified collection groups.
            (this.persistenceKey), this.dr = function(t) {
                return `firestore_bundle_loaded_v2_${t}`;
            }
            // The WebStorage key prefix for the key that stores the last sequence number allocated. The key
            // looks like 'firestore_sequence_number_<persistence_prefix>'.
            (this.persistenceKey), 
            // Rather than adding the storage observer during start(), we add the
            // storage observer during initialization. This ensures that we collect
            // events before other components populate their initial state (during their
            // respective start() calls). Otherwise, we might for example miss a
            // mutation that is added after LocalStore's start() processed the existing
            // mutations but before we observe WebStorage events.
            this.window.addEventListener("storage", this.er);
        }
        /** Returns 'true' if WebStorage is available in the current environment. */    static V(t) {
            return !(!t || !t.localStorage);
        }
        async start() {
            // Retrieve the list of existing clients to backfill the data in
            // SharedClientState.
            const t = await this.syncEngine.Ri();
            for (const e of t) {
                if (e === this.tr) continue;
                const t = this.getItem(Bo(this.persistenceKey, e));
                if (t) {
                    const n = Go.Ji(e, t);
                    n && (this.sr = this.sr.insert(n.clientId, n));
                }
            }
            this._r();
            // Check if there is an existing online state and call the callback handler
            // if applicable.
            const e = this.storage.getItem(this.lr);
            if (e) {
                const t = this.wr(e);
                t && this.mr(t);
            }
            for (const t of this.ir) this.nr(t);
            this.ir = [], 
            // Register a window unload hook to remove the client metadata entry from
            // WebStorage even if `shutdown()` was not called.
            this.window.addEventListener("pagehide", (() => this.shutdown())), this.started = !0;
        }
        writeSequenceNumber(t) {
            this.setItem(this.ur, JSON.stringify(t));
        }
        getAllActiveQueryTargets() {
            return this.gr(this.sr);
        }
        isActiveQueryTarget(t) {
            let e = !1;
            return this.sr.forEach(((n, s) => {
                s.activeTargetIds.has(t) && (e = !0);
            })), e;
        }
        addPendingMutation(t) {
            this.yr(t, "pending");
        }
        updateMutationState(t, e, n) {
            this.yr(t, e, n), 
            // Once a final mutation result is observed by other clients, they no longer
            // access the mutation's metadata entry. Since WebStorage replays events
            // in order, it is safe to delete the entry right after updating it.
            this.pr(t);
        }
        addLocalQueryTarget(t) {
            let e = "not-current";
            // Lookup an existing query state if the target ID was already registered
            // by another tab
                    if (this.isActiveQueryTarget(t)) {
                const n = this.storage.getItem(Uo(this.persistenceKey, t));
                if (n) {
                    const s = Ko.Ji(t, n);
                    s && (e = s.state);
                }
            }
            return this.Ir.Xi(t), this._r(), e;
        }
        removeLocalQueryTarget(t) {
            this.Ir.Zi(t), this._r();
        }
        isLocalQueryTarget(t) {
            return this.Ir.activeTargetIds.has(t);
        }
        clearQueryState(t) {
            this.removeItem(Uo(this.persistenceKey, t));
        }
        updateQueryState(t, e, n) {
            this.Tr(t, e, n);
        }
        handleUserChange(t, e, n) {
            e.forEach((t => {
                this.pr(t);
            })), this.currentUser = t, n.forEach((t => {
                this.addPendingMutation(t);
            }));
        }
        setOnlineState(t) {
            this.Er(t);
        }
        notifyBundleLoaded(t) {
            this.Ar(t);
        }
        shutdown() {
            this.started && (this.window.removeEventListener("storage", this.er), this.removeItem(this.rr), 
            this.started = !1);
        }
        getItem(t) {
            const e = this.storage.getItem(t);
            return M("SharedClientState", "READ", t, e), e;
        }
        setItem(t, e) {
            M("SharedClientState", "SET", t, e), this.storage.setItem(t, e);
        }
        removeItem(t) {
            M("SharedClientState", "REMOVE", t), this.storage.removeItem(t);
        }
        nr(t) {
            // Note: The function is typed to take Event to be interface-compatible with
            // `Window.addEventListener`.
            const e = t;
            if (e.storageArea === this.storage) {
                if (M("SharedClientState", "EVENT", e.key, e.newValue), e.key === this.rr) return void F("Received WebStorage notification for local change. Another client might have garbage-collected our state");
                this.js.enqueueRetryable((async () => {
                    if (this.started) {
                        if (null !== e.key) if (this.cr.test(e.key)) {
                            if (null == e.newValue) {
                                const t = this.Rr(e.key);
                                return this.br(t, null);
                            }
                            {
                                const t = this.Pr(e.key, e.newValue);
                                if (t) return this.br(t.clientId, t);
                            }
                        } else if (this.ar.test(e.key)) {
                            if (null !== e.newValue) {
                                const t = this.vr(e.key, e.newValue);
                                if (t) return this.Vr(t);
                            }
                        } else if (this.hr.test(e.key)) {
                            if (null !== e.newValue) {
                                const t = this.Sr(e.key, e.newValue);
                                if (t) return this.Dr(t);
                            }
                        } else if (e.key === this.lr) {
                            if (null !== e.newValue) {
                                const t = this.wr(e.newValue);
                                if (t) return this.mr(t);
                            }
                        } else if (e.key === this.ur) {
                            const t = function(t) {
                                let e = $t.ot;
                                if (null != t) try {
                                    const n = JSON.parse(t);
                                    U("number" == typeof n), e = n;
                                } catch (t) {
                                    F("SharedClientState", "Failed to read sequence number from WebStorage", t);
                                }
                                return e;
                            }
                            /**
     * `MemorySharedClientState` is a simple implementation of SharedClientState for
     * clients using memory persistence. The state in this class remains fully
     * isolated and no synchronization is performed.
     */ (e.newValue);
                            t !== $t.ot && this.sequenceNumberHandler(t);
                        } else if (e.key === this.dr) {
                            const t = this.Cr(e.newValue);
                            await Promise.all(t.map((t => this.syncEngine.Nr(t))));
                        }
                    } else this.ir.push(e);
                }));
            }
        }
        get Ir() {
            return this.sr.get(this.tr);
        }
        _r() {
            this.setItem(this.rr, this.Ir.Yi());
        }
        yr(t, e, n) {
            const s = new qo(this.currentUser, t, e, n), i = Lo(this.persistenceKey, this.currentUser, t);
            this.setItem(i, s.Yi());
        }
        pr(t) {
            const e = Lo(this.persistenceKey, this.currentUser, t);
            this.removeItem(e);
        }
        Er(t) {
            const e = {
                clientId: this.tr,
                onlineState: t
            };
            this.storage.setItem(this.lr, JSON.stringify(e));
        }
        Tr(t, e, n) {
            const s = Uo(this.persistenceKey, t), i = new Ko(t, e, n);
            this.setItem(s, i.Yi());
        }
        Ar(t) {
            const e = JSON.stringify(Array.from(t));
            this.setItem(this.dr, e);
        }
        /**
         * Parses a client state key in WebStorage. Returns null if the key does not
         * match the expected key format.
         */    Rr(t) {
            const e = this.cr.exec(t);
            return e ? e[1] : null;
        }
        /**
         * Parses a client state in WebStorage. Returns 'null' if the value could not
         * be parsed.
         */    Pr(t, e) {
            const n = this.Rr(t);
            return Go.Ji(n, e);
        }
        /**
         * Parses a mutation batch state in WebStorage. Returns 'null' if the value
         * could not be parsed.
         */    vr(t, e) {
            const n = this.ar.exec(t), s = Number(n[1]), i = void 0 !== n[2] ? n[2] : null;
            return qo.Ji(new C(i), s, e);
        }
        /**
         * Parses a query target state from WebStorage. Returns 'null' if the value
         * could not be parsed.
         */    Sr(t, e) {
            const n = this.hr.exec(t), s = Number(n[1]);
            return Ko.Ji(s, e);
        }
        /**
         * Parses an online state from WebStorage. Returns 'null' if the value
         * could not be parsed.
         */    wr(t) {
            return Qo.Ji(t);
        }
        Cr(t) {
            return JSON.parse(t);
        }
        async Vr(t) {
            if (t.user.uid === this.currentUser.uid) return this.syncEngine.kr(t.batchId, t.state, t.error);
            M("SharedClientState", `Ignoring mutation for non-active user ${t.user.uid}`);
        }
        Dr(t) {
            return this.syncEngine.Or(t.targetId, t.state, t.error);
        }
        br(t, e) {
            const n = e ? this.sr.insert(t, e) : this.sr.remove(t), s = this.gr(this.sr), i = this.gr(n), r = [], o = [];
            return i.forEach((t => {
                s.has(t) || r.push(t);
            })), s.forEach((t => {
                i.has(t) || o.push(t);
            })), this.syncEngine.Mr(r, o).then((() => {
                this.sr = n;
            }));
        }
        mr(t) {
            // We check whether the client that wrote this online state is still active
            // by comparing its client ID to the list of clients kept active in
            // IndexedDb. If a client does not update their IndexedDb client state
            // within 5 seconds, it is considered inactive and we don't emit an online
            // state event.
            this.sr.get(t.clientId) && this.onlineStateHandler(t.onlineState);
        }
        gr(t) {
            let e = gs();
            return t.forEach(((t, n) => {
                e = e.unionWith(n.activeTargetIds);
            })), e;
        }
    }

    class zo {
        constructor() {
            this.Fr = new jo, this.$r = {}, this.onlineStateHandler = null, this.sequenceNumberHandler = null;
        }
        addPendingMutation(t) {
            // No op.
        }
        updateMutationState(t, e, n) {
            // No op.
        }
        addLocalQueryTarget(t) {
            return this.Fr.Xi(t), this.$r[t] || "not-current";
        }
        updateQueryState(t, e, n) {
            this.$r[t] = e;
        }
        removeLocalQueryTarget(t) {
            this.Fr.Zi(t);
        }
        isLocalQueryTarget(t) {
            return this.Fr.activeTargetIds.has(t);
        }
        clearQueryState(t) {
            delete this.$r[t];
        }
        getAllActiveQueryTargets() {
            return this.Fr.activeTargetIds;
        }
        isActiveQueryTarget(t) {
            return this.Fr.activeTargetIds.has(t);
        }
        start() {
            return this.Fr = new jo, Promise.resolve();
        }
        handleUserChange(t, e, n) {
            // No op.
        }
        setOnlineState(t) {
            // No op.
        }
        shutdown() {}
        writeSequenceNumber(t) {}
        notifyBundleLoaded(t) {
            // No op.
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class Ho {
        Br(t) {
            // No-op.
        }
        shutdown() {
            // No-op.
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // References to `window` are guarded by BrowserConnectivityMonitor.isAvailable()
    /* eslint-disable no-restricted-globals */
    /**
     * Browser implementation of ConnectivityMonitor.
     */
    class Jo {
        constructor() {
            this.Lr = () => this.Ur(), this.qr = () => this.Kr(), this.Gr = [], this.Qr();
        }
        Br(t) {
            this.Gr.push(t);
        }
        shutdown() {
            window.removeEventListener("online", this.Lr), window.removeEventListener("offline", this.qr);
        }
        Qr() {
            window.addEventListener("online", this.Lr), window.addEventListener("offline", this.qr);
        }
        Ur() {
            M("ConnectivityMonitor", "Network connectivity changed: AVAILABLE");
            for (const t of this.Gr) t(0 /* AVAILABLE */);
        }
        Kr() {
            M("ConnectivityMonitor", "Network connectivity changed: UNAVAILABLE");
            for (const t of this.Gr) t(1 /* UNAVAILABLE */);
        }
        // TODO(chenbrian): Consider passing in window either into this component or
        // here for testing via FakeWindow.
        /** Checks that all used attributes of window are available. */
        static V() {
            return "undefined" != typeof window && void 0 !== window.addEventListener && void 0 !== window.removeEventListener;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ const Yo = {
        BatchGetDocuments: "batchGet",
        Commit: "commit",
        RunQuery: "runQuery"
    };

    /**
     * Maps RPC names to the corresponding REST endpoint name.
     *
     * We use array notation to avoid mangling.
     */
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Provides a simple helper class that implements the Stream interface to
     * bridge to other implementations that are streams but do not implement the
     * interface. The stream callbacks are invoked with the callOn... methods.
     */
    class Xo {
        constructor(t) {
            this.jr = t.jr, this.Wr = t.Wr;
        }
        zr(t) {
            this.Hr = t;
        }
        Jr(t) {
            this.Yr = t;
        }
        onMessage(t) {
            this.Xr = t;
        }
        close() {
            this.Wr();
        }
        send(t) {
            this.jr(t);
        }
        Zr() {
            this.Hr();
        }
        eo(t) {
            this.Yr(t);
        }
        no(t) {
            this.Xr(t);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class Zo extends 
    /**
     * Base class for all Rest-based connections to the backend (WebChannel and
     * HTTP).
     */
    class {
        constructor(t) {
            this.databaseInfo = t, this.databaseId = t.databaseId;
            const e = t.ssl ? "https" : "http";
            this.so = e + "://" + t.host, this.io = "projects/" + this.databaseId.projectId + "/databases/" + this.databaseId.database + "/documents";
        }
        ro(t, e, n, s, i) {
            const r = this.oo(t, e);
            M("RestConnection", "Sending: ", r, n);
            const o = {};
            return this.uo(o, s, i), this.co(t, r, o, n).then((t => (M("RestConnection", "Received: ", t), 
            t)), (e => {
                throw $("RestConnection", `${t} failed with error: `, e, "url: ", r, "request:", n), 
                e;
            }));
        }
        ao(t, e, n, s, i, r) {
            // The REST API automatically aggregates all of the streamed results, so we
            // can just use the normal invoke() method.
            return this.ro(t, e, n, s, i);
        }
        /**
         * Modifies the headers for a request, adding any authorization token if
         * present and any additional headers for the request.
         */    uo(t, e, n) {
            t["X-Goog-Api-Client"] = "gl-js/ fire/" + x$1, 
            // Content-Type: text/plain will avoid preflight requests which might
            // mess with CORS and redirects by proxies. If we add custom headers
            // we will need to change this code to potentially use the $httpOverwrite
            // parameter supported by ESF to avoid triggering preflight requests.
            t["Content-Type"] = "text/plain", this.databaseInfo.appId && (t["X-Firebase-GMPID"] = this.databaseInfo.appId), 
            e && e.headers.forEach(((e, n) => t[n] = e)), n && n.headers.forEach(((e, n) => t[n] = e));
        }
        oo(t, e) {
            const n = Yo[t];
            return `${this.so}/v1/${e}:${n}`;
        }
    } {
        constructor(t) {
            super(t), this.forceLongPolling = t.forceLongPolling, this.autoDetectLongPolling = t.autoDetectLongPolling, 
            this.useFetchStreams = t.useFetchStreams;
        }
        co(t, e, n, s) {
            return new Promise(((i, r) => {
                const o = new XhrIo;
                o.listenOnce(EventType.COMPLETE, (() => {
                    try {
                        switch (o.getLastErrorCode()) {
                          case ErrorCode.NO_ERROR:
                            const e = o.getResponseJson();
                            M("Connection", "XHR received:", JSON.stringify(e)), i(e);
                            break;

                          case ErrorCode.TIMEOUT:
                            M("Connection", 'RPC "' + t + '" timed out'), r(new Q(G.DEADLINE_EXCEEDED, "Request time out"));
                            break;

                          case ErrorCode.HTTP_ERROR:
                            const n = o.getStatus();
                            if (M("Connection", 'RPC "' + t + '" failed with status:', n, "response text:", o.getResponseText()), 
                            n > 0) {
                                const t = o.getResponseJson().error;
                                if (t && t.status && t.message) {
                                    const e = function(t) {
                                        const e = t.toLowerCase().replace(/_/g, "-");
                                        return Object.values(G).indexOf(e) >= 0 ? e : G.UNKNOWN;
                                    }(t.status);
                                    r(new Q(e, t.message));
                                } else r(new Q(G.UNKNOWN, "Server responded with status " + o.getStatus()));
                            } else 
                            // If we received an HTTP_ERROR but there's no status code,
                            // it's most probably a connection issue
                            r(new Q(G.UNAVAILABLE, "Connection failed."));
                            break;

                          default:
                            L();
                        }
                    } finally {
                        M("Connection", 'RPC "' + t + '" completed.');
                    }
                }));
                const u = JSON.stringify(s);
                o.send(e, "POST", u, n, 15);
            }));
        }
        ho(t, e, n) {
            const s = [ this.so, "/", "google.firestore.v1.Firestore", "/", t, "/channel" ], i = createWebChannelTransport(), r = getStatEventTarget(), o = {
                // Required for backend stickiness, routing behavior is based on this
                // parameter.
                httpSessionIdParam: "gsessionid",
                initMessageHeaders: {},
                messageUrlParams: {
                    // This param is used to improve routing and project isolation by the
                    // backend and must be included in every request.
                    database: `projects/${this.databaseId.projectId}/databases/${this.databaseId.database}`
                },
                sendRawJson: !0,
                supportsCrossDomainXhr: !0,
                internalChannelParams: {
                    // Override the default timeout (randomized between 10-20 seconds) since
                    // a large write batch on a slow internet connection may take a long
                    // time to send to the backend. Rather than have WebChannel impose a
                    // tight timeout which could lead to infinite timeouts and retries, we
                    // set it very large (5-10 minutes) and rely on the browser's builtin
                    // timeouts to kick in if the request isn't working.
                    forwardChannelRequestTimeoutMs: 6e5
                },
                forceLongPolling: this.forceLongPolling,
                detectBufferingProxy: this.autoDetectLongPolling
            };
            this.useFetchStreams && (o.xmlHttpFactory = new FetchXmlHttpFactory({})), this.uo(o.initMessageHeaders, e, n), 
            // Sending the custom headers we just added to request.initMessageHeaders
            // (Authorization, etc.) will trigger the browser to make a CORS preflight
            // request because the XHR will no longer meet the criteria for a "simple"
            // CORS request:
            // https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Simple_requests
            // Therefore to avoid the CORS preflight request (an extra network
            // roundtrip), we use the httpHeadersOverwriteParam option to specify that
            // the headers should instead be encoded into a special "$httpHeaders" query
            // parameter, which is recognized by the webchannel backend. This is
            // formally defined here:
            // https://github.com/google/closure-library/blob/b0e1815b13fb92a46d7c9b3c30de5d6a396a3245/closure/goog/net/rpc/httpcors.js#L32
            // TODO(b/145624756): There is a backend bug where $httpHeaders isn't respected if the request
            // doesn't have an Origin header. So we have to exclude a few browser environments that are
            // known to (sometimes) not include an Origin. See
            // https://github.com/firebase/firebase-js-sdk/issues/1491.
            isMobileCordova() || isReactNative() || isElectron() || isIE() || isUWP() || isBrowserExtension() || (o.httpHeadersOverwriteParam = "$httpHeaders");
            const u = s.join("");
            M("Connection", "Creating WebChannel: " + u, o);
            const c = i.createWebChannel(u, o);
            // WebChannel supports sending the first message with the handshake - saving
            // a network round trip. However, it will have to call send in the same
            // JS event loop as open. In order to enforce this, we delay actually
            // opening the WebChannel until send is called. Whether we have called
            // open is tracked with this variable.
                    let a = !1, h = !1;
            // A flag to determine whether the stream was closed (by us or through an
            // error/close event) to avoid delivering multiple close events or sending
            // on a closed stream
                    const l = new Xo({
                jr: t => {
                    h ? M("Connection", "Not sending because WebChannel is closed:", t) : (a || (M("Connection", "Opening WebChannel transport."), 
                    c.open(), a = !0), M("Connection", "WebChannel sending:", t), c.send(t));
                },
                Wr: () => c.close()
            }), y = (t, e, n) => {
                // TODO(dimond): closure typing seems broken because WebChannel does
                // not implement goog.events.Listenable
                t.listen(e, (t => {
                    try {
                        n(t);
                    } catch (t) {
                        setTimeout((() => {
                            throw t;
                        }), 0);
                    }
                }));
            };
            // Closure events are guarded and exceptions are swallowed, so catch any
            // exception and rethrow using a setTimeout so they become visible again.
            // Note that eventually this function could go away if we are confident
            // enough the code is exception free.
                    return y(c, WebChannel.EventType.OPEN, (() => {
                h || M("Connection", "WebChannel transport opened.");
            })), y(c, WebChannel.EventType.CLOSE, (() => {
                h || (h = !0, M("Connection", "WebChannel transport closed"), l.eo());
            })), y(c, WebChannel.EventType.ERROR, (t => {
                h || (h = !0, $("Connection", "WebChannel transport errored:", t), l.eo(new Q(G.UNAVAILABLE, "The operation could not be completed")));
            })), y(c, WebChannel.EventType.MESSAGE, (t => {
                var e;
                if (!h) {
                    const n = t.data[0];
                    U(!!n);
                    // TODO(b/35143891): There is a bug in One Platform that caused errors
                    // (and only errors) to be wrapped in an extra array. To be forward
                    // compatible with the bug we need to check either condition. The latter
                    // can be removed once the fix has been rolled out.
                    // Use any because msgData.error is not typed.
                    const s = n, i = s.error || (null === (e = s[0]) || void 0 === e ? void 0 : e.error);
                    if (i) {
                        M("Connection", "WebChannel received error:", i);
                        // error.status will be a string like 'OK' or 'NOT_FOUND'.
                        const t = i.status;
                        let e = 
                        /**
     * Maps an error Code from a GRPC status identifier like 'NOT_FOUND'.
     *
     * @returns The Code equivalent to the given status string or undefined if
     *     there is no match.
     */
                        function(t) {
                            // lookup by string
                            // eslint-disable-next-line @typescript-eslint/no-explicit-any
                            const e = ts[t];
                            if (void 0 !== e) return ss(e);
                        }(t), n = i.message;
                        void 0 === e && (e = G.INTERNAL, n = "Unknown error status: " + t + " with message " + i.message), 
                        // Mark closed so no further events are propagated
                        h = !0, l.eo(new Q(e, n)), c.close();
                    } else M("Connection", "WebChannel received:", n), l.no(n);
                }
            })), y(r, Event$1.STAT_EVENT, (t => {
                t.stat === Stat.PROXY ? M("Connection", "Detected buffering proxy") : t.stat === Stat.NOPROXY && M("Connection", "Detected no buffering proxy");
            })), setTimeout((() => {
                // Technically we could/should wait for the WebChannel opened event,
                // but because we want to send the first message with the WebChannel
                // handshake we pretend the channel opened here (asynchronously), and
                // then delay the actual open until the first message is sent.
                l.Zr();
            }), 0), l;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Initializes the WebChannelConnection for the browser. */
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** The Platform's 'window' implementation or null if not available. */
    function tu() {
        // `window` is not always available, e.g. in ReactNative and WebWorkers.
        // eslint-disable-next-line no-restricted-globals
        return "undefined" != typeof window ? window : null;
    }

    /** The Platform's 'document' implementation or null if not available. */ function eu() {
        // `document` is not always available, e.g. in ReactNative and WebWorkers.
        // eslint-disable-next-line no-restricted-globals
        return "undefined" != typeof document ? document : null;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ function nu(t) {
        return new Ss(t, /* useProto3Json= */ !0);
    }

    /**
     * An instance of the Platform's 'TextEncoder' implementation.
     */
    /**
     * A helper for running delayed tasks following an exponential backoff curve
     * between attempts.
     *
     * Each delay is made up of a "base" delay which follows the exponential
     * backoff curve, and a +/- 50% "jitter" that is calculated and added to the
     * base delay. This prevents clients from accidentally synchronizing their
     * delays causing spikes of load to the backend.
     */
    class su {
        constructor(
        /**
         * The AsyncQueue to run backoff operations on.
         */
        t, 
        /**
         * The ID to use when scheduling backoff operations on the AsyncQueue.
         */
        e, 
        /**
         * The initial delay (used as the base delay on the first retry attempt).
         * Note that jitter will still be applied, so the actual delay could be as
         * little as 0.5*initialDelayMs.
         */
        n = 1e3
        /**
         * The multiplier to use to determine the extended base delay after each
         * attempt.
         */ , s = 1.5
        /**
         * The maximum base delay after which no further backoff is performed.
         * Note that jitter will still be applied, so the actual delay could be as
         * much as 1.5*maxDelayMs.
         */ , i = 6e4) {
            this.js = t, this.timerId = e, this.lo = n, this.fo = s, this._o = i, this.wo = 0, 
            this.mo = null, 
            /** The last backoff attempt, as epoch milliseconds. */
            this.yo = Date.now(), this.reset();
        }
        /**
         * Resets the backoff delay.
         *
         * The very next backoffAndWait() will have no delay. If it is called again
         * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and
         * subsequent ones will increase according to the backoffFactor.
         */    reset() {
            this.wo = 0;
        }
        /**
         * Resets the backoff delay to the maximum delay (e.g. for use after a
         * RESOURCE_EXHAUSTED error).
         */    po() {
            this.wo = this._o;
        }
        /**
         * Returns a promise that resolves after currentDelayMs, and increases the
         * delay for any subsequent attempts. If there was a pending backoff operation
         * already, it will be canceled.
         */    Io(t) {
            // Cancel any pending backoff operation.
            this.cancel();
            // First schedule using the current base (which may be 0 and should be
            // honored as such).
            const e = Math.floor(this.wo + this.To()), n = Math.max(0, Date.now() - this.yo), s = Math.max(0, e - n);
            // Guard against lastAttemptTime being in the future due to a clock change.
                    s > 0 && M("ExponentialBackoff", `Backing off for ${s} ms (base delay: ${this.wo} ms, delay with jitter: ${e} ms, last attempt: ${n} ms ago)`), 
            this.mo = this.js.enqueueAfterDelay(this.timerId, s, (() => (this.yo = Date.now(), 
            t()))), 
            // Apply backoff factor to determine next delay and ensure it is within
            // bounds.
            this.wo *= this.fo, this.wo < this.lo && (this.wo = this.lo), this.wo > this._o && (this.wo = this._o);
        }
        Eo() {
            null !== this.mo && (this.mo.skipDelay(), this.mo = null);
        }
        cancel() {
            null !== this.mo && (this.mo.cancel(), this.mo = null);
        }
        /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */    To() {
            return (Math.random() - .5) * this.wo;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A PersistentStream is an abstract base class that represents a streaming RPC
     * to the Firestore backend. It's built on top of the connections own support
     * for streaming RPCs, and adds several critical features for our clients:
     *
     *   - Exponential backoff on failure
     *   - Authentication via CredentialsProvider
     *   - Dispatching all callbacks into the shared worker queue
     *   - Closing idle streams after 60 seconds of inactivity
     *
     * Subclasses of PersistentStream implement serialization of models to and
     * from the JSON representation of the protocol buffers for a specific
     * streaming RPC.
     *
     * ## Starting and Stopping
     *
     * Streaming RPCs are stateful and need to be start()ed before messages can
     * be sent and received. The PersistentStream will call the onOpen() function
     * of the listener once the stream is ready to accept requests.
     *
     * Should a start() fail, PersistentStream will call the registered onClose()
     * listener with a FirestoreError indicating what went wrong.
     *
     * A PersistentStream can be started and stopped repeatedly.
     *
     * Generic types:
     *  SendType: The type of the outgoing message of the underlying
     *    connection stream
     *  ReceiveType: The type of the incoming message of the underlying
     *    connection stream
     *  ListenerType: The type of the listener that will be used for callbacks
     */
    class iu {
        constructor(t, e, n, s, i, r, o, u) {
            this.js = t, this.Ao = n, this.Ro = s, this.bo = i, this.authCredentialsProvider = r, 
            this.appCheckCredentialsProvider = o, this.listener = u, this.state = 0 /* Initial */ , 
            /**
             * A close count that's incremented every time the stream is closed; used by
             * getCloseGuardedDispatcher() to invalidate callbacks that happen after
             * close.
             */
            this.Po = 0, this.vo = null, this.Vo = null, this.stream = null, this.So = new su(t, e);
        }
        /**
         * Returns true if start() has been called and no error has occurred. True
         * indicates the stream is open or in the process of opening (which
         * encompasses respecting backoff, getting auth tokens, and starting the
         * actual RPC). Use isOpen() to determine if the stream is open and ready for
         * outbound requests.
         */    Do() {
            return 1 /* Starting */ === this.state || 5 /* Backoff */ === this.state || this.Co();
        }
        /**
         * Returns true if the underlying RPC is open (the onOpen() listener has been
         * called) and the stream is ready for outbound requests.
         */    Co() {
            return 2 /* Open */ === this.state || 3 /* Healthy */ === this.state;
        }
        /**
         * Starts the RPC. Only allowed if isStarted() returns false. The stream is
         * not immediately ready for use: onOpen() will be invoked when the RPC is
         * ready for outbound requests, at which point isOpen() will return true.
         *
         * When start returns, isStarted() will return true.
         */    start() {
            4 /* Error */ !== this.state ? this.auth() : this.xo();
        }
        /**
         * Stops the RPC. This call is idempotent and allowed regardless of the
         * current isStarted() state.
         *
         * When stop returns, isStarted() and isOpen() will both return false.
         */    async stop() {
            this.Do() && await this.close(0 /* Initial */);
        }
        /**
         * After an error the stream will usually back off on the next attempt to
         * start it. If the error warrants an immediate restart of the stream, the
         * sender can use this to indicate that the receiver should not back off.
         *
         * Each error will call the onClose() listener. That function can decide to
         * inhibit backoff if required.
         */    No() {
            this.state = 0 /* Initial */ , this.So.reset();
        }
        /**
         * Marks this stream as idle. If no further actions are performed on the
         * stream for one minute, the stream will automatically close itself and
         * notify the stream's onClose() handler with Status.OK. The stream will then
         * be in a !isStarted() state, requiring the caller to start the stream again
         * before further use.
         *
         * Only streams that are in state 'Open' can be marked idle, as all other
         * states imply pending network operations.
         */    ko() {
            // Starts the idle time if we are in state 'Open' and are not yet already
            // running a timer (in which case the previous idle timeout still applies).
            this.Co() && null === this.vo && (this.vo = this.js.enqueueAfterDelay(this.Ao, 6e4, (() => this.Oo())));
        }
        /** Sends a message to the underlying stream. */    Mo(t) {
            this.Fo(), this.stream.send(t);
        }
        /** Called by the idle timer when the stream should close due to inactivity. */    async Oo() {
            if (this.Co()) 
            // When timing out an idle stream there's no reason to force the stream into backoff when
            // it restarts so set the stream state to Initial instead of Error.
            return this.close(0 /* Initial */);
        }
        /** Marks the stream as active again. */    Fo() {
            this.vo && (this.vo.cancel(), this.vo = null);
        }
        /** Cancels the health check delayed operation. */    $o() {
            this.Vo && (this.Vo.cancel(), this.Vo = null);
        }
        /**
         * Closes the stream and cleans up as necessary:
         *
         * * closes the underlying GRPC stream;
         * * calls the onClose handler with the given 'error';
         * * sets internal stream state to 'finalState';
         * * adjusts the backoff timer based on the error
         *
         * A new stream can be opened by calling start().
         *
         * @param finalState - the intended state of the stream after closing.
         * @param error - the error the connection was closed with.
         */    async close(t, e) {
            // Cancel any outstanding timers (they're guaranteed not to execute).
            this.Fo(), this.$o(), this.So.cancel(), 
            // Invalidates any stream-related callbacks (e.g. from auth or the
            // underlying stream), guaranteeing they won't execute.
            this.Po++, 4 /* Error */ !== t ? 
            // If this is an intentional close ensure we don't delay our next connection attempt.
            this.So.reset() : e && e.code === G.RESOURCE_EXHAUSTED ? (
            // Log the error. (Probably either 'quota exceeded' or 'max queue length reached'.)
            F(e.toString()), F("Using maximum backoff delay to prevent overloading the backend."), 
            this.So.po()) : e && e.code === G.UNAUTHENTICATED && 3 /* Healthy */ !== this.state && (
            // "unauthenticated" error means the token was rejected. This should rarely
            // happen since both Auth and AppCheck ensure a sufficient TTL when we
            // request a token. If a user manually resets their system clock this can
            // fail, however. In this case, we should get a Code.UNAUTHENTICATED error
            // before we received the first message and we need to invalidate the token
            // to ensure that we fetch a new token.
            this.authCredentialsProvider.invalidateToken(), this.appCheckCredentialsProvider.invalidateToken()), 
            // Clean up the underlying stream because we are no longer interested in events.
            null !== this.stream && (this.Bo(), this.stream.close(), this.stream = null), 
            // This state must be assigned before calling onClose() to allow the callback to
            // inhibit backoff or otherwise manipulate the state in its non-started state.
            this.state = t, 
            // Notify the listener that the stream closed.
            await this.listener.Jr(e);
        }
        /**
         * Can be overridden to perform additional cleanup before the stream is closed.
         * Calling super.tearDown() is not required.
         */    Bo() {}
        auth() {
            this.state = 1 /* Starting */;
            const t = this.Lo(this.Po), e = this.Po;
            // TODO(mikelehen): Just use dispatchIfNotClosed, but see TODO below.
                    Promise.all([ this.authCredentialsProvider.getToken(), this.appCheckCredentialsProvider.getToken() ]).then((([t, n]) => {
                // Stream can be stopped while waiting for authentication.
                // TODO(mikelehen): We really should just use dispatchIfNotClosed
                // and let this dispatch onto the queue, but that opened a spec test can
                // of worms that I don't want to deal with in this PR.
                this.Po === e && 
                // Normally we'd have to schedule the callback on the AsyncQueue.
                // However, the following calls are safe to be called outside the
                // AsyncQueue since they don't chain asynchronous calls
                this.Uo(t, n);
            }), (e => {
                t((() => {
                    const t = new Q(G.UNKNOWN, "Fetching auth token failed: " + e.message);
                    return this.qo(t);
                }));
            }));
        }
        Uo(t, e) {
            const n = this.Lo(this.Po);
            this.stream = this.Ko(t, e), this.stream.zr((() => {
                n((() => (this.state = 2 /* Open */ , this.Vo = this.js.enqueueAfterDelay(this.Ro, 1e4, (() => (this.Co() && (this.state = 3 /* Healthy */), 
                Promise.resolve()))), this.listener.zr())));
            })), this.stream.Jr((t => {
                n((() => this.qo(t)));
            })), this.stream.onMessage((t => {
                n((() => this.onMessage(t)));
            }));
        }
        xo() {
            this.state = 5 /* Backoff */ , this.So.Io((async () => {
                this.state = 0 /* Initial */ , this.start();
            }));
        }
        // Visible for tests
        qo(t) {
            // In theory the stream could close cleanly, however, in our current model
            // we never expect this to happen because if we stop a stream ourselves,
            // this callback will never be called. To prevent cases where we retry
            // without a backoff accidentally, we set the stream to error in all cases.
            return M("PersistentStream", `close with error: ${t}`), this.stream = null, this.close(4 /* Error */ , t);
        }
        /**
         * Returns a "dispatcher" function that dispatches operations onto the
         * AsyncQueue but only runs them if closeCount remains unchanged. This allows
         * us to turn auth / stream callbacks into no-ops if the stream is closed /
         * re-opened, etc.
         */    Lo(t) {
            return e => {
                this.js.enqueueAndForget((() => this.Po === t ? e() : (M("PersistentStream", "stream callback skipped by getCloseGuardedDispatcher."), 
                Promise.resolve())));
            };
        }
    }

    /**
     * A PersistentStream that implements the Listen RPC.
     *
     * Once the Listen stream has called the onOpen() listener, any number of
     * listen() and unlisten() calls can be made to control what changes will be
     * sent from the server for ListenResponses.
     */ class ru extends iu {
        constructor(t, e, n, s, i, r) {
            super(t, "listen_stream_connection_backoff" /* ListenStreamConnectionBackoff */ , "listen_stream_idle" /* ListenStreamIdle */ , "health_check_timeout" /* HealthCheckTimeout */ , e, n, s, r), 
            this.wt = i;
        }
        Ko(t, e) {
            return this.bo.ho("Listen", t, e);
        }
        onMessage(t) {
            // A successful response means the stream is healthy
            this.So.reset();
            const e = Qs(this.wt, t), n = function(t) {
                // We have only reached a consistent snapshot for the entire stream if there
                // is a read_time set and it applies to all targets (i.e. the list of
                // targets is empty). The backend is guaranteed to send such responses.
                if (!("targetChange" in t)) return ct.min();
                const e = t.targetChange;
                return e.targetIds && e.targetIds.length ? ct.min() : e.readTime ? Ns(e.readTime) : ct.min();
            }(t);
            return this.listener.Go(e, n);
        }
        /**
         * Registers interest in the results of the given target. If the target
         * includes a resumeToken it will be included in the request. Results that
         * affect the target will be streamed back as WatchChange messages that
         * reference the targetId.
         */    Qo(t) {
            const e = {};
            e.database = Ls(this.wt), e.addTarget = function(t, e) {
                let n;
                const s = e.target;
                return n = $e(s) ? {
                    documents: Hs(t, s)
                } : {
                    query: Js(t, s)
                }, n.targetId = e.targetId, e.resumeToken.approximateByteSize() > 0 ? n.resumeToken = Cs(t, e.resumeToken) : e.snapshotVersion.compareTo(ct.min()) > 0 && (
                // TODO(wuandy): Consider removing above check because it is most likely true.
                // Right now, many tests depend on this behaviour though (leaving min() out
                // of serialization).
                n.readTime = Ds(t, e.snapshotVersion.toTimestamp())), n;
            }(this.wt, t);
            const n = Xs(this.wt, t);
            n && (e.labels = n), this.Mo(e);
        }
        /**
         * Unregisters interest in the results of the target associated with the
         * given targetId.
         */    jo(t) {
            const e = {};
            e.database = Ls(this.wt), e.removeTarget = t, this.Mo(e);
        }
    }

    /**
     * A Stream that implements the Write RPC.
     *
     * The Write RPC requires the caller to maintain special streamToken
     * state in between calls, to help the server understand which responses the
     * client has processed by the time the next request is made. Every response
     * will contain a streamToken; this value must be passed to the next
     * request.
     *
     * After calling start() on this stream, the next request must be a handshake,
     * containing whatever streamToken is on hand. Once a response to this
     * request is received, all pending mutations may be submitted. When
     * submitting multiple batches of mutations at the same time, it's
     * okay to use the same streamToken for the calls to writeMutations.
     *
     * TODO(b/33271235): Use proto types
     */ class ou extends iu {
        constructor(t, e, n, s, i, r) {
            super(t, "write_stream_connection_backoff" /* WriteStreamConnectionBackoff */ , "write_stream_idle" /* WriteStreamIdle */ , "health_check_timeout" /* HealthCheckTimeout */ , e, n, s, r), 
            this.wt = i, this.Wo = !1;
        }
        /**
         * Tracks whether or not a handshake has been successfully exchanged and
         * the stream is ready to accept mutations.
         */    get zo() {
            return this.Wo;
        }
        // Override of PersistentStream.start
        start() {
            this.Wo = !1, this.lastStreamToken = void 0, super.start();
        }
        Bo() {
            this.Wo && this.Ho([]);
        }
        Ko(t, e) {
            return this.bo.ho("Write", t, e);
        }
        onMessage(t) {
            if (
            // Always capture the last stream token.
            U(!!t.streamToken), this.lastStreamToken = t.streamToken, this.Wo) {
                // A successful first write response means the stream is healthy,
                // Note, that we could consider a successful handshake healthy, however,
                // the write itself might be causing an error we want to back off from.
                this.So.reset();
                const e = zs(t.writeResults, t.commitTime), n = Ns(t.commitTime);
                return this.listener.Jo(n, e);
            }
            // The first response is always the handshake response
            return U(!t.writeResults || 0 === t.writeResults.length), this.Wo = !0, this.listener.Yo();
        }
        /**
         * Sends an initial streamToken to the server, performing the handshake
         * required to make the StreamingWrite RPC work. Subsequent
         * calls should wait until onHandshakeComplete was called.
         */    Xo() {
            // TODO(dimond): Support stream resumption. We intentionally do not set the
            // stream token on the handshake, ignoring any stream token we might have.
            const t = {};
            t.database = Ls(this.wt), this.Mo(t);
        }
        /** Sends a group of mutations to the Firestore backend to apply. */    Ho(t) {
            const e = {
                streamToken: this.lastStreamToken,
                writes: t.map((t => js(this.wt, t)))
            };
            this.Mo(e);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Datastore and its related methods are a wrapper around the external Google
     * Cloud Datastore grpc API, which provides an interface that is more convenient
     * for the rest of the client SDK architecture to consume.
     */
    /**
     * An implementation of Datastore that exposes additional state for internal
     * consumption.
     */
    class uu extends class {} {
        constructor(t, e, n, s) {
            super(), this.authCredentials = t, this.appCheckCredentials = e, this.bo = n, this.wt = s, 
            this.Zo = !1;
        }
        tu() {
            if (this.Zo) throw new Q(G.FAILED_PRECONDITION, "The client has already been terminated.");
        }
        /** Invokes the provided RPC with auth and AppCheck tokens. */    ro(t, e, n) {
            return this.tu(), Promise.all([ this.authCredentials.getToken(), this.appCheckCredentials.getToken() ]).then((([s, i]) => this.bo.ro(t, e, n, s, i))).catch((t => {
                throw "FirebaseError" === t.name ? (t.code === G.UNAUTHENTICATED && (this.authCredentials.invalidateToken(), 
                this.appCheckCredentials.invalidateToken()), t) : new Q(G.UNKNOWN, t.toString());
            }));
        }
        /** Invokes the provided RPC with streamed results with auth and AppCheck tokens. */    ao(t, e, n, s) {
            return this.tu(), Promise.all([ this.authCredentials.getToken(), this.appCheckCredentials.getToken() ]).then((([i, r]) => this.bo.ao(t, e, n, i, r, s))).catch((t => {
                throw "FirebaseError" === t.name ? (t.code === G.UNAUTHENTICATED && (this.authCredentials.invalidateToken(), 
                this.appCheckCredentials.invalidateToken()), t) : new Q(G.UNKNOWN, t.toString());
            }));
        }
        terminate() {
            this.Zo = !0;
        }
    }

    // TODO(firestorexp): Make sure there is only one Datastore instance per
    // firestore-exp client.
    /**
     * A component used by the RemoteStore to track the OnlineState (that is,
     * whether or not the client as a whole should be considered to be online or
     * offline), implementing the appropriate heuristics.
     *
     * In particular, when the client is trying to connect to the backend, we
     * allow up to MAX_WATCH_STREAM_FAILURES within ONLINE_STATE_TIMEOUT_MS for
     * a connection to succeed. If we have too many failures or the timeout elapses,
     * then we set the OnlineState to Offline, and the client will behave as if
     * it is offline (get()s will return cached data, etc.).
     */
    class cu {
        constructor(t, e) {
            this.asyncQueue = t, this.onlineStateHandler = e, 
            /** The current OnlineState. */
            this.state = "Unknown" /* Unknown */ , 
            /**
             * A count of consecutive failures to open the stream. If it reaches the
             * maximum defined by MAX_WATCH_STREAM_FAILURES, we'll set the OnlineState to
             * Offline.
             */
            this.eu = 0, 
            /**
             * A timer that elapses after ONLINE_STATE_TIMEOUT_MS, at which point we
             * transition from OnlineState.Unknown to OnlineState.Offline without waiting
             * for the stream to actually fail (MAX_WATCH_STREAM_FAILURES times).
             */
            this.nu = null, 
            /**
             * Whether the client should log a warning message if it fails to connect to
             * the backend (initially true, cleared after a successful stream, or if we've
             * logged the message already).
             */
            this.su = !0;
        }
        /**
         * Called by RemoteStore when a watch stream is started (including on each
         * backoff attempt).
         *
         * If this is the first attempt, it sets the OnlineState to Unknown and starts
         * the onlineStateTimer.
         */    iu() {
            0 === this.eu && (this.ru("Unknown" /* Unknown */), this.nu = this.asyncQueue.enqueueAfterDelay("online_state_timeout" /* OnlineStateTimeout */ , 1e4, (() => (this.nu = null, 
            this.ou("Backend didn't respond within 10 seconds."), this.ru("Offline" /* Offline */), 
            Promise.resolve()))));
        }
        /**
         * Updates our OnlineState as appropriate after the watch stream reports a
         * failure. The first failure moves us to the 'Unknown' state. We then may
         * allow multiple failures (based on MAX_WATCH_STREAM_FAILURES) before we
         * actually transition to the 'Offline' state.
         */    uu(t) {
            "Online" /* Online */ === this.state ? this.ru("Unknown" /* Unknown */) : (this.eu++, 
            this.eu >= 1 && (this.cu(), this.ou(`Connection failed 1 times. Most recent error: ${t.toString()}`), 
            this.ru("Offline" /* Offline */)));
        }
        /**
         * Explicitly sets the OnlineState to the specified state.
         *
         * Note that this resets our timers / failure counters, etc. used by our
         * Offline heuristics, so must not be used in place of
         * handleWatchStreamStart() and handleWatchStreamFailure().
         */    set(t) {
            this.cu(), this.eu = 0, "Online" /* Online */ === t && (
            // We've connected to watch at least once. Don't warn the developer
            // about being offline going forward.
            this.su = !1), this.ru(t);
        }
        ru(t) {
            t !== this.state && (this.state = t, this.onlineStateHandler(t));
        }
        ou(t) {
            const e = `Could not reach Cloud Firestore backend. ${t}\nThis typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.`;
            this.su ? (F(e), this.su = !1) : M("OnlineStateTracker", e);
        }
        cu() {
            null !== this.nu && (this.nu.cancel(), this.nu = null);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class au {
        constructor(
        /**
         * The local store, used to fill the write pipeline with outbound mutations.
         */
        t, 
        /** The client-side proxy for interacting with the backend. */
        e, n, s, i) {
            this.localStore = t, this.datastore = e, this.asyncQueue = n, this.remoteSyncer = {}, 
            /**
             * A list of up to MAX_PENDING_WRITES writes that we have fetched from the
             * LocalStore via fillWritePipeline() and have or will send to the write
             * stream.
             *
             * Whenever writePipeline.length > 0 the RemoteStore will attempt to start or
             * restart the write stream. When the stream is established the writes in the
             * pipeline will be sent in order.
             *
             * Writes remain in writePipeline until they are acknowledged by the backend
             * and thus will automatically be re-sent if the stream is interrupted /
             * restarted before they're acknowledged.
             *
             * Write responses from the backend are linked to their originating request
             * purely based on order, and so we can just shift() writes from the front of
             * the writePipeline as we receive responses.
             */
            this.au = [], 
            /**
             * A mapping of watched targets that the client cares about tracking and the
             * user has explicitly called a 'listen' for this target.
             *
             * These targets may or may not have been sent to or acknowledged by the
             * server. On re-establishing the listen stream, these targets should be sent
             * to the server. The targets removed with unlistens are removed eagerly
             * without waiting for confirmation from the listen stream.
             */
            this.hu = new Map, 
            /**
             * A set of reasons for why the RemoteStore may be offline. If empty, the
             * RemoteStore may start its network connections.
             */
            this.lu = new Set, 
            /**
             * Event handlers that get called when the network is disabled or enabled.
             *
             * PORTING NOTE: These functions are used on the Web client to create the
             * underlying streams (to support tree-shakeable streams). On Android and iOS,
             * the streams are created during construction of RemoteStore.
             */
            this.fu = [], this.du = i, this.du.Br((t => {
                n.enqueueAndForget((async () => {
                    // Porting Note: Unlike iOS, `restartNetwork()` is called even when the
                    // network becomes unreachable as we don't have any other way to tear
                    // down our streams.
                    yu(this) && (M("RemoteStore", "Restarting streams for network reachability change."), 
                    await async function(t) {
                        const e = K(t);
                        e.lu.add(4 /* ConnectivityChange */), await lu(e), e._u.set("Unknown" /* Unknown */), 
                        e.lu.delete(4 /* ConnectivityChange */), await hu(e);
                    }(this));
                }));
            })), this._u = new cu(n, s);
        }
    }

    async function hu(t) {
        if (yu(t)) for (const e of t.fu) await e(/* enabled= */ !0);
    }

    /**
     * Temporarily disables the network. The network can be re-enabled using
     * enableNetwork().
     */ async function lu(t) {
        for (const e of t.fu) await e(/* enabled= */ !1);
    }

    /**
     * Starts new listen for the given target. Uses resume token if provided. It
     * is a no-op if the target of given `TargetData` is already being listened to.
     */
    function fu(t, e) {
        const n = K(t);
        n.hu.has(e.targetId) || (
        // Mark this as something the client is currently listening for.
        n.hu.set(e.targetId, e), gu(n) ? 
        // The listen will be sent in onWatchStreamOpen
        mu(n) : Mu(n).Co() && _u(n, e));
    }

    /**
     * Removes the listen from server. It is a no-op if the given target id is
     * not being listened to.
     */ function du(t, e) {
        const n = K(t), s = Mu(n);
        n.hu.delete(e), s.Co() && wu(n, e), 0 === n.hu.size && (s.Co() ? s.ko() : yu(n) && 
        // Revert to OnlineState.Unknown if the watch stream is not open and we
        // have no listeners, since without any listens to send we cannot
        // confirm if the stream is healthy and upgrade to OnlineState.Online.
        n._u.set("Unknown" /* Unknown */));
    }

    /**
     * We need to increment the the expected number of pending responses we're due
     * from watch so we wait for the ack to process any messages from this target.
     */ function _u(t, e) {
        t.wu.Nt(e.targetId), Mu(t).Qo(e);
    }

    /**
     * We need to increment the expected number of pending responses we're due
     * from watch so we wait for the removal on the server before we process any
     * messages from this target.
     */ function wu(t, e) {
        t.wu.Nt(e), Mu(t).jo(e);
    }

    function mu(t) {
        t.wu = new Rs({
            getRemoteKeysForTarget: e => t.remoteSyncer.getRemoteKeysForTarget(e),
            te: e => t.hu.get(e) || null
        }), Mu(t).start(), t._u.iu();
    }

    /**
     * Returns whether the watch stream should be started because it's necessary
     * and has not yet been started.
     */ function gu(t) {
        return yu(t) && !Mu(t).Do() && t.hu.size > 0;
    }

    function yu(t) {
        return 0 === K(t).lu.size;
    }

    function pu(t) {
        t.wu = void 0;
    }

    async function Iu(t) {
        t.hu.forEach(((e, n) => {
            _u(t, e);
        }));
    }

    async function Tu(t, e) {
        pu(t), 
        // If we still need the watch stream, retry the connection.
        gu(t) ? (t._u.uu(e), mu(t)) : 
        // No need to restart watch stream because there are no active targets.
        // The online state is set to unknown because there is no active attempt
        // at establishing a connection
        t._u.set("Unknown" /* Unknown */);
    }

    async function Eu(t, e, n) {
        if (
        // Mark the client as online since we got a message from the server
        t._u.set("Online" /* Online */), e instanceof Es && 2 /* Removed */ === e.state && e.cause) 
        // There was an error on a target, don't wait for a consistent snapshot
        // to raise events
        try {
            await 
            /** Handles an error on a target */
            async function(t, e) {
                const n = e.cause;
                for (const s of e.targetIds) 
                // A watched target might have been removed already.
                t.hu.has(s) && (await t.remoteSyncer.rejectListen(s, n), t.hu.delete(s), t.wu.removeTarget(s));
            }
            /**
     * Attempts to fill our write pipeline with writes from the LocalStore.
     *
     * Called internally to bootstrap or refill the write pipeline and by
     * SyncEngine whenever there are new mutations to process.
     *
     * Starts the write stream if necessary.
     */ (t, e);
        } catch (n) {
            M("RemoteStore", "Failed to remove targets %s: %s ", e.targetIds.join(","), n), 
            await Au(t, n);
        } else if (e instanceof Is ? t.wu.Ut(e) : e instanceof Ts ? t.wu.zt(e) : t.wu.Gt(e), 
        !n.isEqual(ct.min())) try {
            const e = await vo(t.localStore);
            n.compareTo(e) >= 0 && 
            // We have received a target change with a global snapshot if the snapshot
            // version is not equal to SnapshotVersion.min().
            await 
            /**
     * Takes a batch of changes from the Datastore, repackages them as a
     * RemoteEvent, and passes that on to the listener, which is typically the
     * SyncEngine.
     */
            function(t, e) {
                const n = t.wu.Yt(e);
                // Update in-memory resume tokens. LocalStore will update the
                // persistent view of these when applying the completed RemoteEvent.
                            return n.targetChanges.forEach(((n, s) => {
                    if (n.resumeToken.approximateByteSize() > 0) {
                        const i = t.hu.get(s);
                        // A watched target might have been removed already.
                                            i && t.hu.set(s, i.withResumeToken(n.resumeToken, e));
                    }
                })), 
                // Re-establish listens for the targets that have been invalidated by
                // existence filter mismatches.
                n.targetMismatches.forEach((e => {
                    const n = t.hu.get(e);
                    if (!n) 
                    // A watched target might have been removed already.
                    return;
                    // Clear the resume token for the target, since we're in a known mismatch
                    // state.
                                    t.hu.set(e, n.withResumeToken(Jt.EMPTY_BYTE_STRING, n.snapshotVersion)), 
                    // Cause a hard reset by unwatching and rewatching immediately, but
                    // deliberately don't send a resume token so that we get a full update.
                    wu(t, e);
                    // Mark the target we send as being on behalf of an existence filter
                    // mismatch, but don't actually retain that in listenTargets. This ensures
                    // that we flag the first re-listen this way without impacting future
                    // listens of this target (that might happen e.g. on reconnect).
                    const s = new Li(n.target, e, 1 /* ExistenceFilterMismatch */ , n.sequenceNumber);
                    _u(t, s);
                })), t.remoteSyncer.applyRemoteEvent(n);
            }(t, n);
        } catch (e) {
            M("RemoteStore", "Failed to raise snapshot:", e), await Au(t, e);
        }
    }

    /**
     * Recovery logic for IndexedDB errors that takes the network offline until
     * `op` succeeds. Retries are scheduled with backoff using
     * `enqueueRetryable()`. If `op()` is not provided, IndexedDB access is
     * validated via a generic operation.
     *
     * The returned Promise is resolved once the network is disabled and before
     * any retry attempt.
     */ async function Au(t, e, n) {
        if (!Ct(e)) throw e;
        t.lu.add(1 /* IndexedDbFailed */), 
        // Disable network and raise offline snapshots
        await lu(t), t._u.set("Offline" /* Offline */), n || (
        // Use a simple read operation to determine if IndexedDB recovered.
        // Ideally, we would expose a health check directly on SimpleDb, but
        // RemoteStore only has access to persistence through LocalStore.
        n = () => vo(t.localStore)), 
        // Probe IndexedDB periodically and re-enable network
        t.asyncQueue.enqueueRetryable((async () => {
            M("RemoteStore", "Retrying IndexedDB access"), await n(), t.lu.delete(1 /* IndexedDbFailed */), 
            await hu(t);
        }));
    }

    /**
     * Executes `op`. If `op` fails, takes the network offline until `op`
     * succeeds. Returns after the first attempt.
     */ function Ru(t, e) {
        return e().catch((n => Au(t, n, e)));
    }

    async function bu(t) {
        const e = K(t), n = Fu(e);
        let s = e.au.length > 0 ? e.au[e.au.length - 1].batchId : -1;
        for (;Pu(e); ) try {
            const t = await Do(e.localStore, s);
            if (null === t) {
                0 === e.au.length && n.ko();
                break;
            }
            s = t.batchId, vu(e, t);
        } catch (t) {
            await Au(e, t);
        }
        Vu(e) && Su(e);
    }

    /**
     * Returns true if we can add to the write pipeline (i.e. the network is
     * enabled and the write pipeline is not full).
     */ function Pu(t) {
        return yu(t) && t.au.length < 10;
    }

    /**
     * Queues additional writes to be sent to the write stream, sending them
     * immediately if the write stream is established.
     */ function vu(t, e) {
        t.au.push(e);
        const n = Fu(t);
        n.Co() && n.zo && n.Ho(e.mutations);
    }

    function Vu(t) {
        return yu(t) && !Fu(t).Do() && t.au.length > 0;
    }

    function Su(t) {
        Fu(t).start();
    }

    async function Du(t) {
        Fu(t).Xo();
    }

    async function Cu(t) {
        const e = Fu(t);
        // Send the write pipeline now that the stream is established.
            for (const n of t.au) e.Ho(n.mutations);
    }

    async function xu(t, e, n) {
        const s = t.au.shift(), i = $i.from(s, e, n);
        await Ru(t, (() => t.remoteSyncer.applySuccessfulWrite(i))), 
        // It's possible that with the completion of this mutation another
        // slot has freed up.
        await bu(t);
    }

    async function Nu(t, e) {
        // If the write stream closed after the write handshake completes, a write
        // operation failed and we fail the pending operation.
        e && Fu(t).zo && 
        // This error affects the actual write.
        await async function(t, e) {
            // Only handle permanent errors here. If it's transient, just let the retry
            // logic kick in.
            if (n = e.code, ns(n) && n !== G.ABORTED) {
                // This was a permanent error, the request itself was the problem
                // so it's not going to succeed if we resend it.
                const n = t.au.shift();
                // In this case it's also unlikely that the server itself is melting
                // down -- this was just a bad request so inhibit backoff on the next
                // restart.
                            Fu(t).No(), await Ru(t, (() => t.remoteSyncer.rejectFailedWrite(n.batchId, e))), 
                // It's possible that with the completion of this mutation
                // another slot has freed up.
                await bu(t);
            }
            var n;
        }(t, e), 
        // The write stream might have been started by refilling the write
        // pipeline for failed writes
        Vu(t) && Su(t);
    }

    async function ku(t, e) {
        const n = K(t);
        n.asyncQueue.verifyOperationInProgress(), M("RemoteStore", "RemoteStore received new credentials");
        const s = yu(n);
        // Tear down and re-create our network streams. This will ensure we get a
        // fresh auth token for the new user and re-fill the write pipeline with
        // new mutations from the LocalStore (since mutations are per-user).
            n.lu.add(3 /* CredentialChange */), await lu(n), s && 
        // Don't set the network status to Unknown if we are offline.
        n._u.set("Unknown" /* Unknown */), await n.remoteSyncer.handleCredentialChange(e), 
        n.lu.delete(3 /* CredentialChange */), await hu(n);
    }

    /**
     * Toggles the network state when the client gains or loses its primary lease.
     */ async function Ou(t, e) {
        const n = K(t);
        e ? (n.lu.delete(2 /* IsSecondary */), await hu(n)) : e || (n.lu.add(2 /* IsSecondary */), 
        await lu(n), n._u.set("Unknown" /* Unknown */));
    }

    /**
     * If not yet initialized, registers the WatchStream and its network state
     * callback with `remoteStoreImpl`. Returns the existing stream if one is
     * already available.
     *
     * PORTING NOTE: On iOS and Android, the WatchStream gets registered on startup.
     * This is not done on Web to allow it to be tree-shaken.
     */ function Mu(t) {
        return t.mu || (
        // Create stream (but note that it is not started yet).
        t.mu = function(t, e, n) {
            const s = K(t);
            return s.tu(), new ru(e, s.bo, s.authCredentials, s.appCheckCredentials, s.wt, n);
        }
        /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ (t.datastore, t.asyncQueue, {
            zr: Iu.bind(null, t),
            Jr: Tu.bind(null, t),
            Go: Eu.bind(null, t)
        }), t.fu.push((async e => {
            e ? (t.mu.No(), gu(t) ? mu(t) : t._u.set("Unknown" /* Unknown */)) : (await t.mu.stop(), 
            pu(t));
        }))), t.mu;
    }

    /**
     * If not yet initialized, registers the WriteStream and its network state
     * callback with `remoteStoreImpl`. Returns the existing stream if one is
     * already available.
     *
     * PORTING NOTE: On iOS and Android, the WriteStream gets registered on startup.
     * This is not done on Web to allow it to be tree-shaken.
     */ function Fu(t) {
        return t.gu || (
        // Create stream (but note that it is not started yet).
        t.gu = function(t, e, n) {
            const s = K(t);
            return s.tu(), new ou(e, s.bo, s.authCredentials, s.appCheckCredentials, s.wt, n);
        }(t.datastore, t.asyncQueue, {
            zr: Du.bind(null, t),
            Jr: Nu.bind(null, t),
            Yo: Cu.bind(null, t),
            Jo: xu.bind(null, t)
        }), t.fu.push((async e => {
            e ? (t.gu.No(), 
            // This will start the write stream if necessary.
            await bu(t)) : (await t.gu.stop(), t.au.length > 0 && (M("RemoteStore", `Stopping write stream with ${t.au.length} pending writes`), 
            t.au = []));
        }))), t.gu;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Represents an operation scheduled to be run in the future on an AsyncQueue.
     *
     * It is created via DelayedOperation.createAndSchedule().
     *
     * Supports cancellation (via cancel()) and early execution (via skipDelay()).
     *
     * Note: We implement `PromiseLike` instead of `Promise`, as the `Promise` type
     * in newer versions of TypeScript defines `finally`, which is not available in
     * IE.
     */
    class $u {
        constructor(t, e, n, s, i) {
            this.asyncQueue = t, this.timerId = e, this.targetTimeMs = n, this.op = s, this.removalCallback = i, 
            this.deferred = new j, this.then = this.deferred.promise.then.bind(this.deferred.promise), 
            // It's normal for the deferred promise to be canceled (due to cancellation)
            // and so we attach a dummy catch callback to avoid
            // 'UnhandledPromiseRejectionWarning' log spam.
            this.deferred.promise.catch((t => {}));
        }
        /**
         * Creates and returns a DelayedOperation that has been scheduled to be
         * executed on the provided asyncQueue after the provided delayMs.
         *
         * @param asyncQueue - The queue to schedule the operation on.
         * @param id - A Timer ID identifying the type of operation this is.
         * @param delayMs - The delay (ms) before the operation should be scheduled.
         * @param op - The operation to run.
         * @param removalCallback - A callback to be called synchronously once the
         *   operation is executed or canceled, notifying the AsyncQueue to remove it
         *   from its delayedOperations list.
         *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and
         *   the DelayedOperation class public.
         */    static createAndSchedule(t, e, n, s, i) {
            const r = Date.now() + n, o = new $u(t, e, r, s, i);
            return o.start(n), o;
        }
        /**
         * Starts the timer. This is called immediately after construction by
         * createAndSchedule().
         */    start(t) {
            this.timerHandle = setTimeout((() => this.handleDelayElapsed()), t);
        }
        /**
         * Queues the operation to run immediately (if it hasn't already been run or
         * canceled).
         */    skipDelay() {
            return this.handleDelayElapsed();
        }
        /**
         * Cancels the operation if it hasn't already been executed or canceled. The
         * promise will be rejected.
         *
         * As long as the operation has not yet been run, calling cancel() provides a
         * guarantee that the operation will not be run.
         */    cancel(t) {
            null !== this.timerHandle && (this.clearTimeout(), this.deferred.reject(new Q(G.CANCELLED, "Operation cancelled" + (t ? ": " + t : ""))));
        }
        handleDelayElapsed() {
            this.asyncQueue.enqueueAndForget((() => null !== this.timerHandle ? (this.clearTimeout(), 
            this.op().then((t => this.deferred.resolve(t)))) : Promise.resolve()));
        }
        clearTimeout() {
            null !== this.timerHandle && (this.removalCallback(this), clearTimeout(this.timerHandle), 
            this.timerHandle = null);
        }
    }

    /**
     * Returns a FirestoreError that can be surfaced to the user if the provided
     * error is an IndexedDbTransactionError. Re-throws the error otherwise.
     */ function Bu(t, e) {
        if (F("AsyncQueue", `${e}: ${t}`), Ct(t)) return new Q(G.UNAVAILABLE, `${e}: ${t}`);
        throw t;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * DocumentSet is an immutable (copy-on-write) collection that holds documents
     * in order specified by the provided comparator. We always add a document key
     * comparator on top of what is provided to guarantee document equality based on
     * the key.
     */ class Lu {
        /** The default ordering is by key if the comparator is omitted */
        constructor(t) {
            // We are adding document key comparator to the end as it's the only
            // guaranteed unique property of a document.
            this.comparator = t ? (e, n) => t(e, n) || dt.comparator(e.key, n.key) : (t, e) => dt.comparator(t.key, e.key), 
            this.keyedMap = cs(), this.sortedSet = new qt(this.comparator);
        }
        /**
         * Returns an empty copy of the existing DocumentSet, using the same
         * comparator.
         */    static emptySet(t) {
            return new Lu(t.comparator);
        }
        has(t) {
            return null != this.keyedMap.get(t);
        }
        get(t) {
            return this.keyedMap.get(t);
        }
        first() {
            return this.sortedSet.minKey();
        }
        last() {
            return this.sortedSet.maxKey();
        }
        isEmpty() {
            return this.sortedSet.isEmpty();
        }
        /**
         * Returns the index of the provided key in the document set, or -1 if the
         * document key is not present in the set;
         */    indexOf(t) {
            const e = this.keyedMap.get(t);
            return e ? this.sortedSet.indexOf(e) : -1;
        }
        get size() {
            return this.sortedSet.size;
        }
        /** Iterates documents in order defined by "comparator" */    forEach(t) {
            this.sortedSet.inorderTraversal(((e, n) => (t(e), !1)));
        }
        /** Inserts or updates a document with the same key */    add(t) {
            // First remove the element if we have it.
            const e = this.delete(t.key);
            return e.copy(e.keyedMap.insert(t.key, t), e.sortedSet.insert(t, null));
        }
        /** Deletes a document with a given key */    delete(t) {
            const e = this.get(t);
            return e ? this.copy(this.keyedMap.remove(t), this.sortedSet.remove(e)) : this;
        }
        isEqual(t) {
            if (!(t instanceof Lu)) return !1;
            if (this.size !== t.size) return !1;
            const e = this.sortedSet.getIterator(), n = t.sortedSet.getIterator();
            for (;e.hasNext(); ) {
                const t = e.getNext().key, s = n.getNext().key;
                if (!t.isEqual(s)) return !1;
            }
            return !0;
        }
        toString() {
            const t = [];
            return this.forEach((e => {
                t.push(e.toString());
            })), 0 === t.length ? "DocumentSet ()" : "DocumentSet (\n  " + t.join("  \n") + "\n)";
        }
        copy(t, e) {
            const n = new Lu;
            return n.comparator = this.comparator, n.keyedMap = t, n.sortedSet = e, n;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * DocumentChangeSet keeps track of a set of changes to docs in a query, merging
     * duplicate events for the same doc.
     */ class Uu {
        constructor() {
            this.yu = new qt(dt.comparator);
        }
        track(t) {
            const e = t.doc.key, n = this.yu.get(e);
            n ? 
            // Merge the new change with the existing change.
            0 /* Added */ !== t.type && 3 /* Metadata */ === n.type ? this.yu = this.yu.insert(e, t) : 3 /* Metadata */ === t.type && 1 /* Removed */ !== n.type ? this.yu = this.yu.insert(e, {
                type: n.type,
                doc: t.doc
            }) : 2 /* Modified */ === t.type && 2 /* Modified */ === n.type ? this.yu = this.yu.insert(e, {
                type: 2 /* Modified */ ,
                doc: t.doc
            }) : 2 /* Modified */ === t.type && 0 /* Added */ === n.type ? this.yu = this.yu.insert(e, {
                type: 0 /* Added */ ,
                doc: t.doc
            }) : 1 /* Removed */ === t.type && 0 /* Added */ === n.type ? this.yu = this.yu.remove(e) : 1 /* Removed */ === t.type && 2 /* Modified */ === n.type ? this.yu = this.yu.insert(e, {
                type: 1 /* Removed */ ,
                doc: n.doc
            }) : 0 /* Added */ === t.type && 1 /* Removed */ === n.type ? this.yu = this.yu.insert(e, {
                type: 2 /* Modified */ ,
                doc: t.doc
            }) : 
            // This includes these cases, which don't make sense:
            // Added->Added
            // Removed->Removed
            // Modified->Added
            // Removed->Modified
            // Metadata->Added
            // Removed->Metadata
            L() : this.yu = this.yu.insert(e, t);
        }
        pu() {
            const t = [];
            return this.yu.inorderTraversal(((e, n) => {
                t.push(n);
            })), t;
        }
    }

    class qu {
        constructor(t, e, n, s, i, r, o, u) {
            this.query = t, this.docs = e, this.oldDocs = n, this.docChanges = s, this.mutatedKeys = i, 
            this.fromCache = r, this.syncStateChanged = o, this.excludesMetadataChanges = u;
        }
        /** Returns a view snapshot as if all documents in the snapshot were added. */    static fromInitialDocuments(t, e, n, s) {
            const i = [];
            return e.forEach((t => {
                i.push({
                    type: 0 /* Added */ ,
                    doc: t
                });
            })), new qu(t, e, Lu.emptySet(e), i, n, s, 
            /* syncStateChanged= */ !0, 
            /* excludesMetadataChanges= */ !1);
        }
        get hasPendingWrites() {
            return !this.mutatedKeys.isEmpty();
        }
        isEqual(t) {
            if (!(this.fromCache === t.fromCache && this.syncStateChanged === t.syncStateChanged && this.mutatedKeys.isEqual(t.mutatedKeys) && dn(this.query, t.query) && this.docs.isEqual(t.docs) && this.oldDocs.isEqual(t.oldDocs))) return !1;
            const e = this.docChanges, n = t.docChanges;
            if (e.length !== n.length) return !1;
            for (let t = 0; t < e.length; t++) if (e[t].type !== n[t].type || !e[t].doc.isEqual(n[t].doc)) return !1;
            return !0;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Holds the listeners and the last received ViewSnapshot for a query being
     * tracked by EventManager.
     */ class Ku {
        constructor() {
            this.Iu = void 0, this.listeners = [];
        }
    }

    class Gu {
        constructor() {
            this.queries = new is((t => _n(t)), dn), this.onlineState = "Unknown" /* Unknown */ , 
            this.Tu = new Set;
        }
    }

    async function Qu(t, e) {
        const n = K(t), s = e.query;
        let i = !1, r = n.queries.get(s);
        if (r || (i = !0, r = new Ku), i) try {
            r.Iu = await n.onListen(s);
        } catch (t) {
            const n = Bu(t, `Initialization of query '${wn(e.query)}' failed`);
            return void e.onError(n);
        }
        if (n.queries.set(s, r), r.listeners.push(e), 
        // Run global snapshot listeners if a consistent snapshot has been emitted.
        e.Eu(n.onlineState), r.Iu) {
            e.Au(r.Iu) && Hu(n);
        }
    }

    async function ju(t, e) {
        const n = K(t), s = e.query;
        let i = !1;
        const r = n.queries.get(s);
        if (r) {
            const t = r.listeners.indexOf(e);
            t >= 0 && (r.listeners.splice(t, 1), i = 0 === r.listeners.length);
        }
        if (i) return n.queries.delete(s), n.onUnlisten(s);
    }

    function Wu(t, e) {
        const n = K(t);
        let s = !1;
        for (const t of e) {
            const e = t.query, i = n.queries.get(e);
            if (i) {
                for (const e of i.listeners) e.Au(t) && (s = !0);
                i.Iu = t;
            }
        }
        s && Hu(n);
    }

    function zu(t, e, n) {
        const s = K(t), i = s.queries.get(e);
        if (i) for (const t of i.listeners) t.onError(n);
        // Remove all listeners. NOTE: We don't need to call syncEngine.unlisten()
        // after an error.
            s.queries.delete(e);
    }

    // Call all global snapshot listeners that have been set.
    function Hu(t) {
        t.Tu.forEach((t => {
            t.next();
        }));
    }

    /**
     * QueryListener takes a series of internal view snapshots and determines
     * when to raise the event.
     *
     * It uses an Observer to dispatch events.
     */ class Ju {
        constructor(t, e, n) {
            this.query = t, this.Ru = e, 
            /**
             * Initial snapshots (e.g. from cache) may not be propagated to the wrapped
             * observer. This flag is set to true once we've actually raised an event.
             */
            this.bu = !1, this.Pu = null, this.onlineState = "Unknown" /* Unknown */ , this.options = n || {};
        }
        /**
         * Applies the new ViewSnapshot to this listener, raising a user-facing event
         * if applicable (depending on what changed, whether the user has opted into
         * metadata-only changes, etc.). Returns true if a user-facing event was
         * indeed raised.
         */    Au(t) {
            if (!this.options.includeMetadataChanges) {
                // Remove the metadata only changes.
                const e = [];
                for (const n of t.docChanges) 3 /* Metadata */ !== n.type && e.push(n);
                t = new qu(t.query, t.docs, t.oldDocs, e, t.mutatedKeys, t.fromCache, t.syncStateChanged, 
                /* excludesMetadataChanges= */ !0);
            }
            let e = !1;
            return this.bu ? this.vu(t) && (this.Ru.next(t), e = !0) : this.Vu(t, this.onlineState) && (this.Su(t), 
            e = !0), this.Pu = t, e;
        }
        onError(t) {
            this.Ru.error(t);
        }
        /** Returns whether a snapshot was raised. */    Eu(t) {
            this.onlineState = t;
            let e = !1;
            return this.Pu && !this.bu && this.Vu(this.Pu, t) && (this.Su(this.Pu), e = !0), 
            e;
        }
        Vu(t, e) {
            // Always raise the first event when we're synced
            if (!t.fromCache) return !0;
            // NOTE: We consider OnlineState.Unknown as online (it should become Offline
            // or Online if we wait long enough).
                    const n = "Offline" /* Offline */ !== e;
            // Don't raise the event if we're online, aren't synced yet (checked
            // above) and are waiting for a sync.
                    return (!this.options.Du || !n) && (!t.docs.isEmpty() || "Offline" /* Offline */ === e);
            // Raise data from cache if we have any documents or we are offline
            }
        vu(t) {
            // We don't need to handle includeDocumentMetadataChanges here because
            // the Metadata only changes have already been stripped out if needed.
            // At this point the only changes we will see are the ones we should
            // propagate.
            if (t.docChanges.length > 0) return !0;
            const e = this.Pu && this.Pu.hasPendingWrites !== t.hasPendingWrites;
            return !(!t.syncStateChanged && !e) && !0 === this.options.includeMetadataChanges;
            // Generally we should have hit one of the cases above, but it's possible
            // to get here if there were only metadata docChanges and they got
            // stripped out.
            }
        Su(t) {
            t = qu.fromInitialDocuments(t.query, t.docs, t.mutatedKeys, t.fromCache), this.bu = !0, 
            this.Ru.next(t);
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A complete element in the bundle stream, together with the byte length it
     * occupies in the stream.
     */ class Yu {
        constructor(t, 
        // How many bytes this element takes to store in the bundle.
        e) {
            this.payload = t, this.byteLength = e;
        }
        Cu() {
            return "metadata" in this.payload;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Helper to convert objects from bundles to model objects in the SDK.
     */ class Xu {
        constructor(t) {
            this.wt = t;
        }
        Wi(t) {
            return Fs(this.wt, t);
        }
        /**
         * Converts a BundleDocument to a MutableDocument.
         */    zi(t) {
            return t.metadata.exists ? Ks(this.wt, t.document, !1) : xe.newNoDocument(this.Wi(t.metadata.name), this.Hi(t.metadata.readTime));
        }
        Hi(t) {
            return Ns(t);
        }
    }

    /**
     * A class to process the elements from a bundle, load them into local
     * storage and provide progress update while loading.
     */ class Zu {
        constructor(t, e, n) {
            this.xu = t, this.localStore = e, this.wt = n, 
            /** Batched queries to be saved into storage */
            this.queries = [], 
            /** Batched documents to be saved into storage */
            this.documents = [], 
            /** The collection groups affected by this bundle. */
            this.collectionGroups = new Set, this.progress = tc(t);
        }
        /**
         * Adds an element from the bundle to the loader.
         *
         * Returns a new progress if adding the element leads to a new progress,
         * otherwise returns null.
         */    Nu(t) {
            this.progress.bytesLoaded += t.byteLength;
            let e = this.progress.documentsLoaded;
            if (t.payload.namedQuery) this.queries.push(t.payload.namedQuery); else if (t.payload.documentMetadata) {
                this.documents.push({
                    metadata: t.payload.documentMetadata
                }), t.payload.documentMetadata.exists || ++e;
                const n = ht.fromString(t.payload.documentMetadata.name);
                this.collectionGroups.add(n.get(n.length - 2));
            } else t.payload.document && (this.documents[this.documents.length - 1].document = t.payload.document, 
            ++e);
            return e !== this.progress.documentsLoaded ? (this.progress.documentsLoaded = e, 
            Object.assign({}, this.progress)) : null;
        }
        ku(t) {
            const e = new Map, n = new Xu(this.wt);
            for (const s of t) if (s.metadata.queries) {
                const t = n.Wi(s.metadata.name);
                for (const n of s.metadata.queries) {
                    const s = (e.get(n) || ws()).add(t);
                    e.set(n, s);
                }
            }
            return e;
        }
        /**
         * Update the progress to 'Success' and return the updated progress.
         */    async complete() {
            const t = await Fo(this.localStore, new Xu(this.wt), this.documents, this.xu.id), e = this.ku(this.documents);
            for (const t of this.queries) await $o(this.localStore, t, e.get(t.name));
            return this.progress.taskState = "Success", {
                progress: this.progress,
                Ou: this.collectionGroups,
                Mu: t
            };
        }
    }

    /**
     * Returns a `LoadBundleTaskProgress` representing the initial progress of
     * loading a bundle.
     */ function tc(t) {
        return {
            taskState: "Running",
            documentsLoaded: 0,
            bytesLoaded: 0,
            totalDocuments: t.totalDocuments,
            totalBytes: t.totalBytes
        };
    }

    /**
     * Returns a `LoadBundleTaskProgress` representing the progress that the loading
     * has succeeded.
     */
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class ec {
        constructor(t) {
            this.key = t;
        }
    }

    class nc {
        constructor(t) {
            this.key = t;
        }
    }

    /**
     * View is responsible for computing the final merged truth of what docs are in
     * a query. It gets notified of local and remote changes to docs, and applies
     * the query filters and limits to determine the most correct possible results.
     */ class sc {
        constructor(t, 
        /** Documents included in the remote target */
        e) {
            this.query = t, this.Fu = e, this.$u = null, 
            /**
             * A flag whether the view is current with the backend. A view is considered
             * current after it has seen the current flag from the backend and did not
             * lose consistency within the watch stream (e.g. because of an existence
             * filter mismatch).
             */
            this.current = !1, 
            /** Documents in the view but not in the remote target */
            this.Bu = ws(), 
            /** Document Keys that have local changes */
            this.mutatedKeys = ws(), this.Lu = yn(t), this.Uu = new Lu(this.Lu);
        }
        /**
         * The set of remote documents that the server has told us belongs to the target associated with
         * this view.
         */    get qu() {
            return this.Fu;
        }
        /**
         * Iterates over a set of doc changes, applies the query limit, and computes
         * what the new results should be, what the changes were, and whether we may
         * need to go back to the local cache for more results. Does not make any
         * changes to the view.
         * @param docChanges - The doc changes to apply to this view.
         * @param previousChanges - If this is being called with a refill, then start
         *        with this set of docs and changes instead of the current view.
         * @returns a new set of docs, changes, and refill flag.
         */    Ku(t, e) {
            const n = e ? e.Gu : new Uu, s = e ? e.Uu : this.Uu;
            let i = e ? e.mutatedKeys : this.mutatedKeys, r = s, o = !1;
            // Track the last doc in a (full) limit. This is necessary, because some
            // update (a delete, or an update moving a doc past the old limit) might
            // mean there is some other document in the local cache that either should
            // come (1) between the old last limit doc and the new last document, in the
            // case of updates, or (2) after the new last document, in the case of
            // deletes. So we keep this doc at the old limit to compare the updates to.
            // Note that this should never get used in a refill (when previousChanges is
            // set), because there will only be adds -- no deletes or updates.
            const u = "F" /* First */ === this.query.limitType && s.size === this.query.limit ? s.last() : null, c = "L" /* Last */ === this.query.limitType && s.size === this.query.limit ? s.first() : null;
            // Drop documents out to meet limit/limitToLast requirement.
            if (t.inorderTraversal(((t, e) => {
                const a = s.get(t), h = mn(this.query, e) ? e : null, l = !!a && this.mutatedKeys.has(a.key), f = !!h && (h.hasLocalMutations || 
                // We only consider committed mutations for documents that were
                // mutated during the lifetime of the view.
                this.mutatedKeys.has(h.key) && h.hasCommittedMutations);
                let d = !1;
                // Calculate change
                            if (a && h) {
                    a.data.isEqual(h.data) ? l !== f && (n.track({
                        type: 3 /* Metadata */ ,
                        doc: h
                    }), d = !0) : this.Qu(a, h) || (n.track({
                        type: 2 /* Modified */ ,
                        doc: h
                    }), d = !0, (u && this.Lu(h, u) > 0 || c && this.Lu(h, c) < 0) && (
                    // This doc moved from inside the limit to outside the limit.
                    // That means there may be some other doc in the local cache
                    // that should be included instead.
                    o = !0));
                } else !a && h ? (n.track({
                    type: 0 /* Added */ ,
                    doc: h
                }), d = !0) : a && !h && (n.track({
                    type: 1 /* Removed */ ,
                    doc: a
                }), d = !0, (u || c) && (
                // A doc was removed from a full limit query. We'll need to
                // requery from the local cache to see if we know about some other
                // doc that should be in the results.
                o = !0));
                d && (h ? (r = r.add(h), i = f ? i.add(t) : i.delete(t)) : (r = r.delete(t), i = i.delete(t)));
            })), null !== this.query.limit) for (;r.size > this.query.limit; ) {
                const t = "F" /* First */ === this.query.limitType ? r.last() : r.first();
                r = r.delete(t.key), i = i.delete(t.key), n.track({
                    type: 1 /* Removed */ ,
                    doc: t
                });
            }
            return {
                Uu: r,
                Gu: n,
                Oi: o,
                mutatedKeys: i
            };
        }
        Qu(t, e) {
            // We suppress the initial change event for documents that were modified as
            // part of a write acknowledgment (e.g. when the value of a server transform
            // is applied) as Watch will send us the same document again.
            // By suppressing the event, we only raise two user visible events (one with
            // `hasPendingWrites` and the final state of the document) instead of three
            // (one with `hasPendingWrites`, the modified document with
            // `hasPendingWrites` and the final state of the document).
            return t.hasLocalMutations && e.hasCommittedMutations && !e.hasLocalMutations;
        }
        /**
         * Updates the view with the given ViewDocumentChanges and optionally updates
         * limbo docs and sync state from the provided target change.
         * @param docChanges - The set of changes to make to the view's docs.
         * @param updateLimboDocuments - Whether to update limbo documents based on
         *        this change.
         * @param targetChange - A target change to apply for computing limbo docs and
         *        sync state.
         * @returns A new ViewChange with the given docs, changes, and sync state.
         */
        // PORTING NOTE: The iOS/Android clients always compute limbo document changes.
        applyChanges(t, e, n) {
            const s = this.Uu;
            this.Uu = t.Uu, this.mutatedKeys = t.mutatedKeys;
            // Sort changes based on type and query comparator
            const i = t.Gu.pu();
            i.sort(((t, e) => function(t, e) {
                const n = t => {
                    switch (t) {
                      case 0 /* Added */ :
                        return 1;

                      case 2 /* Modified */ :
                      case 3 /* Metadata */ :
                        // A metadata change is converted to a modified change at the public
                        // api layer.  Since we sort by document key and then change type,
                        // metadata and modified changes must be sorted equivalently.
                        return 2;

                      case 1 /* Removed */ :
                        return 0;

                      default:
                        return L();
                    }
                };
                return n(t) - n(e);
            }
            /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ (t.type, e.type) || this.Lu(t.doc, e.doc))), this.ju(n);
            const r = e ? this.Wu() : [], o = 0 === this.Bu.size && this.current ? 1 /* Synced */ : 0 /* Local */ , u = o !== this.$u;
            if (this.$u = o, 0 !== i.length || u) {
                return {
                    snapshot: new qu(this.query, t.Uu, s, i, t.mutatedKeys, 0 /* Local */ === o, u, 
                    /* excludesMetadataChanges= */ !1),
                    zu: r
                };
            }
            // no changes
            return {
                zu: r
            };
        }
        /**
         * Applies an OnlineState change to the view, potentially generating a
         * ViewChange if the view's syncState changes as a result.
         */    Eu(t) {
            return this.current && "Offline" /* Offline */ === t ? (
            // If we're offline, set `current` to false and then call applyChanges()
            // to refresh our syncState and generate a ViewChange as appropriate. We
            // are guaranteed to get a new TargetChange that sets `current` back to
            // true once the client is back online.
            this.current = !1, this.applyChanges({
                Uu: this.Uu,
                Gu: new Uu,
                mutatedKeys: this.mutatedKeys,
                Oi: !1
            }, 
            /* updateLimboDocuments= */ !1)) : {
                zu: []
            };
        }
        /**
         * Returns whether the doc for the given key should be in limbo.
         */    Hu(t) {
            // If the remote end says it's part of this query, it's not in limbo.
            return !this.Fu.has(t) && (
            // The local store doesn't think it's a result, so it shouldn't be in limbo.
            !!this.Uu.has(t) && !this.Uu.get(t).hasLocalMutations);
        }
        /**
         * Updates syncedDocuments, current, and limbo docs based on the given change.
         * Returns the list of changes to which docs are in limbo.
         */    ju(t) {
            t && (t.addedDocuments.forEach((t => this.Fu = this.Fu.add(t))), t.modifiedDocuments.forEach((t => {})), 
            t.removedDocuments.forEach((t => this.Fu = this.Fu.delete(t))), this.current = t.current);
        }
        Wu() {
            // We can only determine limbo documents when we're in-sync with the server.
            if (!this.current) return [];
            // TODO(klimt): Do this incrementally so that it's not quadratic when
            // updating many documents.
                    const t = this.Bu;
            this.Bu = ws(), this.Uu.forEach((t => {
                this.Hu(t.key) && (this.Bu = this.Bu.add(t.key));
            }));
            // Diff the new limbo docs with the old limbo docs.
            const e = [];
            return t.forEach((t => {
                this.Bu.has(t) || e.push(new nc(t));
            })), this.Bu.forEach((n => {
                t.has(n) || e.push(new ec(n));
            })), e;
        }
        /**
         * Update the in-memory state of the current view with the state read from
         * persistence.
         *
         * We update the query view whenever a client's primary status changes:
         * - When a client transitions from primary to secondary, it can miss
         *   LocalStorage updates and its query views may temporarily not be
         *   synchronized with the state on disk.
         * - For secondary to primary transitions, the client needs to update the list
         *   of `syncedDocuments` since secondary clients update their query views
         *   based purely on synthesized RemoteEvents.
         *
         * @param queryResult.documents - The documents that match the query according
         * to the LocalStore.
         * @param queryResult.remoteKeys - The keys of the documents that match the
         * query according to the backend.
         *
         * @returns The ViewChange that resulted from this synchronization.
         */
        // PORTING NOTE: Multi-tab only.
        Ju(t) {
            this.Fu = t.ji, this.Bu = ws();
            const e = this.Ku(t.documents);
            return this.applyChanges(e, /*updateLimboDocuments=*/ !0);
        }
        /**
         * Returns a view snapshot as if this query was just listened to. Contains
         * a document add for every existing document and the `fromCache` and
         * `hasPendingWrites` status of the already established view.
         */
        // PORTING NOTE: Multi-tab only.
        Yu() {
            return qu.fromInitialDocuments(this.query, this.Uu, this.mutatedKeys, 0 /* Local */ === this.$u);
        }
    }

    /**
     * QueryView contains all of the data that SyncEngine needs to keep track of for
     * a particular query.
     */
    class ic {
        constructor(
        /**
         * The query itself.
         */
        t, 
        /**
         * The target number created by the client that is used in the watch
         * stream to identify this query.
         */
        e, 
        /**
         * The view is responsible for computing the final merged truth of what
         * docs are in the query. It gets notified of local and remote changes,
         * and applies the query filters and limits to determine the most correct
         * possible results.
         */
        n) {
            this.query = t, this.targetId = e, this.view = n;
        }
    }

    /** Tracks a limbo resolution. */ class rc {
        constructor(t) {
            this.key = t, 
            /**
             * Set to true once we've received a document. This is used in
             * getRemoteKeysForTarget() and ultimately used by WatchChangeAggregator to
             * decide whether it needs to manufacture a delete event for the target once
             * the target is CURRENT.
             */
            this.Xu = !1;
        }
    }

    /**
     * An implementation of `SyncEngine` coordinating with other parts of SDK.
     *
     * The parts of SyncEngine that act as a callback to RemoteStore need to be
     * registered individually. This is done in `syncEngineWrite()` and
     * `syncEngineListen()` (as well as `applyPrimaryState()`) as these methods
     * serve as entry points to RemoteStore's functionality.
     *
     * Note: some field defined in this class might have public access level, but
     * the class is not exported so they are only accessible from this module.
     * This is useful to implement optional features (like bundles) in free
     * functions, such that they are tree-shakeable.
     */ class oc {
        constructor(t, e, n, 
        // PORTING NOTE: Manages state synchronization in multi-tab environments.
        s, i, r) {
            this.localStore = t, this.remoteStore = e, this.eventManager = n, this.sharedClientState = s, 
            this.currentUser = i, this.maxConcurrentLimboResolutions = r, this.Zu = {}, this.tc = new is((t => _n(t)), dn), 
            this.ec = new Map, 
            /**
             * The keys of documents that are in limbo for which we haven't yet started a
             * limbo resolution query. The strings in this set are the result of calling
             * `key.path.canonicalString()` where `key` is a `DocumentKey` object.
             *
             * The `Set` type was chosen because it provides efficient lookup and removal
             * of arbitrary elements and it also maintains insertion order, providing the
             * desired queue-like FIFO semantics.
             */
            this.nc = new Set, 
            /**
             * Keeps track of the target ID for each document that is in limbo with an
             * active target.
             */
            this.sc = new qt(dt.comparator), 
            /**
             * Keeps track of the information about an active limbo resolution for each
             * active target ID that was started for the purpose of limbo resolution.
             */
            this.ic = new Map, this.rc = new io, 
            /** Stores user completion handlers, indexed by User and BatchId. */
            this.oc = {}, 
            /** Stores user callbacks waiting for all pending writes to be acknowledged. */
            this.uc = new Map, this.cc = kr.Rn(), this.onlineState = "Unknown" /* Unknown */ , 
            // The primary state is set to `true` or `false` immediately after Firestore
            // startup. In the interim, a client should only be considered primary if
            // `isPrimary` is true.
            this.ac = void 0;
        }
        get isPrimaryClient() {
            return !0 === this.ac;
        }
    }

    /**
     * Initiates the new listen, resolves promise when listen enqueued to the
     * server. All the subsequent view snapshots or errors are sent to the
     * subscribed handlers. Returns the initial snapshot.
     */
    async function uc(t, e) {
        const n = Mc(t);
        let s, i;
        const r = n.tc.get(e);
        if (r) 
        // PORTING NOTE: With Multi-Tab Web, it is possible that a query view
        // already exists when EventManager calls us for the first time. This
        // happens when the primary tab is already listening to this query on
        // behalf of another tab and the user of the primary also starts listening
        // to the query. EventManager will not have an assigned target ID in this
        // case and calls `listen` to obtain this ID.
        s = r.targetId, n.sharedClientState.addLocalQueryTarget(s), i = r.view.Yu(); else {
            const t = await Co(n.localStore, ln(e));
            n.isPrimaryClient && fu(n.remoteStore, t);
            const r = n.sharedClientState.addLocalQueryTarget(t.targetId);
            s = t.targetId, i = await cc(n, e, s, "current" === r);
        }
        return i;
    }

    /**
     * Registers a view for a previously unknown query and computes its initial
     * snapshot.
     */ async function cc(t, e, n, s) {
        // PORTING NOTE: On Web only, we inject the code that registers new Limbo
        // targets based on view changes. This allows us to only depend on Limbo
        // changes when user code includes queries.
        t.hc = (e, n, s) => async function(t, e, n, s) {
            let i = e.view.Ku(n);
            i.Oi && (
            // The query has a limit and some docs were removed, so we need
            // to re-run the query against the local store to make sure we
            // didn't lose any good docs that had been past the limit.
            i = await No(t.localStore, e.query, 
            /* usePreviousResults= */ !1).then((({documents: t}) => e.view.Ku(t, i))));
            const r = s && s.targetChanges.get(e.targetId), o = e.view.applyChanges(i, 
            /* updateLimboDocuments= */ t.isPrimaryClient, r);
            return Tc(t, e.targetId, o.zu), o.snapshot;
        }(t, e, n, s);
        const i = await No(t.localStore, e, 
        /* usePreviousResults= */ !0), r = new sc(e, i.ji), o = r.Ku(i.documents), u = ps.createSynthesizedTargetChangeForCurrentChange(n, s && "Offline" /* Offline */ !== t.onlineState), c = r.applyChanges(o, 
        /* updateLimboDocuments= */ t.isPrimaryClient, u);
        Tc(t, n, c.zu);
        const a = new ic(e, n, r);
        return t.tc.set(e, a), t.ec.has(n) ? t.ec.get(n).push(e) : t.ec.set(n, [ e ]), c.snapshot;
    }

    /** Stops listening to the query. */ async function ac(t, e) {
        const n = K(t), s = n.tc.get(e), i = n.ec.get(s.targetId);
        if (i.length > 1) return n.ec.set(s.targetId, i.filter((t => !dn(t, e)))), void n.tc.delete(e);
        // No other queries are mapped to the target, clean up the query and the target.
            if (n.isPrimaryClient) {
            // We need to remove the local query target first to allow us to verify
            // whether any other client is still interested in this target.
            n.sharedClientState.removeLocalQueryTarget(s.targetId);
            n.sharedClientState.isActiveQueryTarget(s.targetId) || await xo(n.localStore, s.targetId, 
            /*keepPersistedTargetData=*/ !1).then((() => {
                n.sharedClientState.clearQueryState(s.targetId), du(n.remoteStore, s.targetId), 
                pc(n, s.targetId);
            })).catch(bt);
        } else pc(n, s.targetId), await xo(n.localStore, s.targetId, 
        /*keepPersistedTargetData=*/ !0);
    }

    /**
     * Initiates the write of local mutation batch which involves adding the
     * writes to the mutation queue, notifying the remote store about new
     * mutations and raising events for any changes this write caused.
     *
     * The promise returned by this call is resolved when the above steps
     * have completed, *not* when the write was acked by the backend. The
     * userCallback is resolved once the write was acked/rejected by the
     * backend (or failed locally for any other reason).
     */ async function hc(t, e, n) {
        const s = Fc(t);
        try {
            const t = await function(t, e) {
                const n = K(t), s = ut.now(), i = e.reduce(((t, e) => t.add(e.key)), ws());
                let r, o;
                return n.persistence.runTransaction("Locally write mutations", "readwrite", (t => {
                    // Figure out which keys do not have a remote version in the cache, this
                    // is needed to create the right overlay mutation: if no remote version
                    // presents, we do not need to create overlays as patch mutations.
                    // TODO(Overlay): Is there a better way to determine this? Using the
                    //  document version does not work because local mutations set them back
                    //  to 0.
                    let u = os(), c = ws();
                    return n.Ui.getEntries(t, i).next((t => {
                        u = t, u.forEach(((t, e) => {
                            e.isValidDocument() || (c = c.add(t));
                        }));
                    })).next((() => n.localDocuments.getOverlayedDocuments(t, u))).next((i => {
                        r = i;
                        // For non-idempotent mutations (such as `FieldValue.increment()`),
                        // we record the base state in a separate patch mutation. This is
                        // later used to guarantee consistent values and prevents flicker
                        // even if the backend sends us an update that already includes our
                        // transform.
                        const o = [];
                        for (const t of e) {
                            const e = Gn(t, r.get(t.key).overlayedDocument);
                            null != e && 
                            // NOTE: The base state should only be applied if there's some
                            // existing document to override, so use a Precondition of
                            // exists=true
                            o.push(new Wn(t.key, e, Ce(e.value.mapValue), $n.exists(!0)));
                        }
                        return n.mutationQueue.addMutationBatch(t, s, o, e);
                    })).next((e => {
                        o = e;
                        const s = e.applyToLocalDocumentSet(r, c);
                        return n.documentOverlayCache.saveOverlays(t, e.batchId, s);
                    }));
                })).then((() => ({
                    batchId: o.batchId,
                    changes: as(r)
                })));
            }(s.localStore, e);
            s.sharedClientState.addPendingMutation(t.batchId), function(t, e, n) {
                let s = t.oc[t.currentUser.toKey()];
                s || (s = new qt(it));
                s = s.insert(e, n), t.oc[t.currentUser.toKey()] = s;
            }
            /**
     * Resolves or rejects the user callback for the given batch and then discards
     * it.
     */ (s, t.batchId, n), await Rc(s, t.changes), await bu(s.remoteStore);
        } catch (t) {
            // If we can't persist the mutation, we reject the user callback and
            // don't send the mutation. The user can then retry the write.
            const e = Bu(t, "Failed to persist write");
            n.reject(e);
        }
    }

    /**
     * Applies one remote event to the sync engine, notifying any views of the
     * changes, and releasing any pending mutation batches that would become
     * visible because of the snapshot version the remote event contains.
     */ async function lc(t, e) {
        const n = K(t);
        try {
            const t = await Vo(n.localStore, e);
            // Update `receivedDocument` as appropriate for any limbo targets.
                    e.targetChanges.forEach(((t, e) => {
                const s = n.ic.get(e);
                s && (
                // Since this is a limbo resolution lookup, it's for a single document
                // and it could be added, modified, or removed, but not a combination.
                U(t.addedDocuments.size + t.modifiedDocuments.size + t.removedDocuments.size <= 1), 
                t.addedDocuments.size > 0 ? s.Xu = !0 : t.modifiedDocuments.size > 0 ? U(s.Xu) : t.removedDocuments.size > 0 && (U(s.Xu), 
                s.Xu = !1));
            })), await Rc(n, t, e);
        } catch (t) {
            await bt(t);
        }
    }

    /**
     * Applies an OnlineState change to the sync engine and notifies any views of
     * the change.
     */ function fc(t, e, n) {
        const s = K(t);
        // If we are the secondary client, we explicitly ignore the remote store's
        // online state (the local client may go offline, even though the primary
        // tab remains online) and only apply the primary tab's online state from
        // SharedClientState.
            if (s.isPrimaryClient && 0 /* RemoteStore */ === n || !s.isPrimaryClient && 1 /* SharedClientState */ === n) {
            const t = [];
            s.tc.forEach(((n, s) => {
                const i = s.view.Eu(e);
                i.snapshot && t.push(i.snapshot);
            })), function(t, e) {
                const n = K(t);
                n.onlineState = e;
                let s = !1;
                n.queries.forEach(((t, n) => {
                    for (const t of n.listeners) 
                    // Run global snapshot listeners if a consistent snapshot has been emitted.
                    t.Eu(e) && (s = !0);
                })), s && Hu(n);
            }(s.eventManager, e), t.length && s.Zu.Go(t), s.onlineState = e, s.isPrimaryClient && s.sharedClientState.setOnlineState(e);
        }
    }

    /**
     * Rejects the listen for the given targetID. This can be triggered by the
     * backend for any active target.
     *
     * @param syncEngine - The sync engine implementation.
     * @param targetId - The targetID corresponds to one previously initiated by the
     * user as part of TargetData passed to listen() on RemoteStore.
     * @param err - A description of the condition that has forced the rejection.
     * Nearly always this will be an indication that the user is no longer
     * authorized to see the data matching the target.
     */ async function dc(t, e, n) {
        const s = K(t);
        // PORTING NOTE: Multi-tab only.
            s.sharedClientState.updateQueryState(e, "rejected", n);
        const i = s.ic.get(e), r = i && i.key;
        if (r) {
            // TODO(klimt): We really only should do the following on permission
            // denied errors, but we don't have the cause code here.
            // It's a limbo doc. Create a synthetic event saying it was deleted.
            // This is kind of a hack. Ideally, we would have a method in the local
            // store to purge a document. However, it would be tricky to keep all of
            // the local store's invariants with another method.
            let t = new qt(dt.comparator);
            // TODO(b/217189216): This limbo document should ideally have a read time,
            // so that it is picked up by any read-time based scans. The backend,
            // however, does not send a read time for target removals.
                    t = t.insert(r, xe.newNoDocument(r, ct.min()));
            const n = ws().add(r), i = new ys(ct.min(), 
            /* targetChanges= */ new Map, 
            /* targetMismatches= */ new Qt(it), t, n);
            await lc(s, i), 
            // Since this query failed, we won't want to manually unlisten to it.
            // We only remove it from bookkeeping after we successfully applied the
            // RemoteEvent. If `applyRemoteEvent()` throws, we want to re-listen to
            // this query when the RemoteStore restarts the Watch stream, which should
            // re-trigger the target failure.
            s.sc = s.sc.remove(r), s.ic.delete(e), Ac(s);
        } else await xo(s.localStore, e, 
        /* keepPersistedTargetData */ !1).then((() => pc(s, e, n))).catch(bt);
    }

    async function _c(t, e) {
        const n = K(t), s = e.batch.batchId;
        try {
            const t = await Po(n.localStore, e);
            // The local store may or may not be able to apply the write result and
            // raise events immediately (depending on whether the watcher is caught
            // up), so we raise user callbacks first so that they consistently happen
            // before listen events.
                    yc(n, s, /*error=*/ null), gc(n, s), n.sharedClientState.updateMutationState(s, "acknowledged"), 
            await Rc(n, t);
        } catch (t) {
            await bt(t);
        }
    }

    async function wc(t, e, n) {
        const s = K(t);
        try {
            const t = await function(t, e) {
                const n = K(t);
                return n.persistence.runTransaction("Reject batch", "readwrite-primary", (t => {
                    let s;
                    return n.mutationQueue.lookupMutationBatch(t, e).next((e => (U(null !== e), s = e.keys(), 
                    n.mutationQueue.removeMutationBatch(t, e)))).next((() => n.mutationQueue.performConsistencyCheck(t))).next((() => n.documentOverlayCache.removeOverlaysForBatchId(t, s, e))).next((() => n.localDocuments.recalculateAndSaveOverlaysForDocumentKeys(t, s))).next((() => n.localDocuments.getDocuments(t, s)));
                }));
            }
            /**
     * Returns the largest (latest) batch id in mutation queue that is pending
     * server response.
     *
     * Returns `BATCHID_UNKNOWN` if the queue is empty.
     */ (s.localStore, e);
            // The local store may or may not be able to apply the write result and
            // raise events immediately (depending on whether the watcher is caught up),
            // so we raise user callbacks first so that they consistently happen before
            // listen events.
                    yc(s, e, n), gc(s, e), s.sharedClientState.updateMutationState(e, "rejected", n), 
            await Rc(s, t);
        } catch (n) {
            await bt(n);
        }
    }

    /**
     * Registers a user callback that resolves when all pending mutations at the moment of calling
     * are acknowledged .
     */ async function mc(t, e) {
        const n = K(t);
        yu(n.remoteStore) || M("SyncEngine", "The network is disabled. The task returned by 'awaitPendingWrites()' will not complete until the network is enabled.");
        try {
            const t = await function(t) {
                const e = K(t);
                return e.persistence.runTransaction("Get highest unacknowledged batch id", "readonly", (t => e.mutationQueue.getHighestUnacknowledgedBatchId(t)));
            }(n.localStore);
            if (-1 === t) 
            // Trigger the callback right away if there is no pending writes at the moment.
            return void e.resolve();
            const s = n.uc.get(t) || [];
            s.push(e), n.uc.set(t, s);
        } catch (t) {
            const n = Bu(t, "Initialization of waitForPendingWrites() operation failed");
            e.reject(n);
        }
    }

    /**
     * Triggers the callbacks that are waiting for this batch id to get acknowledged by server,
     * if there are any.
     */ function gc(t, e) {
        (t.uc.get(e) || []).forEach((t => {
            t.resolve();
        })), t.uc.delete(e);
    }

    /** Reject all outstanding callbacks waiting for pending writes to complete. */ function yc(t, e, n) {
        const s = K(t);
        let i = s.oc[s.currentUser.toKey()];
        // NOTE: Mutations restored from persistence won't have callbacks, so it's
        // okay for there to be no callback for this ID.
            if (i) {
            const t = i.get(e);
            t && (n ? t.reject(n) : t.resolve(), i = i.remove(e)), s.oc[s.currentUser.toKey()] = i;
        }
    }

    function pc(t, e, n = null) {
        t.sharedClientState.removeLocalQueryTarget(e);
        for (const s of t.ec.get(e)) t.tc.delete(s), n && t.Zu.lc(s, n);
        if (t.ec.delete(e), t.isPrimaryClient) {
            t.rc.us(e).forEach((e => {
                t.rc.containsKey(e) || 
                // We removed the last reference for this key
                Ic(t, e);
            }));
        }
    }

    function Ic(t, e) {
        t.nc.delete(e.path.canonicalString());
        // It's possible that the target already got removed because the query failed. In that case,
        // the key won't exist in `limboTargetsByKey`. Only do the cleanup if we still have the target.
        const n = t.sc.get(e);
        null !== n && (du(t.remoteStore, n), t.sc = t.sc.remove(e), t.ic.delete(n), Ac(t));
    }

    function Tc(t, e, n) {
        for (const s of n) if (s instanceof ec) t.rc.addReference(s.key, e), Ec(t, s); else if (s instanceof nc) {
            M("SyncEngine", "Document no longer in limbo: " + s.key), t.rc.removeReference(s.key, e);
            t.rc.containsKey(s.key) || 
            // We removed the last reference for this key
            Ic(t, s.key);
        } else L();
    }

    function Ec(t, e) {
        const n = e.key, s = n.path.canonicalString();
        t.sc.get(n) || t.nc.has(s) || (M("SyncEngine", "New document in limbo: " + n), t.nc.add(s), 
        Ac(t));
    }

    /**
     * Starts listens for documents in limbo that are enqueued for resolution,
     * subject to a maximum number of concurrent resolutions.
     *
     * Without bounding the number of concurrent resolutions, the server can fail
     * with "resource exhausted" errors which can lead to pathological client
     * behavior as seen in https://github.com/firebase/firebase-js-sdk/issues/2683.
     */ function Ac(t) {
        for (;t.nc.size > 0 && t.sc.size < t.maxConcurrentLimboResolutions; ) {
            const e = t.nc.values().next().value;
            t.nc.delete(e);
            const n = new dt(ht.fromString(e)), s = t.cc.next();
            t.ic.set(s, new rc(n)), t.sc = t.sc.insert(n, s), fu(t.remoteStore, new Li(ln(rn(n.path)), s, 2 /* LimboResolution */ , $t.ot));
        }
    }

    async function Rc(t, e, n) {
        const s = K(t), i = [], r = [], o = [];
        s.tc.isEmpty() || (s.tc.forEach(((t, u) => {
            o.push(s.hc(u, e, n).then((t => {
                if (t) {
                    s.isPrimaryClient && s.sharedClientState.updateQueryState(u.targetId, t.fromCache ? "not-current" : "current"), 
                    i.push(t);
                    const e = To.Vi(u.targetId, t);
                    r.push(e);
                }
            })));
        })), await Promise.all(o), s.Zu.Go(i), await async function(t, e) {
            const n = K(t);
            try {
                await n.persistence.runTransaction("notifyLocalViewChanges", "readwrite", (t => Pt.forEach(e, (e => Pt.forEach(e.Pi, (s => n.persistence.referenceDelegate.addReference(t, e.targetId, s))).next((() => Pt.forEach(e.vi, (s => n.persistence.referenceDelegate.removeReference(t, e.targetId, s)))))))));
            } catch (t) {
                if (!Ct(t)) throw t;
                // If `notifyLocalViewChanges` fails, we did not advance the sequence
                // number for the documents that were included in this transaction.
                // This might trigger them to be deleted earlier than they otherwise
                // would have, but it should not invalidate the integrity of the data.
                M("LocalStore", "Failed to update sequence numbers: " + t);
            }
            for (const t of e) {
                const e = t.targetId;
                if (!t.fromCache) {
                    const t = n.$i.get(e), s = t.snapshotVersion, i = t.withLastLimboFreeSnapshotVersion(s);
                    // Advance the last limbo free snapshot version
                                    n.$i = n.$i.insert(e, i);
                }
            }
        }(s.localStore, r));
    }

    async function bc(t, e) {
        const n = K(t);
        if (!n.currentUser.isEqual(e)) {
            M("SyncEngine", "User change. New user:", e.toKey());
            const t = await bo(n.localStore, e);
            n.currentUser = e, 
            // Fails tasks waiting for pending writes requested by previous user.
            function(t, e) {
                t.uc.forEach((t => {
                    t.forEach((t => {
                        t.reject(new Q(G.CANCELLED, e));
                    }));
                })), t.uc.clear();
            }(n, "'waitForPendingWrites' promise is rejected due to a user change."), 
            // TODO(b/114226417): Consider calling this only in the primary tab.
            n.sharedClientState.handleUserChange(e, t.removedBatchIds, t.addedBatchIds), await Rc(n, t.Ki);
        }
    }

    function Pc(t, e) {
        const n = K(t), s = n.ic.get(e);
        if (s && s.Xu) return ws().add(s.key);
        {
            let t = ws();
            const s = n.ec.get(e);
            if (!s) return t;
            for (const e of s) {
                const s = n.tc.get(e);
                t = t.unionWith(s.view.qu);
            }
            return t;
        }
    }

    /**
     * Reconcile the list of synced documents in an existing view with those
     * from persistence.
     */ async function vc(t, e) {
        const n = K(t), s = await No(n.localStore, e.query, 
        /* usePreviousResults= */ !0), i = e.view.Ju(s);
        return n.isPrimaryClient && Tc(n, e.targetId, i.zu), i;
    }

    /**
     * Retrieves newly changed documents from remote document cache and raises
     * snapshots if needed.
     */
    // PORTING NOTE: Multi-Tab only.
    async function Vc(t, e) {
        const n = K(t);
        return Oo(n.localStore, e).then((t => Rc(n, t)));
    }

    /** Applies a mutation state to an existing batch.  */
    // PORTING NOTE: Multi-Tab only.
    async function Sc(t, e, n, s) {
        const i = K(t), r = await function(t, e) {
            const n = K(t), s = K(n.mutationQueue);
            return n.persistence.runTransaction("Lookup mutation documents", "readonly", (t => s.yn(t, e).next((e => e ? n.localDocuments.getDocuments(t, e) : Pt.resolve(null)))));
        }
        // PORTING NOTE: Multi-Tab only.
        (i.localStore, e);
        null !== r ? ("pending" === n ? 
        // If we are the primary client, we need to send this write to the
        // backend. Secondary clients will ignore these writes since their remote
        // connection is disabled.
        await bu(i.remoteStore) : "acknowledged" === n || "rejected" === n ? (
        // NOTE: Both these methods are no-ops for batches that originated from
        // other clients.
        yc(i, e, s || null), gc(i, e), function(t, e) {
            K(K(t).mutationQueue).In(e);
        }
        // PORTING NOTE: Multi-Tab only.
        (i.localStore, e)) : L(), await Rc(i, r)) : 
        // A throttled tab may not have seen the mutation before it was completed
        // and removed from the mutation queue, in which case we won't have cached
        // the affected documents. In this case we can safely ignore the update
        // since that means we didn't apply the mutation locally at all (if we
        // had, we would have cached the affected documents), and so we will just
        // see any resulting document changes via normal remote document updates
        // as applicable.
        M("SyncEngine", "Cannot apply mutation batch with id: " + e);
    }

    /** Applies a query target change from a different tab. */
    // PORTING NOTE: Multi-Tab only.
    async function Dc(t, e) {
        const n = K(t);
        if (Mc(n), Fc(n), !0 === e && !0 !== n.ac) {
            // Secondary tabs only maintain Views for their local listeners and the
            // Views internal state may not be 100% populated (in particular
            // secondary tabs don't track syncedDocuments, the set of documents the
            // server considers to be in the target). So when a secondary becomes
            // primary, we need to need to make sure that all views for all targets
            // match the state on disk.
            const t = n.sharedClientState.getAllActiveQueryTargets(), e = await Cc(n, t.toArray());
            n.ac = !0, await Ou(n.remoteStore, !0);
            for (const t of e) fu(n.remoteStore, t);
        } else if (!1 === e && !1 !== n.ac) {
            const t = [];
            let e = Promise.resolve();
            n.ec.forEach(((s, i) => {
                n.sharedClientState.isLocalQueryTarget(i) ? t.push(i) : e = e.then((() => (pc(n, i), 
                xo(n.localStore, i, 
                /*keepPersistedTargetData=*/ !0)))), du(n.remoteStore, i);
            })), await e, await Cc(n, t), 
            // PORTING NOTE: Multi-Tab only.
            function(t) {
                const e = K(t);
                e.ic.forEach(((t, n) => {
                    du(e.remoteStore, n);
                })), e.rc.cs(), e.ic = new Map, e.sc = new qt(dt.comparator);
            }
            /**
     * Reconcile the query views of the provided query targets with the state from
     * persistence. Raises snapshots for any changes that affect the local
     * client and returns the updated state of all target's query data.
     *
     * @param syncEngine - The sync engine implementation
     * @param targets - the list of targets with views that need to be recomputed
     * @param transitionToPrimary - `true` iff the tab transitions from a secondary
     * tab to a primary tab
     */
            // PORTING NOTE: Multi-Tab only.
            (n), n.ac = !1, await Ou(n.remoteStore, !1);
        }
    }

    async function Cc(t, e, n) {
        const s = K(t), i = [], r = [];
        for (const t of e) {
            let e;
            const n = s.ec.get(t);
            if (n && 0 !== n.length) {
                // For queries that have a local View, we fetch their current state
                // from LocalStore (as the resume token and the snapshot version
                // might have changed) and reconcile their views with the persisted
                // state (the list of syncedDocuments may have gotten out of sync).
                e = await Co(s.localStore, ln(n[0]));
                for (const t of n) {
                    const e = s.tc.get(t), n = await vc(s, e);
                    n.snapshot && r.push(n.snapshot);
                }
            } else {
                // For queries that never executed on this client, we need to
                // allocate the target in LocalStore and initialize a new View.
                const n = await ko(s.localStore, t);
                e = await Co(s.localStore, n), await cc(s, xc(n), t, 
                /*current=*/ !1);
            }
            i.push(e);
        }
        return s.Zu.Go(r), i;
    }

    /**
     * Creates a `Query` object from the specified `Target`. There is no way to
     * obtain the original `Query`, so we synthesize a `Query` from the `Target`
     * object.
     *
     * The synthesized result might be different from the original `Query`, but
     * since the synthesized `Query` should return the same results as the
     * original one (only the presentation of results might differ), the potential
     * difference will not cause issues.
     */
    // PORTING NOTE: Multi-Tab only.
    function xc(t) {
        return sn(t.path, t.collectionGroup, t.orderBy, t.filters, t.limit, "F" /* First */ , t.startAt, t.endAt);
    }

    /** Returns the IDs of the clients that are currently active. */
    // PORTING NOTE: Multi-Tab only.
    function Nc(t) {
        const e = K(t);
        return K(K(e.localStore).persistence).Ri();
    }

    /** Applies a query target change from a different tab. */
    // PORTING NOTE: Multi-Tab only.
    async function kc(t, e, n, s) {
        const i = K(t);
        if (i.ac) 
        // If we receive a target state notification via WebStorage, we are
        // either already secondary or another tab has taken the primary lease.
        return void M("SyncEngine", "Ignoring unexpected query state notification.");
        const r = i.ec.get(e);
        if (r && r.length > 0) switch (n) {
          case "current":
          case "not-current":
            {
                const t = await Oo(i.localStore, gn(r[0])), s = ys.createSynthesizedRemoteEventForCurrentChange(e, "current" === n);
                await Rc(i, t, s);
                break;
            }

          case "rejected":
            await xo(i.localStore, e, 
            /* keepPersistedTargetData */ !0), pc(i, e, s);
            break;

          default:
            L();
        }
    }

    /** Adds or removes Watch targets for queries from different tabs. */ async function Oc(t, e, n) {
        const s = Mc(t);
        if (s.ac) {
            for (const t of e) {
                if (s.ec.has(t)) {
                    // A target might have been added in a previous attempt
                    M("SyncEngine", "Adding an already active target " + t);
                    continue;
                }
                const e = await ko(s.localStore, t), n = await Co(s.localStore, e);
                await cc(s, xc(e), n.targetId, 
                /*current=*/ !1), fu(s.remoteStore, n);
            }
            for (const t of n) 
            // Check that the target is still active since the target might have been
            // removed if it has been rejected by the backend.
            s.ec.has(t) && 
            // Release queries that are still active.
            await xo(s.localStore, t, 
            /* keepPersistedTargetData */ !1).then((() => {
                du(s.remoteStore, t), pc(s, t);
            })).catch(bt);
        }
    }

    function Mc(t) {
        const e = K(t);
        return e.remoteStore.remoteSyncer.applyRemoteEvent = lc.bind(null, e), e.remoteStore.remoteSyncer.getRemoteKeysForTarget = Pc.bind(null, e), 
        e.remoteStore.remoteSyncer.rejectListen = dc.bind(null, e), e.Zu.Go = Wu.bind(null, e.eventManager), 
        e.Zu.lc = zu.bind(null, e.eventManager), e;
    }

    function Fc(t) {
        const e = K(t);
        return e.remoteStore.remoteSyncer.applySuccessfulWrite = _c.bind(null, e), e.remoteStore.remoteSyncer.rejectFailedWrite = wc.bind(null, e), 
        e;
    }

    /**
     * Loads a Firestore bundle into the SDK. The returned promise resolves when
     * the bundle finished loading.
     *
     * @param syncEngine - SyncEngine to use.
     * @param bundleReader - Bundle to load into the SDK.
     * @param task - LoadBundleTask used to update the loading progress to public API.
     */ function $c(t, e, n) {
        const s = K(t);
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
            (
        /** Loads a bundle and returns the list of affected collection groups. */
        async function(t, e, n) {
            try {
                const s = await e.getMetadata();
                if (await function(t, e) {
                    const n = K(t), s = Ns(e.createTime);
                    return n.persistence.runTransaction("hasNewerBundle", "readonly", (t => n.Ds.getBundleMetadata(t, e.id))).then((t => !!t && t.createTime.compareTo(s) >= 0));
                }
                /**
     * Saves the given `BundleMetadata` to local persistence.
     */ (t.localStore, s)) return await e.close(), n._completeWith(function(t) {
                    return {
                        taskState: "Success",
                        documentsLoaded: t.totalDocuments,
                        bytesLoaded: t.totalBytes,
                        totalDocuments: t.totalDocuments,
                        totalBytes: t.totalBytes
                    };
                }(s)), Promise.resolve(new Set);
                n._updateProgress(tc(s));
                const i = new Zu(s, t.localStore, e.wt);
                let r = await e.fc();
                for (;r; ) {
                    const t = await i.Nu(r);
                    t && n._updateProgress(t), r = await e.fc();
                }
                const o = await i.complete();
                return await Rc(t, o.Mu, 
                /* remoteEvent */ void 0), 
                // Save metadata, so loading the same bundle will skip.
                await function(t, e) {
                    const n = K(t);
                    return n.persistence.runTransaction("Save bundle", "readwrite", (t => n.Ds.saveBundleMetadata(t, e)));
                }
                /**
     * Returns a promise of a `NamedQuery` associated with given query name. Promise
     * resolves to undefined if no persisted data can be found.
     */ (t.localStore, s), n._completeWith(o.progress), Promise.resolve(o.Ou);
            } catch (t) {
                return $("SyncEngine", `Loading bundle failed with ${t}`), n._failWith(t), Promise.resolve(new Set);
            }
        }
        /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
        /**
     * Provides all components needed for Firestore with in-memory persistence.
     * Uses EagerGC garbage collection.
     */)(s, e, n).then((t => {
            s.sharedClientState.notifyBundleLoaded(t);
        }));
    }

    class Bc {
        constructor() {
            this.synchronizeTabs = !1;
        }
        async initialize(t) {
            this.wt = nu(t.databaseInfo.databaseId), this.sharedClientState = this.dc(t), this.persistence = this._c(t), 
            await this.persistence.start(), this.localStore = this.wc(t), this.gcScheduler = this.mc(t, this.localStore), 
            this.indexBackfillerScheduler = this.gc(t, this.localStore);
        }
        mc(t, e) {
            return null;
        }
        gc(t, e) {
            return null;
        }
        wc(t) {
            return Ro(this.persistence, new Eo, t.initialUser, this.wt);
        }
        _c(t) {
            return new ho(fo.Ms, this.wt);
        }
        dc(t) {
            return new zo;
        }
        async terminate() {
            this.gcScheduler && this.gcScheduler.stop(), await this.sharedClientState.shutdown(), 
            await this.persistence.shutdown();
        }
    }

    /**
     * Provides all components needed for Firestore with IndexedDB persistence.
     */ class Lc extends Bc {
        constructor(t, e, n) {
            super(), this.yc = t, this.cacheSizeBytes = e, this.forceOwnership = n, this.synchronizeTabs = !1;
        }
        async initialize(t) {
            await super.initialize(t), await this.yc.initialize(this, t), 
            // Enqueue writes from a previous session
            await Fc(this.yc.syncEngine), await bu(this.yc.remoteStore), 
            // NOTE: This will immediately call the listener, so we make sure to
            // set it after localStore / remoteStore are started.
            await this.persistence.ci((() => (this.gcScheduler && !this.gcScheduler.started && this.gcScheduler.start(), 
            this.indexBackfillerScheduler && !this.indexBackfillerScheduler.started && this.indexBackfillerScheduler.start(), 
            Promise.resolve())));
        }
        wc(t) {
            return Ro(this.persistence, new Eo, t.initialUser, this.wt);
        }
        mc(t, e) {
            const n = this.persistence.referenceDelegate.garbageCollector;
            return new Ur(n, t.asyncQueue, e);
        }
        gc(t, e) {
            const n = new Ft(e, this.persistence);
            return new Mt(t.asyncQueue, n);
        }
        _c(t) {
            const e = Io(t.databaseInfo.databaseId, t.databaseInfo.persistenceKey), n = void 0 !== this.cacheSizeBytes ? Pr.withCacheSize(this.cacheSizeBytes) : Pr.DEFAULT;
            return new go(this.synchronizeTabs, e, t.clientId, n, t.asyncQueue, tu(), eu(), this.wt, this.sharedClientState, !!this.forceOwnership);
        }
        dc(t) {
            return new zo;
        }
    }

    /**
     * Provides all components needed for Firestore with multi-tab IndexedDB
     * persistence.
     *
     * In the legacy client, this provider is used to provide both multi-tab and
     * non-multi-tab persistence since we cannot tell at build time whether
     * `synchronizeTabs` will be enabled.
     */ class Uc extends Lc {
        constructor(t, e) {
            super(t, e, /* forceOwnership= */ !1), this.yc = t, this.cacheSizeBytes = e, this.synchronizeTabs = !0;
        }
        async initialize(t) {
            await super.initialize(t);
            const e = this.yc.syncEngine;
            this.sharedClientState instanceof Wo && (this.sharedClientState.syncEngine = {
                kr: Sc.bind(null, e),
                Or: kc.bind(null, e),
                Mr: Oc.bind(null, e),
                Ri: Nc.bind(null, e),
                Nr: Vc.bind(null, e)
            }, await this.sharedClientState.start()), 
            // NOTE: This will immediately call the listener, so we make sure to
            // set it after localStore / remoteStore are started.
            await this.persistence.ci((async t => {
                await Dc(this.yc.syncEngine, t), this.gcScheduler && (t && !this.gcScheduler.started ? this.gcScheduler.start() : t || this.gcScheduler.stop()), 
                this.indexBackfillerScheduler && (t && !this.indexBackfillerScheduler.started ? this.indexBackfillerScheduler.start() : t || this.indexBackfillerScheduler.stop());
            }));
        }
        dc(t) {
            const e = tu();
            if (!Wo.V(e)) throw new Q(G.UNIMPLEMENTED, "IndexedDB persistence is only available on platforms that support LocalStorage.");
            const n = Io(t.databaseInfo.databaseId, t.databaseInfo.persistenceKey);
            return new Wo(e, t.asyncQueue, n, t.clientId, t.initialUser);
        }
    }

    /**
     * Initializes and wires the components that are needed to interface with the
     * network.
     */ class qc {
        async initialize(t, e) {
            this.localStore || (this.localStore = t.localStore, this.sharedClientState = t.sharedClientState, 
            this.datastore = this.createDatastore(e), this.remoteStore = this.createRemoteStore(e), 
            this.eventManager = this.createEventManager(e), this.syncEngine = this.createSyncEngine(e, 
            /* startAsPrimary=*/ !t.synchronizeTabs), this.sharedClientState.onlineStateHandler = t => fc(this.syncEngine, t, 1 /* SharedClientState */), 
            this.remoteStore.remoteSyncer.handleCredentialChange = bc.bind(null, this.syncEngine), 
            await Ou(this.remoteStore, this.syncEngine.isPrimaryClient));
        }
        createEventManager(t) {
            return new Gu;
        }
        createDatastore(t) {
            const e = nu(t.databaseInfo.databaseId), n = (s = t.databaseInfo, new Zo(s));
            var s;
            /** Return the Platform-specific connectivity monitor. */        return function(t, e, n, s) {
                return new uu(t, e, n, s);
            }(t.authCredentials, t.appCheckCredentials, n, e);
        }
        createRemoteStore(t) {
            return e = this.localStore, n = this.datastore, s = t.asyncQueue, i = t => fc(this.syncEngine, t, 0 /* RemoteStore */), 
            r = Jo.V() ? new Jo : new Ho, new au(e, n, s, i, r);
            var e, n, s, i, r;
            /** Re-enables the network. Idempotent. */    }
        createSyncEngine(t, e) {
            return function(t, e, n, 
            // PORTING NOTE: Manages state synchronization in multi-tab environments.
            s, i, r, o) {
                const u = new oc(t, e, n, s, i, r);
                return o && (u.ac = !0), u;
            }(this.localStore, this.remoteStore, this.eventManager, this.sharedClientState, t.initialUser, t.maxConcurrentLimboResolutions, e);
        }
        terminate() {
            return async function(t) {
                const e = K(t);
                M("RemoteStore", "RemoteStore shutting down."), e.lu.add(5 /* Shutdown */), await lu(e), 
                e.du.shutdown(), 
                // Set the OnlineState to Unknown (rather than Offline) to avoid potentially
                // triggering spurious listener events with cached data, etc.
                e._u.set("Unknown" /* Unknown */);
            }(this.remoteStore);
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * How many bytes to read each time when `ReadableStreamReader.read()` is
     * called. Only applicable for byte streams that we control (e.g. those backed
     * by an UInt8Array).
     */
    /**
     * Builds a `ByteStreamReader` from a UInt8Array.
     * @param source - The data source to use.
     * @param bytesPerRead - How many bytes each `read()` from the returned reader
     *        will read.
     */
    function Kc(t, e = 10240) {
        let n = 0;
        // The TypeScript definition for ReadableStreamReader changed. We use
        // `any` here to allow this code to compile with different versions.
        // See https://github.com/microsoft/TypeScript/issues/42970
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            async read() {
                if (n < t.byteLength) {
                    const s = {
                        value: t.slice(n, n + e),
                        done: !1
                    };
                    return n += e, s;
                }
                return {
                    done: !0
                };
            },
            async cancel() {},
            releaseLock() {},
            closed: Promise.reject("unimplemented")
        };
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * On web, a `ReadableStream` is wrapped around by a `ByteStreamReader`.
     */
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /*
     * A wrapper implementation of Observer<T> that will dispatch events
     * asynchronously. To allow immediate silencing, a mute call is added which
     * causes events scheduled to no longer be raised.
     */
    class Gc {
        constructor(t) {
            this.observer = t, 
            /**
             * When set to true, will not raise future events. Necessary to deal with
             * async detachment of listener.
             */
            this.muted = !1;
        }
        next(t) {
            this.observer.next && this.Ic(this.observer.next, t);
        }
        error(t) {
            this.observer.error ? this.Ic(this.observer.error, t) : console.error("Uncaught Error in snapshot listener:", t);
        }
        Tc() {
            this.muted = !0;
        }
        Ic(t, e) {
            this.muted || setTimeout((() => {
                this.muted || t(e);
            }), 0);
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A class representing a bundle.
     *
     * Takes a bundle stream or buffer, and presents abstractions to read bundled
     * elements out of the underlying content.
     */ class Qc {
        constructor(
        /** The reader to read from underlying binary bundle data source. */
        t, e) {
            this.Ec = t, this.wt = e, 
            /** Cached bundle metadata. */
            this.metadata = new j, 
            /**
             * Internal buffer to hold bundle content, accumulating incomplete element
             * content.
             */
            this.buffer = new Uint8Array, this.Ac = new TextDecoder("utf-8"), 
            // Read the metadata (which is the first element).
            this.Rc().then((t => {
                t && t.Cu() ? this.metadata.resolve(t.payload.metadata) : this.metadata.reject(new Error(`The first element of the bundle is not a metadata, it is\n             ${JSON.stringify(null == t ? void 0 : t.payload)}`));
            }), (t => this.metadata.reject(t)));
        }
        close() {
            return this.Ec.cancel();
        }
        async getMetadata() {
            return this.metadata.promise;
        }
        async fc() {
            // Makes sure metadata is read before proceeding.
            return await this.getMetadata(), this.Rc();
        }
        /**
         * Reads from the head of internal buffer, and pulling more data from
         * underlying stream if a complete element cannot be found, until an
         * element(including the prefixed length and the JSON string) is found.
         *
         * Once a complete element is read, it is dropped from internal buffer.
         *
         * Returns either the bundled element, or null if we have reached the end of
         * the stream.
         */    async Rc() {
            const t = await this.bc();
            if (null === t) return null;
            const e = this.Ac.decode(t), n = Number(e);
            isNaN(n) && this.Pc(`length string (${e}) is not valid number`);
            const s = await this.vc(n);
            return new Yu(JSON.parse(s), t.length + n);
        }
        /** First index of '{' from the underlying buffer. */    Vc() {
            return this.buffer.findIndex((t => t === "{".charCodeAt(0)));
        }
        /**
         * Reads from the beginning of the internal buffer, until the first '{', and
         * return the content.
         *
         * If reached end of the stream, returns a null.
         */    async bc() {
            for (;this.Vc() < 0; ) {
                if (await this.Sc()) break;
            }
            // Broke out of the loop because underlying stream is closed, and there
            // happens to be no more data to process.
                    if (0 === this.buffer.length) return null;
            const t = this.Vc();
            // Broke out of the loop because underlying stream is closed, but still
            // cannot find an open bracket.
                    t < 0 && this.Pc("Reached the end of bundle when a length string is expected.");
            const e = this.buffer.slice(0, t);
            // Update the internal buffer to drop the read length.
                    return this.buffer = this.buffer.slice(t), e;
        }
        /**
         * Reads from a specified position from the internal buffer, for a specified
         * number of bytes, pulling more data from the underlying stream if needed.
         *
         * Returns a string decoded from the read bytes.
         */    async vc(t) {
            for (;this.buffer.length < t; ) {
                await this.Sc() && this.Pc("Reached the end of bundle when more is expected.");
            }
            const e = this.Ac.decode(this.buffer.slice(0, t));
            // Update the internal buffer to drop the read json string.
                    return this.buffer = this.buffer.slice(t), e;
        }
        Pc(t) {
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            throw this.Ec.cancel(), new Error(`Invalid bundle format: ${t}`);
        }
        /**
         * Pulls more data from underlying stream to internal buffer.
         * Returns a boolean indicating whether the stream is finished.
         */    async Sc() {
            const t = await this.Ec.read();
            if (!t.done) {
                const e = new Uint8Array(this.buffer.length + t.value.length);
                e.set(this.buffer), e.set(t.value, this.buffer.length), this.buffer = e;
            }
            return t.done;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Internal transaction object responsible for accumulating the mutations to
     * perform and the base versions for any documents read.
     */
    class jc {
        constructor(t) {
            this.datastore = t, 
            // The version of each document that was read during this transaction.
            this.readVersions = new Map, this.mutations = [], this.committed = !1, 
            /**
             * A deferred usage error that occurred previously in this transaction that
             * will cause the transaction to fail once it actually commits.
             */
            this.lastWriteError = null, 
            /**
             * Set of documents that have been written in the transaction.
             *
             * When there's more than one write to the same key in a transaction, any
             * writes after the first are handled differently.
             */
            this.writtenDocs = new Set;
        }
        async lookup(t) {
            if (this.ensureCommitNotCalled(), this.mutations.length > 0) throw new Q(G.INVALID_ARGUMENT, "Firestore transactions require all reads to be executed before all writes.");
            const e = await async function(t, e) {
                const n = K(t), s = Ls(n.wt) + "/documents", i = {
                    documents: e.map((t => Ms(n.wt, t)))
                }, r = await n.ao("BatchGetDocuments", s, i, e.length), o = new Map;
                r.forEach((t => {
                    const e = Gs(n.wt, t);
                    o.set(e.key.toString(), e);
                }));
                const u = [];
                return e.forEach((t => {
                    const e = o.get(t.toString());
                    U(!!e), u.push(e);
                })), u;
            }(this.datastore, t);
            return e.forEach((t => this.recordVersion(t))), e;
        }
        set(t, e) {
            this.write(e.toMutation(t, this.precondition(t))), this.writtenDocs.add(t.toString());
        }
        update(t, e) {
            try {
                this.write(e.toMutation(t, this.preconditionForUpdate(t)));
            } catch (t) {
                this.lastWriteError = t;
            }
            this.writtenDocs.add(t.toString());
        }
        delete(t) {
            this.write(new Yn(t, this.precondition(t))), this.writtenDocs.add(t.toString());
        }
        async commit() {
            if (this.ensureCommitNotCalled(), this.lastWriteError) throw this.lastWriteError;
            const t = this.readVersions;
            // For each mutation, note that the doc was written.
                    this.mutations.forEach((e => {
                t.delete(e.key.toString());
            })), 
            // For each document that was read but not written to, we want to perform
            // a `verify` operation.
            t.forEach(((t, e) => {
                const n = dt.fromPath(e);
                this.mutations.push(new Xn(n, this.precondition(n)));
            })), await async function(t, e) {
                const n = K(t), s = Ls(n.wt) + "/documents", i = {
                    writes: e.map((t => js(n.wt, t)))
                };
                await n.ro("Commit", s, i);
            }(this.datastore, this.mutations), this.committed = !0;
        }
        recordVersion(t) {
            let e;
            if (t.isFoundDocument()) e = t.version; else {
                if (!t.isNoDocument()) throw L();
                // For deleted docs, we must use baseVersion 0 when we overwrite them.
                e = ct.min();
            }
            const n = this.readVersions.get(t.key.toString());
            if (n) {
                if (!e.isEqual(n)) 
                // This transaction will fail no matter what.
                throw new Q(G.ABORTED, "Document version changed between two reads.");
            } else this.readVersions.set(t.key.toString(), e);
        }
        /**
         * Returns the version of this document when it was read in this transaction,
         * as a precondition, or no precondition if it was not read.
         */    precondition(t) {
            const e = this.readVersions.get(t.toString());
            return !this.writtenDocs.has(t.toString()) && e ? $n.updateTime(e) : $n.none();
        }
        /**
         * Returns the precondition for a document if the operation is an update.
         */    preconditionForUpdate(t) {
            const e = this.readVersions.get(t.toString());
            // The first time a document is written, we want to take into account the
            // read time and existence
                    if (!this.writtenDocs.has(t.toString()) && e) {
                if (e.isEqual(ct.min())) 
                // The document doesn't exist, so fail the transaction.
                // This has to be validated locally because you can't send a
                // precondition that a document does not exist without changing the
                // semantics of the backend write to be an insert. This is the reverse
                // of what we want, since we want to assert that the document doesn't
                // exist but then send the update and have it fail. Since we can't
                // express that to the backend, we have to validate locally.
                // Note: this can change once we can send separate verify writes in the
                // transaction.
                throw new Q(G.INVALID_ARGUMENT, "Can't update a document that doesn't exist.");
                // Document exists, base precondition on document update time.
                            return $n.updateTime(e);
            }
            // Document was not read, so we just use the preconditions for a blind
            // update.
            return $n.exists(!0);
        }
        write(t) {
            this.ensureCommitNotCalled(), this.mutations.push(t);
        }
        ensureCommitNotCalled() {}
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * TransactionRunner encapsulates the logic needed to run and retry transactions
     * with backoff.
     */ class Wc {
        constructor(t, e, n, s, i) {
            this.asyncQueue = t, this.datastore = e, this.options = n, this.updateFunction = s, 
            this.deferred = i, this.Dc = n.maxAttempts, this.So = new su(this.asyncQueue, "transaction_retry" /* TransactionRetry */);
        }
        /** Runs the transaction and sets the result on deferred. */    run() {
            this.Dc -= 1, this.Cc();
        }
        Cc() {
            this.So.Io((async () => {
                const t = new jc(this.datastore), e = this.xc(t);
                e && e.then((e => {
                    this.asyncQueue.enqueueAndForget((() => t.commit().then((() => {
                        this.deferred.resolve(e);
                    })).catch((t => {
                        this.Nc(t);
                    }))));
                })).catch((t => {
                    this.Nc(t);
                }));
            }));
        }
        xc(t) {
            try {
                const e = this.updateFunction(t);
                return !oe(e) && e.catch && e.then ? e : (this.deferred.reject(Error("Transaction callback must return a Promise")), 
                null);
            } catch (t) {
                // Do not retry errors thrown by user provided updateFunction.
                return this.deferred.reject(t), null;
            }
        }
        Nc(t) {
            this.Dc > 0 && this.kc(t) ? (this.Dc -= 1, this.asyncQueue.enqueueAndForget((() => (this.Cc(), 
            Promise.resolve())))) : this.deferred.reject(t);
        }
        kc(t) {
            if ("FirebaseError" === t.name) {
                // In transactions, the backend will fail outdated reads with FAILED_PRECONDITION and
                // non-matching document versions with ABORTED. These errors should be retried.
                const e = t.code;
                return "aborted" === e || "failed-precondition" === e || !ns(e);
            }
            return !1;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * FirestoreClient is a top-level class that constructs and owns all of the
     * pieces of the client SDK architecture. It is responsible for creating the
     * async queue that is shared by all of the other components in the system.
     */
    class zc {
        constructor(t, e, 
        /**
         * Asynchronous queue responsible for all of our internal processing. When
         * we get incoming work from the user (via public API) or the network
         * (incoming GRPC messages), we should always schedule onto this queue.
         * This ensures all of our work is properly serialized (e.g. we don't
         * start processing a new operation while the previous one is waiting for
         * an async I/O to complete).
         */
        n, s) {
            this.authCredentials = t, this.appCheckCredentials = e, this.asyncQueue = n, this.databaseInfo = s, 
            this.user = C.UNAUTHENTICATED, this.clientId = st.I(), this.authCredentialListener = () => Promise.resolve(), 
            this.appCheckCredentialListener = () => Promise.resolve(), this.authCredentials.start(n, (async t => {
                M("FirestoreClient", "Received user=", t.uid), await this.authCredentialListener(t), 
                this.user = t;
            })), this.appCheckCredentials.start(n, (t => (M("FirestoreClient", "Received new app check token=", t), 
            this.appCheckCredentialListener(t, this.user))));
        }
        async getConfiguration() {
            return {
                asyncQueue: this.asyncQueue,
                databaseInfo: this.databaseInfo,
                clientId: this.clientId,
                authCredentials: this.authCredentials,
                appCheckCredentials: this.appCheckCredentials,
                initialUser: this.user,
                maxConcurrentLimboResolutions: 100
            };
        }
        setCredentialChangeListener(t) {
            this.authCredentialListener = t;
        }
        setAppCheckTokenChangeListener(t) {
            this.appCheckCredentialListener = t;
        }
        /**
         * Checks that the client has not been terminated. Ensures that other methods on
         * this class cannot be called after the client is terminated.
         */    verifyNotTerminated() {
            if (this.asyncQueue.isShuttingDown) throw new Q(G.FAILED_PRECONDITION, "The client has already been terminated.");
        }
        terminate() {
            this.asyncQueue.enterRestrictedMode();
            const t = new j;
            return this.asyncQueue.enqueueAndForgetEvenWhileRestricted((async () => {
                try {
                    this.onlineComponents && await this.onlineComponents.terminate(), this.offlineComponents && await this.offlineComponents.terminate(), 
                    // The credentials provider must be terminated after shutting down the
                    // RemoteStore as it will prevent the RemoteStore from retrieving auth
                    // tokens.
                    this.authCredentials.shutdown(), this.appCheckCredentials.shutdown(), t.resolve();
                } catch (e) {
                    const n = Bu(e, "Failed to shutdown persistence");
                    t.reject(n);
                }
            })), t.promise;
        }
    }

    async function Hc(t, e) {
        t.asyncQueue.verifyOperationInProgress(), M("FirestoreClient", "Initializing OfflineComponentProvider");
        const n = await t.getConfiguration();
        await e.initialize(n);
        let s = n.initialUser;
        t.setCredentialChangeListener((async t => {
            s.isEqual(t) || (await bo(e.localStore, t), s = t);
        })), 
        // When a user calls clearPersistence() in one client, all other clients
        // need to be terminated to allow the delete to succeed.
        e.persistence.setDatabaseDeletedListener((() => t.terminate())), t.offlineComponents = e;
    }

    async function Jc(t, e) {
        t.asyncQueue.verifyOperationInProgress();
        const n = await Yc(t);
        M("FirestoreClient", "Initializing OnlineComponentProvider");
        const s = await t.getConfiguration();
        await e.initialize(n, s), 
        // The CredentialChangeListener of the online component provider takes
        // precedence over the offline component provider.
        t.setCredentialChangeListener((t => ku(e.remoteStore, t))), t.setAppCheckTokenChangeListener(((t, n) => ku(e.remoteStore, n))), 
        t.onlineComponents = e;
    }

    async function Yc(t) {
        return t.offlineComponents || (M("FirestoreClient", "Using default OfflineComponentProvider"), 
        await Hc(t, new Bc)), t.offlineComponents;
    }

    async function Xc(t) {
        return t.onlineComponents || (M("FirestoreClient", "Using default OnlineComponentProvider"), 
        await Jc(t, new qc)), t.onlineComponents;
    }

    function Zc(t) {
        return Yc(t).then((t => t.persistence));
    }

    function ta(t) {
        return Yc(t).then((t => t.localStore));
    }

    function ea(t) {
        return Xc(t).then((t => t.remoteStore));
    }

    function na(t) {
        return Xc(t).then((t => t.syncEngine));
    }

    async function sa(t) {
        const e = await Xc(t), n = e.eventManager;
        return n.onListen = uc.bind(null, e.syncEngine), n.onUnlisten = ac.bind(null, e.syncEngine), 
        n;
    }

    /** Enables the network connection and re-enqueues all pending operations. */ function ia(t) {
        return t.asyncQueue.enqueue((async () => {
            const e = await Zc(t), n = await ea(t);
            return e.setNetworkEnabled(!0), function(t) {
                const e = K(t);
                return e.lu.delete(0 /* UserDisabled */), hu(e);
            }(n);
        }));
    }

    /** Disables the network connection. Pending operations will not complete. */ function ra(t) {
        return t.asyncQueue.enqueue((async () => {
            const e = await Zc(t), n = await ea(t);
            return e.setNetworkEnabled(!1), async function(t) {
                const e = K(t);
                e.lu.add(0 /* UserDisabled */), await lu(e), 
                // Set the OnlineState to Offline so get()s return from cache, etc.
                e._u.set("Offline" /* Offline */);
            }(n);
        }));
    }

    /**
     * Returns a Promise that resolves when all writes that were pending at the time
     * this method was called received server acknowledgement. An acknowledgement
     * can be either acceptance or rejection.
     */ function oa(t, e) {
        const n = new j;
        return t.asyncQueue.enqueueAndForget((async () => async function(t, e, n) {
            try {
                const s = await function(t, e) {
                    const n = K(t);
                    return n.persistence.runTransaction("read document", "readonly", (t => n.localDocuments.getDocument(t, e)));
                }(t, e);
                s.isFoundDocument() ? n.resolve(s) : s.isNoDocument() ? n.resolve(null) : n.reject(new Q(G.UNAVAILABLE, "Failed to get document from cache. (However, this document may exist on the server. Run again without setting 'source' in the GetOptions to attempt to retrieve the document from the server.)"));
            } catch (t) {
                const s = Bu(t, `Failed to get document '${e} from cache`);
                n.reject(s);
            }
        }
        /**
     * Retrieves a latency-compensated document from the backend via a
     * SnapshotListener.
     */ (await ta(t), e, n))), n.promise;
    }

    function ua(t, e, n = {}) {
        const s = new j;
        return t.asyncQueue.enqueueAndForget((async () => function(t, e, n, s, i) {
            const r = new Gc({
                next: r => {
                    // Remove query first before passing event to user to avoid
                    // user actions affecting the now stale query.
                    e.enqueueAndForget((() => ju(t, o)));
                    const u = r.docs.has(n);
                    !u && r.fromCache ? 
                    // TODO(dimond): If we're online and the document doesn't
                    // exist then we resolve with a doc.exists set to false. If
                    // we're offline however, we reject the Promise in this
                    // case. Two options: 1) Cache the negative response from
                    // the server so we can deliver that even when you're
                    // offline 2) Actually reject the Promise in the online case
                    // if the document doesn't exist.
                    i.reject(new Q(G.UNAVAILABLE, "Failed to get document because the client is offline.")) : u && r.fromCache && s && "server" === s.source ? i.reject(new Q(G.UNAVAILABLE, 'Failed to get document from server. (However, this document does exist in the local cache. Run again without setting source to "server" to retrieve the cached document.)')) : i.resolve(r);
                },
                error: t => i.reject(t)
            }), o = new Ju(rn(n.path), r, {
                includeMetadataChanges: !0,
                Du: !0
            });
            return Qu(t, o);
        }(await sa(t), t.asyncQueue, e, n, s))), s.promise;
    }

    function ca(t, e) {
        const n = new j;
        return t.asyncQueue.enqueueAndForget((async () => async function(t, e, n) {
            try {
                const s = await No(t, e, 
                /* usePreviousResults= */ !0), i = new sc(e, s.ji), r = i.Ku(s.documents), o = i.applyChanges(r, 
                /* updateLimboDocuments= */ !1);
                n.resolve(o.snapshot);
            } catch (t) {
                const s = Bu(t, `Failed to execute query '${e} against cache`);
                n.reject(s);
            }
        }
        /**
     * Retrieves a latency-compensated query snapshot from the backend via a
     * SnapshotListener.
     */ (await ta(t), e, n))), n.promise;
    }

    function aa(t, e, n = {}) {
        const s = new j;
        return t.asyncQueue.enqueueAndForget((async () => function(t, e, n, s, i) {
            const r = new Gc({
                next: n => {
                    // Remove query first before passing event to user to avoid
                    // user actions affecting the now stale query.
                    e.enqueueAndForget((() => ju(t, o))), n.fromCache && "server" === s.source ? i.reject(new Q(G.UNAVAILABLE, 'Failed to get documents from server. (However, these documents may exist in the local cache. Run again without setting source to "server" to retrieve the cached documents.)')) : i.resolve(n);
                },
                error: t => i.reject(t)
            }), o = new Ju(n, r, {
                includeMetadataChanges: !0,
                Du: !0
            });
            return Qu(t, o);
        }(await sa(t), t.asyncQueue, e, n, s))), s.promise;
    }

    function ha(t, e) {
        const n = new Gc(e);
        return t.asyncQueue.enqueueAndForget((async () => function(t, e) {
            K(t).Tu.add(e), 
            // Immediately fire an initial event, indicating all existing listeners
            // are in-sync.
            e.next();
        }(await sa(t), n))), () => {
            n.Tc(), t.asyncQueue.enqueueAndForget((async () => function(t, e) {
                K(t).Tu.delete(e);
            }(await sa(t), n)));
        };
    }

    /**
     * Takes an updateFunction in which a set of reads and writes can be performed
     * atomically. In the updateFunction, the client can read and write values
     * using the supplied transaction object. After the updateFunction, all
     * changes will be committed. If a retryable error occurs (ex: some other
     * client has changed any of the data referenced), then the updateFunction
     * will be called again after a backoff. If the updateFunction still fails
     * after all retries, then the transaction will be rejected.
     *
     * The transaction object passed to the updateFunction contains methods for
     * accessing documents and collections. Unlike other datastore access, data
     * accessed with the transaction will not reflect local changes that have not
     * been committed. For this reason, it is required that all reads are
     * performed before any writes. Transactions must be performed while online.
     */ function la(t, e, n) {
        const s = new j;
        return t.asyncQueue.enqueueAndForget((async () => {
            const i = await function(t) {
                return Xc(t).then((t => t.datastore));
            }(t);
            new Wc(t.asyncQueue, i, n, e, s).run();
        })), s.promise;
    }

    function fa(t, e, n, s) {
        const i = function(t, e) {
            let n;
            n = "string" == typeof t ? (new TextEncoder).encode(t) : t;
            return function(t, e) {
                return new Qc(t, e);
            }(function(t, e) {
                if (t instanceof Uint8Array) return Kc(t, e);
                if (t instanceof ArrayBuffer) return Kc(new Uint8Array(t), e);
                if (t instanceof ReadableStream) return t.getReader();
                throw new Error("Source of `toByteStreamReader` has to be a ArrayBuffer or ReadableStream");
            }(n), e);
        }
        /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ (n, nu(e));
        t.asyncQueue.enqueueAndForget((async () => {
            $c(await na(t), i, s);
        }));
    }

    function da(t, e) {
        return t.asyncQueue.enqueue((async () => function(t, e) {
            const n = K(t);
            return n.persistence.runTransaction("Get named query", "readonly", (t => n.Ds.getNamedQuery(t, e)));
        }(await ta(t), e)));
    }

    const _a = new Map;

    /**
     * An instance map that ensures only one Datastore exists per Firestore
     * instance.
     */
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function wa(t, e, n) {
        if (!n) throw new Q(G.INVALID_ARGUMENT, `Function ${t}() cannot be called with an empty ${e}.`);
    }

    /**
     * Validates that two boolean options are not set at the same time.
     * @internal
     */ function ma(t, e, n, s) {
        if (!0 === e && !0 === s) throw new Q(G.INVALID_ARGUMENT, `${t} and ${n} cannot be used together.`);
    }

    /**
     * Validates that `path` refers to a document (indicated by the fact it contains
     * an even numbers of segments).
     */ function ga(t) {
        if (!dt.isDocumentKey(t)) throw new Q(G.INVALID_ARGUMENT, `Invalid document reference. Document references must have an even number of segments, but ${t} has ${t.length}.`);
    }

    /**
     * Validates that `path` refers to a collection (indicated by the fact it
     * contains an odd numbers of segments).
     */ function ya(t) {
        if (dt.isDocumentKey(t)) throw new Q(G.INVALID_ARGUMENT, `Invalid collection reference. Collection references must have an odd number of segments, but ${t} has ${t.length}.`);
    }

    /**
     * Returns true if it's a non-null object without a custom prototype
     * (i.e. excludes Array, Date, etc.).
     */
    /** Returns a string describing the type / value of the provided input. */
    function pa(t) {
        if (void 0 === t) return "undefined";
        if (null === t) return "null";
        if ("string" == typeof t) return t.length > 20 && (t = `${t.substring(0, 20)}...`), 
        JSON.stringify(t);
        if ("number" == typeof t || "boolean" == typeof t) return "" + t;
        if ("object" == typeof t) {
            if (t instanceof Array) return "an array";
            {
                const e = 
                /** try to get the constructor name for an object. */
                function(t) {
                    if (t.constructor) return t.constructor.name;
                    return null;
                }
                /**
     * Casts `obj` to `T`, optionally unwrapping Compat types to expose the
     * underlying instance. Throws if  `obj` is not an instance of `T`.
     *
     * This cast is used in the Lite and Full SDK to verify instance types for
     * arguments passed to the public API.
     * @internal
     */ (t);
                return e ? `a custom ${e} object` : "an object";
            }
        }
        return "function" == typeof t ? "a function" : L();
    }

    function Ia(t, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    e) {
        if ("_delegate" in t && (
        // Unwrap Compat types
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        t = t._delegate), !(t instanceof e)) {
            if (e.name === t.constructor.name) throw new Q(G.INVALID_ARGUMENT, "Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?");
            {
                const n = pa(t);
                throw new Q(G.INVALID_ARGUMENT, `Expected type '${e.name}', but it was: ${n}`);
            }
        }
        return t;
    }

    function Ta(t, e) {
        if (e <= 0) throw new Q(G.INVALID_ARGUMENT, `Function ${t}() requires a positive number, but it was: ${e}.`);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // settings() defaults:
    /**
     * A concrete type describing all the values that can be applied via a
     * user-supplied `FirestoreSettings` object. This is a separate type so that
     * defaults can be supplied and the value can be checked for equality.
     */
    class Ea {
        constructor(t) {
            var e;
            if (void 0 === t.host) {
                if (void 0 !== t.ssl) throw new Q(G.INVALID_ARGUMENT, "Can't provide ssl option if host option is not set");
                this.host = "firestore.googleapis.com", this.ssl = true;
            } else this.host = t.host, this.ssl = null === (e = t.ssl) || void 0 === e || e;
            if (this.credentials = t.credentials, this.ignoreUndefinedProperties = !!t.ignoreUndefinedProperties, 
            void 0 === t.cacheSizeBytes) this.cacheSizeBytes = 41943040; else {
                if (-1 !== t.cacheSizeBytes && t.cacheSizeBytes < 1048576) throw new Q(G.INVALID_ARGUMENT, "cacheSizeBytes must be at least 1048576");
                this.cacheSizeBytes = t.cacheSizeBytes;
            }
            this.experimentalForceLongPolling = !!t.experimentalForceLongPolling, this.experimentalAutoDetectLongPolling = !!t.experimentalAutoDetectLongPolling, 
            this.useFetchStreams = !!t.useFetchStreams, ma("experimentalForceLongPolling", t.experimentalForceLongPolling, "experimentalAutoDetectLongPolling", t.experimentalAutoDetectLongPolling);
        }
        isEqual(t) {
            return this.host === t.host && this.ssl === t.ssl && this.credentials === t.credentials && this.cacheSizeBytes === t.cacheSizeBytes && this.experimentalForceLongPolling === t.experimentalForceLongPolling && this.experimentalAutoDetectLongPolling === t.experimentalAutoDetectLongPolling && this.ignoreUndefinedProperties === t.ignoreUndefinedProperties && this.useFetchStreams === t.useFetchStreams;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * The Cloud Firestore service interface.
     *
     * Do not call this constructor directly. Instead, use {@link getFirestore}.
     */ class Aa {
        /** @hideconstructor */
        constructor(t, e, n) {
            this._authCredentials = e, this._appCheckCredentials = n, 
            /**
             * Whether it's a Firestore or Firestore Lite instance.
             */
            this.type = "firestore-lite", this._persistenceKey = "(lite)", this._settings = new Ea({}), 
            this._settingsFrozen = !1, t instanceof re ? this._databaseId = t : (this._app = t, 
            this._databaseId = function(t) {
                if (!Object.prototype.hasOwnProperty.apply(t.options, [ "projectId" ])) throw new Q(G.INVALID_ARGUMENT, '"projectId" not provided in firebase.initializeApp.');
                return new re(t.options.projectId);
            }
            /**
     * Modify this instance to communicate with the Cloud Firestore emulator.
     *
     * Note: This must be called before this instance has been used to do any
     * operations.
     *
     * @param firestore - The `Firestore` instance to configure to connect to the
     * emulator.
     * @param host - the emulator host (ex: localhost).
     * @param port - the emulator port (ex: 9000).
     * @param options.mockUserToken - the mock auth token to use for unit testing
     * Security Rules.
     */ (t));
        }
        /**
         * The {@link @firebase/app#FirebaseApp} associated with this `Firestore` service
         * instance.
         */    get app() {
            if (!this._app) throw new Q(G.FAILED_PRECONDITION, "Firestore was not initialized using the Firebase SDK. 'app' is not available");
            return this._app;
        }
        get _initialized() {
            return this._settingsFrozen;
        }
        get _terminated() {
            return void 0 !== this._terminateTask;
        }
        _setSettings(t) {
            if (this._settingsFrozen) throw new Q(G.FAILED_PRECONDITION, "Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.");
            this._settings = new Ea(t), void 0 !== t.credentials && (this._authCredentials = function(t) {
                if (!t) return new z;
                switch (t.type) {
                  case "gapi":
                    const e = t.client;
                    // Make sure this really is a Gapi client.
                                    return U(!("object" != typeof e || null === e || !e.auth || !e.auth.getAuthHeaderValueForFirstParty)), 
                    new X(e, t.sessionIndex || "0", t.iamToken || null);

                  case "provider":
                    return t.client;

                  default:
                    throw new Q(G.INVALID_ARGUMENT, "makeAuthCredentialsProvider failed due to invalid credential type");
                }
            }(t.credentials));
        }
        _getSettings() {
            return this._settings;
        }
        _freezeSettings() {
            return this._settingsFrozen = !0, this._settings;
        }
        _delete() {
            return this._terminateTask || (this._terminateTask = this._terminate()), this._terminateTask;
        }
        /** Returns a JSON-serializable representation of this `Firestore` instance. */    toJSON() {
            return {
                app: this._app,
                databaseId: this._databaseId,
                settings: this._settings
            };
        }
        /**
         * Terminates all components used by this client. Subclasses can override
         * this method to clean up their own dependencies, but must also call this
         * method.
         *
         * Only ever called once.
         */    _terminate() {
            /**
     * Removes all components associated with the provided instance. Must be called
     * when the `Firestore` instance is terminated.
     */
            return function(t) {
                const e = _a.get(t);
                e && (M("ComponentProvider", "Removing Datastore"), _a.delete(t), e.terminate());
            }(this), Promise.resolve();
        }
    }

    function Ra(t, e, n, s = {}) {
        var i;
        const r = (t = Ia(t, Aa))._getSettings();
        if ("firestore.googleapis.com" !== r.host && r.host !== e && $("Host has been set in both settings() and useEmulator(), emulator host will be used"), 
        t._setSettings(Object.assign(Object.assign({}, r), {
            host: `${e}:${n}`,
            ssl: !1
        })), s.mockUserToken) {
            let e, n;
            if ("string" == typeof s.mockUserToken) e = s.mockUserToken, n = C.MOCK_USER; else {
                // Let createMockUserToken validate first (catches common mistakes like
                // invalid field "uid" and missing field "sub" / "user_id".)
                e = createMockUserToken(s.mockUserToken, null === (i = t._app) || void 0 === i ? void 0 : i.options.projectId);
                const r = s.mockUserToken.sub || s.mockUserToken.user_id;
                if (!r) throw new Q(G.INVALID_ARGUMENT, "mockUserToken must contain 'sub' or 'user_id' field!");
                n = new C(r);
            }
            t._authCredentials = new H(new W(e, n));
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A `DocumentReference` refers to a document location in a Firestore database
     * and can be used to write, read, or listen to the location. The document at
     * the referenced location may or may not exist.
     */ class ba {
        /** @hideconstructor */
        constructor(t, 
        /**
         * If provided, the `FirestoreDataConverter` associated with this instance.
         */
        e, n) {
            this.converter = e, this._key = n, 
            /** The type of this Firestore reference. */
            this.type = "document", this.firestore = t;
        }
        get _path() {
            return this._key.path;
        }
        /**
         * The document's identifier within its collection.
         */    get id() {
            return this._key.path.lastSegment();
        }
        /**
         * A string representing the path of the referenced document (relative
         * to the root of the database).
         */    get path() {
            return this._key.path.canonicalString();
        }
        /**
         * The collection this `DocumentReference` belongs to.
         */    get parent() {
            return new va(this.firestore, this.converter, this._key.path.popLast());
        }
        withConverter(t) {
            return new ba(this.firestore, t, this._key);
        }
    }

    /**
     * A `Query` refers to a query which you can read or listen to. You can also
     * construct refined `Query` objects by adding filters and ordering.
     */ class Pa {
        // This is the lite version of the Query class in the main SDK.
        /** @hideconstructor protected */
        constructor(t, 
        /**
         * If provided, the `FirestoreDataConverter` associated with this instance.
         */
        e, n) {
            this.converter = e, this._query = n, 
            /** The type of this Firestore reference. */
            this.type = "query", this.firestore = t;
        }
        withConverter(t) {
            return new Pa(this.firestore, t, this._query);
        }
    }

    /**
     * A `CollectionReference` object can be used for adding documents, getting
     * document references, and querying for documents (using {@link query}).
     */ class va extends Pa {
        /** @hideconstructor */
        constructor(t, e, n) {
            super(t, e, rn(n)), this._path = n, 
            /** The type of this Firestore reference. */
            this.type = "collection";
        }
        /** The collection's identifier. */    get id() {
            return this._query.path.lastSegment();
        }
        /**
         * A string representing the path of the referenced collection (relative
         * to the root of the database).
         */    get path() {
            return this._query.path.canonicalString();
        }
        /**
         * A reference to the containing `DocumentReference` if this is a
         * subcollection. If this isn't a subcollection, the reference is null.
         */    get parent() {
            const t = this._path.popLast();
            return t.isEmpty() ? null : new ba(this.firestore, 
            /* converter= */ null, new dt(t));
        }
        withConverter(t) {
            return new va(this.firestore, t, this._path);
        }
    }

    function Va(t, e, ...n) {
        if (t = getModularInstance(t), wa("collection", "path", e), t instanceof Aa) {
            const s = ht.fromString(e, ...n);
            return ya(s), new va(t, /* converter= */ null, s);
        }
        {
            if (!(t instanceof ba || t instanceof va)) throw new Q(G.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
            const s = t._path.child(ht.fromString(e, ...n));
            return ya(s), new va(t.firestore, 
            /* converter= */ null, s);
        }
    }

    // TODO(firestorelite): Consider using ErrorFactory -
    // https://github.com/firebase/firebase-js-sdk/blob/0131e1f/packages/util/src/errors.ts#L106
    /**
     * Creates and returns a new `Query` instance that includes all documents in the
     * database that are contained in a collection or subcollection with the
     * given `collectionId`.
     *
     * @param firestore - A reference to the root `Firestore` instance.
     * @param collectionId - Identifies the collections to query over. Every
     * collection or subcollection with this ID as the last segment of its path
     * will be included. Cannot contain a slash.
     * @returns The created `Query`.
     */ function Sa(t, e) {
        if (t = Ia(t, Aa), wa("collectionGroup", "collection id", e), e.indexOf("/") >= 0) throw new Q(G.INVALID_ARGUMENT, `Invalid collection ID '${e}' passed to function collectionGroup(). Collection IDs must not contain '/'.`);
        return new Pa(t, 
        /* converter= */ null, 
        /**
     * Creates a new Query for a collection group query that matches all documents
     * within the provided collection group.
     */
        function(t) {
            return new nn(ht.emptyPath(), t);
        }(e));
    }

    function Da(t, e, ...n) {
        if (t = getModularInstance(t), 
        // We allow omission of 'pathString' but explicitly prohibit passing in both
        // 'undefined' and 'null'.
        1 === arguments.length && (e = st.I()), wa("doc", "path", e), t instanceof Aa) {
            const s = ht.fromString(e, ...n);
            return ga(s), new ba(t, 
            /* converter= */ null, new dt(s));
        }
        {
            if (!(t instanceof ba || t instanceof va)) throw new Q(G.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
            const s = t._path.child(ht.fromString(e, ...n));
            return ga(s), new ba(t.firestore, t instanceof va ? t.converter : null, new dt(s));
        }
    }

    /**
     * Returns true if the provided references are equal.
     *
     * @param left - A reference to compare.
     * @param right - A reference to compare.
     * @returns true if the references point to the same location in the same
     * Firestore database.
     */ function Ca(t, e) {
        return t = getModularInstance(t), e = getModularInstance(e), (t instanceof ba || t instanceof va) && (e instanceof ba || e instanceof va) && (t.firestore === e.firestore && t.path === e.path && t.converter === e.converter);
    }

    /**
     * Returns true if the provided queries point to the same collection and apply
     * the same constraints.
     *
     * @param left - A `Query` to compare.
     * @param right - A `Query` to compare.
     * @returns true if the references point to the same location in the same
     * Firestore database.
     */ function xa(t, e) {
        return t = getModularInstance(t), e = getModularInstance(e), t instanceof Pa && e instanceof Pa && (t.firestore === e.firestore && dn(t._query, e._query) && t.converter === e.converter);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class Na {
        constructor() {
            // The last promise in the queue.
            this.Oc = Promise.resolve(), 
            // A list of retryable operations. Retryable operations are run in order and
            // retried with backoff.
            this.Mc = [], 
            // Is this AsyncQueue being shut down? Once it is set to true, it will not
            // be changed again.
            this.Fc = !1, 
            // Operations scheduled to be queued in the future. Operations are
            // automatically removed after they are run or canceled.
            this.$c = [], 
            // visible for testing
            this.Bc = null, 
            // Flag set while there's an outstanding AsyncQueue operation, used for
            // assertion sanity-checks.
            this.Lc = !1, 
            // Enabled during shutdown on Safari to prevent future access to IndexedDB.
            this.Uc = !1, 
            // List of TimerIds to fast-forward delays for.
            this.qc = [], 
            // Backoff timer used to schedule retries for retryable operations
            this.So = new su(this, "async_queue_retry" /* AsyncQueueRetry */), 
            // Visibility handler that triggers an immediate retry of all retryable
            // operations. Meant to speed up recovery when we regain file system access
            // after page comes into foreground.
            this.Kc = () => {
                const t = eu();
                t && M("AsyncQueue", "Visibility state changed to " + t.visibilityState), this.So.Eo();
            };
            const t = eu();
            t && "function" == typeof t.addEventListener && t.addEventListener("visibilitychange", this.Kc);
        }
        get isShuttingDown() {
            return this.Fc;
        }
        /**
         * Adds a new operation to the queue without waiting for it to complete (i.e.
         * we ignore the Promise result).
         */    enqueueAndForget(t) {
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.enqueue(t);
        }
        enqueueAndForgetEvenWhileRestricted(t) {
            this.Gc(), 
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.Qc(t);
        }
        enterRestrictedMode(t) {
            if (!this.Fc) {
                this.Fc = !0, this.Uc = t || !1;
                const e = eu();
                e && "function" == typeof e.removeEventListener && e.removeEventListener("visibilitychange", this.Kc);
            }
        }
        enqueue(t) {
            if (this.Gc(), this.Fc) 
            // Return a Promise which never resolves.
            return new Promise((() => {}));
            // Create a deferred Promise that we can return to the callee. This
            // allows us to return a "hanging Promise" only to the callee and still
            // advance the queue even when the operation is not run.
                    const e = new j;
            return this.Qc((() => this.Fc && this.Uc ? Promise.resolve() : (t().then(e.resolve, e.reject), 
            e.promise))).then((() => e.promise));
        }
        enqueueRetryable(t) {
            this.enqueueAndForget((() => (this.Mc.push(t), this.jc())));
        }
        /**
         * Runs the next operation from the retryable queue. If the operation fails,
         * reschedules with backoff.
         */    async jc() {
            if (0 !== this.Mc.length) {
                try {
                    await this.Mc[0](), this.Mc.shift(), this.So.reset();
                } catch (t) {
                    if (!Ct(t)) throw t;
     // Failure will be handled by AsyncQueue
                                    M("AsyncQueue", "Operation failed with retryable error: " + t);
                }
                this.Mc.length > 0 && 
                // If there are additional operations, we re-schedule `retryNextOp()`.
                // This is necessary to run retryable operations that failed during
                // their initial attempt since we don't know whether they are already
                // enqueued. If, for example, `op1`, `op2`, `op3` are enqueued and `op1`
                // needs to  be re-run, we will run `op1`, `op1`, `op2` using the
                // already enqueued calls to `retryNextOp()`. `op3()` will then run in the
                // call scheduled here.
                // Since `backoffAndRun()` cancels an existing backoff and schedules a
                // new backoff on every call, there is only ever a single additional
                // operation in the queue.
                this.So.Io((() => this.jc()));
            }
        }
        Qc(t) {
            const e = this.Oc.then((() => (this.Lc = !0, t().catch((t => {
                this.Bc = t, this.Lc = !1;
                const e = 
                /**
     * Chrome includes Error.message in Error.stack. Other browsers do not.
     * This returns expected output of message + stack when available.
     * @param error - Error or FirestoreError
     */
                function(t) {
                    let e = t.message || "";
                    t.stack && (e = t.stack.includes(t.message) ? t.stack : t.message + "\n" + t.stack);
                    return e;
                }
                /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ (t);
                // Re-throw the error so that this.tail becomes a rejected Promise and
                // all further attempts to chain (via .then) will just short-circuit
                // and return the rejected Promise.
                throw F("INTERNAL UNHANDLED ERROR: ", e), t;
            })).then((t => (this.Lc = !1, t))))));
            return this.Oc = e, e;
        }
        enqueueAfterDelay(t, e, n) {
            this.Gc(), 
            // Fast-forward delays for timerIds that have been overriden.
            this.qc.indexOf(t) > -1 && (e = 0);
            const s = $u.createAndSchedule(this, t, e, n, (t => this.Wc(t)));
            return this.$c.push(s), s;
        }
        Gc() {
            this.Bc && L();
        }
        verifyOperationInProgress() {}
        /**
         * Waits until all currently queued tasks are finished executing. Delayed
         * operations are not run.
         */    async zc() {
            // Operations in the queue prior to draining may have enqueued additional
            // operations. Keep draining the queue until the tail is no longer advanced,
            // which indicates that no more new operations were enqueued and that all
            // operations were executed.
            let t;
            do {
                t = this.Oc, await t;
            } while (t !== this.Oc);
        }
        /**
         * For Tests: Determine if a delayed operation with a particular TimerId
         * exists.
         */    Hc(t) {
            for (const e of this.$c) if (e.timerId === t) return !0;
            return !1;
        }
        /**
         * For Tests: Runs some or all delayed operations early.
         *
         * @param lastTimerId - Delayed operations up to and including this TimerId
         * will be drained. Pass TimerId.All to run all delayed operations.
         * @returns a Promise that resolves once all operations have been run.
         */    Jc(t) {
            // Note that draining may generate more delayed ops, so we do that first.
            return this.zc().then((() => {
                // Run ops in the same order they'd run if they ran naturally.
                this.$c.sort(((t, e) => t.targetTimeMs - e.targetTimeMs));
                for (const e of this.$c) if (e.skipDelay(), "all" /* All */ !== t && e.timerId === t) break;
                return this.zc();
            }));
        }
        /**
         * For Tests: Skip all subsequent delays for a timer id.
         */    Yc(t) {
            this.qc.push(t);
        }
        /** Called once a DelayedOperation is run or canceled. */    Wc(t) {
            // NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.
            const e = this.$c.indexOf(t);
            this.$c.splice(e, 1);
        }
    }

    function ka(t) {
        /**
     * Returns true if obj is an object and contains at least one of the specified
     * methods.
     */
        return function(t, e) {
            if ("object" != typeof t || null === t) return !1;
            const n = t;
            for (const t of e) if (t in n && "function" == typeof n[t]) return !0;
            return !1;
        }
        /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
        /**
     * Represents the task of loading a Firestore bundle. It provides progress of bundle
     * loading, as well as task completion and error events.
     *
     * The API is compatible with `Promise<LoadBundleTaskProgress>`.
     */ (t, [ "next", "error", "complete" ]);
    }

    class Oa {
        constructor() {
            this._progressObserver = {}, this._taskCompletionResolver = new j, this._lastProgress = {
                taskState: "Running",
                totalBytes: 0,
                totalDocuments: 0,
                bytesLoaded: 0,
                documentsLoaded: 0
            };
        }
        /**
         * Registers functions to listen to bundle loading progress events.
         * @param next - Called when there is a progress update from bundle loading. Typically `next` calls occur
         *   each time a Firestore document is loaded from the bundle.
         * @param error - Called when an error occurs during bundle loading. The task aborts after reporting the
         *   error, and there should be no more updates after this.
         * @param complete - Called when the loading task is complete.
         */    onProgress(t, e, n) {
            this._progressObserver = {
                next: t,
                error: e,
                complete: n
            };
        }
        /**
         * Implements the `Promise<LoadBundleTaskProgress>.catch` interface.
         *
         * @param onRejected - Called when an error occurs during bundle loading.
         */    catch(t) {
            return this._taskCompletionResolver.promise.catch(t);
        }
        /**
         * Implements the `Promise<LoadBundleTaskProgress>.then` interface.
         *
         * @param onFulfilled - Called on the completion of the loading task with a final `LoadBundleTaskProgress` update.
         *   The update will always have its `taskState` set to `"Success"`.
         * @param onRejected - Called when an error occurs during bundle loading.
         */    then(t, e) {
            return this._taskCompletionResolver.promise.then(t, e);
        }
        /**
         * Notifies all observers that bundle loading has completed, with a provided
         * `LoadBundleTaskProgress` object.
         *
         * @private
         */    _completeWith(t) {
            this._updateProgress(t), this._progressObserver.complete && this._progressObserver.complete(), 
            this._taskCompletionResolver.resolve(t);
        }
        /**
         * Notifies all observers that bundle loading has failed, with a provided
         * `Error` as the reason.
         *
         * @private
         */    _failWith(t) {
            this._lastProgress.taskState = "Error", this._progressObserver.next && this._progressObserver.next(this._lastProgress), 
            this._progressObserver.error && this._progressObserver.error(t), this._taskCompletionResolver.reject(t);
        }
        /**
         * Notifies a progress update of loading a bundle.
         * @param progress - The new progress.
         *
         * @private
         */    _updateProgress(t) {
            this._lastProgress = t, this._progressObserver.next && this._progressObserver.next(t);
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** DOMException error code constants. */ const Ma = -1;

    /**
     * The Cloud Firestore service interface.
     *
     * Do not call this constructor directly. Instead, use {@link getFirestore}.
     */
    class Fa extends Aa {
        /** @hideconstructor */
        constructor(t, e, n) {
            super(t, e, n), 
            /**
             * Whether it's a {@link Firestore} or Firestore Lite instance.
             */
            this.type = "firestore", this._queue = new Na, this._persistenceKey = "name" in t ? t.name : "[DEFAULT]";
        }
        _terminate() {
            return this._firestoreClient || 
            // The client must be initialized to ensure that all subsequent API
            // usage throws an exception.
            Ua(this), this._firestoreClient.terminate();
        }
    }

    /**
     * @internal
     */ function La(t) {
        return t._firestoreClient || Ua(t), t._firestoreClient.verifyNotTerminated(), t._firestoreClient;
    }

    function Ua(t) {
        var e;
        const n = t._freezeSettings(), s = function(t, e, n, s) {
            return new ie(t, e, n, s.host, s.ssl, s.experimentalForceLongPolling, s.experimentalAutoDetectLongPolling, s.useFetchStreams);
        }(t._databaseId, (null === (e = t._app) || void 0 === e ? void 0 : e.options.appId) || "", t._persistenceKey, n);
        t._firestoreClient = new zc(t._authCredentials, t._appCheckCredentials, t._queue, s);
    }

    /**
     * Attempts to enable persistent storage, if possible.
     *
     * Must be called before any other functions (other than
     * {@link initializeFirestore}, {@link getFirestore} or
     * {@link clearIndexedDbPersistence}.
     *
     * If this fails, `enableIndexedDbPersistence()` will reject the promise it
     * returns. Note that even after this failure, the {@link Firestore} instance will
     * remain usable, however offline persistence will be disabled.
     *
     * There are several reasons why this can fail, which can be identified by
     * the `code` on the error.
     *
     *   * failed-precondition: The app is already open in another browser tab.
     *   * unimplemented: The browser is incompatible with the offline
     *     persistence implementation.
     *
     * @param firestore - The {@link Firestore} instance to enable persistence for.
     * @param persistenceSettings - Optional settings object to configure
     * persistence.
     * @returns A `Promise` that represents successfully enabling persistent storage.
     */ function qa(t, e) {
        Xa(t = Ia(t, Fa));
        const n = La(t), s = t._freezeSettings(), i = new qc;
        return Ga(n, i, new Lc(i, s.cacheSizeBytes, null == e ? void 0 : e.forceOwnership));
    }

    /**
     * Attempts to enable multi-tab persistent storage, if possible. If enabled
     * across all tabs, all operations share access to local persistence, including
     * shared execution of queries and latency-compensated local document updates
     * across all connected instances.
     *
     * If this fails, `enableMultiTabIndexedDbPersistence()` will reject the promise
     * it returns. Note that even after this failure, the {@link Firestore} instance will
     * remain usable, however offline persistence will be disabled.
     *
     * There are several reasons why this can fail, which can be identified by
     * the `code` on the error.
     *
     *   * failed-precondition: The app is already open in another browser tab and
     *     multi-tab is not enabled.
     *   * unimplemented: The browser is incompatible with the offline
     *     persistence implementation.
     *
     * @param firestore - The {@link Firestore} instance to enable persistence for.
     * @returns A `Promise` that represents successfully enabling persistent
     * storage.
     */ function Ka(t) {
        Xa(t = Ia(t, Fa));
        const e = La(t), n = t._freezeSettings(), s = new qc;
        return Ga(e, s, new Uc(s, n.cacheSizeBytes));
    }

    /**
     * Registers both the `OfflineComponentProvider` and `OnlineComponentProvider`.
     * If the operation fails with a recoverable error (see
     * `canRecoverFromIndexedDbError()` below), the returned Promise is rejected
     * but the client remains usable.
     */ function Ga(t, e, n) {
        const s = new j;
        return t.asyncQueue.enqueue((async () => {
            try {
                await Hc(t, n), await Jc(t, e), s.resolve();
            } catch (t) {
                const e = t;
                if (!
                /**
     * Decides whether the provided error allows us to gracefully disable
     * persistence (as opposed to crashing the client).
     */
                function(t) {
                    if ("FirebaseError" === t.name) return t.code === G.FAILED_PRECONDITION || t.code === G.UNIMPLEMENTED;
                    if ("undefined" != typeof DOMException && t instanceof DOMException) 
                    // There are a few known circumstances where we can open IndexedDb but
                    // trying to read/write will fail (e.g. quota exceeded). For
                    // well-understood cases, we attempt to detect these and then gracefully
                    // fall back to memory persistence.
                    // NOTE: Rather than continue to add to this list, we could decide to
                    // always fall back, with the risk that we might accidentally hide errors
                    // representing actual SDK bugs.
                    // When the browser is out of quota we could get either quota exceeded
                    // or an aborted error depending on whether the error happened during
                    // schema migration.
                    return 22 === t.code || 20 === t.code || 
                    // Firefox Private Browsing mode disables IndexedDb and returns
                    // INVALID_STATE for any usage.
                    11 === t.code;
                    return !0;
                }
                /**
     * Clears the persistent storage. This includes pending writes and cached
     * documents.
     *
     * Must be called while the {@link Firestore} instance is not started (after the app is
     * terminated or when the app is first initialized). On startup, this function
     * must be called before other functions (other than {@link
     * initializeFirestore} or {@link getFirestore})). If the {@link Firestore}
     * instance is still running, the promise will be rejected with the error code
     * of `failed-precondition`.
     *
     * Note: `clearIndexedDbPersistence()` is primarily intended to help write
     * reliable tests that use Cloud Firestore. It uses an efficient mechanism for
     * dropping existing data but does not attempt to securely overwrite or
     * otherwise make cached data unrecoverable. For applications that are sensitive
     * to the disclosure of cached data in between user sessions, we strongly
     * recommend not enabling persistence at all.
     *
     * @param firestore - The {@link Firestore} instance to clear persistence for.
     * @returns A `Promise` that is resolved when the persistent storage is
     * cleared. Otherwise, the promise is rejected with an error.
     */ (e)) throw e;
                console.warn("Error enabling offline persistence. Falling back to persistence disabled: " + e), 
                s.reject(e);
            }
        })).then((() => s.promise));
    }

    function Qa(t) {
        if (t._initialized && !t._terminated) throw new Q(G.FAILED_PRECONDITION, "Persistence can only be cleared before a Firestore instance is initialized or after it is terminated.");
        const e = new j;
        return t._queue.enqueueAndForgetEvenWhileRestricted((async () => {
            try {
                await async function(t) {
                    if (!Vt.V()) return Promise.resolve();
                    const e = t + "main";
                    await Vt.delete(e);
                }(Io(t._databaseId, t._persistenceKey)), e.resolve();
            } catch (t) {
                e.reject(t);
            }
        })), e.promise;
    }

    /**
     * Waits until all currently pending writes for the active user have been
     * acknowledged by the backend.
     *
     * The returned promise resolves immediately if there are no outstanding writes.
     * Otherwise, the promise waits for all previously issued writes (including
     * those written in a previous app session), but it does not wait for writes
     * that were added after the function is called. If you want to wait for
     * additional writes, call `waitForPendingWrites()` again.
     *
     * Any outstanding `waitForPendingWrites()` promises are rejected during user
     * changes.
     *
     * @returns A `Promise` which resolves when all currently pending writes have been
     * acknowledged by the backend.
     */ function ja(t) {
        return function(t) {
            const e = new j;
            return t.asyncQueue.enqueueAndForget((async () => mc(await na(t), e))), e.promise;
        }(La(t = Ia(t, Fa)));
    }

    /**
     * Re-enables use of the network for this {@link Firestore} instance after a prior
     * call to {@link disableNetwork}.
     *
     * @returns A `Promise` that is resolved once the network has been enabled.
     */ function Wa(t) {
        return ia(La(t = Ia(t, Fa)));
    }

    /**
     * Disables network usage for this instance. It can be re-enabled via {@link
     * enableNetwork}. While the network is disabled, any snapshot listeners,
     * `getDoc()` or `getDocs()` calls will return results from cache, and any write
     * operations will be queued until the network is restored.
     *
     * @returns A `Promise` that is resolved once the network has been disabled.
     */ function za(t) {
        return ra(La(t = Ia(t, Fa)));
    }

    /**
     * Loads a Firestore bundle into the local cache.
     *
     * @param firestore - The {@link Firestore} instance to load bundles for.
     * @param bundleData - An object representing the bundle to be loaded. Valid
     * objects are `ArrayBuffer`, `ReadableStream<Uint8Array>` or `string`.
     *
     * @returns A `LoadBundleTask` object, which notifies callers with progress
     * updates, and completion or error events. It can be used as a
     * `Promise<LoadBundleTaskProgress>`.
     */ function Ja(t, e) {
        const n = La(t = Ia(t, Fa)), s = new Oa;
        return fa(n, t._databaseId, e, s), s;
    }

    /**
     * Reads a Firestore {@link Query} from local cache, identified by the given
     * name.
     *
     * The named queries are packaged  into bundles on the server side (along
     * with resulting documents), and loaded to local cache using `loadBundle`. Once
     * in local cache, use this method to extract a {@link Query} by name.
     *
     * @param firestore - The {@link Firestore} instance to read the query from.
     * @param name - The name of the query.
     * @returns A `Promise` that is resolved with the Query or `null`.
     */ function Ya(t, e) {
        return da(La(t = Ia(t, Fa)), e).then((e => e ? new Pa(t, null, e.query) : null));
    }

    function Xa(t) {
        if (t._initialized || t._terminated) throw new Q(G.FAILED_PRECONDITION, "Firestore has already been started and persistence can no longer be enabled. You can only enable persistence before calling any other methods on a Firestore object.");
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A `FieldPath` refers to a field in a document. The path may consist of a
     * single field name (referring to a top-level field in the document), or a
     * list of field names (referring to a nested field in the document).
     *
     * Create a `FieldPath` by providing field names. If more than one field
     * name is provided, the path will point to a nested field in a document.
     */
    class Za {
        /**
         * Creates a `FieldPath` from the provided field names. If more than one field
         * name is provided, the path will point to a nested field in a document.
         *
         * @param fieldNames - A list of field names.
         */
        constructor(...t) {
            for (let e = 0; e < t.length; ++e) if (0 === t[e].length) throw new Q(G.INVALID_ARGUMENT, "Invalid field name at argument $(i + 1). Field names must not be empty.");
            this._internalPath = new ft(t);
        }
        /**
         * Returns true if this `FieldPath` is equal to the provided one.
         *
         * @param other - The `FieldPath` to compare against.
         * @returns true if this `FieldPath` is equal to the provided one.
         */    isEqual(t) {
            return this._internalPath.isEqual(t._internalPath);
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An immutable object representing an array of bytes.
     */ class eh {
        /** @hideconstructor */
        constructor(t) {
            this._byteString = t;
        }
        /**
         * Creates a new `Bytes` object from the given Base64 string, converting it to
         * bytes.
         *
         * @param base64 - The Base64 string used to create the `Bytes` object.
         */    static fromBase64String(t) {
            try {
                return new eh(Jt.fromBase64String(t));
            } catch (t) {
                throw new Q(G.INVALID_ARGUMENT, "Failed to construct data from Base64 string: " + t);
            }
        }
        /**
         * Creates a new `Bytes` object from the given Uint8Array.
         *
         * @param array - The Uint8Array used to create the `Bytes` object.
         */    static fromUint8Array(t) {
            return new eh(Jt.fromUint8Array(t));
        }
        /**
         * Returns the underlying bytes as a Base64-encoded string.
         *
         * @returns The Base64-encoded string created from the `Bytes` object.
         */    toBase64() {
            return this._byteString.toBase64();
        }
        /**
         * Returns the underlying bytes in a new `Uint8Array`.
         *
         * @returns The Uint8Array created from the `Bytes` object.
         */    toUint8Array() {
            return this._byteString.toUint8Array();
        }
        /**
         * Returns a string representation of the `Bytes` object.
         *
         * @returns A string representation of the `Bytes` object.
         */    toString() {
            return "Bytes(base64: " + this.toBase64() + ")";
        }
        /**
         * Returns true if this `Bytes` object is equal to the provided one.
         *
         * @param other - The `Bytes` object to compare against.
         * @returns true if this `Bytes` object is equal to the provided one.
         */    isEqual(t) {
            return this._byteString.isEqual(t._byteString);
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Sentinel values that can be used when writing document fields with `set()`
     * or `update()`.
     */ class nh {
        /**
         * @param _methodName - The public API endpoint that returns this class.
         * @hideconstructor
         */
        constructor(t) {
            this._methodName = t;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An immutable object representing a geographic location in Firestore. The
     * location is represented as latitude/longitude pair.
     *
     * Latitude values are in the range of [-90, 90].
     * Longitude values are in the range of [-180, 180].
     */ class sh {
        /**
         * Creates a new immutable `GeoPoint` object with the provided latitude and
         * longitude values.
         * @param latitude - The latitude as number between -90 and 90.
         * @param longitude - The longitude as number between -180 and 180.
         */
        constructor(t, e) {
            if (!isFinite(t) || t < -90 || t > 90) throw new Q(G.INVALID_ARGUMENT, "Latitude must be a number between -90 and 90, but was: " + t);
            if (!isFinite(e) || e < -180 || e > 180) throw new Q(G.INVALID_ARGUMENT, "Longitude must be a number between -180 and 180, but was: " + e);
            this._lat = t, this._long = e;
        }
        /**
         * The latitude of this `GeoPoint` instance.
         */    get latitude() {
            return this._lat;
        }
        /**
         * The longitude of this `GeoPoint` instance.
         */    get longitude() {
            return this._long;
        }
        /**
         * Returns true if this `GeoPoint` is equal to the provided one.
         *
         * @param other - The `GeoPoint` to compare against.
         * @returns true if this `GeoPoint` is equal to the provided one.
         */    isEqual(t) {
            return this._lat === t._lat && this._long === t._long;
        }
        /** Returns a JSON-serializable representation of this GeoPoint. */    toJSON() {
            return {
                latitude: this._lat,
                longitude: this._long
            };
        }
        /**
         * Actually private to JS consumers of our API, so this function is prefixed
         * with an underscore.
         */    _compareTo(t) {
            return it(this._lat, t._lat) || it(this._long, t._long);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ const ih = /^__.*__$/;

    /** The result of parsing document data (e.g. for a setData call). */ class rh {
        constructor(t, e, n) {
            this.data = t, this.fieldMask = e, this.fieldTransforms = n;
        }
        toMutation(t, e) {
            return null !== this.fieldMask ? new Wn(t, this.data, this.fieldMask, e, this.fieldTransforms) : new jn(t, this.data, e, this.fieldTransforms);
        }
    }

    /** The result of parsing "update" data (i.e. for an updateData call). */ class oh {
        constructor(t, 
        // The fieldMask does not include document transforms.
        e, n) {
            this.data = t, this.fieldMask = e, this.fieldTransforms = n;
        }
        toMutation(t, e) {
            return new Wn(t, this.data, this.fieldMask, e, this.fieldTransforms);
        }
    }

    function uh(t) {
        switch (t) {
          case 0 /* Set */ :
     // fall through
                  case 2 /* MergeSet */ :
     // fall through
                  case 1 /* Update */ :
            return !0;

          case 3 /* Argument */ :
          case 4 /* ArrayArgument */ :
            return !1;

          default:
            throw L();
        }
    }

    /** A "context" object passed around while parsing user data. */ class ch {
        /**
         * Initializes a ParseContext with the given source and path.
         *
         * @param settings - The settings for the parser.
         * @param databaseId - The database ID of the Firestore instance.
         * @param serializer - The serializer to use to generate the Value proto.
         * @param ignoreUndefinedProperties - Whether to ignore undefined properties
         * rather than throw.
         * @param fieldTransforms - A mutable list of field transforms encountered
         * while parsing the data.
         * @param fieldMask - A mutable list of field paths encountered while parsing
         * the data.
         *
         * TODO(b/34871131): We don't support array paths right now, so path can be
         * null to indicate the context represents any location within an array (in
         * which case certain features will not work and errors will be somewhat
         * compromised).
         */
        constructor(t, e, n, s, i, r) {
            this.settings = t, this.databaseId = e, this.wt = n, this.ignoreUndefinedProperties = s, 
            // Minor hack: If fieldTransforms is undefined, we assume this is an
            // external call and we need to validate the entire path.
            void 0 === i && this.Xc(), this.fieldTransforms = i || [], this.fieldMask = r || [];
        }
        get path() {
            return this.settings.path;
        }
        get Zc() {
            return this.settings.Zc;
        }
        /** Returns a new context with the specified settings overwritten. */    ta(t) {
            return new ch(Object.assign(Object.assign({}, this.settings), t), this.databaseId, this.wt, this.ignoreUndefinedProperties, this.fieldTransforms, this.fieldMask);
        }
        ea(t) {
            var e;
            const n = null === (e = this.path) || void 0 === e ? void 0 : e.child(t), s = this.ta({
                path: n,
                na: !1
            });
            return s.sa(t), s;
        }
        ia(t) {
            var e;
            const n = null === (e = this.path) || void 0 === e ? void 0 : e.child(t), s = this.ta({
                path: n,
                na: !1
            });
            return s.Xc(), s;
        }
        ra(t) {
            // TODO(b/34871131): We don't support array paths right now; so make path
            // undefined.
            return this.ta({
                path: void 0,
                na: !0
            });
        }
        oa(t) {
            return Vh(t, this.settings.methodName, this.settings.ua || !1, this.path, this.settings.ca);
        }
        /** Returns 'true' if 'fieldPath' was traversed when creating this context. */    contains(t) {
            return void 0 !== this.fieldMask.find((e => t.isPrefixOf(e))) || void 0 !== this.fieldTransforms.find((e => t.isPrefixOf(e.field)));
        }
        Xc() {
            // TODO(b/34871131): Remove null check once we have proper paths for fields
            // within arrays.
            if (this.path) for (let t = 0; t < this.path.length; t++) this.sa(this.path.get(t));
        }
        sa(t) {
            if (0 === t.length) throw this.oa("Document fields must not be empty");
            if (uh(this.Zc) && ih.test(t)) throw this.oa('Document fields cannot begin and end with "__"');
        }
    }

    /**
     * Helper for parsing raw user input (provided via the API) into internal model
     * classes.
     */ class ah {
        constructor(t, e, n) {
            this.databaseId = t, this.ignoreUndefinedProperties = e, this.wt = n || nu(t);
        }
        /** Creates a new top-level parse context. */    aa(t, e, n, s = !1) {
            return new ch({
                Zc: t,
                methodName: e,
                ca: n,
                path: ft.emptyPath(),
                na: !1,
                ua: s
            }, this.databaseId, this.wt, this.ignoreUndefinedProperties);
        }
    }

    function hh(t) {
        const e = t._freezeSettings(), n = nu(t._databaseId);
        return new ah(t._databaseId, !!e.ignoreUndefinedProperties, n);
    }

    /** Parse document data from a set() call. */ function lh(t, e, n, s, i, r = {}) {
        const o = t.aa(r.merge || r.mergeFields ? 2 /* MergeSet */ : 0 /* Set */ , e, n, i);
        Rh("Data must be an object, but it was:", o, s);
        const u = Eh(s, o);
        let c, a;
        if (r.merge) c = new zt(o.fieldMask), a = o.fieldTransforms; else if (r.mergeFields) {
            const t = [];
            for (const s of r.mergeFields) {
                const i = bh(e, s, n);
                if (!o.contains(i)) throw new Q(G.INVALID_ARGUMENT, `Field '${i}' is specified in your field mask but missing from your input data.`);
                Sh(t, i) || t.push(i);
            }
            c = new zt(t), a = o.fieldTransforms.filter((t => c.covers(t.field)));
        } else c = null, a = o.fieldTransforms;
        return new rh(new De(u), c, a);
    }

    class fh extends nh {
        _toFieldTransform(t) {
            if (2 /* MergeSet */ !== t.Zc) throw 1 /* Update */ === t.Zc ? t.oa(`${this._methodName}() can only appear at the top level of your update data`) : t.oa(`${this._methodName}() cannot be used with set() unless you pass {merge:true}`);
            // No transform to add for a delete, but we need to add it to our
            // fieldMask so it gets deleted.
            return t.fieldMask.push(t.path), null;
        }
        isEqual(t) {
            return t instanceof fh;
        }
    }

    /**
     * Creates a child context for parsing SerializableFieldValues.
     *
     * This is different than calling `ParseContext.contextWith` because it keeps
     * the fieldTransforms and fieldMask separate.
     *
     * The created context has its `dataSource` set to `UserDataSource.Argument`.
     * Although these values are used with writes, any elements in these FieldValues
     * are not considered writes since they cannot contain any FieldValue sentinels,
     * etc.
     *
     * @param fieldValue - The sentinel FieldValue for which to create a child
     *     context.
     * @param context - The parent context.
     * @param arrayElement - Whether or not the FieldValue has an array.
     */ function dh(t, e, n) {
        return new ch({
            Zc: 3 /* Argument */ ,
            ca: e.settings.ca,
            methodName: t._methodName,
            na: n
        }, e.databaseId, e.wt, e.ignoreUndefinedProperties);
    }

    class _h extends nh {
        _toFieldTransform(t) {
            return new On(t.path, new vn);
        }
        isEqual(t) {
            return t instanceof _h;
        }
    }

    class wh extends nh {
        constructor(t, e) {
            super(t), this.ha = e;
        }
        _toFieldTransform(t) {
            const e = dh(this, t, 
            /*array=*/ !0), n = this.ha.map((t => Th(t, e))), s = new Vn(n);
            return new On(t.path, s);
        }
        isEqual(t) {
            // TODO(mrschmidt): Implement isEquals
            return this === t;
        }
    }

    class mh extends nh {
        constructor(t, e) {
            super(t), this.ha = e;
        }
        _toFieldTransform(t) {
            const e = dh(this, t, 
            /*array=*/ !0), n = this.ha.map((t => Th(t, e))), s = new Dn(n);
            return new On(t.path, s);
        }
        isEqual(t) {
            // TODO(mrschmidt): Implement isEquals
            return this === t;
        }
    }

    class gh extends nh {
        constructor(t, e) {
            super(t), this.la = e;
        }
        _toFieldTransform(t) {
            const e = new xn(t.wt, En(t.wt, this.la));
            return new On(t.path, e);
        }
        isEqual(t) {
            // TODO(mrschmidt): Implement isEquals
            return this === t;
        }
    }

    /** Parse update data from an update() call. */ function yh(t, e, n, s) {
        const i = t.aa(1 /* Update */ , e, n);
        Rh("Data must be an object, but it was:", i, s);
        const r = [], o = De.empty();
        Lt(s, ((t, s) => {
            const u = vh(e, t, n);
            // For Compat types, we have to "extract" the underlying types before
            // performing validation.
                    s = getModularInstance(s);
            const c = i.ia(u);
            if (s instanceof fh) 
            // Add it to the field mask, but don't add anything to updateData.
            r.push(u); else {
                const t = Th(s, c);
                null != t && (r.push(u), o.set(u, t));
            }
        }));
        const u = new zt(r);
        return new oh(o, u, i.fieldTransforms);
    }

    /** Parse update data from a list of field/value arguments. */ function ph(t, e, n, s, i, r) {
        const o = t.aa(1 /* Update */ , e, n), u = [ bh(e, s, n) ], c = [ i ];
        if (r.length % 2 != 0) throw new Q(G.INVALID_ARGUMENT, `Function ${e}() needs to be called with an even number of arguments that alternate between field names and values.`);
        for (let t = 0; t < r.length; t += 2) u.push(bh(e, r[t])), c.push(r[t + 1]);
        const a = [], h = De.empty();
        // We iterate in reverse order to pick the last value for a field if the
        // user specified the field multiple times.
        for (let t = u.length - 1; t >= 0; --t) if (!Sh(a, u[t])) {
            const e = u[t];
            let n = c[t];
            // For Compat types, we have to "extract" the underlying types before
            // performing validation.
                    n = getModularInstance(n);
            const s = o.ia(e);
            if (n instanceof fh) 
            // Add it to the field mask, but don't add anything to updateData.
            a.push(e); else {
                const t = Th(n, s);
                null != t && (a.push(e), h.set(e, t));
            }
        }
        const l = new zt(a);
        return new oh(h, l, o.fieldTransforms);
    }

    /**
     * Parse a "query value" (e.g. value in a where filter or a value in a cursor
     * bound).
     *
     * @param allowArrays - Whether the query value is an array that may directly
     * contain additional arrays (e.g. the operand of an `in` query).
     */ function Ih(t, e, n, s = !1) {
        return Th(n, t.aa(s ? 4 /* ArrayArgument */ : 3 /* Argument */ , e));
    }

    /**
     * Parses user data to Protobuf Values.
     *
     * @param input - Data to be parsed.
     * @param context - A context object representing the current path being parsed,
     * the source of the data being parsed, etc.
     * @returns The parsed value, or null if the value was a FieldValue sentinel
     * that should not be included in the resulting parsed data.
     */ function Th(t, e) {
        if (Ah(
        // Unwrap the API type from the Compat SDK. This will return the API type
        // from firestore-exp.
        t = getModularInstance(t))) return Rh("Unsupported field value:", e, t), Eh(t, e);
        if (t instanceof nh) 
        // FieldValues usually parse into transforms (except deleteField())
        // in which case we do not want to include this field in our parsed data
        // (as doing so will overwrite the field directly prior to the transform
        // trying to transform it). So we don't add this location to
        // context.fieldMask and we return null as our parsing result.
        /**
     * "Parses" the provided FieldValueImpl, adding any necessary transforms to
     * context.fieldTransforms.
     */
        return function(t, e) {
            // Sentinels are only supported with writes, and not within arrays.
            if (!uh(e.Zc)) throw e.oa(`${t._methodName}() can only be used with update() and set()`);
            if (!e.path) throw e.oa(`${t._methodName}() is not currently supported inside arrays`);
            const n = t._toFieldTransform(e);
            n && e.fieldTransforms.push(n);
        }
        /**
     * Helper to parse a scalar value (i.e. not an Object, Array, or FieldValue)
     *
     * @returns The parsed value
     */ (t, e), null;
        if (void 0 === t && e.ignoreUndefinedProperties) 
        // If the input is undefined it can never participate in the fieldMask, so
        // don't handle this below. If `ignoreUndefinedProperties` is false,
        // `parseScalarValue` will reject an undefined value.
        return null;
        if (
        // If context.path is null we are inside an array and we don't support
        // field mask paths more granular than the top-level array.
        e.path && e.fieldMask.push(e.path), t instanceof Array) {
            // TODO(b/34871131): Include the path containing the array in the error
            // message.
            // In the case of IN queries, the parsed data is an array (representing
            // the set of values to be included for the IN query) that may directly
            // contain additional arrays (each representing an individual field
            // value), so we disable this validation.
            if (e.settings.na && 4 /* ArrayArgument */ !== e.Zc) throw e.oa("Nested arrays are not supported");
            return function(t, e) {
                const n = [];
                let s = 0;
                for (const i of t) {
                    let t = Th(i, e.ra(s));
                    null == t && (
                    // Just include nulls in the array for fields being replaced with a
                    // sentinel.
                    t = {
                        nullValue: "NULL_VALUE"
                    }), n.push(t), s++;
                }
                return {
                    arrayValue: {
                        values: n
                    }
                };
            }(t, e);
        }
        return function(t, e) {
            if (null === (t = getModularInstance(t))) return {
                nullValue: "NULL_VALUE"
            };
            if ("number" == typeof t) return En(e.wt, t);
            if ("boolean" == typeof t) return {
                booleanValue: t
            };
            if ("string" == typeof t) return {
                stringValue: t
            };
            if (t instanceof Date) {
                const n = ut.fromDate(t);
                return {
                    timestampValue: Ds(e.wt, n)
                };
            }
            if (t instanceof ut) {
                // Firestore backend truncates precision down to microseconds. To ensure
                // offline mode works the same with regards to truncation, perform the
                // truncation immediately without waiting for the backend to do that.
                const n = new ut(t.seconds, 1e3 * Math.floor(t.nanoseconds / 1e3));
                return {
                    timestampValue: Ds(e.wt, n)
                };
            }
            if (t instanceof sh) return {
                geoPointValue: {
                    latitude: t.latitude,
                    longitude: t.longitude
                }
            };
            if (t instanceof eh) return {
                bytesValue: Cs(e.wt, t._byteString)
            };
            if (t instanceof ba) {
                const n = e.databaseId, s = t.firestore._databaseId;
                if (!s.isEqual(n)) throw e.oa(`Document reference is for database ${s.projectId}/${s.database} but should be for database ${n.projectId}/${n.database}`);
                return {
                    referenceValue: ks(t.firestore._databaseId || e.databaseId, t._key.path)
                };
            }
            throw e.oa(`Unsupported field value: ${pa(t)}`);
        }
        /**
     * Checks whether an object looks like a JSON object that should be converted
     * into a struct. Normal class/prototype instances are considered to look like
     * JSON objects since they should be converted to a struct value. Arrays, Dates,
     * GeoPoints, etc. are not considered to look like JSON objects since they map
     * to specific FieldValue types other than ObjectValue.
     */ (t, e);
    }

    function Eh(t, e) {
        const n = {};
        return Ut(t) ? 
        // If we encounter an empty object, we explicitly add it to the update
        // mask to ensure that the server creates a map entry.
        e.path && e.path.length > 0 && e.fieldMask.push(e.path) : Lt(t, ((t, s) => {
            const i = Th(s, e.ea(t));
            null != i && (n[t] = i);
        })), {
            mapValue: {
                fields: n
            }
        };
    }

    function Ah(t) {
        return !("object" != typeof t || null === t || t instanceof Array || t instanceof Date || t instanceof ut || t instanceof sh || t instanceof eh || t instanceof ba || t instanceof nh);
    }

    function Rh(t, e, n) {
        if (!Ah(n) || !function(t) {
            return "object" == typeof t && null !== t && (Object.getPrototypeOf(t) === Object.prototype || null === Object.getPrototypeOf(t));
        }(n)) {
            const s = pa(n);
            throw "an object" === s ? e.oa(t + " a custom object") : e.oa(t + " " + s);
        }
    }

    /**
     * Helper that calls fromDotSeparatedString() but wraps any error thrown.
     */ function bh(t, e, n) {
        if ((
        // If required, replace the FieldPath Compat class with with the firestore-exp
        // FieldPath.
        e = getModularInstance(e)) instanceof Za) return e._internalPath;
        if ("string" == typeof e) return vh(t, e);
        throw Vh("Field path arguments must be of type string or ", t, 
        /* hasConverter= */ !1, 
        /* path= */ void 0, n);
    }

    /**
     * Matches any characters in a field path string that are reserved.
     */ const Ph = new RegExp("[~\\*/\\[\\]]");

    /**
     * Wraps fromDotSeparatedString with an error message about the method that
     * was thrown.
     * @param methodName - The publicly visible method name
     * @param path - The dot-separated string form of a field path which will be
     * split on dots.
     * @param targetDoc - The document against which the field path will be
     * evaluated.
     */ function vh(t, e, n) {
        if (e.search(Ph) >= 0) throw Vh(`Invalid field path (${e}). Paths must not contain '~', '*', '/', '[', or ']'`, t, 
        /* hasConverter= */ !1, 
        /* path= */ void 0, n);
        try {
            return new Za(...e.split("."))._internalPath;
        } catch (s) {
            throw Vh(`Invalid field path (${e}). Paths must not be empty, begin with '.', end with '.', or contain '..'`, t, 
            /* hasConverter= */ !1, 
            /* path= */ void 0, n);
        }
    }

    function Vh(t, e, n, s, i) {
        const r = s && !s.isEmpty(), o = void 0 !== i;
        let u = `Function ${e}() called with invalid data`;
        n && (u += " (via `toFirestore()`)"), u += ". ";
        let c = "";
        return (r || o) && (c += " (found", r && (c += ` in field ${s}`), o && (c += ` in document ${i}`), 
        c += ")"), new Q(G.INVALID_ARGUMENT, u + t + c);
    }

    /** Checks `haystack` if FieldPath `needle` is present. Runs in O(n). */ function Sh(t, e) {
        return t.some((t => t.isEqual(e)));
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A `DocumentSnapshot` contains data read from a document in your Firestore
     * database. The data can be extracted with `.data()` or `.get(<field>)` to
     * get a specific field.
     *
     * For a `DocumentSnapshot` that points to a non-existing document, any data
     * access will return 'undefined'. You can use the `exists()` method to
     * explicitly verify a document's existence.
     */ class Dh {
        // Note: This class is stripped down version of the DocumentSnapshot in
        // the legacy SDK. The changes are:
        // - No support for SnapshotMetadata.
        // - No support for SnapshotOptions.
        /** @hideconstructor protected */
        constructor(t, e, n, s, i) {
            this._firestore = t, this._userDataWriter = e, this._key = n, this._document = s, 
            this._converter = i;
        }
        /** Property of the `DocumentSnapshot` that provides the document's ID. */    get id() {
            return this._key.path.lastSegment();
        }
        /**
         * The `DocumentReference` for the document included in the `DocumentSnapshot`.
         */    get ref() {
            return new ba(this._firestore, this._converter, this._key);
        }
        /**
         * Signals whether or not the document at the snapshot's location exists.
         *
         * @returns true if the document exists.
         */    exists() {
            return null !== this._document;
        }
        /**
         * Retrieves all fields in the document as an `Object`. Returns `undefined` if
         * the document doesn't exist.
         *
         * @returns An `Object` containing all fields in the document or `undefined`
         * if the document doesn't exist.
         */    data() {
            if (this._document) {
                if (this._converter) {
                    // We only want to use the converter and create a new DocumentSnapshot
                    // if a converter has been provided.
                    const t = new Ch(this._firestore, this._userDataWriter, this._key, this._document, 
                    /* converter= */ null);
                    return this._converter.fromFirestore(t);
                }
                return this._userDataWriter.convertValue(this._document.data.value);
            }
        }
        /**
         * Retrieves the field specified by `fieldPath`. Returns `undefined` if the
         * document or field doesn't exist.
         *
         * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific
         * field.
         * @returns The data at the specified field location or undefined if no such
         * field exists in the document.
         */
        // We are using `any` here to avoid an explicit cast by our users.
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        get(t) {
            if (this._document) {
                const e = this._document.data.field(xh("DocumentSnapshot.get", t));
                if (null !== e) return this._userDataWriter.convertValue(e);
            }
        }
    }

    /**
     * A `QueryDocumentSnapshot` contains data read from a document in your
     * Firestore database as part of a query. The document is guaranteed to exist
     * and its data can be extracted with `.data()` or `.get(<field>)` to get a
     * specific field.
     *
     * A `QueryDocumentSnapshot` offers the same API surface as a
     * `DocumentSnapshot`. Since query results contain only existing documents, the
     * `exists` property will always be true and `data()` will never return
     * 'undefined'.
     */ class Ch extends Dh {
        /**
         * Retrieves all fields in the document as an `Object`.
         *
         * @override
         * @returns An `Object` containing all fields in the document.
         */
        data() {
            return super.data();
        }
    }

    /**
     * Helper that calls `fromDotSeparatedString()` but wraps any error thrown.
     */ function xh(t, e) {
        return "string" == typeof e ? vh(t, e) : e instanceof Za ? e._internalPath : e._delegate._internalPath;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Metadata about a snapshot, describing the state of the snapshot.
     */ class Nh {
        /** @hideconstructor */
        constructor(t, e) {
            this.hasPendingWrites = t, this.fromCache = e;
        }
        /**
         * Returns true if this `SnapshotMetadata` is equal to the provided one.
         *
         * @param other - The `SnapshotMetadata` to compare against.
         * @returns true if this `SnapshotMetadata` is equal to the provided one.
         */    isEqual(t) {
            return this.hasPendingWrites === t.hasPendingWrites && this.fromCache === t.fromCache;
        }
    }

    /**
     * A `DocumentSnapshot` contains data read from a document in your Firestore
     * database. The data can be extracted with `.data()` or `.get(<field>)` to
     * get a specific field.
     *
     * For a `DocumentSnapshot` that points to a non-existing document, any data
     * access will return 'undefined'. You can use the `exists()` method to
     * explicitly verify a document's existence.
     */ class kh extends Dh {
        /** @hideconstructor protected */
        constructor(t, e, n, s, i, r) {
            super(t, e, n, s, r), this._firestore = t, this._firestoreImpl = t, this.metadata = i;
        }
        /**
         * Returns whether or not the data exists. True if the document exists.
         */    exists() {
            return super.exists();
        }
        /**
         * Retrieves all fields in the document as an `Object`. Returns `undefined` if
         * the document doesn't exist.
         *
         * By default, `serverTimestamp()` values that have not yet been
         * set to their final value will be returned as `null`. You can override
         * this by passing an options object.
         *
         * @param options - An options object to configure how data is retrieved from
         * the snapshot (for example the desired behavior for server timestamps that
         * have not yet been set to their final value).
         * @returns An `Object` containing all fields in the document or `undefined` if
         * the document doesn't exist.
         */    data(t = {}) {
            if (this._document) {
                if (this._converter) {
                    // We only want to use the converter and create a new DocumentSnapshot
                    // if a converter has been provided.
                    const e = new Oh(this._firestore, this._userDataWriter, this._key, this._document, this.metadata, 
                    /* converter= */ null);
                    return this._converter.fromFirestore(e, t);
                }
                return this._userDataWriter.convertValue(this._document.data.value, t.serverTimestamps);
            }
        }
        /**
         * Retrieves the field specified by `fieldPath`. Returns `undefined` if the
         * document or field doesn't exist.
         *
         * By default, a `serverTimestamp()` that has not yet been set to
         * its final value will be returned as `null`. You can override this by
         * passing an options object.
         *
         * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific
         * field.
         * @param options - An options object to configure how the field is retrieved
         * from the snapshot (for example the desired behavior for server timestamps
         * that have not yet been set to their final value).
         * @returns The data at the specified field location or undefined if no such
         * field exists in the document.
         */
        // We are using `any` here to avoid an explicit cast by our users.
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        get(t, e = {}) {
            if (this._document) {
                const n = this._document.data.field(xh("DocumentSnapshot.get", t));
                if (null !== n) return this._userDataWriter.convertValue(n, e.serverTimestamps);
            }
        }
    }

    /**
     * A `QueryDocumentSnapshot` contains data read from a document in your
     * Firestore database as part of a query. The document is guaranteed to exist
     * and its data can be extracted with `.data()` or `.get(<field>)` to get a
     * specific field.
     *
     * A `QueryDocumentSnapshot` offers the same API surface as a
     * `DocumentSnapshot`. Since query results contain only existing documents, the
     * `exists` property will always be true and `data()` will never return
     * 'undefined'.
     */ class Oh extends kh {
        /**
         * Retrieves all fields in the document as an `Object`.
         *
         * By default, `serverTimestamp()` values that have not yet been
         * set to their final value will be returned as `null`. You can override
         * this by passing an options object.
         *
         * @override
         * @param options - An options object to configure how data is retrieved from
         * the snapshot (for example the desired behavior for server timestamps that
         * have not yet been set to their final value).
         * @returns An `Object` containing all fields in the document.
         */
        data(t = {}) {
            return super.data(t);
        }
    }

    /**
     * A `QuerySnapshot` contains zero or more `DocumentSnapshot` objects
     * representing the results of a query. The documents can be accessed as an
     * array via the `docs` property or enumerated using the `forEach` method. The
     * number of documents can be determined via the `empty` and `size`
     * properties.
     */ class Mh {
        /** @hideconstructor */
        constructor(t, e, n, s) {
            this._firestore = t, this._userDataWriter = e, this._snapshot = s, this.metadata = new Nh(s.hasPendingWrites, s.fromCache), 
            this.query = n;
        }
        /** An array of all the documents in the `QuerySnapshot`. */    get docs() {
            const t = [];
            return this.forEach((e => t.push(e))), t;
        }
        /** The number of documents in the `QuerySnapshot`. */    get size() {
            return this._snapshot.docs.size;
        }
        /** True if there are no documents in the `QuerySnapshot`. */    get empty() {
            return 0 === this.size;
        }
        /**
         * Enumerates all of the documents in the `QuerySnapshot`.
         *
         * @param callback - A callback to be called with a `QueryDocumentSnapshot` for
         * each document in the snapshot.
         * @param thisArg - The `this` binding for the callback.
         */    forEach(t, e) {
            this._snapshot.docs.forEach((n => {
                t.call(e, new Oh(this._firestore, this._userDataWriter, n.key, n, new Nh(this._snapshot.mutatedKeys.has(n.key), this._snapshot.fromCache), this.query.converter));
            }));
        }
        /**
         * Returns an array of the documents changes since the last snapshot. If this
         * is the first snapshot, all documents will be in the list as 'added'
         * changes.
         *
         * @param options - `SnapshotListenOptions` that control whether metadata-only
         * changes (i.e. only `DocumentSnapshot.metadata` changed) should trigger
         * snapshot events.
         */    docChanges(t = {}) {
            const e = !!t.includeMetadataChanges;
            if (e && this._snapshot.excludesMetadataChanges) throw new Q(G.INVALID_ARGUMENT, "To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().");
            return this._cachedChanges && this._cachedChangesIncludeMetadataChanges === e || (this._cachedChanges = 
            /** Calculates the array of `DocumentChange`s for a given `ViewSnapshot`. */
            function(t, e) {
                if (t._snapshot.oldDocs.isEmpty()) {
                    let e = 0;
                    return t._snapshot.docChanges.map((n => ({
                        type: "added",
                        doc: new Oh(t._firestore, t._userDataWriter, n.doc.key, n.doc, new Nh(t._snapshot.mutatedKeys.has(n.doc.key), t._snapshot.fromCache), t.query.converter),
                        oldIndex: -1,
                        newIndex: e++
                    })));
                }
                {
                    // A `DocumentSet` that is updated incrementally as changes are applied to use
                    // to lookup the index of a document.
                    let n = t._snapshot.oldDocs;
                    return t._snapshot.docChanges.filter((t => e || 3 /* Metadata */ !== t.type)).map((e => {
                        const s = new Oh(t._firestore, t._userDataWriter, e.doc.key, e.doc, new Nh(t._snapshot.mutatedKeys.has(e.doc.key), t._snapshot.fromCache), t.query.converter);
                        let i = -1, r = -1;
                        return 0 /* Added */ !== e.type && (i = n.indexOf(e.doc.key), n = n.delete(e.doc.key)), 
                        1 /* Removed */ !== e.type && (n = n.add(e.doc), r = n.indexOf(e.doc.key)), {
                            type: Fh(e.type),
                            doc: s,
                            oldIndex: i,
                            newIndex: r
                        };
                    }));
                }
            }(this, e), this._cachedChangesIncludeMetadataChanges = e), this._cachedChanges;
        }
    }

    function Fh(t) {
        switch (t) {
          case 0 /* Added */ :
            return "added";

          case 2 /* Modified */ :
          case 3 /* Metadata */ :
            return "modified";

          case 1 /* Removed */ :
            return "removed";

          default:
            return L();
        }
    }

    // TODO(firestoreexp): Add tests for snapshotEqual with different snapshot
    // metadata
    /**
     * Returns true if the provided snapshots are equal.
     *
     * @param left - A snapshot to compare.
     * @param right - A snapshot to compare.
     * @returns true if the snapshots are equal.
     */ function $h(t, e) {
        return t instanceof kh && e instanceof kh ? t._firestore === e._firestore && t._key.isEqual(e._key) && (null === t._document ? null === e._document : t._document.isEqual(e._document)) && t._converter === e._converter : t instanceof Mh && e instanceof Mh && (t._firestore === e._firestore && xa(t.query, e.query) && t.metadata.isEqual(e.metadata) && t._snapshot.isEqual(e._snapshot));
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ function Bh(t) {
        if ("L" /* Last */ === t.limitType && 0 === t.explicitOrderBy.length) throw new Q(G.UNIMPLEMENTED, "limitToLast() queries require specifying at least one orderBy() clause");
    }

    /**
     * A `QueryConstraint` is used to narrow the set of documents returned by a
     * Firestore query. `QueryConstraint`s are created by invoking {@link where},
     * {@link orderBy}, {@link (startAt:1)}, {@link (startAfter:1)}, {@link
     * endBefore:1}, {@link (endAt:1)}, {@link limit} or {@link limitToLast} and
     * can then be passed to {@link query} to create a new query instance that
     * also contains this `QueryConstraint`.
     */ class Lh {}

    /**
     * Creates a new immutable instance of {@link Query} that is extended to also include
     * additional query constraints.
     *
     * @param query - The {@link Query} instance to use as a base for the new constraints.
     * @param queryConstraints - The list of {@link QueryConstraint}s to apply.
     * @throws if any of the provided query constraints cannot be combined with the
     * existing or new constraints.
     */ function Uh(t, ...e) {
        for (const n of e) t = n._apply(t);
        return t;
    }

    class qh extends Lh {
        constructor(t, e, n) {
            super(), this.fa = t, this.da = e, this._a = n, this.type = "where";
        }
        _apply(t) {
            const e = hh(t.firestore), n = function(t, e, n, s, i, r, o) {
                let u;
                if (i.isKeyField()) {
                    if ("array-contains" /* ARRAY_CONTAINS */ === r || "array-contains-any" /* ARRAY_CONTAINS_ANY */ === r) throw new Q(G.INVALID_ARGUMENT, `Invalid Query. You can't perform '${r}' queries on documentId().`);
                    if ("in" /* IN */ === r || "not-in" /* NOT_IN */ === r) {
                        sl(o, r);
                        const e = [];
                        for (const n of o) e.push(nl(s, t, n));
                        u = {
                            arrayValue: {
                                values: e
                            }
                        };
                    } else u = nl(s, t, o);
                } else "in" /* IN */ !== r && "not-in" /* NOT_IN */ !== r && "array-contains-any" /* ARRAY_CONTAINS_ANY */ !== r || sl(o, r), 
                u = Ih(n, e, o, 
                /* allowArrays= */ "in" /* IN */ === r || "not-in" /* NOT_IN */ === r);
                const c = qe.create(i, r, u);
                return function(t, e) {
                    if (e.ht()) {
                        const n = cn(t);
                        if (null !== n && !n.isEqual(e.field)) throw new Q(G.INVALID_ARGUMENT, `Invalid query. All where filters with an inequality (<, <=, !=, not-in, >, or >=) must be on the same field. But you have inequality filters on '${n.toString()}' and '${e.field.toString()}'`);
                        const s = un(t);
                        null !== s && il(t, e.field, s);
                    }
                    const n = function(t, e) {
                        for (const n of t.filters) if (e.indexOf(n.op) >= 0) return n.op;
                        return null;
                    }(t, 
                    /**
     * Given an operator, returns the set of operators that cannot be used with it.
     *
     * Operators in a query must adhere to the following set of rules:
     * 1. Only one array operator is allowed.
     * 2. Only one disjunctive operator is allowed.
     * 3. `NOT_EQUAL` cannot be used with another `NOT_EQUAL` operator.
     * 4. `NOT_IN` cannot be used with array, disjunctive, or `NOT_EQUAL` operators.
     *
     * Array operators: `ARRAY_CONTAINS`, `ARRAY_CONTAINS_ANY`
     * Disjunctive operators: `IN`, `ARRAY_CONTAINS_ANY`, `NOT_IN`
     */
                    function(t) {
                        switch (t) {
                          case "!=" /* NOT_EQUAL */ :
                            return [ "!=" /* NOT_EQUAL */ , "not-in" /* NOT_IN */ ];

                          case "array-contains" /* ARRAY_CONTAINS */ :
                            return [ "array-contains" /* ARRAY_CONTAINS */ , "array-contains-any" /* ARRAY_CONTAINS_ANY */ , "not-in" /* NOT_IN */ ];

                          case "in" /* IN */ :
                            return [ "array-contains-any" /* ARRAY_CONTAINS_ANY */ , "in" /* IN */ , "not-in" /* NOT_IN */ ];

                          case "array-contains-any" /* ARRAY_CONTAINS_ANY */ :
                            return [ "array-contains" /* ARRAY_CONTAINS */ , "array-contains-any" /* ARRAY_CONTAINS_ANY */ , "in" /* IN */ , "not-in" /* NOT_IN */ ];

                          case "not-in" /* NOT_IN */ :
                            return [ "array-contains" /* ARRAY_CONTAINS */ , "array-contains-any" /* ARRAY_CONTAINS_ANY */ , "in" /* IN */ , "not-in" /* NOT_IN */ , "!=" /* NOT_EQUAL */ ];

                          default:
                            return [];
                        }
                    }(e.op));
                    if (null !== n) 
                    // Special case when it's a duplicate op to give a slightly clearer error message.
                    throw n === e.op ? new Q(G.INVALID_ARGUMENT, `Invalid query. You cannot use more than one '${e.op.toString()}' filter.`) : new Q(G.INVALID_ARGUMENT, `Invalid query. You cannot use '${e.op.toString()}' filters with '${n.toString()}' filters.`);
                }(t, c), c;
            }(t._query, "where", e, t.firestore._databaseId, this.fa, this.da, this._a);
            return new Pa(t.firestore, t.converter, function(t, e) {
                const n = t.filters.concat([ e ]);
                return new nn(t.path, t.collectionGroup, t.explicitOrderBy.slice(), n, t.limit, t.limitType, t.startAt, t.endAt);
            }(t._query, n));
        }
    }

    /**
     * Creates a {@link QueryConstraint} that enforces that documents must contain the
     * specified field and that the value should satisfy the relation constraint
     * provided.
     *
     * @param fieldPath - The path to compare
     * @param opStr - The operation string (e.g "&lt;", "&lt;=", "==", "&lt;",
     *   "&lt;=", "!=").
     * @param value - The value for comparison
     * @returns The created {@link Query}.
     */ function Kh(t, e, n) {
        const s = e, i = xh("where", t);
        return new qh(i, s, n);
    }

    class Gh extends Lh {
        constructor(t, e) {
            super(), this.fa = t, this.wa = e, this.type = "orderBy";
        }
        _apply(t) {
            const e = function(t, e, n) {
                if (null !== t.startAt) throw new Q(G.INVALID_ARGUMENT, "Invalid query. You must not call startAt() or startAfter() before calling orderBy().");
                if (null !== t.endAt) throw new Q(G.INVALID_ARGUMENT, "Invalid query. You must not call endAt() or endBefore() before calling orderBy().");
                const s = new Xe(e, n);
                return function(t, e) {
                    if (null === un(t)) {
                        // This is the first order by. It must match any inequality.
                        const n = cn(t);
                        null !== n && il(t, n, e.field);
                    }
                }(t, s), s;
            }
            /**
     * Create a `Bound` from a query and a document.
     *
     * Note that the `Bound` will always include the key of the document
     * and so only the provided document will compare equal to the returned
     * position.
     *
     * Will throw if the document does not contain all fields of the order by
     * of the query or if any of the fields in the order by are an uncommitted
     * server timestamp.
     */ (t._query, this.fa, this.wa);
            return new Pa(t.firestore, t.converter, function(t, e) {
                // TODO(dimond): validate that orderBy does not list the same key twice.
                const n = t.explicitOrderBy.concat([ e ]);
                return new nn(t.path, t.collectionGroup, n, t.filters.slice(), t.limit, t.limitType, t.startAt, t.endAt);
            }(t._query, e));
        }
    }

    /**
     * Creates a {@link QueryConstraint} that sorts the query result by the
     * specified field, optionally in descending order instead of ascending.
     *
     * @param fieldPath - The field to sort by.
     * @param directionStr - Optional direction to sort by ('asc' or 'desc'). If
     * not specified, order will be ascending.
     * @returns The created {@link Query}.
     */ function Qh(t, e = "asc") {
        const n = e, s = xh("orderBy", t);
        return new Gh(s, n);
    }

    class jh extends Lh {
        constructor(t, e, n) {
            super(), this.type = t, this.ma = e, this.ga = n;
        }
        _apply(t) {
            return new Pa(t.firestore, t.converter, fn(t._query, this.ma, this.ga));
        }
    }

    /**
     * Creates a {@link QueryConstraint} that only returns the first matching documents.
     *
     * @param limit - The maximum number of items to return.
     * @returns The created {@link Query}.
     */ function Wh(t) {
        return Ta("limit", t), new jh("limit", t, "F" /* First */);
    }

    /**
     * Creates a {@link QueryConstraint} that only returns the last matching documents.
     *
     * You must specify at least one `orderBy` clause for `limitToLast` queries,
     * otherwise an exception will be thrown during execution.
     *
     * @param limit - The maximum number of items to return.
     * @returns The created {@link Query}.
     */ function zh(t) {
        return Ta("limitToLast", t), new jh("limitToLast", t, "L" /* Last */);
    }

    class Hh extends Lh {
        constructor(t, e, n) {
            super(), this.type = t, this.ya = e, this.pa = n;
        }
        _apply(t) {
            const e = el(t, this.type, this.ya, this.pa);
            return new Pa(t.firestore, t.converter, function(t, e) {
                return new nn(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), t.limit, t.limitType, e, t.endAt);
            }(t._query, e));
        }
    }

    function Jh(...t) {
        return new Hh("startAt", t, 
        /*inclusive=*/ !0);
    }

    function Yh(...t) {
        return new Hh("startAfter", t, 
        /*inclusive=*/ !1);
    }

    class Xh extends Lh {
        constructor(t, e, n) {
            super(), this.type = t, this.ya = e, this.pa = n;
        }
        _apply(t) {
            const e = el(t, this.type, this.ya, this.pa);
            return new Pa(t.firestore, t.converter, function(t, e) {
                return new nn(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), t.limit, t.limitType, t.startAt, e);
            }(t._query, e));
        }
    }

    function Zh(...t) {
        return new Xh("endBefore", t, 
        /*inclusive=*/ !1);
    }

    function tl(...t) {
        return new Xh("endAt", t, /*inclusive=*/ !0);
    }

    /** Helper function to create a bound from a document or fields */ function el(t, e, n, s) {
        if (n[0] = getModularInstance(n[0]), n[0] instanceof Dh) return function(t, e, n, s, i) {
            if (!s) throw new Q(G.NOT_FOUND, `Can't use a DocumentSnapshot that doesn't exist for ${n}().`);
            const r = [];
            // Because people expect to continue/end a query at the exact document
            // provided, we need to use the implicit sort order rather than the explicit
            // sort order, because it's guaranteed to contain the document key. That way
            // the position becomes unambiguous and the query continues/ends exactly at
            // the provided document. Without the key (by using the explicit sort
            // orders), multiple documents could match the position, yielding duplicate
            // results.
                    for (const n of hn(t)) if (n.field.isKeyField()) r.push(ye(e, s.key)); else {
                const t = s.data.field(n.field);
                if (ee(t)) throw new Q(G.INVALID_ARGUMENT, 'Invalid query. You are trying to start or end a query using a document for which the field "' + n.field + '" is an uncommitted server timestamp. (Since the value of this field is unknown, you cannot start/end a query with it.)');
                if (null === t) {
                    const t = n.field.canonicalString();
                    throw new Q(G.INVALID_ARGUMENT, `Invalid query. You are trying to start or end a query using a document for which the field '${t}' (used as the orderBy) does not exist.`);
                }
                r.push(t);
            }
            return new Ye(r, i);
        }
        /**
     * Converts a list of field values to a `Bound` for the given query.
     */ (t._query, t.firestore._databaseId, e, n[0]._document, s);
        {
            const i = hh(t.firestore);
            return function(t, e, n, s, i, r) {
                // Use explicit order by's because it has to match the query the user made
                const o = t.explicitOrderBy;
                if (i.length > o.length) throw new Q(G.INVALID_ARGUMENT, `Too many arguments provided to ${s}(). The number of arguments must be less than or equal to the number of orderBy() clauses`);
                const u = [];
                for (let r = 0; r < i.length; r++) {
                    const c = i[r];
                    if (o[r].field.isKeyField()) {
                        if ("string" != typeof c) throw new Q(G.INVALID_ARGUMENT, `Invalid query. Expected a string for document ID in ${s}(), but got a ${typeof c}`);
                        if (!an(t) && -1 !== c.indexOf("/")) throw new Q(G.INVALID_ARGUMENT, `Invalid query. When querying a collection and ordering by documentId(), the value passed to ${s}() must be a plain document ID, but '${c}' contains a slash.`);
                        const n = t.path.child(ht.fromString(c));
                        if (!dt.isDocumentKey(n)) throw new Q(G.INVALID_ARGUMENT, `Invalid query. When querying a collection group and ordering by documentId(), the value passed to ${s}() must result in a valid document path, but '${n}' is not because it contains an odd number of segments.`);
                        const i = new dt(n);
                        u.push(ye(e, i));
                    } else {
                        const t = Ih(n, s, c);
                        u.push(t);
                    }
                }
                return new Ye(u, r);
            }
            /**
     * Parses the given `documentIdValue` into a `ReferenceValue`, throwing
     * appropriate errors if the value is anything other than a `DocumentReference`
     * or `string`, or if the string is malformed.
     */ (t._query, t.firestore._databaseId, i, e, n, s);
        }
    }

    function nl(t, e, n) {
        if ("string" == typeof (n = getModularInstance(n))) {
            if ("" === n) throw new Q(G.INVALID_ARGUMENT, "Invalid query. When querying with documentId(), you must provide a valid document ID, but it was an empty string.");
            if (!an(e) && -1 !== n.indexOf("/")) throw new Q(G.INVALID_ARGUMENT, `Invalid query. When querying a collection by documentId(), you must provide a plain document ID, but '${n}' contains a '/' character.`);
            const s = e.path.child(ht.fromString(n));
            if (!dt.isDocumentKey(s)) throw new Q(G.INVALID_ARGUMENT, `Invalid query. When querying a collection group by documentId(), the value provided must result in a valid document path, but '${s}' is not because it has an odd number of segments (${s.length}).`);
            return ye(t, new dt(s));
        }
        if (n instanceof ba) return ye(t, n._key);
        throw new Q(G.INVALID_ARGUMENT, `Invalid query. When querying with documentId(), you must provide a valid string or a DocumentReference, but it was: ${pa(n)}.`);
    }

    /**
     * Validates that the value passed into a disjunctive filter satisfies all
     * array requirements.
     */ function sl(t, e) {
        if (!Array.isArray(t) || 0 === t.length) throw new Q(G.INVALID_ARGUMENT, `Invalid Query. A non-empty array is required for '${e.toString()}' filters.`);
        if (t.length > 10) throw new Q(G.INVALID_ARGUMENT, `Invalid Query. '${e.toString()}' filters support a maximum of 10 elements in the value array.`);
    }

    function il(t, e, n) {
        if (!n.isEqual(e)) throw new Q(G.INVALID_ARGUMENT, `Invalid query. You have a where filter with an inequality (<, <=, !=, not-in, >, or >=) on field '${e.toString()}' and so you must also use '${e.toString()}' as your first argument to orderBy(), but your first orderBy() is on field '${n.toString()}' instead.`);
    }

    /**
     * @license
     * Copyright 2022 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ const rl = {
        maxAttempts: 5
    };

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Converts Firestore's internal types to the JavaScript types that we expose
     * to the user.
     *
     * @internal
     */
    class ol {
        convertValue(t, e = "none") {
            switch (le(t)) {
              case 0 /* NullValue */ :
                return null;

              case 1 /* BooleanValue */ :
                return t.booleanValue;

              case 2 /* NumberValue */ :
                return Zt(t.integerValue || t.doubleValue);

              case 3 /* TimestampValue */ :
                return this.convertTimestamp(t.timestampValue);

              case 4 /* ServerTimestampValue */ :
                return this.convertServerTimestamp(t, e);

              case 5 /* StringValue */ :
                return t.stringValue;

              case 6 /* BlobValue */ :
                return this.convertBytes(te(t.bytesValue));

              case 7 /* RefValue */ :
                return this.convertReference(t.referenceValue);

              case 8 /* GeoPointValue */ :
                return this.convertGeoPoint(t.geoPointValue);

              case 9 /* ArrayValue */ :
                return this.convertArray(t.arrayValue, e);

              case 10 /* ObjectValue */ :
                return this.convertObject(t.mapValue, e);

              default:
                throw L();
            }
        }
        convertObject(t, e) {
            const n = {};
            return Lt(t.fields, ((t, s) => {
                n[t] = this.convertValue(s, e);
            })), n;
        }
        convertGeoPoint(t) {
            return new sh(Zt(t.latitude), Zt(t.longitude));
        }
        convertArray(t, e) {
            return (t.values || []).map((t => this.convertValue(t, e)));
        }
        convertServerTimestamp(t, e) {
            switch (e) {
              case "previous":
                const n = ne(t);
                return null == n ? null : this.convertValue(n, e);

              case "estimate":
                return this.convertTimestamp(se(t));

              default:
                return null;
            }
        }
        convertTimestamp(t) {
            const e = Xt(t);
            return new ut(e.seconds, e.nanos);
        }
        convertDocumentKey(t, e) {
            const n = ht.fromString(t);
            U(ui(n));
            const s = new re(n.get(1), n.get(3)), i = new dt(n.popFirst(5));
            return s.isEqual(e) || 
            // TODO(b/64130202): Somehow support foreign references.
            F(`Document ${i} contains a document reference within a different database (${s.projectId}/${s.database}) which is not supported. It will be treated as a reference in the current database (${e.projectId}/${e.database}) instead.`), 
            i;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Converts custom model object of type T into `DocumentData` by applying the
     * converter if it exists.
     *
     * This function is used when converting user objects to `DocumentData`
     * because we want to provide the user with a more specific error message if
     * their `set()` or fails due to invalid data originating from a `toFirestore()`
     * call.
     */ function ul(t, e, n) {
        let s;
        // Cast to `any` in order to satisfy the union type constraint on
        // toFirestore().
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return s = t ? n && (n.merge || n.mergeFields) ? t.toFirestore(e, n) : t.toFirestore(e) : e, 
        s;
    }

    class cl extends ol {
        constructor(t) {
            super(), this.firestore = t;
        }
        convertBytes(t) {
            return new eh(t);
        }
        convertReference(t) {
            const e = this.convertDocumentKey(t, this.firestore._databaseId);
            return new ba(this.firestore, /* converter= */ null, e);
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A write batch, used to perform multiple writes as a single atomic unit.
     *
     * A `WriteBatch` object can be acquired by calling {@link writeBatch}. It
     * provides methods for adding writes to the write batch. None of the writes
     * will be committed (or visible locally) until {@link WriteBatch.commit} is
     * called.
     */ class al {
        /** @hideconstructor */
        constructor(t, e) {
            this._firestore = t, this._commitHandler = e, this._mutations = [], this._committed = !1, 
            this._dataReader = hh(t);
        }
        set(t, e, n) {
            this._verifyNotCommitted();
            const s = hl(t, this._firestore), i = ul(s.converter, e, n), r = lh(this._dataReader, "WriteBatch.set", s._key, i, null !== s.converter, n);
            return this._mutations.push(r.toMutation(s._key, $n.none())), this;
        }
        update(t, e, n, ...s) {
            this._verifyNotCommitted();
            const i = hl(t, this._firestore);
            // For Compat types, we have to "extract" the underlying types before
            // performing validation.
                    let r;
            return r = "string" == typeof (e = getModularInstance(e)) || e instanceof Za ? ph(this._dataReader, "WriteBatch.update", i._key, e, n, s) : yh(this._dataReader, "WriteBatch.update", i._key, e), 
            this._mutations.push(r.toMutation(i._key, $n.exists(!0))), this;
        }
        /**
         * Deletes the document referred to by the provided {@link DocumentReference}.
         *
         * @param documentRef - A reference to the document to be deleted.
         * @returns This `WriteBatch` instance. Used for chaining method calls.
         */    delete(t) {
            this._verifyNotCommitted();
            const e = hl(t, this._firestore);
            return this._mutations = this._mutations.concat(new Yn(e._key, $n.none())), this;
        }
        /**
         * Commits all of the writes in this write batch as a single atomic unit.
         *
         * The result of these writes will only be reflected in document reads that
         * occur after the returned promise resolves. If the client is offline, the
         * write fails. If you would like to see local modifications or buffer writes
         * until the client is online, use the full Firestore SDK.
         *
         * @returns A `Promise` resolved once all of the writes in the batch have been
         * successfully written to the backend as an atomic unit (note that it won't
         * resolve while you're offline).
         */    commit() {
            return this._verifyNotCommitted(), this._committed = !0, this._mutations.length > 0 ? this._commitHandler(this._mutations) : Promise.resolve();
        }
        _verifyNotCommitted() {
            if (this._committed) throw new Q(G.FAILED_PRECONDITION, "A write batch can no longer be used after commit() has been called.");
        }
    }

    function hl(t, e) {
        if ((t = getModularInstance(t)).firestore !== e) throw new Q(G.INVALID_ARGUMENT, "Provided document reference is from a different Firestore instance.");
        return t;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // TODO(mrschmidt) Consider using `BaseTransaction` as the base class in the
    // legacy SDK.
    /**
     * A reference to a transaction.
     *
     * The `Transaction` object passed to a transaction's `updateFunction` provides
     * the methods to read and write data within the transaction context. See
     * {@link runTransaction}.
     */
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Reads the document referred to by this `DocumentReference`.
     *
     * Note: `getDoc()` attempts to provide up-to-date data when possible by waiting
     * for data from the server, but it may return cached data or fail if you are
     * offline and the server cannot be reached. To specify this behavior, invoke
     * {@link getDocFromCache} or {@link getDocFromServer}.
     *
     * @param reference - The reference of the document to fetch.
     * @returns A Promise resolved with a `DocumentSnapshot` containing the
     * current document contents.
     */
    function ll(t) {
        t = Ia(t, ba);
        const e = Ia(t.firestore, Fa);
        return ua(La(e), t._key).then((n => bl(e, t, n)));
    }

    class fl extends ol {
        constructor(t) {
            super(), this.firestore = t;
        }
        convertBytes(t) {
            return new eh(t);
        }
        convertReference(t) {
            const e = this.convertDocumentKey(t, this.firestore._databaseId);
            return new ba(this.firestore, /* converter= */ null, e);
        }
    }

    /**
     * Reads the document referred to by this `DocumentReference` from cache.
     * Returns an error if the document is not currently cached.
     *
     * @returns A `Promise` resolved with a `DocumentSnapshot` containing the
     * current document contents.
     */ function dl(t) {
        t = Ia(t, ba);
        const e = Ia(t.firestore, Fa), n = La(e), s = new fl(e);
        return oa(n, t._key).then((n => new kh(e, s, t._key, n, new Nh(null !== n && n.hasLocalMutations, 
        /* fromCache= */ !0), t.converter)));
    }

    /**
     * Reads the document referred to by this `DocumentReference` from the server.
     * Returns an error if the network is not available.
     *
     * @returns A `Promise` resolved with a `DocumentSnapshot` containing the
     * current document contents.
     */ function _l(t) {
        t = Ia(t, ba);
        const e = Ia(t.firestore, Fa);
        return ua(La(e), t._key, {
            source: "server"
        }).then((n => bl(e, t, n)));
    }

    /**
     * Executes the query and returns the results as a `QuerySnapshot`.
     *
     * Note: `getDocs()` attempts to provide up-to-date data when possible by
     * waiting for data from the server, but it may return cached data or fail if
     * you are offline and the server cannot be reached. To specify this behavior,
     * invoke {@link getDocsFromCache} or {@link getDocsFromServer}.
     *
     * @returns A `Promise` that will be resolved with the results of the query.
     */ function wl(t) {
        t = Ia(t, Pa);
        const e = Ia(t.firestore, Fa), n = La(e), s = new fl(e);
        return Bh(t._query), aa(n, t._query).then((n => new Mh(e, s, t, n)));
    }

    /**
     * Executes the query and returns the results as a `QuerySnapshot` from cache.
     * Returns an error if the document is not currently cached.
     *
     * @returns A `Promise` that will be resolved with the results of the query.
     */ function ml(t) {
        t = Ia(t, Pa);
        const e = Ia(t.firestore, Fa), n = La(e), s = new fl(e);
        return ca(n, t._query).then((n => new Mh(e, s, t, n)));
    }

    /**
     * Executes the query and returns the results as a `QuerySnapshot` from the
     * server. Returns an error if the network is not available.
     *
     * @returns A `Promise` that will be resolved with the results of the query.
     */ function gl(t) {
        t = Ia(t, Pa);
        const e = Ia(t.firestore, Fa), n = La(e), s = new fl(e);
        return aa(n, t._query, {
            source: "server"
        }).then((n => new Mh(e, s, t, n)));
    }

    function yl(t, e, n) {
        t = Ia(t, ba);
        const s = Ia(t.firestore, Fa), i = ul(t.converter, e, n);
        return Rl(s, [ lh(hh(s), "setDoc", t._key, i, null !== t.converter, n).toMutation(t._key, $n.none()) ]);
    }

    function pl(t, e, n, ...s) {
        t = Ia(t, ba);
        const i = Ia(t.firestore, Fa), r = hh(i);
        let o;
        o = "string" == typeof (
        // For Compat types, we have to "extract" the underlying types before
        // performing validation.
        e = getModularInstance(e)) || e instanceof Za ? ph(r, "updateDoc", t._key, e, n, s) : yh(r, "updateDoc", t._key, e);
        return Rl(i, [ o.toMutation(t._key, $n.exists(!0)) ]);
    }

    /**
     * Deletes the document referred to by the specified `DocumentReference`.
     *
     * @param reference - A reference to the document to delete.
     * @returns A Promise resolved once the document has been successfully
     * deleted from the backend (note that it won't resolve while you're offline).
     */ function Il(t) {
        return Rl(Ia(t.firestore, Fa), [ new Yn(t._key, $n.none()) ]);
    }

    /**
     * Add a new document to specified `CollectionReference` with the given data,
     * assigning it a document ID automatically.
     *
     * @param reference - A reference to the collection to add this document to.
     * @param data - An Object containing the data for the new document.
     * @returns A `Promise` resolved with a `DocumentReference` pointing to the
     * newly created document after it has been written to the backend (Note that it
     * won't resolve while you're offline).
     */ function Tl(t, e) {
        const n = Ia(t.firestore, Fa), s = Da(t), i = ul(t.converter, e);
        return Rl(n, [ lh(hh(t.firestore), "addDoc", s._key, i, null !== t.converter, {}).toMutation(s._key, $n.exists(!1)) ]).then((() => s));
    }

    function El(t, ...e) {
        var n, s, i;
        t = getModularInstance(t);
        let r = {
            includeMetadataChanges: !1
        }, o = 0;
        "object" != typeof e[o] || ka(e[o]) || (r = e[o], o++);
        const u = {
            includeMetadataChanges: r.includeMetadataChanges
        };
        if (ka(e[o])) {
            const t = e[o];
            e[o] = null === (n = t.next) || void 0 === n ? void 0 : n.bind(t), e[o + 1] = null === (s = t.error) || void 0 === s ? void 0 : s.bind(t), 
            e[o + 2] = null === (i = t.complete) || void 0 === i ? void 0 : i.bind(t);
        }
        let c, a, h;
        if (t instanceof ba) a = Ia(t.firestore, Fa), h = rn(t._key.path), c = {
            next: n => {
                e[o] && e[o](bl(a, t, n));
            },
            error: e[o + 1],
            complete: e[o + 2]
        }; else {
            const n = Ia(t, Pa);
            a = Ia(n.firestore, Fa), h = n._query;
            const s = new fl(a);
            c = {
                next: t => {
                    e[o] && e[o](new Mh(a, s, n, t));
                },
                error: e[o + 1],
                complete: e[o + 2]
            }, Bh(t._query);
        }
        return function(t, e, n, s) {
            const i = new Gc(s), r = new Ju(e, i, n);
            return t.asyncQueue.enqueueAndForget((async () => Qu(await sa(t), r))), () => {
                i.Tc(), t.asyncQueue.enqueueAndForget((async () => ju(await sa(t), r)));
            };
        }(La(a), h, u, c);
    }

    function Al(t, e) {
        return ha(La(t = Ia(t, Fa)), ka(e) ? e : {
            next: e
        });
    }

    /**
     * Locally writes `mutations` on the async queue.
     * @internal
     */ function Rl(t, e) {
        return function(t, e) {
            const n = new j;
            return t.asyncQueue.enqueueAndForget((async () => hc(await na(t), e, n))), n.promise;
        }(La(t), e);
    }

    /**
     * Converts a {@link ViewSnapshot} that contains the single document specified by `ref`
     * to a {@link DocumentSnapshot}.
     */ function bl(t, e, n) {
        const s = n.docs.get(e._key), i = new fl(t);
        return new kh(t, i, e._key, s, new Nh(n.hasPendingWrites, n.fromCache), e.converter);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A reference to a transaction.
     *
     * The `Transaction` object passed to a transaction's `updateFunction` provides
     * the methods to read and write data within the transaction context. See
     * {@link runTransaction}.
     */ class Pl extends class {
        /** @hideconstructor */
        constructor(t, e) {
            this._firestore = t, this._transaction = e, this._dataReader = hh(t);
        }
        /**
         * Reads the document referenced by the provided {@link DocumentReference}.
         *
         * @param documentRef - A reference to the document to be read.
         * @returns A `DocumentSnapshot` with the read data.
         */    get(t) {
            const e = hl(t, this._firestore), n = new cl(this._firestore);
            return this._transaction.lookup([ e._key ]).then((t => {
                if (!t || 1 !== t.length) return L();
                const s = t[0];
                if (s.isFoundDocument()) return new Dh(this._firestore, n, s.key, s, e.converter);
                if (s.isNoDocument()) return new Dh(this._firestore, n, e._key, null, e.converter);
                throw L();
            }));
        }
        set(t, e, n) {
            const s = hl(t, this._firestore), i = ul(s.converter, e, n), r = lh(this._dataReader, "Transaction.set", s._key, i, null !== s.converter, n);
            return this._transaction.set(s._key, r), this;
        }
        update(t, e, n, ...s) {
            const i = hl(t, this._firestore);
            // For Compat types, we have to "extract" the underlying types before
            // performing validation.
                    let r;
            return r = "string" == typeof (e = getModularInstance(e)) || e instanceof Za ? ph(this._dataReader, "Transaction.update", i._key, e, n, s) : yh(this._dataReader, "Transaction.update", i._key, e), 
            this._transaction.update(i._key, r), this;
        }
        /**
         * Deletes the document referred to by the provided {@link DocumentReference}.
         *
         * @param documentRef - A reference to the document to be deleted.
         * @returns This `Transaction` instance. Used for chaining method calls.
         */    delete(t) {
            const e = hl(t, this._firestore);
            return this._transaction.delete(e._key), this;
        }
    } {
        // This class implements the same logic as the Transaction API in the Lite SDK
        // but is subclassed in order to return its own DocumentSnapshot types.
        /** @hideconstructor */
        constructor(t, e) {
            super(t, e), this._firestore = t;
        }
        /**
         * Reads the document referenced by the provided {@link DocumentReference}.
         *
         * @param documentRef - A reference to the document to be read.
         * @returns A `DocumentSnapshot` with the read data.
         */    get(t) {
            const e = hl(t, this._firestore), n = new fl(this._firestore);
            return super.get(t).then((t => new kh(this._firestore, n, e._key, t._document, new Nh(
            /* hasPendingWrites= */ !1, 
            /* fromCache= */ !1), e.converter)));
        }
    }

    /**
     * Executes the given `updateFunction` and then attempts to commit the changes
     * applied within the transaction. If any document read within the transaction
     * has changed, Cloud Firestore retries the `updateFunction`. If it fails to
     * commit after 5 attempts, the transaction fails.
     *
     * The maximum number of writes allowed in a single transaction is 500.
     *
     * @param firestore - A reference to the Firestore database to run this
     * transaction against.
     * @param updateFunction - The function to execute within the transaction
     * context.
     * @param options - An options object to configure maximum number of attempts to
     * commit.
     * @returns If the transaction completed successfully or was explicitly aborted
     * (the `updateFunction` returned a failed promise), the promise returned by the
     * `updateFunction `is returned here. Otherwise, if the transaction failed, a
     * rejected promise with the corresponding failure error is returned.
     */ function vl(t, e, n) {
        t = Ia(t, Fa);
        const s = Object.assign(Object.assign({}, rl), n);
        !function(t) {
            if (t.maxAttempts < 1) throw new Q(G.INVALID_ARGUMENT, "Max attempts must be at least 1");
        }(s);
        return la(La(t), (n => e(new Pl(t, n))), s);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns a sentinel for use with {@link @firebase/firestore/lite#(updateDoc:1)} or
     * {@link @firebase/firestore/lite#(setDoc:1)} with `{merge: true}` to mark a field for deletion.
     */ function Vl() {
        return new fh("deleteField");
    }

    /**
     * Returns a sentinel used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link @firebase/firestore/lite#(updateDoc:1)} to
     * include a server-generated timestamp in the written data.
     */ function Sl() {
        return new _h("serverTimestamp");
    }

    /**
     * Returns a special value that can be used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link
     * @firebase/firestore/lite#(updateDoc:1)} that tells the server to union the given elements with any array
     * value that already exists on the server. Each specified element that doesn't
     * already exist in the array will be added to the end. If the field being
     * modified is not already an array it will be overwritten with an array
     * containing exactly the specified elements.
     *
     * @param elements - The elements to union into the array.
     * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or
     * `updateDoc()`.
     */ function Dl(...t) {
        // NOTE: We don't actually parse the data until it's used in set() or
        // update() since we'd need the Firestore instance to do this.
        return new wh("arrayUnion", t);
    }

    /**
     * Returns a special value that can be used with {@link (setDoc:1)} or {@link
     * updateDoc:1} that tells the server to remove the given elements from any
     * array value that already exists on the server. All instances of each element
     * specified will be removed from the array. If the field being modified is not
     * already an array it will be overwritten with an empty array.
     *
     * @param elements - The elements to remove from the array.
     * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or
     * `updateDoc()`
     */ function Cl(...t) {
        // NOTE: We don't actually parse the data until it's used in set() or
        // update() since we'd need the Firestore instance to do this.
        return new mh("arrayRemove", t);
    }

    /**
     * Returns a special value that can be used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link
     * @firebase/firestore/lite#(updateDoc:1)} that tells the server to increment the field's current value by
     * the given value.
     *
     * If either the operand or the current field value uses floating point
     * precision, all arithmetic follows IEEE 754 semantics. If both values are
     * integers, values outside of JavaScript's safe number range
     * (`Number.MIN_SAFE_INTEGER` to `Number.MAX_SAFE_INTEGER`) are also subject to
     * precision loss. Furthermore, once processed by the Firestore backend, all
     * integer operations are capped between -2^63 and 2^63-1.
     *
     * If the current field value is not of type `number`, or if the field does not
     * yet exist, the transformation sets the field to the given value.
     *
     * @param n - The value to increment by.
     * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or
     * `updateDoc()`
     */ function xl(t) {
        return new gh("increment", t);
    }

    /**
     * Cloud Firestore
     *
     * @packageDocumentation
     */ !function(t, e = !0) {
        !function(t) {
            x$1 = t;
        }(SDK_VERSION), _registerComponent(new Component$1("firestore", ((t, {options: n}) => {
            const s = t.getProvider("app").getImmediate(), i = new Fa(s, new J(t.getProvider("auth-internal")), new tt(t.getProvider("app-check-internal")));
            return n = Object.assign({
                useFetchStreams: e
            }, n), i._setSettings(n), i;
        }), "PUBLIC")), registerVersion(D, "3.4.12", t), 
        // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation
        registerVersion(D, "3.4.12", "esm2017");
    }();

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Global context object for a collection of services using
     * a shared authentication state.
     *
     * marked as internal because it references internal types exported from @firebase/app
     * @internal
     */
    class FirebaseAppImpl {
        constructor(_delegate, firebase) {
            this._delegate = _delegate;
            this.firebase = firebase;
            // add itself to container
            _addComponent(_delegate, new Component$1('app-compat', () => this, "PUBLIC" /* PUBLIC */));
            this.container = _delegate.container;
        }
        get automaticDataCollectionEnabled() {
            return this._delegate.automaticDataCollectionEnabled;
        }
        set automaticDataCollectionEnabled(val) {
            this._delegate.automaticDataCollectionEnabled = val;
        }
        get name() {
            return this._delegate.name;
        }
        get options() {
            return this._delegate.options;
        }
        delete() {
            return new Promise(resolve => {
                this._delegate.checkDestroyed();
                resolve();
            }).then(() => {
                this.firebase.INTERNAL.removeApp(this.name);
                return deleteApp(this._delegate);
            });
        }
        /**
         * Return a service instance associated with this app (creating it
         * on demand), identified by the passed instanceIdentifier.
         *
         * NOTE: Currently storage and functions are the only ones that are leveraging this
         * functionality. They invoke it by calling:
         *
         * ```javascript
         * firebase.app().storage('STORAGE BUCKET ID')
         * ```
         *
         * The service name is passed to this already
         * @internal
         */
        _getService(name, instanceIdentifier = DEFAULT_ENTRY_NAME) {
            var _a;
            this._delegate.checkDestroyed();
            // Initialize instance if InstatiationMode is `EXPLICIT`.
            const provider = this._delegate.container.getProvider(name);
            if (!provider.isInitialized() &&
                ((_a = provider.getComponent()) === null || _a === void 0 ? void 0 : _a.instantiationMode) === "EXPLICIT" /* EXPLICIT */) {
                provider.initialize();
            }
            // getImmediate will always succeed because _getService is only called for registered components.
            return provider.getImmediate({
                identifier: instanceIdentifier
            });
        }
        /**
         * Remove a service instance from the cache, so we will create a new instance for this service
         * when people try to get it again.
         *
         * NOTE: currently only firestore uses this functionality to support firestore shutdown.
         *
         * @param name The service name
         * @param instanceIdentifier instance identifier in case multiple instances are allowed
         * @internal
         */
        _removeServiceInstance(name, instanceIdentifier = DEFAULT_ENTRY_NAME) {
            this._delegate.container
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                .getProvider(name)
                .clearInstance(instanceIdentifier);
        }
        /**
         * @param component the component being added to this app's container
         * @internal
         */
        _addComponent(component) {
            _addComponent(this._delegate, component);
        }
        _addOrOverwriteComponent(component) {
            _addOrOverwriteComponent(this._delegate, component);
        }
        toJSON() {
            return {
                name: this.name,
                automaticDataCollectionEnabled: this.automaticDataCollectionEnabled,
                options: this.options
            };
        }
    }
    // TODO: investigate why the following needs to be commented out
    // Prevent dead-code elimination of these methods w/o invalid property
    // copying.
    // (FirebaseAppImpl.prototype.name && FirebaseAppImpl.prototype.options) ||
    //   FirebaseAppImpl.prototype.delete ||
    //   console.log('dc');

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const ERRORS = {
        ["no-app" /* NO_APP */]: "No Firebase App '{$appName}' has been created - " +
            'call Firebase App.initializeApp()',
        ["invalid-app-argument" /* INVALID_APP_ARGUMENT */]: 'firebase.{$appName}() takes either no argument or a ' +
            'Firebase App instance.'
    };
    const ERROR_FACTORY = new ErrorFactory('app-compat', 'Firebase', ERRORS);

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Because auth can't share code with other components, we attach the utility functions
     * in an internal namespace to share code.
     * This function return a firebase namespace object without
     * any utility functions, so it can be shared between the regular firebaseNamespace and
     * the lite version.
     */
    function createFirebaseNamespaceCore(firebaseAppImpl) {
        const apps = {};
        // // eslint-disable-next-line @typescript-eslint/no-explicit-any
        // const components = new Map<string, Component<any>>();
        // A namespace is a plain JavaScript Object.
        const namespace = {
            // Hack to prevent Babel from modifying the object returned
            // as the firebase namespace.
            // @ts-ignore
            __esModule: true,
            initializeApp: initializeAppCompat,
            // @ts-ignore
            app,
            registerVersion: registerVersion,
            setLogLevel: setLogLevel$1,
            onLog: onLog,
            // @ts-ignore
            apps: null,
            SDK_VERSION: SDK_VERSION,
            INTERNAL: {
                registerComponent: registerComponentCompat,
                removeApp,
                useAsService,
                modularAPIs
            }
        };
        // Inject a circular default export to allow Babel users who were previously
        // using:
        //
        //   import firebase from 'firebase';
        //   which becomes: var firebase = require('firebase').default;
        //
        // instead of
        //
        //   import * as firebase from 'firebase';
        //   which becomes: var firebase = require('firebase');
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        namespace['default'] = namespace;
        // firebase.apps is a read-only getter.
        Object.defineProperty(namespace, 'apps', {
            get: getApps
        });
        /**
         * Called by App.delete() - but before any services associated with the App
         * are deleted.
         */
        function removeApp(name) {
            delete apps[name];
        }
        /**
         * Get the App object for a given name (or DEFAULT).
         */
        function app(name) {
            name = name || DEFAULT_ENTRY_NAME;
            if (!contains$1(apps, name)) {
                throw ERROR_FACTORY.create("no-app" /* NO_APP */, { appName: name });
            }
            return apps[name];
        }
        // @ts-ignore
        app['App'] = firebaseAppImpl;
        /**
         * Create a new App instance (name must be unique).
         *
         * This function is idempotent. It can be called more than once and return the same instance using the same options and config.
         */
        function initializeAppCompat(options, rawConfig = {}) {
            const app = initializeApp(options, rawConfig);
            if (contains$1(apps, app.name)) {
                return apps[app.name];
            }
            const appCompat = new firebaseAppImpl(app, namespace);
            apps[app.name] = appCompat;
            return appCompat;
        }
        /*
         * Return an array of all the non-deleted FirebaseApps.
         */
        function getApps() {
            // Make a copy so caller cannot mutate the apps list.
            return Object.keys(apps).map(name => apps[name]);
        }
        function registerComponentCompat(component) {
            const componentName = component.name;
            const componentNameWithoutCompat = componentName.replace('-compat', '');
            if (_registerComponent(component) &&
                component.type === "PUBLIC" /* PUBLIC */) {
                // create service namespace for public components
                // The Service namespace is an accessor function ...
                const serviceNamespace = (appArg = app()) => {
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    if (typeof appArg[componentNameWithoutCompat] !== 'function') {
                        // Invalid argument.
                        // This happens in the following case: firebase.storage('gs:/')
                        throw ERROR_FACTORY.create("invalid-app-argument" /* INVALID_APP_ARGUMENT */, {
                            appName: componentName
                        });
                    }
                    // Forward service instance lookup to the FirebaseApp.
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    return appArg[componentNameWithoutCompat]();
                };
                // ... and a container for service-level properties.
                if (component.serviceProps !== undefined) {
                    deepExtend(serviceNamespace, component.serviceProps);
                }
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                namespace[componentNameWithoutCompat] = serviceNamespace;
                // Patch the FirebaseAppImpl prototype
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                firebaseAppImpl.prototype[componentNameWithoutCompat] =
                    // TODO: The eslint disable can be removed and the 'ignoreRestArgs'
                    // option added to the no-explicit-any rule when ESlint releases it.
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    function (...args) {
                        const serviceFxn = this._getService.bind(this, componentName);
                        return serviceFxn.apply(this, component.multipleInstances ? args : []);
                    };
            }
            return component.type === "PUBLIC" /* PUBLIC */
                ? // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    namespace[componentNameWithoutCompat]
                : null;
        }
        // Map the requested service to a registered service name
        // (used to map auth to serverAuth service when needed).
        function useAsService(app, name) {
            if (name === 'serverAuth') {
                return null;
            }
            const useService = name;
            return useService;
        }
        return namespace;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Return a firebase namespace object.
     *
     * In production, this will be called exactly once and the result
     * assigned to the 'firebase' global.  It may be called multiple times
     * in unit tests.
     */
    function createFirebaseNamespace() {
        const namespace = createFirebaseNamespaceCore(FirebaseAppImpl);
        namespace.INTERNAL = Object.assign(Object.assign({}, namespace.INTERNAL), { createFirebaseNamespace,
            extendNamespace,
            createSubscribe,
            ErrorFactory,
            deepExtend });
        /**
         * Patch the top-level firebase namespace with additional properties.
         *
         * firebase.INTERNAL.extendNamespace()
         */
        function extendNamespace(props) {
            deepExtend(namespace, props);
        }
        return namespace;
    }
    const firebase$1 = createFirebaseNamespace();

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const logger = new Logger('@firebase/app-compat');

    const name$4 = "@firebase/app-compat";
    const version$4 = "0.1.29";

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function registerCoreComponents(variant) {
        // Register `app` package.
        registerVersion(name$4, version$4, variant);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // Firebase Lite detection
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    if (isBrowser() && self.firebase !== undefined) {
        logger.warn(`
    Warning: Firebase is already defined in the global scope. Please make sure
    Firebase library is only loaded once.
  `);
        // eslint-disable-next-line
        const sdkVersion = self.firebase.SDK_VERSION;
        if (sdkVersion && sdkVersion.indexOf('LITE') >= 0) {
            logger.warn(`
    Warning: You are trying to load Firebase while using Firebase Performance standalone script.
    You should load Firebase Performance with this instance of Firebase to avoid loading duplicate code.
    `);
        }
    }
    const firebase = firebase$1;
    registerCoreComponents();

    var name$3 = "firebase";
    var version$3 = "9.9.0";

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    firebase.registerVersion(name$3, version$3, 'app-compat');

    /******************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
            }
        }
        return to.concat(ar || Array.prototype.slice.call(from));
    }

    /**
     * Enumeration of supported providers.
     *
     * @public
     */
    const ProviderId = {
        /** Facebook provider ID */
        FACEBOOK: 'facebook.com',
        /** GitHub provider ID */
        GITHUB: 'github.com',
        /** Google provider ID */
        GOOGLE: 'google.com',
        /** Password provider */
        PASSWORD: 'password',
        /** Phone provider */
        PHONE: 'phone',
        /** Twitter provider ID */
        TWITTER: 'twitter.com'
    };
    /**
     * An enumeration of the possible email action types.
     *
     * @public
     */
    const ActionCodeOperation = {
        /** The email link sign-in action. */
        EMAIL_SIGNIN: 'EMAIL_SIGNIN',
        /** The password reset action. */
        PASSWORD_RESET: 'PASSWORD_RESET',
        /** The email revocation action. */
        RECOVER_EMAIL: 'RECOVER_EMAIL',
        /** The revert second factor addition email action. */
        REVERT_SECOND_FACTOR_ADDITION: 'REVERT_SECOND_FACTOR_ADDITION',
        /** The revert second factor addition email action. */
        VERIFY_AND_CHANGE_EMAIL: 'VERIFY_AND_CHANGE_EMAIL',
        /** The email verification action. */
        VERIFY_EMAIL: 'VERIFY_EMAIL'
    };

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _debugErrorMap() {
        return {
            ["admin-restricted-operation" /* ADMIN_ONLY_OPERATION */]: 'This operation is restricted to administrators only.',
            ["argument-error" /* ARGUMENT_ERROR */]: '',
            ["app-not-authorized" /* APP_NOT_AUTHORIZED */]: "This app, identified by the domain where it's hosted, is not " +
                'authorized to use Firebase Authentication with the provided API key. ' +
                'Review your key configuration in the Google API console.',
            ["app-not-installed" /* APP_NOT_INSTALLED */]: 'The requested mobile application corresponding to the identifier (' +
                'Android package name or iOS bundle ID) provided is not installed on ' +
                'this device.',
            ["captcha-check-failed" /* CAPTCHA_CHECK_FAILED */]: 'The reCAPTCHA response token provided is either invalid, expired, ' +
                'already used or the domain associated with it does not match the list ' +
                'of whitelisted domains.',
            ["code-expired" /* CODE_EXPIRED */]: 'The SMS code has expired. Please re-send the verification code to try ' +
                'again.',
            ["cordova-not-ready" /* CORDOVA_NOT_READY */]: 'Cordova framework is not ready.',
            ["cors-unsupported" /* CORS_UNSUPPORTED */]: 'This browser is not supported.',
            ["credential-already-in-use" /* CREDENTIAL_ALREADY_IN_USE */]: 'This credential is already associated with a different user account.',
            ["custom-token-mismatch" /* CREDENTIAL_MISMATCH */]: 'The custom token corresponds to a different audience.',
            ["requires-recent-login" /* CREDENTIAL_TOO_OLD_LOGIN_AGAIN */]: 'This operation is sensitive and requires recent authentication. Log in ' +
                'again before retrying this request.',
            ["dependent-sdk-initialized-before-auth" /* DEPENDENT_SDK_INIT_BEFORE_AUTH */]: 'Another Firebase SDK was initialized and is trying to use Auth before Auth is ' +
                'initialized. Please be sure to call `initializeAuth` or `getAuth` before ' +
                'starting any other Firebase SDK.',
            ["dynamic-link-not-activated" /* DYNAMIC_LINK_NOT_ACTIVATED */]: 'Please activate Dynamic Links in the Firebase Console and agree to the terms and ' +
                'conditions.',
            ["email-change-needs-verification" /* EMAIL_CHANGE_NEEDS_VERIFICATION */]: 'Multi-factor users must always have a verified email.',
            ["email-already-in-use" /* EMAIL_EXISTS */]: 'The email address is already in use by another account.',
            ["emulator-config-failed" /* EMULATOR_CONFIG_FAILED */]: 'Auth instance has already been used to make a network call. Auth can ' +
                'no longer be configured to use the emulator. Try calling ' +
                '"connectAuthEmulator()" sooner.',
            ["expired-action-code" /* EXPIRED_OOB_CODE */]: 'The action code has expired.',
            ["cancelled-popup-request" /* EXPIRED_POPUP_REQUEST */]: 'This operation has been cancelled due to another conflicting popup being opened.',
            ["internal-error" /* INTERNAL_ERROR */]: 'An internal AuthError has occurred.',
            ["invalid-app-credential" /* INVALID_APP_CREDENTIAL */]: 'The phone verification request contains an invalid application verifier.' +
                ' The reCAPTCHA token response is either invalid or expired.',
            ["invalid-app-id" /* INVALID_APP_ID */]: 'The mobile app identifier is not registed for the current project.',
            ["invalid-user-token" /* INVALID_AUTH */]: "This user's credential isn't valid for this project. This can happen " +
                "if the user's token has been tampered with, or if the user isn't for " +
                'the project associated with this API key.',
            ["invalid-auth-event" /* INVALID_AUTH_EVENT */]: 'An internal AuthError has occurred.',
            ["invalid-verification-code" /* INVALID_CODE */]: 'The SMS verification code used to create the phone auth credential is ' +
                'invalid. Please resend the verification code sms and be sure to use the ' +
                'verification code provided by the user.',
            ["invalid-continue-uri" /* INVALID_CONTINUE_URI */]: 'The continue URL provided in the request is invalid.',
            ["invalid-cordova-configuration" /* INVALID_CORDOVA_CONFIGURATION */]: 'The following Cordova plugins must be installed to enable OAuth sign-in: ' +
                'cordova-plugin-buildinfo, cordova-universal-links-plugin, ' +
                'cordova-plugin-browsertab, cordova-plugin-inappbrowser and ' +
                'cordova-plugin-customurlscheme.',
            ["invalid-custom-token" /* INVALID_CUSTOM_TOKEN */]: 'The custom token format is incorrect. Please check the documentation.',
            ["invalid-dynamic-link-domain" /* INVALID_DYNAMIC_LINK_DOMAIN */]: 'The provided dynamic link domain is not configured or authorized for the current project.',
            ["invalid-email" /* INVALID_EMAIL */]: 'The email address is badly formatted.',
            ["invalid-emulator-scheme" /* INVALID_EMULATOR_SCHEME */]: 'Emulator URL must start with a valid scheme (http:// or https://).',
            ["invalid-api-key" /* INVALID_API_KEY */]: 'Your API key is invalid, please check you have copied it correctly.',
            ["invalid-cert-hash" /* INVALID_CERT_HASH */]: 'The SHA-1 certificate hash provided is invalid.',
            ["invalid-credential" /* INVALID_IDP_RESPONSE */]: 'The supplied auth credential is malformed or has expired.',
            ["invalid-message-payload" /* INVALID_MESSAGE_PAYLOAD */]: 'The email template corresponding to this action contains invalid characters in its message. ' +
                'Please fix by going to the Auth email templates section in the Firebase Console.',
            ["invalid-multi-factor-session" /* INVALID_MFA_SESSION */]: 'The request does not contain a valid proof of first factor successful sign-in.',
            ["invalid-oauth-provider" /* INVALID_OAUTH_PROVIDER */]: 'EmailAuthProvider is not supported for this operation. This operation ' +
                'only supports OAuth providers.',
            ["invalid-oauth-client-id" /* INVALID_OAUTH_CLIENT_ID */]: 'The OAuth client ID provided is either invalid or does not match the ' +
                'specified API key.',
            ["unauthorized-domain" /* INVALID_ORIGIN */]: 'This domain is not authorized for OAuth operations for your Firebase ' +
                'project. Edit the list of authorized domains from the Firebase console.',
            ["invalid-action-code" /* INVALID_OOB_CODE */]: 'The action code is invalid. This can happen if the code is malformed, ' +
                'expired, or has already been used.',
            ["wrong-password" /* INVALID_PASSWORD */]: 'The password is invalid or the user does not have a password.',
            ["invalid-persistence-type" /* INVALID_PERSISTENCE */]: 'The specified persistence type is invalid. It can only be local, session or none.',
            ["invalid-phone-number" /* INVALID_PHONE_NUMBER */]: 'The format of the phone number provided is incorrect. Please enter the ' +
                'phone number in a format that can be parsed into E.164 format. E.164 ' +
                'phone numbers are written in the format [+][country code][subscriber ' +
                'number including area code].',
            ["invalid-provider-id" /* INVALID_PROVIDER_ID */]: 'The specified provider ID is invalid.',
            ["invalid-recipient-email" /* INVALID_RECIPIENT_EMAIL */]: 'The email corresponding to this action failed to send as the provided ' +
                'recipient email address is invalid.',
            ["invalid-sender" /* INVALID_SENDER */]: 'The email template corresponding to this action contains an invalid sender email or name. ' +
                'Please fix by going to the Auth email templates section in the Firebase Console.',
            ["invalid-verification-id" /* INVALID_SESSION_INFO */]: 'The verification ID used to create the phone auth credential is invalid.',
            ["invalid-tenant-id" /* INVALID_TENANT_ID */]: "The Auth instance's tenant ID is invalid.",
            ["login-blocked" /* LOGIN_BLOCKED */]: "Login blocked by user-provided method: {$originalMessage}",
            ["missing-android-pkg-name" /* MISSING_ANDROID_PACKAGE_NAME */]: 'An Android Package Name must be provided if the Android App is required to be installed.',
            ["auth-domain-config-required" /* MISSING_AUTH_DOMAIN */]: 'Be sure to include authDomain when calling firebase.initializeApp(), ' +
                'by following the instructions in the Firebase console.',
            ["missing-app-credential" /* MISSING_APP_CREDENTIAL */]: 'The phone verification request is missing an application verifier ' +
                'assertion. A reCAPTCHA response token needs to be provided.',
            ["missing-verification-code" /* MISSING_CODE */]: 'The phone auth credential was created with an empty SMS verification code.',
            ["missing-continue-uri" /* MISSING_CONTINUE_URI */]: 'A continue URL must be provided in the request.',
            ["missing-iframe-start" /* MISSING_IFRAME_START */]: 'An internal AuthError has occurred.',
            ["missing-ios-bundle-id" /* MISSING_IOS_BUNDLE_ID */]: 'An iOS Bundle ID must be provided if an App Store ID is provided.',
            ["missing-or-invalid-nonce" /* MISSING_OR_INVALID_NONCE */]: 'The request does not contain a valid nonce. This can occur if the ' +
                'SHA-256 hash of the provided raw nonce does not match the hashed nonce ' +
                'in the ID token payload.',
            ["missing-multi-factor-info" /* MISSING_MFA_INFO */]: 'No second factor identifier is provided.',
            ["missing-multi-factor-session" /* MISSING_MFA_SESSION */]: 'The request is missing proof of first factor successful sign-in.',
            ["missing-phone-number" /* MISSING_PHONE_NUMBER */]: 'To send verification codes, provide a phone number for the recipient.',
            ["missing-verification-id" /* MISSING_SESSION_INFO */]: 'The phone auth credential was created with an empty verification ID.',
            ["app-deleted" /* MODULE_DESTROYED */]: 'This instance of FirebaseApp has been deleted.',
            ["multi-factor-info-not-found" /* MFA_INFO_NOT_FOUND */]: 'The user does not have a second factor matching the identifier provided.',
            ["multi-factor-auth-required" /* MFA_REQUIRED */]: 'Proof of ownership of a second factor is required to complete sign-in.',
            ["account-exists-with-different-credential" /* NEED_CONFIRMATION */]: 'An account already exists with the same email address but different ' +
                'sign-in credentials. Sign in using a provider associated with this ' +
                'email address.',
            ["network-request-failed" /* NETWORK_REQUEST_FAILED */]: 'A network AuthError (such as timeout, interrupted connection or unreachable host) has occurred.',
            ["no-auth-event" /* NO_AUTH_EVENT */]: 'An internal AuthError has occurred.',
            ["no-such-provider" /* NO_SUCH_PROVIDER */]: 'User was not linked to an account with the given provider.',
            ["null-user" /* NULL_USER */]: 'A null user object was provided as the argument for an operation which ' +
                'requires a non-null user object.',
            ["operation-not-allowed" /* OPERATION_NOT_ALLOWED */]: 'The given sign-in provider is disabled for this Firebase project. ' +
                'Enable it in the Firebase console, under the sign-in method tab of the ' +
                'Auth section.',
            ["operation-not-supported-in-this-environment" /* OPERATION_NOT_SUPPORTED */]: 'This operation is not supported in the environment this application is ' +
                'running on. "location.protocol" must be http, https or chrome-extension' +
                ' and web storage must be enabled.',
            ["popup-blocked" /* POPUP_BLOCKED */]: 'Unable to establish a connection with the popup. It may have been blocked by the browser.',
            ["popup-closed-by-user" /* POPUP_CLOSED_BY_USER */]: 'The popup has been closed by the user before finalizing the operation.',
            ["provider-already-linked" /* PROVIDER_ALREADY_LINKED */]: 'User can only be linked to one identity for the given provider.',
            ["quota-exceeded" /* QUOTA_EXCEEDED */]: "The project's quota for this operation has been exceeded.",
            ["redirect-cancelled-by-user" /* REDIRECT_CANCELLED_BY_USER */]: 'The redirect operation has been cancelled by the user before finalizing.',
            ["redirect-operation-pending" /* REDIRECT_OPERATION_PENDING */]: 'A redirect sign-in operation is already pending.',
            ["rejected-credential" /* REJECTED_CREDENTIAL */]: 'The request contains malformed or mismatching credentials.',
            ["second-factor-already-in-use" /* SECOND_FACTOR_ALREADY_ENROLLED */]: 'The second factor is already enrolled on this account.',
            ["maximum-second-factor-count-exceeded" /* SECOND_FACTOR_LIMIT_EXCEEDED */]: 'The maximum allowed number of second factors on a user has been exceeded.',
            ["tenant-id-mismatch" /* TENANT_ID_MISMATCH */]: "The provided tenant ID does not match the Auth instance's tenant ID",
            ["timeout" /* TIMEOUT */]: 'The operation has timed out.',
            ["user-token-expired" /* TOKEN_EXPIRED */]: "The user's credential is no longer valid. The user must sign in again.",
            ["too-many-requests" /* TOO_MANY_ATTEMPTS_TRY_LATER */]: 'We have blocked all requests from this device due to unusual activity. ' +
                'Try again later.',
            ["unauthorized-continue-uri" /* UNAUTHORIZED_DOMAIN */]: 'The domain of the continue URL is not whitelisted.  Please whitelist ' +
                'the domain in the Firebase console.',
            ["unsupported-first-factor" /* UNSUPPORTED_FIRST_FACTOR */]: 'Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.',
            ["unsupported-persistence-type" /* UNSUPPORTED_PERSISTENCE */]: 'The current environment does not support the specified persistence type.',
            ["unsupported-tenant-operation" /* UNSUPPORTED_TENANT_OPERATION */]: 'This operation is not supported in a multi-tenant context.',
            ["unverified-email" /* UNVERIFIED_EMAIL */]: 'The operation requires a verified email.',
            ["user-cancelled" /* USER_CANCELLED */]: 'The user did not grant your application the permissions it requested.',
            ["user-not-found" /* USER_DELETED */]: 'There is no user record corresponding to this identifier. The user may ' +
                'have been deleted.',
            ["user-disabled" /* USER_DISABLED */]: 'The user account has been disabled by an administrator.',
            ["user-mismatch" /* USER_MISMATCH */]: 'The supplied credentials do not correspond to the previously signed in user.',
            ["user-signed-out" /* USER_SIGNED_OUT */]: '',
            ["weak-password" /* WEAK_PASSWORD */]: 'The password must be 6 characters long or more.',
            ["web-storage-unsupported" /* WEB_STORAGE_UNSUPPORTED */]: 'This browser is not supported or 3rd party cookies and data may be disabled.',
            ["already-initialized" /* ALREADY_INITIALIZED */]: 'initializeAuth() has already been called with ' +
                'different options. To avoid this error, call initializeAuth() with the ' +
                'same options as when it was originally called, or call getAuth() to return the' +
                ' already initialized instance.'
        };
    }
    function _prodErrorMap() {
        // We will include this one message in the prod error map since by the very
        // nature of this error, developers will never be able to see the message
        // using the debugErrorMap (which is installed during auth initialization).
        return {
            ["dependent-sdk-initialized-before-auth" /* DEPENDENT_SDK_INIT_BEFORE_AUTH */]: 'Another Firebase SDK was initialized and is trying to use Auth before Auth is ' +
                'initialized. Please be sure to call `initializeAuth` or `getAuth` before ' +
                'starting any other Firebase SDK.'
        };
    }
    /**
     * A verbose error map with detailed descriptions for most error codes.
     *
     * See discussion at {@link AuthErrorMap}
     *
     * @public
     */
    const debugErrorMap = _debugErrorMap;
    /**
     * A minimal error map with all verbose error messages stripped.
     *
     * See discussion at {@link AuthErrorMap}
     *
     * @public
     */
    const prodErrorMap = _prodErrorMap;
    const _DEFAULT_AUTH_ERROR_FACTORY = new ErrorFactory('auth', 'Firebase', _prodErrorMap());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const logClient = new Logger('@firebase/auth');
    function _logError(msg, ...args) {
        if (logClient.logLevel <= LogLevel.ERROR) {
            logClient.error(`Auth (${SDK_VERSION}): ${msg}`, ...args);
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _fail(authOrCode, ...rest) {
        throw createErrorInternal(authOrCode, ...rest);
    }
    function _createError(authOrCode, ...rest) {
        return createErrorInternal(authOrCode, ...rest);
    }
    function _errorWithCustomMessage(auth, code, message) {
        const errorMap = Object.assign(Object.assign({}, prodErrorMap()), { [code]: message });
        const factory = new ErrorFactory('auth', 'Firebase', errorMap);
        return factory.create(code, {
            appName: auth.name,
        });
    }
    function _assertInstanceOf(auth, object, instance) {
        const constructorInstance = instance;
        if (!(object instanceof constructorInstance)) {
            if (constructorInstance.name !== object.constructor.name) {
                _fail(auth, "argument-error" /* ARGUMENT_ERROR */);
            }
            throw _errorWithCustomMessage(auth, "argument-error" /* ARGUMENT_ERROR */, `Type of ${object.constructor.name} does not match expected instance.` +
                `Did you pass a reference from a different Auth SDK?`);
        }
    }
    function createErrorInternal(authOrCode, ...rest) {
        if (typeof authOrCode !== 'string') {
            const code = rest[0];
            const fullParams = [...rest.slice(1)];
            if (fullParams[0]) {
                fullParams[0].appName = authOrCode.name;
            }
            return authOrCode._errorFactory.create(code, ...fullParams);
        }
        return _DEFAULT_AUTH_ERROR_FACTORY.create(authOrCode, ...rest);
    }
    function _assert$4(assertion, authOrCode, ...rest) {
        if (!assertion) {
            throw createErrorInternal(authOrCode, ...rest);
        }
    }
    /**
     * Unconditionally fails, throwing an internal error with the given message.
     *
     * @param failure type of failure encountered
     * @throws Error
     */
    function debugFail(failure) {
        // Log the failure in addition to throw an exception, just in case the
        // exception is swallowed.
        const message = `INTERNAL ASSERTION FAILED: ` + failure;
        _logError(message);
        // NOTE: We don't use FirebaseError here because these are internal failures
        // that cannot be handled by the user. (Also it would create a circular
        // dependency between the error and assert modules which doesn't work.)
        throw new Error(message);
    }
    /**
     * Fails if the given assertion condition is false, throwing an Error with the
     * given message if it did.
     *
     * @param assertion
     * @param message
     */
    function debugAssert(assertion, message) {
        if (!assertion) {
            debugFail(message);
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const instanceCache = new Map();
    function _getInstance(cls) {
        debugAssert(cls instanceof Function, 'Expected a class definition');
        let instance = instanceCache.get(cls);
        if (instance) {
            debugAssert(instance instanceof cls, 'Instance stored in cache mismatched with class');
            return instance;
        }
        instance = new cls();
        instanceCache.set(cls, instance);
        return instance;
    }
    function _initializeAuthInstance(auth, deps) {
        const persistence = (deps === null || deps === void 0 ? void 0 : deps.persistence) || [];
        const hierarchy = (Array.isArray(persistence) ? persistence : [persistence]).map(_getInstance);
        if (deps === null || deps === void 0 ? void 0 : deps.errorMap) {
            auth._updateErrorMap(deps.errorMap);
        }
        // This promise is intended to float; auth initialization happens in the
        // background, meanwhile the auth object may be used by the app.
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        auth._initializeWithPersistence(hierarchy, deps === null || deps === void 0 ? void 0 : deps.popupRedirectResolver);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _getCurrentUrl() {
        var _a;
        return (typeof self !== 'undefined' && ((_a = self.location) === null || _a === void 0 ? void 0 : _a.href)) || '';
    }
    function _isHttpOrHttps$1() {
        return _getCurrentScheme$1() === 'http:' || _getCurrentScheme$1() === 'https:';
    }
    function _getCurrentScheme$1() {
        var _a;
        return (typeof self !== 'undefined' && ((_a = self.location) === null || _a === void 0 ? void 0 : _a.protocol)) || null;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Determine whether the browser is working online
     */
    function _isOnline() {
        if (typeof navigator !== 'undefined' &&
            navigator &&
            'onLine' in navigator &&
            typeof navigator.onLine === 'boolean' &&
            // Apply only for traditional web apps and Chrome extensions.
            // This is especially true for Cordova apps which have unreliable
            // navigator.onLine behavior unless cordova-plugin-network-information is
            // installed which overwrites the native navigator.onLine value and
            // defines navigator.connection.
            (_isHttpOrHttps$1() || isBrowserExtension() || 'connection' in navigator)) {
            return navigator.onLine;
        }
        // If we can't determine the state, assume it is online.
        return true;
    }
    function _getUserLanguage() {
        if (typeof navigator === 'undefined') {
            return null;
        }
        const navigatorLanguage = navigator;
        return (
        // Most reliable, but only supported in Chrome/Firefox.
        (navigatorLanguage.languages && navigatorLanguage.languages[0]) ||
            // Supported in most browsers, but returns the language of the browser
            // UI, not the language set in browser settings.
            navigatorLanguage.language ||
            // Couldn't determine language.
            null);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A structure to help pick between a range of long and short delay durations
     * depending on the current environment. In general, the long delay is used for
     * mobile environments whereas short delays are used for desktop environments.
     */
    class Delay {
        constructor(shortDelay, longDelay) {
            this.shortDelay = shortDelay;
            this.longDelay = longDelay;
            // Internal error when improperly initialized.
            debugAssert(longDelay > shortDelay, 'Short delay should be less than long delay!');
            this.isMobile = isMobileCordova() || isReactNative();
        }
        get() {
            if (!_isOnline()) {
                // Pick the shorter timeout.
                return Math.min(5000 /* OFFLINE */, this.shortDelay);
            }
            // If running in a mobile environment, return the long delay, otherwise
            // return the short delay.
            // This could be improved in the future to dynamically change based on other
            // variables instead of just reading the current environment.
            return this.isMobile ? this.longDelay : this.shortDelay;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _emulatorUrl(config, path) {
        debugAssert(config.emulator, 'Emulator should always be set here');
        const { url } = config.emulator;
        if (!path) {
            return url;
        }
        return `${url}${path.startsWith('/') ? path.slice(1) : path}`;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class FetchProvider {
        static initialize(fetchImpl, headersImpl, responseImpl) {
            this.fetchImpl = fetchImpl;
            if (headersImpl) {
                this.headersImpl = headersImpl;
            }
            if (responseImpl) {
                this.responseImpl = responseImpl;
            }
        }
        static fetch() {
            if (this.fetchImpl) {
                return this.fetchImpl;
            }
            if (typeof self !== 'undefined' && 'fetch' in self) {
                return self.fetch;
            }
            debugFail('Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');
        }
        static headers() {
            if (this.headersImpl) {
                return this.headersImpl;
            }
            if (typeof self !== 'undefined' && 'Headers' in self) {
                return self.Headers;
            }
            debugFail('Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');
        }
        static response() {
            if (this.responseImpl) {
                return this.responseImpl;
            }
            if (typeof self !== 'undefined' && 'Response' in self) {
                return self.Response;
            }
            debugFail('Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Map from errors returned by the server to errors to developer visible errors
     */
    const SERVER_ERROR_MAP = {
        // Custom token errors.
        ["CREDENTIAL_MISMATCH" /* CREDENTIAL_MISMATCH */]: "custom-token-mismatch" /* CREDENTIAL_MISMATCH */,
        // This can only happen if the SDK sends a bad request.
        ["MISSING_CUSTOM_TOKEN" /* MISSING_CUSTOM_TOKEN */]: "internal-error" /* INTERNAL_ERROR */,
        // Create Auth URI errors.
        ["INVALID_IDENTIFIER" /* INVALID_IDENTIFIER */]: "invalid-email" /* INVALID_EMAIL */,
        // This can only happen if the SDK sends a bad request.
        ["MISSING_CONTINUE_URI" /* MISSING_CONTINUE_URI */]: "internal-error" /* INTERNAL_ERROR */,
        // Sign in with email and password errors (some apply to sign up too).
        ["INVALID_PASSWORD" /* INVALID_PASSWORD */]: "wrong-password" /* INVALID_PASSWORD */,
        // This can only happen if the SDK sends a bad request.
        ["MISSING_PASSWORD" /* MISSING_PASSWORD */]: "internal-error" /* INTERNAL_ERROR */,
        // Sign up with email and password errors.
        ["EMAIL_EXISTS" /* EMAIL_EXISTS */]: "email-already-in-use" /* EMAIL_EXISTS */,
        ["PASSWORD_LOGIN_DISABLED" /* PASSWORD_LOGIN_DISABLED */]: "operation-not-allowed" /* OPERATION_NOT_ALLOWED */,
        // Verify assertion for sign in with credential errors:
        ["INVALID_IDP_RESPONSE" /* INVALID_IDP_RESPONSE */]: "invalid-credential" /* INVALID_IDP_RESPONSE */,
        ["INVALID_PENDING_TOKEN" /* INVALID_PENDING_TOKEN */]: "invalid-credential" /* INVALID_IDP_RESPONSE */,
        ["FEDERATED_USER_ID_ALREADY_LINKED" /* FEDERATED_USER_ID_ALREADY_LINKED */]: "credential-already-in-use" /* CREDENTIAL_ALREADY_IN_USE */,
        // This can only happen if the SDK sends a bad request.
        ["MISSING_REQ_TYPE" /* MISSING_REQ_TYPE */]: "internal-error" /* INTERNAL_ERROR */,
        // Send Password reset email errors:
        ["EMAIL_NOT_FOUND" /* EMAIL_NOT_FOUND */]: "user-not-found" /* USER_DELETED */,
        ["RESET_PASSWORD_EXCEED_LIMIT" /* RESET_PASSWORD_EXCEED_LIMIT */]: "too-many-requests" /* TOO_MANY_ATTEMPTS_TRY_LATER */,
        ["EXPIRED_OOB_CODE" /* EXPIRED_OOB_CODE */]: "expired-action-code" /* EXPIRED_OOB_CODE */,
        ["INVALID_OOB_CODE" /* INVALID_OOB_CODE */]: "invalid-action-code" /* INVALID_OOB_CODE */,
        // This can only happen if the SDK sends a bad request.
        ["MISSING_OOB_CODE" /* MISSING_OOB_CODE */]: "internal-error" /* INTERNAL_ERROR */,
        // Operations that require ID token in request:
        ["CREDENTIAL_TOO_OLD_LOGIN_AGAIN" /* CREDENTIAL_TOO_OLD_LOGIN_AGAIN */]: "requires-recent-login" /* CREDENTIAL_TOO_OLD_LOGIN_AGAIN */,
        ["INVALID_ID_TOKEN" /* INVALID_ID_TOKEN */]: "invalid-user-token" /* INVALID_AUTH */,
        ["TOKEN_EXPIRED" /* TOKEN_EXPIRED */]: "user-token-expired" /* TOKEN_EXPIRED */,
        ["USER_NOT_FOUND" /* USER_NOT_FOUND */]: "user-token-expired" /* TOKEN_EXPIRED */,
        // Other errors.
        ["TOO_MANY_ATTEMPTS_TRY_LATER" /* TOO_MANY_ATTEMPTS_TRY_LATER */]: "too-many-requests" /* TOO_MANY_ATTEMPTS_TRY_LATER */,
        // Phone Auth related errors.
        ["INVALID_CODE" /* INVALID_CODE */]: "invalid-verification-code" /* INVALID_CODE */,
        ["INVALID_SESSION_INFO" /* INVALID_SESSION_INFO */]: "invalid-verification-id" /* INVALID_SESSION_INFO */,
        ["INVALID_TEMPORARY_PROOF" /* INVALID_TEMPORARY_PROOF */]: "invalid-credential" /* INVALID_IDP_RESPONSE */,
        ["MISSING_SESSION_INFO" /* MISSING_SESSION_INFO */]: "missing-verification-id" /* MISSING_SESSION_INFO */,
        ["SESSION_EXPIRED" /* SESSION_EXPIRED */]: "code-expired" /* CODE_EXPIRED */,
        // Other action code errors when additional settings passed.
        // MISSING_CONTINUE_URI is getting mapped to INTERNAL_ERROR above.
        // This is OK as this error will be caught by client side validation.
        ["MISSING_ANDROID_PACKAGE_NAME" /* MISSING_ANDROID_PACKAGE_NAME */]: "missing-android-pkg-name" /* MISSING_ANDROID_PACKAGE_NAME */,
        ["UNAUTHORIZED_DOMAIN" /* UNAUTHORIZED_DOMAIN */]: "unauthorized-continue-uri" /* UNAUTHORIZED_DOMAIN */,
        // getProjectConfig errors when clientId is passed.
        ["INVALID_OAUTH_CLIENT_ID" /* INVALID_OAUTH_CLIENT_ID */]: "invalid-oauth-client-id" /* INVALID_OAUTH_CLIENT_ID */,
        // User actions (sign-up or deletion) disabled errors.
        ["ADMIN_ONLY_OPERATION" /* ADMIN_ONLY_OPERATION */]: "admin-restricted-operation" /* ADMIN_ONLY_OPERATION */,
        // Multi factor related errors.
        ["INVALID_MFA_PENDING_CREDENTIAL" /* INVALID_MFA_PENDING_CREDENTIAL */]: "invalid-multi-factor-session" /* INVALID_MFA_SESSION */,
        ["MFA_ENROLLMENT_NOT_FOUND" /* MFA_ENROLLMENT_NOT_FOUND */]: "multi-factor-info-not-found" /* MFA_INFO_NOT_FOUND */,
        ["MISSING_MFA_ENROLLMENT_ID" /* MISSING_MFA_ENROLLMENT_ID */]: "missing-multi-factor-info" /* MISSING_MFA_INFO */,
        ["MISSING_MFA_PENDING_CREDENTIAL" /* MISSING_MFA_PENDING_CREDENTIAL */]: "missing-multi-factor-session" /* MISSING_MFA_SESSION */,
        ["SECOND_FACTOR_EXISTS" /* SECOND_FACTOR_EXISTS */]: "second-factor-already-in-use" /* SECOND_FACTOR_ALREADY_ENROLLED */,
        ["SECOND_FACTOR_LIMIT_EXCEEDED" /* SECOND_FACTOR_LIMIT_EXCEEDED */]: "maximum-second-factor-count-exceeded" /* SECOND_FACTOR_LIMIT_EXCEEDED */,
        // Blocking functions related errors.
        ["BLOCKING_FUNCTION_ERROR_RESPONSE" /* BLOCKING_FUNCTION_ERROR_RESPONSE */]: "internal-error" /* INTERNAL_ERROR */,
    };

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const DEFAULT_API_TIMEOUT_MS = new Delay(30000, 60000);
    function _addTidIfNecessary(auth, request) {
        if (auth.tenantId && !request.tenantId) {
            return Object.assign(Object.assign({}, request), { tenantId: auth.tenantId });
        }
        return request;
    }
    async function _performApiRequest(auth, method, path, request, customErrorMap = {}) {
        return _performFetchWithErrorHandling(auth, customErrorMap, async () => {
            let body = {};
            let params = {};
            if (request) {
                if (method === "GET" /* GET */) {
                    params = request;
                }
                else {
                    body = {
                        body: JSON.stringify(request)
                    };
                }
            }
            const query = querystring(Object.assign({ key: auth.config.apiKey }, params)).slice(1);
            const headers = await auth._getAdditionalHeaders();
            headers["Content-Type" /* CONTENT_TYPE */] = 'application/json';
            if (auth.languageCode) {
                headers["X-Firebase-Locale" /* X_FIREBASE_LOCALE */] = auth.languageCode;
            }
            return FetchProvider.fetch()(_getFinalTarget(auth, auth.config.apiHost, path, query), Object.assign({ method,
                headers, referrerPolicy: 'no-referrer' }, body));
        });
    }
    async function _performFetchWithErrorHandling(auth, customErrorMap, fetchFn) {
        auth._canInitEmulator = false;
        const errorMap = Object.assign(Object.assign({}, SERVER_ERROR_MAP), customErrorMap);
        try {
            const networkTimeout = new NetworkTimeout(auth);
            const response = await Promise.race([
                fetchFn(),
                networkTimeout.promise
            ]);
            // If we've reached this point, the fetch succeeded and the networkTimeout
            // didn't throw; clear the network timeout delay so that Node won't hang
            networkTimeout.clearNetworkTimeout();
            const json = await response.json();
            if ('needConfirmation' in json) {
                throw _makeTaggedError(auth, "account-exists-with-different-credential" /* NEED_CONFIRMATION */, json);
            }
            if (response.ok && !('errorMessage' in json)) {
                return json;
            }
            else {
                const errorMessage = response.ok ? json.errorMessage : json.error.message;
                const [serverErrorCode, serverErrorMessage] = errorMessage.split(' : ');
                if (serverErrorCode === "FEDERATED_USER_ID_ALREADY_LINKED" /* FEDERATED_USER_ID_ALREADY_LINKED */) {
                    throw _makeTaggedError(auth, "credential-already-in-use" /* CREDENTIAL_ALREADY_IN_USE */, json);
                }
                else if (serverErrorCode === "EMAIL_EXISTS" /* EMAIL_EXISTS */) {
                    throw _makeTaggedError(auth, "email-already-in-use" /* EMAIL_EXISTS */, json);
                }
                else if (serverErrorCode === "USER_DISABLED" /* USER_DISABLED */) {
                    throw _makeTaggedError(auth, "user-disabled" /* USER_DISABLED */, json);
                }
                const authError = errorMap[serverErrorCode] ||
                    serverErrorCode
                        .toLowerCase()
                        .replace(/[_\s]+/g, '-');
                if (serverErrorMessage) {
                    throw _errorWithCustomMessage(auth, authError, serverErrorMessage);
                }
                else {
                    _fail(auth, authError);
                }
            }
        }
        catch (e) {
            if (e instanceof FirebaseError) {
                throw e;
            }
            _fail(auth, "network-request-failed" /* NETWORK_REQUEST_FAILED */);
        }
    }
    async function _performSignInRequest(auth, method, path, request, customErrorMap = {}) {
        const serverResponse = (await _performApiRequest(auth, method, path, request, customErrorMap));
        if ('mfaPendingCredential' in serverResponse) {
            _fail(auth, "multi-factor-auth-required" /* MFA_REQUIRED */, {
                _serverResponse: serverResponse
            });
        }
        return serverResponse;
    }
    function _getFinalTarget(auth, host, path, query) {
        const base = `${host}${path}?${query}`;
        if (!auth.config.emulator) {
            return `${auth.config.apiScheme}://${base}`;
        }
        return _emulatorUrl(auth.config, base);
    }
    class NetworkTimeout {
        constructor(auth) {
            this.auth = auth;
            // Node timers and browser timers are fundamentally incompatible, but we
            // don't care about the value here
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            this.timer = null;
            this.promise = new Promise((_, reject) => {
                this.timer = setTimeout(() => {
                    return reject(_createError(this.auth, "network-request-failed" /* NETWORK_REQUEST_FAILED */));
                }, DEFAULT_API_TIMEOUT_MS.get());
            });
        }
        clearNetworkTimeout() {
            clearTimeout(this.timer);
        }
    }
    function _makeTaggedError(auth, code, response) {
        const errorParams = {
            appName: auth.name
        };
        if (response.email) {
            errorParams.email = response.email;
        }
        if (response.phoneNumber) {
            errorParams.phoneNumber = response.phoneNumber;
        }
        const error = _createError(auth, code, errorParams);
        // We know customData is defined on error because errorParams is defined
        error.customData._tokenResponse = response;
        return error;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    async function deleteAccount(auth, request) {
        return _performApiRequest(auth, "POST" /* POST */, "/v1/accounts:delete" /* DELETE_ACCOUNT */, request);
    }
    async function deleteLinkedAccounts(auth, request) {
        return _performApiRequest(auth, "POST" /* POST */, "/v1/accounts:update" /* SET_ACCOUNT_INFO */, request);
    }
    async function getAccountInfo(auth, request) {
        return _performApiRequest(auth, "POST" /* POST */, "/v1/accounts:lookup" /* GET_ACCOUNT_INFO */, request);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function utcTimestampToDateString(utcTimestamp) {
        if (!utcTimestamp) {
            return undefined;
        }
        try {
            // Convert to date object.
            const date = new Date(Number(utcTimestamp));
            // Test date is valid.
            if (!isNaN(date.getTime())) {
                // Convert to UTC date string.
                return date.toUTCString();
            }
        }
        catch (e) {
            // Do nothing. undefined will be returned.
        }
        return undefined;
    }
    /**
     * Returns a deserialized JSON Web Token (JWT) used to identitfy the user to a Firebase service.
     *
     * @remarks
     * Returns the current token if it has not expired or if it will not expire in the next five
     * minutes. Otherwise, this will refresh the token and return a new one.
     *
     * @param user - The user.
     * @param forceRefresh - Force refresh regardless of token expiration.
     *
     * @public
     */
    async function getIdTokenResult(user, forceRefresh = false) {
        const userInternal = getModularInstance(user);
        const token = await userInternal.getIdToken(forceRefresh);
        const claims = _parseToken(token);
        _assert$4(claims && claims.exp && claims.auth_time && claims.iat, userInternal.auth, "internal-error" /* INTERNAL_ERROR */);
        const firebase = typeof claims.firebase === 'object' ? claims.firebase : undefined;
        const signInProvider = firebase === null || firebase === void 0 ? void 0 : firebase['sign_in_provider'];
        return {
            claims,
            token,
            authTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.auth_time)),
            issuedAtTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.iat)),
            expirationTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.exp)),
            signInProvider: signInProvider || null,
            signInSecondFactor: (firebase === null || firebase === void 0 ? void 0 : firebase['sign_in_second_factor']) || null
        };
    }
    function secondsStringToMilliseconds(seconds) {
        return Number(seconds) * 1000;
    }
    function _parseToken(token) {
        var _a;
        const [algorithm, payload, signature] = token.split('.');
        if (algorithm === undefined ||
            payload === undefined ||
            signature === undefined) {
            _logError('JWT malformed, contained fewer than 3 sections');
            return null;
        }
        try {
            const decoded = base64Decode(payload);
            if (!decoded) {
                _logError('Failed to decode base64 JWT payload');
                return null;
            }
            return JSON.parse(decoded);
        }
        catch (e) {
            _logError('Caught error parsing JWT payload as JSON', (_a = e) === null || _a === void 0 ? void 0 : _a.toString());
            return null;
        }
    }
    /**
     * Extract expiresIn TTL from a token by subtracting the expiration from the issuance.
     */
    function _tokenExpiresIn(token) {
        const parsedToken = _parseToken(token);
        _assert$4(parsedToken, "internal-error" /* INTERNAL_ERROR */);
        _assert$4(typeof parsedToken.exp !== 'undefined', "internal-error" /* INTERNAL_ERROR */);
        _assert$4(typeof parsedToken.iat !== 'undefined', "internal-error" /* INTERNAL_ERROR */);
        return Number(parsedToken.exp) - Number(parsedToken.iat);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    async function _logoutIfInvalidated(user, promise, bypassAuthState = false) {
        if (bypassAuthState) {
            return promise;
        }
        try {
            return await promise;
        }
        catch (e) {
            if (e instanceof FirebaseError && isUserInvalidated(e)) {
                if (user.auth.currentUser === user) {
                    await user.auth.signOut();
                }
            }
            throw e;
        }
    }
    function isUserInvalidated({ code }) {
        return (code === `auth/${"user-disabled" /* USER_DISABLED */}` ||
            code === `auth/${"user-token-expired" /* TOKEN_EXPIRED */}`);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class ProactiveRefresh {
        constructor(user) {
            this.user = user;
            this.isRunning = false;
            // Node timers and browser timers return fundamentally different types.
            // We don't actually care what the value is but TS won't accept unknown and
            // we can't cast properly in both environments.
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            this.timerId = null;
            this.errorBackoff = 30000 /* RETRY_BACKOFF_MIN */;
        }
        _start() {
            if (this.isRunning) {
                return;
            }
            this.isRunning = true;
            this.schedule();
        }
        _stop() {
            if (!this.isRunning) {
                return;
            }
            this.isRunning = false;
            if (this.timerId !== null) {
                clearTimeout(this.timerId);
            }
        }
        getInterval(wasError) {
            var _a;
            if (wasError) {
                const interval = this.errorBackoff;
                this.errorBackoff = Math.min(this.errorBackoff * 2, 960000 /* RETRY_BACKOFF_MAX */);
                return interval;
            }
            else {
                // Reset the error backoff
                this.errorBackoff = 30000 /* RETRY_BACKOFF_MIN */;
                const expTime = (_a = this.user.stsTokenManager.expirationTime) !== null && _a !== void 0 ? _a : 0;
                const interval = expTime - Date.now() - 300000 /* OFFSET */;
                return Math.max(0, interval);
            }
        }
        schedule(wasError = false) {
            if (!this.isRunning) {
                // Just in case...
                return;
            }
            const interval = this.getInterval(wasError);
            this.timerId = setTimeout(async () => {
                await this.iteration();
            }, interval);
        }
        async iteration() {
            var _a;
            try {
                await this.user.getIdToken(true);
            }
            catch (e) {
                // Only retry on network errors
                if (((_a = e) === null || _a === void 0 ? void 0 : _a.code) === `auth/${"network-request-failed" /* NETWORK_REQUEST_FAILED */}`) {
                    this.schedule(/* wasError */ true);
                }
                return;
            }
            this.schedule();
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class UserMetadata {
        constructor(createdAt, lastLoginAt) {
            this.createdAt = createdAt;
            this.lastLoginAt = lastLoginAt;
            this._initializeTime();
        }
        _initializeTime() {
            this.lastSignInTime = utcTimestampToDateString(this.lastLoginAt);
            this.creationTime = utcTimestampToDateString(this.createdAt);
        }
        _copy(metadata) {
            this.createdAt = metadata.createdAt;
            this.lastLoginAt = metadata.lastLoginAt;
            this._initializeTime();
        }
        toJSON() {
            return {
                createdAt: this.createdAt,
                lastLoginAt: this.lastLoginAt
            };
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    async function _reloadWithoutSaving(user) {
        var _a;
        const auth = user.auth;
        const idToken = await user.getIdToken();
        const response = await _logoutIfInvalidated(user, getAccountInfo(auth, { idToken }));
        _assert$4(response === null || response === void 0 ? void 0 : response.users.length, auth, "internal-error" /* INTERNAL_ERROR */);
        const coreAccount = response.users[0];
        user._notifyReloadListener(coreAccount);
        const newProviderData = ((_a = coreAccount.providerUserInfo) === null || _a === void 0 ? void 0 : _a.length)
            ? extractProviderData(coreAccount.providerUserInfo)
            : [];
        const providerData = mergeProviderData(user.providerData, newProviderData);
        // Preserves the non-nonymous status of the stored user, even if no more
        // credentials (federated or email/password) are linked to the user. If
        // the user was previously anonymous, then use provider data to update.
        // On the other hand, if it was not anonymous before, it should never be
        // considered anonymous now.
        const oldIsAnonymous = user.isAnonymous;
        const newIsAnonymous = !(user.email && coreAccount.passwordHash) && !(providerData === null || providerData === void 0 ? void 0 : providerData.length);
        const isAnonymous = !oldIsAnonymous ? false : newIsAnonymous;
        const updates = {
            uid: coreAccount.localId,
            displayName: coreAccount.displayName || null,
            photoURL: coreAccount.photoUrl || null,
            email: coreAccount.email || null,
            emailVerified: coreAccount.emailVerified || false,
            phoneNumber: coreAccount.phoneNumber || null,
            tenantId: coreAccount.tenantId || null,
            providerData,
            metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),
            isAnonymous
        };
        Object.assign(user, updates);
    }
    /**
     * Reloads user account data, if signed in.
     *
     * @param user - The user.
     *
     * @public
     */
    async function reload(user) {
        const userInternal = getModularInstance(user);
        await _reloadWithoutSaving(userInternal);
        // Even though the current user hasn't changed, update
        // current user will trigger a persistence update w/ the
        // new info.
        await userInternal.auth._persistUserIfCurrent(userInternal);
        userInternal.auth._notifyListenersIfCurrent(userInternal);
    }
    function mergeProviderData(original, newData) {
        const deduped = original.filter(o => !newData.some(n => n.providerId === o.providerId));
        return [...deduped, ...newData];
    }
    function extractProviderData(providers) {
        return providers.map((_a) => {
            var { providerId } = _a, provider = __rest(_a, ["providerId"]);
            return {
                providerId,
                uid: provider.rawId || '',
                displayName: provider.displayName || null,
                email: provider.email || null,
                phoneNumber: provider.phoneNumber || null,
                photoURL: provider.photoUrl || null
            };
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    async function requestStsToken(auth, refreshToken) {
        const response = await _performFetchWithErrorHandling(auth, {}, async () => {
            const body = querystring({
                'grant_type': 'refresh_token',
                'refresh_token': refreshToken
            }).slice(1);
            const { tokenApiHost, apiKey } = auth.config;
            const url = _getFinalTarget(auth, tokenApiHost, "/v1/token" /* TOKEN */, `key=${apiKey}`);
            const headers = await auth._getAdditionalHeaders();
            headers["Content-Type" /* CONTENT_TYPE */] = 'application/x-www-form-urlencoded';
            return FetchProvider.fetch()(url, {
                method: "POST" /* POST */,
                headers,
                body
            });
        });
        // The response comes back in snake_case. Convert to camel:
        return {
            accessToken: response.access_token,
            expiresIn: response.expires_in,
            refreshToken: response.refresh_token
        };
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * We need to mark this class as internal explicitly to exclude it in the public typings, because
     * it references AuthInternal which has a circular dependency with UserInternal.
     *
     * @internal
     */
    class StsTokenManager {
        constructor() {
            this.refreshToken = null;
            this.accessToken = null;
            this.expirationTime = null;
        }
        get isExpired() {
            return (!this.expirationTime ||
                Date.now() > this.expirationTime - 30000 /* TOKEN_REFRESH */);
        }
        updateFromServerResponse(response) {
            _assert$4(response.idToken, "internal-error" /* INTERNAL_ERROR */);
            _assert$4(typeof response.idToken !== 'undefined', "internal-error" /* INTERNAL_ERROR */);
            _assert$4(typeof response.refreshToken !== 'undefined', "internal-error" /* INTERNAL_ERROR */);
            const expiresIn = 'expiresIn' in response && typeof response.expiresIn !== 'undefined'
                ? Number(response.expiresIn)
                : _tokenExpiresIn(response.idToken);
            this.updateTokensAndExpiration(response.idToken, response.refreshToken, expiresIn);
        }
        async getToken(auth, forceRefresh = false) {
            _assert$4(!this.accessToken || this.refreshToken, auth, "user-token-expired" /* TOKEN_EXPIRED */);
            if (!forceRefresh && this.accessToken && !this.isExpired) {
                return this.accessToken;
            }
            if (this.refreshToken) {
                await this.refresh(auth, this.refreshToken);
                return this.accessToken;
            }
            return null;
        }
        clearRefreshToken() {
            this.refreshToken = null;
        }
        async refresh(auth, oldToken) {
            const { accessToken, refreshToken, expiresIn } = await requestStsToken(auth, oldToken);
            this.updateTokensAndExpiration(accessToken, refreshToken, Number(expiresIn));
        }
        updateTokensAndExpiration(accessToken, refreshToken, expiresInSec) {
            this.refreshToken = refreshToken || null;
            this.accessToken = accessToken || null;
            this.expirationTime = Date.now() + expiresInSec * 1000;
        }
        static fromJSON(appName, object) {
            const { refreshToken, accessToken, expirationTime } = object;
            const manager = new StsTokenManager();
            if (refreshToken) {
                _assert$4(typeof refreshToken === 'string', "internal-error" /* INTERNAL_ERROR */, {
                    appName
                });
                manager.refreshToken = refreshToken;
            }
            if (accessToken) {
                _assert$4(typeof accessToken === 'string', "internal-error" /* INTERNAL_ERROR */, {
                    appName
                });
                manager.accessToken = accessToken;
            }
            if (expirationTime) {
                _assert$4(typeof expirationTime === 'number', "internal-error" /* INTERNAL_ERROR */, {
                    appName
                });
                manager.expirationTime = expirationTime;
            }
            return manager;
        }
        toJSON() {
            return {
                refreshToken: this.refreshToken,
                accessToken: this.accessToken,
                expirationTime: this.expirationTime
            };
        }
        _assign(stsTokenManager) {
            this.accessToken = stsTokenManager.accessToken;
            this.refreshToken = stsTokenManager.refreshToken;
            this.expirationTime = stsTokenManager.expirationTime;
        }
        _clone() {
            return Object.assign(new StsTokenManager(), this.toJSON());
        }
        _performRefresh() {
            return debugFail('not implemented');
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function assertStringOrUndefined(assertion, appName) {
        _assert$4(typeof assertion === 'string' || typeof assertion === 'undefined', "internal-error" /* INTERNAL_ERROR */, { appName });
    }
    class UserImpl {
        constructor(_a) {
            var { uid, auth, stsTokenManager } = _a, opt = __rest(_a, ["uid", "auth", "stsTokenManager"]);
            // For the user object, provider is always Firebase.
            this.providerId = "firebase" /* FIREBASE */;
            this.proactiveRefresh = new ProactiveRefresh(this);
            this.reloadUserInfo = null;
            this.reloadListener = null;
            this.uid = uid;
            this.auth = auth;
            this.stsTokenManager = stsTokenManager;
            this.accessToken = stsTokenManager.accessToken;
            this.displayName = opt.displayName || null;
            this.email = opt.email || null;
            this.emailVerified = opt.emailVerified || false;
            this.phoneNumber = opt.phoneNumber || null;
            this.photoURL = opt.photoURL || null;
            this.isAnonymous = opt.isAnonymous || false;
            this.tenantId = opt.tenantId || null;
            this.providerData = opt.providerData ? [...opt.providerData] : [];
            this.metadata = new UserMetadata(opt.createdAt || undefined, opt.lastLoginAt || undefined);
        }
        async getIdToken(forceRefresh) {
            const accessToken = await _logoutIfInvalidated(this, this.stsTokenManager.getToken(this.auth, forceRefresh));
            _assert$4(accessToken, this.auth, "internal-error" /* INTERNAL_ERROR */);
            if (this.accessToken !== accessToken) {
                this.accessToken = accessToken;
                await this.auth._persistUserIfCurrent(this);
                this.auth._notifyListenersIfCurrent(this);
            }
            return accessToken;
        }
        getIdTokenResult(forceRefresh) {
            return getIdTokenResult(this, forceRefresh);
        }
        reload() {
            return reload(this);
        }
        _assign(user) {
            if (this === user) {
                return;
            }
            _assert$4(this.uid === user.uid, this.auth, "internal-error" /* INTERNAL_ERROR */);
            this.displayName = user.displayName;
            this.photoURL = user.photoURL;
            this.email = user.email;
            this.emailVerified = user.emailVerified;
            this.phoneNumber = user.phoneNumber;
            this.isAnonymous = user.isAnonymous;
            this.tenantId = user.tenantId;
            this.providerData = user.providerData.map(userInfo => (Object.assign({}, userInfo)));
            this.metadata._copy(user.metadata);
            this.stsTokenManager._assign(user.stsTokenManager);
        }
        _clone(auth) {
            return new UserImpl(Object.assign(Object.assign({}, this), { auth, stsTokenManager: this.stsTokenManager._clone() }));
        }
        _onReload(callback) {
            // There should only ever be one listener, and that is a single instance of MultiFactorUser
            _assert$4(!this.reloadListener, this.auth, "internal-error" /* INTERNAL_ERROR */);
            this.reloadListener = callback;
            if (this.reloadUserInfo) {
                this._notifyReloadListener(this.reloadUserInfo);
                this.reloadUserInfo = null;
            }
        }
        _notifyReloadListener(userInfo) {
            if (this.reloadListener) {
                this.reloadListener(userInfo);
            }
            else {
                // If no listener is subscribed yet, save the result so it's available when they do subscribe
                this.reloadUserInfo = userInfo;
            }
        }
        _startProactiveRefresh() {
            this.proactiveRefresh._start();
        }
        _stopProactiveRefresh() {
            this.proactiveRefresh._stop();
        }
        async _updateTokensIfNecessary(response, reload = false) {
            let tokensRefreshed = false;
            if (response.idToken &&
                response.idToken !== this.stsTokenManager.accessToken) {
                this.stsTokenManager.updateFromServerResponse(response);
                tokensRefreshed = true;
            }
            if (reload) {
                await _reloadWithoutSaving(this);
            }
            await this.auth._persistUserIfCurrent(this);
            if (tokensRefreshed) {
                this.auth._notifyListenersIfCurrent(this);
            }
        }
        async delete() {
            const idToken = await this.getIdToken();
            await _logoutIfInvalidated(this, deleteAccount(this.auth, { idToken }));
            this.stsTokenManager.clearRefreshToken();
            // TODO: Determine if cancellable-promises are necessary to use in this class so that delete()
            //       cancels pending actions...
            return this.auth.signOut();
        }
        toJSON() {
            return Object.assign(Object.assign({ uid: this.uid, email: this.email || undefined, emailVerified: this.emailVerified, displayName: this.displayName || undefined, isAnonymous: this.isAnonymous, photoURL: this.photoURL || undefined, phoneNumber: this.phoneNumber || undefined, tenantId: this.tenantId || undefined, providerData: this.providerData.map(userInfo => (Object.assign({}, userInfo))), stsTokenManager: this.stsTokenManager.toJSON(), 
                // Redirect event ID must be maintained in case there is a pending
                // redirect event.
                _redirectEventId: this._redirectEventId }, this.metadata.toJSON()), { 
                // Required for compatibility with the legacy SDK (go/firebase-auth-sdk-persistence-parsing):
                apiKey: this.auth.config.apiKey, appName: this.auth.name });
        }
        get refreshToken() {
            return this.stsTokenManager.refreshToken || '';
        }
        static _fromJSON(auth, object) {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            const displayName = (_a = object.displayName) !== null && _a !== void 0 ? _a : undefined;
            const email = (_b = object.email) !== null && _b !== void 0 ? _b : undefined;
            const phoneNumber = (_c = object.phoneNumber) !== null && _c !== void 0 ? _c : undefined;
            const photoURL = (_d = object.photoURL) !== null && _d !== void 0 ? _d : undefined;
            const tenantId = (_e = object.tenantId) !== null && _e !== void 0 ? _e : undefined;
            const _redirectEventId = (_f = object._redirectEventId) !== null && _f !== void 0 ? _f : undefined;
            const createdAt = (_g = object.createdAt) !== null && _g !== void 0 ? _g : undefined;
            const lastLoginAt = (_h = object.lastLoginAt) !== null && _h !== void 0 ? _h : undefined;
            const { uid, emailVerified, isAnonymous, providerData, stsTokenManager: plainObjectTokenManager } = object;
            _assert$4(uid && plainObjectTokenManager, auth, "internal-error" /* INTERNAL_ERROR */);
            const stsTokenManager = StsTokenManager.fromJSON(this.name, plainObjectTokenManager);
            _assert$4(typeof uid === 'string', auth, "internal-error" /* INTERNAL_ERROR */);
            assertStringOrUndefined(displayName, auth.name);
            assertStringOrUndefined(email, auth.name);
            _assert$4(typeof emailVerified === 'boolean', auth, "internal-error" /* INTERNAL_ERROR */);
            _assert$4(typeof isAnonymous === 'boolean', auth, "internal-error" /* INTERNAL_ERROR */);
            assertStringOrUndefined(phoneNumber, auth.name);
            assertStringOrUndefined(photoURL, auth.name);
            assertStringOrUndefined(tenantId, auth.name);
            assertStringOrUndefined(_redirectEventId, auth.name);
            assertStringOrUndefined(createdAt, auth.name);
            assertStringOrUndefined(lastLoginAt, auth.name);
            const user = new UserImpl({
                uid,
                auth,
                email,
                emailVerified,
                displayName,
                isAnonymous,
                photoURL,
                phoneNumber,
                tenantId,
                stsTokenManager,
                createdAt,
                lastLoginAt
            });
            if (providerData && Array.isArray(providerData)) {
                user.providerData = providerData.map(userInfo => (Object.assign({}, userInfo)));
            }
            if (_redirectEventId) {
                user._redirectEventId = _redirectEventId;
            }
            return user;
        }
        /**
         * Initialize a User from an idToken server response
         * @param auth
         * @param idTokenResponse
         */
        static async _fromIdTokenResponse(auth, idTokenResponse, isAnonymous = false) {
            const stsTokenManager = new StsTokenManager();
            stsTokenManager.updateFromServerResponse(idTokenResponse);
            // Initialize the Firebase Auth user.
            const user = new UserImpl({
                uid: idTokenResponse.localId,
                auth,
                stsTokenManager,
                isAnonymous
            });
            // Updates the user info and data and resolves with a user instance.
            await _reloadWithoutSaving(user);
            return user;
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class InMemoryPersistence {
        constructor() {
            this.type = "NONE" /* NONE */;
            this.storage = {};
        }
        async _isAvailable() {
            return true;
        }
        async _set(key, value) {
            this.storage[key] = value;
        }
        async _get(key) {
            const value = this.storage[key];
            return value === undefined ? null : value;
        }
        async _remove(key) {
            delete this.storage[key];
        }
        _addListener(_key, _listener) {
            // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers
            return;
        }
        _removeListener(_key, _listener) {
            // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers
            return;
        }
    }
    InMemoryPersistence.type = 'NONE';
    /**
     * An implementation of {@link Persistence} of type 'NONE'.
     *
     * @public
     */
    const inMemoryPersistence = InMemoryPersistence;

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _persistenceKeyName(key, apiKey, appName) {
        return `${"firebase" /* PERSISTENCE */}:${key}:${apiKey}:${appName}`;
    }
    class PersistenceUserManager {
        constructor(persistence, auth, userKey) {
            this.persistence = persistence;
            this.auth = auth;
            this.userKey = userKey;
            const { config, name } = this.auth;
            this.fullUserKey = _persistenceKeyName(this.userKey, config.apiKey, name);
            this.fullPersistenceKey = _persistenceKeyName("persistence" /* PERSISTENCE_USER */, config.apiKey, name);
            this.boundEventHandler = auth._onStorageEvent.bind(auth);
            this.persistence._addListener(this.fullUserKey, this.boundEventHandler);
        }
        setCurrentUser(user) {
            return this.persistence._set(this.fullUserKey, user.toJSON());
        }
        async getCurrentUser() {
            const blob = await this.persistence._get(this.fullUserKey);
            return blob ? UserImpl._fromJSON(this.auth, blob) : null;
        }
        removeCurrentUser() {
            return this.persistence._remove(this.fullUserKey);
        }
        savePersistenceForRedirect() {
            return this.persistence._set(this.fullPersistenceKey, this.persistence.type);
        }
        async setPersistence(newPersistence) {
            if (this.persistence === newPersistence) {
                return;
            }
            const currentUser = await this.getCurrentUser();
            await this.removeCurrentUser();
            this.persistence = newPersistence;
            if (currentUser) {
                return this.setCurrentUser(currentUser);
            }
        }
        delete() {
            this.persistence._removeListener(this.fullUserKey, this.boundEventHandler);
        }
        static async create(auth, persistenceHierarchy, userKey = "authUser" /* AUTH_USER */) {
            if (!persistenceHierarchy.length) {
                return new PersistenceUserManager(_getInstance(inMemoryPersistence), auth, userKey);
            }
            // Eliminate any persistences that are not available
            const availablePersistences = (await Promise.all(persistenceHierarchy.map(async (persistence) => {
                if (await persistence._isAvailable()) {
                    return persistence;
                }
                return undefined;
            }))).filter(persistence => persistence);
            // Fall back to the first persistence listed, or in memory if none available
            let selectedPersistence = availablePersistences[0] ||
                _getInstance(inMemoryPersistence);
            const key = _persistenceKeyName(userKey, auth.config.apiKey, auth.name);
            // Pull out the existing user, setting the chosen persistence to that
            // persistence if the user exists.
            let userToMigrate = null;
            // Note, here we check for a user in _all_ persistences, not just the
            // ones deemed available. If we can migrate a user out of a broken
            // persistence, we will (but only if that persistence supports migration).
            for (const persistence of persistenceHierarchy) {
                try {
                    const blob = await persistence._get(key);
                    if (blob) {
                        const user = UserImpl._fromJSON(auth, blob); // throws for unparsable blob (wrong format)
                        if (persistence !== selectedPersistence) {
                            userToMigrate = user;
                        }
                        selectedPersistence = persistence;
                        break;
                    }
                }
                catch (_a) { }
            }
            // If we find the user in a persistence that does support migration, use
            // that migration path (of only persistences that support migration)
            const migrationHierarchy = availablePersistences.filter(p => p._shouldAllowMigration);
            // If the persistence does _not_ allow migration, just finish off here
            if (!selectedPersistence._shouldAllowMigration ||
                !migrationHierarchy.length) {
                return new PersistenceUserManager(selectedPersistence, auth, userKey);
            }
            selectedPersistence = migrationHierarchy[0];
            if (userToMigrate) {
                // This normally shouldn't throw since chosenPersistence.isAvailable() is true, but if it does
                // we'll just let it bubble to surface the error.
                await selectedPersistence._set(key, userToMigrate.toJSON());
            }
            // Attempt to clear the key in other persistences but ignore errors. This helps prevent issues
            // such as users getting stuck with a previous account after signing out and refreshing the tab.
            await Promise.all(persistenceHierarchy.map(async (persistence) => {
                if (persistence !== selectedPersistence) {
                    try {
                        await persistence._remove(key);
                    }
                    catch (_a) { }
                }
            }));
            return new PersistenceUserManager(selectedPersistence, auth, userKey);
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Determine the browser for the purposes of reporting usage to the API
     */
    function _getBrowserName(userAgent) {
        const ua = userAgent.toLowerCase();
        if (ua.includes('opera/') || ua.includes('opr/') || ua.includes('opios/')) {
            return "Opera" /* OPERA */;
        }
        else if (_isIEMobile(ua)) {
            // Windows phone IEMobile browser.
            return "IEMobile" /* IEMOBILE */;
        }
        else if (ua.includes('msie') || ua.includes('trident/')) {
            return "IE" /* IE */;
        }
        else if (ua.includes('edge/')) {
            return "Edge" /* EDGE */;
        }
        else if (_isFirefox(ua)) {
            return "Firefox" /* FIREFOX */;
        }
        else if (ua.includes('silk/')) {
            return "Silk" /* SILK */;
        }
        else if (_isBlackBerry(ua)) {
            // Blackberry browser.
            return "Blackberry" /* BLACKBERRY */;
        }
        else if (_isWebOS(ua)) {
            // WebOS default browser.
            return "Webos" /* WEBOS */;
        }
        else if (_isSafari(ua)) {
            return "Safari" /* SAFARI */;
        }
        else if ((ua.includes('chrome/') || _isChromeIOS(ua)) &&
            !ua.includes('edge/')) {
            return "Chrome" /* CHROME */;
        }
        else if (_isAndroid(ua)) {
            // Android stock browser.
            return "Android" /* ANDROID */;
        }
        else {
            // Most modern browsers have name/version at end of user agent string.
            const re = /([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/;
            const matches = userAgent.match(re);
            if ((matches === null || matches === void 0 ? void 0 : matches.length) === 2) {
                return matches[1];
            }
        }
        return "Other" /* OTHER */;
    }
    function _isFirefox(ua = getUA()) {
        return /firefox\//i.test(ua);
    }
    function _isSafari(userAgent = getUA()) {
        const ua = userAgent.toLowerCase();
        return (ua.includes('safari/') &&
            !ua.includes('chrome/') &&
            !ua.includes('crios/') &&
            !ua.includes('android'));
    }
    function _isChromeIOS(ua = getUA()) {
        return /crios\//i.test(ua);
    }
    function _isIEMobile(ua = getUA()) {
        return /iemobile/i.test(ua);
    }
    function _isAndroid(ua = getUA()) {
        return /android/i.test(ua);
    }
    function _isBlackBerry(ua = getUA()) {
        return /blackberry/i.test(ua);
    }
    function _isWebOS(ua = getUA()) {
        return /webos/i.test(ua);
    }
    function _isIOS(ua = getUA()) {
        return /iphone|ipad|ipod/i.test(ua) ||
            (/macintosh/i.test(ua) && /mobile/i.test(ua));
    }
    function _isIOS7Or8(ua = getUA()) {
        return (/(iPad|iPhone|iPod).*OS 7_\d/i.test(ua) ||
            /(iPad|iPhone|iPod).*OS 8_\d/i.test(ua));
    }
    function _isIOSStandalone(ua = getUA()) {
        var _a;
        return _isIOS(ua) && !!((_a = window.navigator) === null || _a === void 0 ? void 0 : _a.standalone);
    }
    function _isIE10() {
        return isIE() && document.documentMode === 10;
    }
    function _isMobileBrowser(ua = getUA()) {
        // TODO: implement getBrowserName equivalent for OS.
        return (_isIOS(ua) ||
            _isAndroid(ua) ||
            _isWebOS(ua) ||
            _isBlackBerry(ua) ||
            /windows phone/i.test(ua) ||
            _isIEMobile(ua));
    }
    function _isIframe() {
        try {
            // Check that the current window is not the top window.
            // If so, return true.
            return !!(window && window !== window.top);
        }
        catch (e) {
            return false;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /*
     * Determine the SDK version string
     */
    function _getClientVersion(clientPlatform, frameworks = []) {
        let reportedPlatform;
        switch (clientPlatform) {
            case "Browser" /* BROWSER */:
                // In a browser environment, report the browser name.
                reportedPlatform = _getBrowserName(getUA());
                break;
            case "Worker" /* WORKER */:
                // Technically a worker runs from a browser but we need to differentiate a
                // worker from a browser.
                // For example: Chrome-Worker/JsCore/4.9.1/FirebaseCore-web.
                reportedPlatform = `${_getBrowserName(getUA())}-${clientPlatform}`;
                break;
            default:
                reportedPlatform = clientPlatform;
        }
        const reportedFrameworks = frameworks.length
            ? frameworks.join(',')
            : 'FirebaseCore-web'; /* default value if no other framework is used */
        return `${reportedPlatform}/${"JsCore" /* CORE */}/${SDK_VERSION}/${reportedFrameworks}`;
    }

    /**
     * @license
     * Copyright 2022 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class AuthMiddlewareQueue {
        constructor(auth) {
            this.auth = auth;
            this.queue = [];
        }
        pushCallback(callback, onAbort) {
            // The callback could be sync or async. Wrap it into a
            // function that is always async.
            const wrappedCallback = (user) => new Promise((resolve, reject) => {
                try {
                    const result = callback(user);
                    // Either resolve with existing promise or wrap a non-promise
                    // return value into a promise.
                    resolve(result);
                }
                catch (e) {
                    // Sync callback throws.
                    reject(e);
                }
            });
            // Attach the onAbort if present
            wrappedCallback.onAbort = onAbort;
            this.queue.push(wrappedCallback);
            const index = this.queue.length - 1;
            return () => {
                // Unsubscribe. Replace with no-op. Do not remove from array, or it will disturb
                // indexing of other elements.
                this.queue[index] = () => Promise.resolve();
            };
        }
        async runMiddleware(nextUser) {
            var _a;
            if (this.auth.currentUser === nextUser) {
                return;
            }
            // While running the middleware, build a temporary stack of onAbort
            // callbacks to call if one middleware callback rejects.
            const onAbortStack = [];
            try {
                for (const beforeStateCallback of this.queue) {
                    await beforeStateCallback(nextUser);
                    // Only push the onAbort if the callback succeeds
                    if (beforeStateCallback.onAbort) {
                        onAbortStack.push(beforeStateCallback.onAbort);
                    }
                }
            }
            catch (e) {
                // Run all onAbort, with separate try/catch to ignore any errors and
                // continue
                onAbortStack.reverse();
                for (const onAbort of onAbortStack) {
                    try {
                        onAbort();
                    }
                    catch (_) { /* swallow error */ }
                }
                throw this.auth._errorFactory.create("login-blocked" /* LOGIN_BLOCKED */, { originalMessage: (_a = e) === null || _a === void 0 ? void 0 : _a.message });
            }
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class AuthImpl {
        constructor(app, heartbeatServiceProvider, config) {
            this.app = app;
            this.heartbeatServiceProvider = heartbeatServiceProvider;
            this.config = config;
            this.currentUser = null;
            this.emulatorConfig = null;
            this.operations = Promise.resolve();
            this.authStateSubscription = new Subscription$1(this);
            this.idTokenSubscription = new Subscription$1(this);
            this.beforeStateQueue = new AuthMiddlewareQueue(this);
            this.redirectUser = null;
            this.isProactiveRefreshEnabled = false;
            // Any network calls will set this to true and prevent subsequent emulator
            // initialization
            this._canInitEmulator = true;
            this._isInitialized = false;
            this._deleted = false;
            this._initializationPromise = null;
            this._popupRedirectResolver = null;
            this._errorFactory = _DEFAULT_AUTH_ERROR_FACTORY;
            // Tracks the last notified UID for state change listeners to prevent
            // repeated calls to the callbacks. Undefined means it's never been
            // called, whereas null means it's been called with a signed out user
            this.lastNotifiedUid = undefined;
            this.languageCode = null;
            this.tenantId = null;
            this.settings = { appVerificationDisabledForTesting: false };
            this.frameworks = [];
            this.name = app.name;
            this.clientVersion = config.sdkClientVersion;
        }
        _initializeWithPersistence(persistenceHierarchy, popupRedirectResolver) {
            if (popupRedirectResolver) {
                this._popupRedirectResolver = _getInstance(popupRedirectResolver);
            }
            // Have to check for app deletion throughout initialization (after each
            // promise resolution)
            this._initializationPromise = this.queue(async () => {
                var _a, _b;
                if (this._deleted) {
                    return;
                }
                this.persistenceManager = await PersistenceUserManager.create(this, persistenceHierarchy);
                if (this._deleted) {
                    return;
                }
                // Initialize the resolver early if necessary (only applicable to web:
                // this will cause the iframe to load immediately in certain cases)
                if ((_a = this._popupRedirectResolver) === null || _a === void 0 ? void 0 : _a._shouldInitProactively) {
                    // If this fails, don't halt auth loading
                    try {
                        await this._popupRedirectResolver._initialize(this);
                    }
                    catch (e) { /* Ignore the error */ }
                }
                await this.initializeCurrentUser(popupRedirectResolver);
                this.lastNotifiedUid = ((_b = this.currentUser) === null || _b === void 0 ? void 0 : _b.uid) || null;
                if (this._deleted) {
                    return;
                }
                this._isInitialized = true;
            });
            return this._initializationPromise;
        }
        /**
         * If the persistence is changed in another window, the user manager will let us know
         */
        async _onStorageEvent() {
            if (this._deleted) {
                return;
            }
            const user = await this.assertedPersistence.getCurrentUser();
            if (!this.currentUser && !user) {
                // No change, do nothing (was signed out and remained signed out).
                return;
            }
            // If the same user is to be synchronized.
            if (this.currentUser && user && this.currentUser.uid === user.uid) {
                // Data update, simply copy data changes.
                this._currentUser._assign(user);
                // If tokens changed from previous user tokens, this will trigger
                // notifyAuthListeners_.
                await this.currentUser.getIdToken();
                return;
            }
            // Update current Auth state. Either a new login or logout.
            // Skip blocking callbacks, they should not apply to a change in another tab.
            await this._updateCurrentUser(user, /* skipBeforeStateCallbacks */ true);
        }
        async initializeCurrentUser(popupRedirectResolver) {
            var _a;
            // First check to see if we have a pending redirect event.
            const previouslyStoredUser = (await this.assertedPersistence.getCurrentUser());
            let futureCurrentUser = previouslyStoredUser;
            let needsTocheckMiddleware = false;
            if (popupRedirectResolver && this.config.authDomain) {
                await this.getOrInitRedirectPersistenceManager();
                const redirectUserEventId = (_a = this.redirectUser) === null || _a === void 0 ? void 0 : _a._redirectEventId;
                const storedUserEventId = futureCurrentUser === null || futureCurrentUser === void 0 ? void 0 : futureCurrentUser._redirectEventId;
                const result = await this.tryRedirectSignIn(popupRedirectResolver);
                // If the stored user (i.e. the old "currentUser") has a redirectId that
                // matches the redirect user, then we want to initially sign in with the
                // new user object from result.
                // TODO(samgho): More thoroughly test all of this
                if ((!redirectUserEventId || redirectUserEventId === storedUserEventId) &&
                    (result === null || result === void 0 ? void 0 : result.user)) {
                    futureCurrentUser = result.user;
                    needsTocheckMiddleware = true;
                }
            }
            // If no user in persistence, there is no current user. Set to null.
            if (!futureCurrentUser) {
                return this.directlySetCurrentUser(null);
            }
            if (!futureCurrentUser._redirectEventId) {
                // This isn't a redirect link operation, we can reload and bail.
                // First though, ensure that we check the middleware is happy.
                if (needsTocheckMiddleware) {
                    try {
                        await this.beforeStateQueue.runMiddleware(futureCurrentUser);
                    }
                    catch (e) {
                        futureCurrentUser = previouslyStoredUser;
                        // We know this is available since the bit is only set when the
                        // resolver is available
                        this._popupRedirectResolver._overrideRedirectResult(this, () => Promise.reject(e));
                    }
                }
                if (futureCurrentUser) {
                    return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);
                }
                else {
                    return this.directlySetCurrentUser(null);
                }
            }
            _assert$4(this._popupRedirectResolver, this, "argument-error" /* ARGUMENT_ERROR */);
            await this.getOrInitRedirectPersistenceManager();
            // If the redirect user's event ID matches the current user's event ID,
            // DO NOT reload the current user, otherwise they'll be cleared from storage.
            // This is important for the reauthenticateWithRedirect() flow.
            if (this.redirectUser &&
                this.redirectUser._redirectEventId === futureCurrentUser._redirectEventId) {
                return this.directlySetCurrentUser(futureCurrentUser);
            }
            return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);
        }
        async tryRedirectSignIn(redirectResolver) {
            // The redirect user needs to be checked (and signed in if available)
            // during auth initialization. All of the normal sign in and link/reauth
            // flows call back into auth and push things onto the promise queue. We
            // need to await the result of the redirect sign in *inside the promise
            // queue*. This presents a problem: we run into deadlock. See:
            //    ┌> [Initialization] ─────┐
            //    ┌> [<other queue tasks>] │
            //    └─ [getRedirectResult] <─┘
            //    where [] are tasks on the queue and arrows denote awaits
            // Initialization will never complete because it's waiting on something
            // that's waiting for initialization to complete!
            //
            // Instead, this method calls getRedirectResult() (stored in
            // _completeRedirectFn) with an optional parameter that instructs all of
            // the underlying auth operations to skip anything that mutates auth state.
            let result = null;
            try {
                // We know this._popupRedirectResolver is set since redirectResolver
                // is passed in. The _completeRedirectFn expects the unwrapped extern.
                result = await this._popupRedirectResolver._completeRedirectFn(this, redirectResolver, true);
            }
            catch (e) {
                // Swallow any errors here; the code can retrieve them in
                // getRedirectResult().
                await this._setRedirectUser(null);
            }
            return result;
        }
        async reloadAndSetCurrentUserOrClear(user) {
            var _a;
            try {
                await _reloadWithoutSaving(user);
            }
            catch (e) {
                if (((_a = e) === null || _a === void 0 ? void 0 : _a.code) !== `auth/${"network-request-failed" /* NETWORK_REQUEST_FAILED */}`) {
                    // Something's wrong with the user's token. Log them out and remove
                    // them from storage
                    return this.directlySetCurrentUser(null);
                }
            }
            return this.directlySetCurrentUser(user);
        }
        useDeviceLanguage() {
            this.languageCode = _getUserLanguage();
        }
        async _delete() {
            this._deleted = true;
        }
        async updateCurrentUser(userExtern) {
            // The public updateCurrentUser method needs to make a copy of the user,
            // and also check that the project matches
            const user = userExtern
                ? getModularInstance(userExtern)
                : null;
            if (user) {
                _assert$4(user.auth.config.apiKey === this.config.apiKey, this, "invalid-user-token" /* INVALID_AUTH */);
            }
            return this._updateCurrentUser(user && user._clone(this));
        }
        async _updateCurrentUser(user, skipBeforeStateCallbacks = false) {
            if (this._deleted) {
                return;
            }
            if (user) {
                _assert$4(this.tenantId === user.tenantId, this, "tenant-id-mismatch" /* TENANT_ID_MISMATCH */);
            }
            if (!skipBeforeStateCallbacks) {
                await this.beforeStateQueue.runMiddleware(user);
            }
            return this.queue(async () => {
                await this.directlySetCurrentUser(user);
                this.notifyAuthListeners();
            });
        }
        async signOut() {
            // Run first, to block _setRedirectUser() if any callbacks fail.
            await this.beforeStateQueue.runMiddleware(null);
            // Clear the redirect user when signOut is called
            if (this.redirectPersistenceManager || this._popupRedirectResolver) {
                await this._setRedirectUser(null);
            }
            // Prevent callbacks from being called again in _updateCurrentUser, as
            // they were already called in the first line.
            return this._updateCurrentUser(null, /* skipBeforeStateCallbacks */ true);
        }
        setPersistence(persistence) {
            return this.queue(async () => {
                await this.assertedPersistence.setPersistence(_getInstance(persistence));
            });
        }
        _getPersistence() {
            return this.assertedPersistence.persistence.type;
        }
        _updateErrorMap(errorMap) {
            this._errorFactory = new ErrorFactory('auth', 'Firebase', errorMap());
        }
        onAuthStateChanged(nextOrObserver, error, completed) {
            return this.registerStateListener(this.authStateSubscription, nextOrObserver, error, completed);
        }
        beforeAuthStateChanged(callback, onAbort) {
            return this.beforeStateQueue.pushCallback(callback, onAbort);
        }
        onIdTokenChanged(nextOrObserver, error, completed) {
            return this.registerStateListener(this.idTokenSubscription, nextOrObserver, error, completed);
        }
        toJSON() {
            var _a;
            return {
                apiKey: this.config.apiKey,
                authDomain: this.config.authDomain,
                appName: this.name,
                currentUser: (_a = this._currentUser) === null || _a === void 0 ? void 0 : _a.toJSON()
            };
        }
        async _setRedirectUser(user, popupRedirectResolver) {
            const redirectManager = await this.getOrInitRedirectPersistenceManager(popupRedirectResolver);
            return user === null
                ? redirectManager.removeCurrentUser()
                : redirectManager.setCurrentUser(user);
        }
        async getOrInitRedirectPersistenceManager(popupRedirectResolver) {
            if (!this.redirectPersistenceManager) {
                const resolver = (popupRedirectResolver && _getInstance(popupRedirectResolver)) ||
                    this._popupRedirectResolver;
                _assert$4(resolver, this, "argument-error" /* ARGUMENT_ERROR */);
                this.redirectPersistenceManager = await PersistenceUserManager.create(this, [_getInstance(resolver._redirectPersistence)], "redirectUser" /* REDIRECT_USER */);
                this.redirectUser =
                    await this.redirectPersistenceManager.getCurrentUser();
            }
            return this.redirectPersistenceManager;
        }
        async _redirectUserForId(id) {
            var _a, _b;
            // Make sure we've cleared any pending persistence actions if we're not in
            // the initializer
            if (this._isInitialized) {
                await this.queue(async () => { });
            }
            if (((_a = this._currentUser) === null || _a === void 0 ? void 0 : _a._redirectEventId) === id) {
                return this._currentUser;
            }
            if (((_b = this.redirectUser) === null || _b === void 0 ? void 0 : _b._redirectEventId) === id) {
                return this.redirectUser;
            }
            return null;
        }
        async _persistUserIfCurrent(user) {
            if (user === this.currentUser) {
                return this.queue(async () => this.directlySetCurrentUser(user));
            }
        }
        /** Notifies listeners only if the user is current */
        _notifyListenersIfCurrent(user) {
            if (user === this.currentUser) {
                this.notifyAuthListeners();
            }
        }
        _key() {
            return `${this.config.authDomain}:${this.config.apiKey}:${this.name}`;
        }
        _startProactiveRefresh() {
            this.isProactiveRefreshEnabled = true;
            if (this.currentUser) {
                this._currentUser._startProactiveRefresh();
            }
        }
        _stopProactiveRefresh() {
            this.isProactiveRefreshEnabled = false;
            if (this.currentUser) {
                this._currentUser._stopProactiveRefresh();
            }
        }
        /** Returns the current user cast as the internal type */
        get _currentUser() {
            return this.currentUser;
        }
        notifyAuthListeners() {
            var _a, _b;
            if (!this._isInitialized) {
                return;
            }
            this.idTokenSubscription.next(this.currentUser);
            const currentUid = (_b = (_a = this.currentUser) === null || _a === void 0 ? void 0 : _a.uid) !== null && _b !== void 0 ? _b : null;
            if (this.lastNotifiedUid !== currentUid) {
                this.lastNotifiedUid = currentUid;
                this.authStateSubscription.next(this.currentUser);
            }
        }
        registerStateListener(subscription, nextOrObserver, error, completed) {
            if (this._deleted) {
                return () => { };
            }
            const cb = typeof nextOrObserver === 'function'
                ? nextOrObserver
                : nextOrObserver.next.bind(nextOrObserver);
            const promise = this._isInitialized
                ? Promise.resolve()
                : this._initializationPromise;
            _assert$4(promise, this, "internal-error" /* INTERNAL_ERROR */);
            // The callback needs to be called asynchronously per the spec.
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            promise.then(() => cb(this.currentUser));
            if (typeof nextOrObserver === 'function') {
                return subscription.addObserver(nextOrObserver, error, completed);
            }
            else {
                return subscription.addObserver(nextOrObserver);
            }
        }
        /**
         * Unprotected (from race conditions) method to set the current user. This
         * should only be called from within a queued callback. This is necessary
         * because the queue shouldn't rely on another queued callback.
         */
        async directlySetCurrentUser(user) {
            if (this.currentUser && this.currentUser !== user) {
                this._currentUser._stopProactiveRefresh();
                if (user && this.isProactiveRefreshEnabled) {
                    user._startProactiveRefresh();
                }
            }
            this.currentUser = user;
            if (user) {
                await this.assertedPersistence.setCurrentUser(user);
            }
            else {
                await this.assertedPersistence.removeCurrentUser();
            }
        }
        queue(action) {
            // In case something errors, the callback still should be called in order
            // to keep the promise chain alive
            this.operations = this.operations.then(action, action);
            return this.operations;
        }
        get assertedPersistence() {
            _assert$4(this.persistenceManager, this, "internal-error" /* INTERNAL_ERROR */);
            return this.persistenceManager;
        }
        _logFramework(framework) {
            if (!framework || this.frameworks.includes(framework)) {
                return;
            }
            this.frameworks.push(framework);
            // Sort alphabetically so that "FirebaseCore-web,FirebaseUI-web" and
            // "FirebaseUI-web,FirebaseCore-web" aren't viewed as different.
            this.frameworks.sort();
            this.clientVersion = _getClientVersion(this.config.clientPlatform, this._getFrameworks());
        }
        _getFrameworks() {
            return this.frameworks;
        }
        async _getAdditionalHeaders() {
            var _a;
            // Additional headers on every request
            const headers = {
                ["X-Client-Version" /* X_CLIENT_VERSION */]: this.clientVersion,
            };
            if (this.app.options.appId) {
                headers["X-Firebase-gmpid" /* X_FIREBASE_GMPID */] = this.app.options.appId;
            }
            // If the heartbeat service exists, add the heartbeat string
            const heartbeatsHeader = await ((_a = this.heartbeatServiceProvider.getImmediate({
                optional: true,
            })) === null || _a === void 0 ? void 0 : _a.getHeartbeatsHeader());
            if (heartbeatsHeader) {
                headers["X-Firebase-Client" /* X_FIREBASE_CLIENT */] = heartbeatsHeader;
            }
            return headers;
        }
    }
    /**
     * Method to be used to cast down to our private implmentation of Auth.
     * It will also handle unwrapping from the compat type if necessary
     *
     * @param auth Auth object passed in from developer
     */
    function _castAuth(auth) {
        return getModularInstance(auth);
    }
    /** Helper class to wrap subscriber logic */
    class Subscription$1 {
        constructor(auth) {
            this.auth = auth;
            this.observer = null;
            this.addObserver = createSubscribe(observer => (this.observer = observer));
        }
        get next() {
            _assert$4(this.observer, this.auth, "internal-error" /* INTERNAL_ERROR */);
            return this.observer.next.bind(this.observer);
        }
    }

    /**
     * Changes the {@link Auth} instance to communicate with the Firebase Auth Emulator, instead of production
     * Firebase Auth services.
     *
     * @remarks
     * This must be called synchronously immediately following the first call to
     * {@link initializeAuth}.  Do not use with production credentials as emulator
     * traffic is not encrypted.
     *
     *
     * @example
     * ```javascript
     * connectAuthEmulator(auth, 'http://127.0.0.1:9099', { disableWarnings: true });
     * ```
     *
     * @param auth - The {@link Auth} instance.
     * @param url - The URL at which the emulator is running (eg, 'http://localhost:9099').
     * @param options - Optional. `options.disableWarnings` defaults to `false`. Set it to
     * `true` to disable the warning banner attached to the DOM.
     *
     * @public
     */
    function connectAuthEmulator(auth, url, options) {
        const authInternal = _castAuth(auth);
        _assert$4(authInternal._canInitEmulator, authInternal, "emulator-config-failed" /* EMULATOR_CONFIG_FAILED */);
        _assert$4(/^https?:\/\//.test(url), authInternal, "invalid-emulator-scheme" /* INVALID_EMULATOR_SCHEME */);
        const disableWarnings = !!(options === null || options === void 0 ? void 0 : options.disableWarnings);
        const protocol = extractProtocol(url);
        const { host, port } = extractHostAndPort(url);
        const portStr = port === null ? '' : `:${port}`;
        // Always replace path with "/" (even if input url had no path at all, or had a different one).
        authInternal.config.emulator = { url: `${protocol}//${host}${portStr}/` };
        authInternal.settings.appVerificationDisabledForTesting = true;
        authInternal.emulatorConfig = Object.freeze({
            host,
            port,
            protocol: protocol.replace(':', ''),
            options: Object.freeze({ disableWarnings })
        });
        if (!disableWarnings) {
            emitEmulatorWarning();
        }
    }
    function extractProtocol(url) {
        const protocolEnd = url.indexOf(':');
        return protocolEnd < 0 ? '' : url.substr(0, protocolEnd + 1);
    }
    function extractHostAndPort(url) {
        const protocol = extractProtocol(url);
        const authority = /(\/\/)?([^?#/]+)/.exec(url.substr(protocol.length)); // Between // and /, ? or #.
        if (!authority) {
            return { host: '', port: null };
        }
        const hostAndPort = authority[2].split('@').pop() || ''; // Strip out "username:password@".
        const bracketedIPv6 = /^(\[[^\]]+\])(:|$)/.exec(hostAndPort);
        if (bracketedIPv6) {
            const host = bracketedIPv6[1];
            return { host, port: parsePort(hostAndPort.substr(host.length + 1)) };
        }
        else {
            const [host, port] = hostAndPort.split(':');
            return { host, port: parsePort(port) };
        }
    }
    function parsePort(portStr) {
        if (!portStr) {
            return null;
        }
        const port = Number(portStr);
        if (isNaN(port)) {
            return null;
        }
        return port;
    }
    function emitEmulatorWarning() {
        function attachBanner() {
            const el = document.createElement('p');
            const sty = el.style;
            el.innerText =
                'Running in emulator mode. Do not use with production credentials.';
            sty.position = 'fixed';
            sty.width = '100%';
            sty.backgroundColor = '#ffffff';
            sty.border = '.1em solid #000000';
            sty.color = '#b50000';
            sty.bottom = '0px';
            sty.left = '0px';
            sty.margin = '0px';
            sty.zIndex = '10000';
            sty.textAlign = 'center';
            el.classList.add('firebase-emulator-warning');
            document.body.appendChild(el);
        }
        if (typeof console !== 'undefined' && typeof console.info === 'function') {
            console.info('WARNING: You are using the Auth Emulator,' +
                ' which is intended for local testing only.  Do not use with' +
                ' production credentials.');
        }
        if (typeof window !== 'undefined' &&
            typeof document !== 'undefined') {
            if (document.readyState === 'loading') {
                window.addEventListener('DOMContentLoaded', attachBanner);
            }
            else {
                attachBanner();
            }
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Interface that represents the credentials returned by an {@link AuthProvider}.
     *
     * @remarks
     * Implementations specify the details about each auth provider's credential requirements.
     *
     * @public
     */
    class AuthCredential {
        /** @internal */
        constructor(
        /**
         * The authentication provider ID for the credential.
         *
         * @remarks
         * For example, 'facebook.com', or 'google.com'.
         */
        providerId, 
        /**
         * The authentication sign in method for the credential.
         *
         * @remarks
         * For example, {@link SignInMethod}.EMAIL_PASSWORD, or
         * {@link SignInMethod}.EMAIL_LINK. This corresponds to the sign-in method
         * identifier as returned in {@link fetchSignInMethodsForEmail}.
         */
        signInMethod) {
            this.providerId = providerId;
            this.signInMethod = signInMethod;
        }
        /**
         * Returns a JSON-serializable representation of this object.
         *
         * @returns a JSON-serializable representation of this object.
         */
        toJSON() {
            return debugFail('not implemented');
        }
        /** @internal */
        _getIdTokenResponse(_auth) {
            return debugFail('not implemented');
        }
        /** @internal */
        _linkToIdToken(_auth, _idToken) {
            return debugFail('not implemented');
        }
        /** @internal */
        _getReauthenticationResolver(_auth) {
            return debugFail('not implemented');
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    async function resetPassword(auth, request) {
        return _performApiRequest(auth, "POST" /* POST */, "/v1/accounts:resetPassword" /* RESET_PASSWORD */, _addTidIfNecessary(auth, request));
    }
    async function updateEmailPassword(auth, request) {
        return _performApiRequest(auth, "POST" /* POST */, "/v1/accounts:update" /* SET_ACCOUNT_INFO */, request);
    }
    async function applyActionCode$1(auth, request) {
        return _performApiRequest(auth, "POST" /* POST */, "/v1/accounts:update" /* SET_ACCOUNT_INFO */, _addTidIfNecessary(auth, request));
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    async function signInWithPassword(auth, request) {
        return _performSignInRequest(auth, "POST" /* POST */, "/v1/accounts:signInWithPassword" /* SIGN_IN_WITH_PASSWORD */, _addTidIfNecessary(auth, request));
    }
    async function sendOobCode(auth, request) {
        return _performApiRequest(auth, "POST" /* POST */, "/v1/accounts:sendOobCode" /* SEND_OOB_CODE */, _addTidIfNecessary(auth, request));
    }
    async function sendEmailVerification$1(auth, request) {
        return sendOobCode(auth, request);
    }
    async function sendPasswordResetEmail$1(auth, request) {
        return sendOobCode(auth, request);
    }
    async function sendSignInLinkToEmail$1(auth, request) {
        return sendOobCode(auth, request);
    }
    async function verifyAndChangeEmail(auth, request) {
        return sendOobCode(auth, request);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    async function signInWithEmailLink$1(auth, request) {
        return _performSignInRequest(auth, "POST" /* POST */, "/v1/accounts:signInWithEmailLink" /* SIGN_IN_WITH_EMAIL_LINK */, _addTidIfNecessary(auth, request));
    }
    async function signInWithEmailLinkForLinking(auth, request) {
        return _performSignInRequest(auth, "POST" /* POST */, "/v1/accounts:signInWithEmailLink" /* SIGN_IN_WITH_EMAIL_LINK */, _addTidIfNecessary(auth, request));
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Interface that represents the credentials returned by {@link EmailAuthProvider} for
     * {@link ProviderId}.PASSWORD
     *
     * @remarks
     * Covers both {@link SignInMethod}.EMAIL_PASSWORD and
     * {@link SignInMethod}.EMAIL_LINK.
     *
     * @public
     */
    class EmailAuthCredential extends AuthCredential {
        /** @internal */
        constructor(
        /** @internal */
        _email, 
        /** @internal */
        _password, signInMethod, 
        /** @internal */
        _tenantId = null) {
            super("password" /* PASSWORD */, signInMethod);
            this._email = _email;
            this._password = _password;
            this._tenantId = _tenantId;
        }
        /** @internal */
        static _fromEmailAndPassword(email, password) {
            return new EmailAuthCredential(email, password, "password" /* EMAIL_PASSWORD */);
        }
        /** @internal */
        static _fromEmailAndCode(email, oobCode, tenantId = null) {
            return new EmailAuthCredential(email, oobCode, "emailLink" /* EMAIL_LINK */, tenantId);
        }
        /** {@inheritdoc AuthCredential.toJSON} */
        toJSON() {
            return {
                email: this._email,
                password: this._password,
                signInMethod: this.signInMethod,
                tenantId: this._tenantId
            };
        }
        /**
         * Static method to deserialize a JSON representation of an object into an {@link  AuthCredential}.
         *
         * @param json - Either `object` or the stringified representation of the object. When string is
         * provided, `JSON.parse` would be called first.
         *
         * @returns If the JSON input does not represent an {@link AuthCredential}, null is returned.
         */
        static fromJSON(json) {
            const obj = typeof json === 'string' ? JSON.parse(json) : json;
            if ((obj === null || obj === void 0 ? void 0 : obj.email) && (obj === null || obj === void 0 ? void 0 : obj.password)) {
                if (obj.signInMethod === "password" /* EMAIL_PASSWORD */) {
                    return this._fromEmailAndPassword(obj.email, obj.password);
                }
                else if (obj.signInMethod === "emailLink" /* EMAIL_LINK */) {
                    return this._fromEmailAndCode(obj.email, obj.password, obj.tenantId);
                }
            }
            return null;
        }
        /** @internal */
        async _getIdTokenResponse(auth) {
            switch (this.signInMethod) {
                case "password" /* EMAIL_PASSWORD */:
                    return signInWithPassword(auth, {
                        returnSecureToken: true,
                        email: this._email,
                        password: this._password
                    });
                case "emailLink" /* EMAIL_LINK */:
                    return signInWithEmailLink$1(auth, {
                        email: this._email,
                        oobCode: this._password
                    });
                default:
                    _fail(auth, "internal-error" /* INTERNAL_ERROR */);
            }
        }
        /** @internal */
        async _linkToIdToken(auth, idToken) {
            switch (this.signInMethod) {
                case "password" /* EMAIL_PASSWORD */:
                    return updateEmailPassword(auth, {
                        idToken,
                        returnSecureToken: true,
                        email: this._email,
                        password: this._password
                    });
                case "emailLink" /* EMAIL_LINK */:
                    return signInWithEmailLinkForLinking(auth, {
                        idToken,
                        email: this._email,
                        oobCode: this._password
                    });
                default:
                    _fail(auth, "internal-error" /* INTERNAL_ERROR */);
            }
        }
        /** @internal */
        _getReauthenticationResolver(auth) {
            return this._getIdTokenResponse(auth);
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    async function signInWithIdp(auth, request) {
        return _performSignInRequest(auth, "POST" /* POST */, "/v1/accounts:signInWithIdp" /* SIGN_IN_WITH_IDP */, _addTidIfNecessary(auth, request));
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const IDP_REQUEST_URI$1 = 'http://localhost';
    /**
     * Represents the OAuth credentials returned by an {@link OAuthProvider}.
     *
     * @remarks
     * Implementations specify the details about each auth provider's credential requirements.
     *
     * @public
     */
    class OAuthCredential extends AuthCredential {
        constructor() {
            super(...arguments);
            this.pendingToken = null;
        }
        /** @internal */
        static _fromParams(params) {
            const cred = new OAuthCredential(params.providerId, params.signInMethod);
            if (params.idToken || params.accessToken) {
                // OAuth 2 and either ID token or access token.
                if (params.idToken) {
                    cred.idToken = params.idToken;
                }
                if (params.accessToken) {
                    cred.accessToken = params.accessToken;
                }
                // Add nonce if available and no pendingToken is present.
                if (params.nonce && !params.pendingToken) {
                    cred.nonce = params.nonce;
                }
                if (params.pendingToken) {
                    cred.pendingToken = params.pendingToken;
                }
            }
            else if (params.oauthToken && params.oauthTokenSecret) {
                // OAuth 1 and OAuth token with token secret
                cred.accessToken = params.oauthToken;
                cred.secret = params.oauthTokenSecret;
            }
            else {
                _fail("argument-error" /* ARGUMENT_ERROR */);
            }
            return cred;
        }
        /** {@inheritdoc AuthCredential.toJSON}  */
        toJSON() {
            return {
                idToken: this.idToken,
                accessToken: this.accessToken,
                secret: this.secret,
                nonce: this.nonce,
                pendingToken: this.pendingToken,
                providerId: this.providerId,
                signInMethod: this.signInMethod
            };
        }
        /**
         * Static method to deserialize a JSON representation of an object into an
         * {@link  AuthCredential}.
         *
         * @param json - Input can be either Object or the stringified representation of the object.
         * When string is provided, JSON.parse would be called first.
         *
         * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.
         */
        static fromJSON(json) {
            const obj = typeof json === 'string' ? JSON.parse(json) : json;
            const { providerId, signInMethod } = obj, rest = __rest(obj, ["providerId", "signInMethod"]);
            if (!providerId || !signInMethod) {
                return null;
            }
            const cred = new OAuthCredential(providerId, signInMethod);
            cred.idToken = rest.idToken || undefined;
            cred.accessToken = rest.accessToken || undefined;
            cred.secret = rest.secret;
            cred.nonce = rest.nonce;
            cred.pendingToken = rest.pendingToken || null;
            return cred;
        }
        /** @internal */
        _getIdTokenResponse(auth) {
            const request = this.buildRequest();
            return signInWithIdp(auth, request);
        }
        /** @internal */
        _linkToIdToken(auth, idToken) {
            const request = this.buildRequest();
            request.idToken = idToken;
            return signInWithIdp(auth, request);
        }
        /** @internal */
        _getReauthenticationResolver(auth) {
            const request = this.buildRequest();
            request.autoCreate = false;
            return signInWithIdp(auth, request);
        }
        buildRequest() {
            const request = {
                requestUri: IDP_REQUEST_URI$1,
                returnSecureToken: true
            };
            if (this.pendingToken) {
                request.pendingToken = this.pendingToken;
            }
            else {
                const postBody = {};
                if (this.idToken) {
                    postBody['id_token'] = this.idToken;
                }
                if (this.accessToken) {
                    postBody['access_token'] = this.accessToken;
                }
                if (this.secret) {
                    postBody['oauth_token_secret'] = this.secret;
                }
                postBody['providerId'] = this.providerId;
                if (this.nonce && !this.pendingToken) {
                    postBody['nonce'] = this.nonce;
                }
                request.postBody = querystring(postBody);
            }
            return request;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    async function sendPhoneVerificationCode(auth, request) {
        return _performApiRequest(auth, "POST" /* POST */, "/v1/accounts:sendVerificationCode" /* SEND_VERIFICATION_CODE */, _addTidIfNecessary(auth, request));
    }
    async function signInWithPhoneNumber$1(auth, request) {
        return _performSignInRequest(auth, "POST" /* POST */, "/v1/accounts:signInWithPhoneNumber" /* SIGN_IN_WITH_PHONE_NUMBER */, _addTidIfNecessary(auth, request));
    }
    async function linkWithPhoneNumber$1(auth, request) {
        const response = await _performSignInRequest(auth, "POST" /* POST */, "/v1/accounts:signInWithPhoneNumber" /* SIGN_IN_WITH_PHONE_NUMBER */, _addTidIfNecessary(auth, request));
        if (response.temporaryProof) {
            throw _makeTaggedError(auth, "account-exists-with-different-credential" /* NEED_CONFIRMATION */, response);
        }
        return response;
    }
    const VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_ = {
        ["USER_NOT_FOUND" /* USER_NOT_FOUND */]: "user-not-found" /* USER_DELETED */
    };
    async function verifyPhoneNumberForExisting(auth, request) {
        const apiRequest = Object.assign(Object.assign({}, request), { operation: 'REAUTH' });
        return _performSignInRequest(auth, "POST" /* POST */, "/v1/accounts:signInWithPhoneNumber" /* SIGN_IN_WITH_PHONE_NUMBER */, _addTidIfNecessary(auth, apiRequest), VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Represents the credentials returned by {@link PhoneAuthProvider}.
     *
     * @public
     */
    class PhoneAuthCredential extends AuthCredential {
        constructor(params) {
            super("phone" /* PHONE */, "phone" /* PHONE */);
            this.params = params;
        }
        /** @internal */
        static _fromVerification(verificationId, verificationCode) {
            return new PhoneAuthCredential({ verificationId, verificationCode });
        }
        /** @internal */
        static _fromTokenResponse(phoneNumber, temporaryProof) {
            return new PhoneAuthCredential({ phoneNumber, temporaryProof });
        }
        /** @internal */
        _getIdTokenResponse(auth) {
            return signInWithPhoneNumber$1(auth, this._makeVerificationRequest());
        }
        /** @internal */
        _linkToIdToken(auth, idToken) {
            return linkWithPhoneNumber$1(auth, Object.assign({ idToken }, this._makeVerificationRequest()));
        }
        /** @internal */
        _getReauthenticationResolver(auth) {
            return verifyPhoneNumberForExisting(auth, this._makeVerificationRequest());
        }
        /** @internal */
        _makeVerificationRequest() {
            const { temporaryProof, phoneNumber, verificationId, verificationCode } = this.params;
            if (temporaryProof && phoneNumber) {
                return { temporaryProof, phoneNumber };
            }
            return {
                sessionInfo: verificationId,
                code: verificationCode
            };
        }
        /** {@inheritdoc AuthCredential.toJSON} */
        toJSON() {
            const obj = {
                providerId: this.providerId
            };
            if (this.params.phoneNumber) {
                obj.phoneNumber = this.params.phoneNumber;
            }
            if (this.params.temporaryProof) {
                obj.temporaryProof = this.params.temporaryProof;
            }
            if (this.params.verificationCode) {
                obj.verificationCode = this.params.verificationCode;
            }
            if (this.params.verificationId) {
                obj.verificationId = this.params.verificationId;
            }
            return obj;
        }
        /** Generates a phone credential based on a plain object or a JSON string. */
        static fromJSON(json) {
            if (typeof json === 'string') {
                json = JSON.parse(json);
            }
            const { verificationId, verificationCode, phoneNumber, temporaryProof } = json;
            if (!verificationCode &&
                !verificationId &&
                !phoneNumber &&
                !temporaryProof) {
                return null;
            }
            return new PhoneAuthCredential({
                verificationId,
                verificationCode,
                phoneNumber,
                temporaryProof
            });
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Maps the mode string in action code URL to Action Code Info operation.
     *
     * @param mode
     */
    function parseMode(mode) {
        switch (mode) {
            case 'recoverEmail':
                return "RECOVER_EMAIL" /* RECOVER_EMAIL */;
            case 'resetPassword':
                return "PASSWORD_RESET" /* PASSWORD_RESET */;
            case 'signIn':
                return "EMAIL_SIGNIN" /* EMAIL_SIGNIN */;
            case 'verifyEmail':
                return "VERIFY_EMAIL" /* VERIFY_EMAIL */;
            case 'verifyAndChangeEmail':
                return "VERIFY_AND_CHANGE_EMAIL" /* VERIFY_AND_CHANGE_EMAIL */;
            case 'revertSecondFactorAddition':
                return "REVERT_SECOND_FACTOR_ADDITION" /* REVERT_SECOND_FACTOR_ADDITION */;
            default:
                return null;
        }
    }
    /**
     * Helper to parse FDL links
     *
     * @param url
     */
    function parseDeepLink(url) {
        const link = querystringDecode(extractQuerystring(url))['link'];
        // Double link case (automatic redirect).
        const doubleDeepLink = link
            ? querystringDecode(extractQuerystring(link))['deep_link_id']
            : null;
        // iOS custom scheme links.
        const iOSDeepLink = querystringDecode(extractQuerystring(url))['deep_link_id'];
        const iOSDoubleDeepLink = iOSDeepLink
            ? querystringDecode(extractQuerystring(iOSDeepLink))['link']
            : null;
        return iOSDoubleDeepLink || iOSDeepLink || doubleDeepLink || link || url;
    }
    /**
     * A utility class to parse email action URLs such as password reset, email verification,
     * email link sign in, etc.
     *
     * @public
     */
    class ActionCodeURL {
        /**
         * @param actionLink - The link from which to extract the URL.
         * @returns The {@link ActionCodeURL} object, or null if the link is invalid.
         *
         * @internal
         */
        constructor(actionLink) {
            var _a, _b, _c, _d, _e, _f;
            const searchParams = querystringDecode(extractQuerystring(actionLink));
            const apiKey = (_a = searchParams["apiKey" /* API_KEY */]) !== null && _a !== void 0 ? _a : null;
            const code = (_b = searchParams["oobCode" /* CODE */]) !== null && _b !== void 0 ? _b : null;
            const operation = parseMode((_c = searchParams["mode" /* MODE */]) !== null && _c !== void 0 ? _c : null);
            // Validate API key, code and mode.
            _assert$4(apiKey && code && operation, "argument-error" /* ARGUMENT_ERROR */);
            this.apiKey = apiKey;
            this.operation = operation;
            this.code = code;
            this.continueUrl = (_d = searchParams["continueUrl" /* CONTINUE_URL */]) !== null && _d !== void 0 ? _d : null;
            this.languageCode = (_e = searchParams["languageCode" /* LANGUAGE_CODE */]) !== null && _e !== void 0 ? _e : null;
            this.tenantId = (_f = searchParams["tenantId" /* TENANT_ID */]) !== null && _f !== void 0 ? _f : null;
        }
        /**
         * Parses the email action link string and returns an {@link ActionCodeURL} if the link is valid,
         * otherwise returns null.
         *
         * @param link  - The email action link string.
         * @returns The {@link ActionCodeURL} object, or null if the link is invalid.
         *
         * @public
         */
        static parseLink(link) {
            const actionLink = parseDeepLink(link);
            try {
                return new ActionCodeURL(actionLink);
            }
            catch (_a) {
                return null;
            }
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Provider for generating {@link EmailAuthCredential}.
     *
     * @public
     */
    class EmailAuthProvider {
        constructor() {
            /**
             * Always set to {@link ProviderId}.PASSWORD, even for email link.
             */
            this.providerId = EmailAuthProvider.PROVIDER_ID;
        }
        /**
         * Initialize an {@link AuthCredential} using an email and password.
         *
         * @example
         * ```javascript
         * const authCredential = EmailAuthProvider.credential(email, password);
         * const userCredential = await signInWithCredential(auth, authCredential);
         * ```
         *
         * @example
         * ```javascript
         * const userCredential = await signInWithEmailAndPassword(auth, email, password);
         * ```
         *
         * @param email - Email address.
         * @param password - User account password.
         * @returns The auth provider credential.
         */
        static credential(email, password) {
            return EmailAuthCredential._fromEmailAndPassword(email, password);
        }
        /**
         * Initialize an {@link AuthCredential} using an email and an email link after a sign in with
         * email link operation.
         *
         * @example
         * ```javascript
         * const authCredential = EmailAuthProvider.credentialWithLink(auth, email, emailLink);
         * const userCredential = await signInWithCredential(auth, authCredential);
         * ```
         *
         * @example
         * ```javascript
         * await sendSignInLinkToEmail(auth, email);
         * // Obtain emailLink from user.
         * const userCredential = await signInWithEmailLink(auth, email, emailLink);
         * ```
         *
         * @param auth - The {@link Auth} instance used to verify the link.
         * @param email - Email address.
         * @param emailLink - Sign-in email link.
         * @returns - The auth provider credential.
         */
        static credentialWithLink(email, emailLink) {
            const actionCodeUrl = ActionCodeURL.parseLink(emailLink);
            _assert$4(actionCodeUrl, "argument-error" /* ARGUMENT_ERROR */);
            return EmailAuthCredential._fromEmailAndCode(email, actionCodeUrl.code, actionCodeUrl.tenantId);
        }
    }
    /**
     * Always set to {@link ProviderId}.PASSWORD, even for email link.
     */
    EmailAuthProvider.PROVIDER_ID = "password" /* PASSWORD */;
    /**
     * Always set to {@link SignInMethod}.EMAIL_PASSWORD.
     */
    EmailAuthProvider.EMAIL_PASSWORD_SIGN_IN_METHOD = "password" /* EMAIL_PASSWORD */;
    /**
     * Always set to {@link SignInMethod}.EMAIL_LINK.
     */
    EmailAuthProvider.EMAIL_LINK_SIGN_IN_METHOD = "emailLink" /* EMAIL_LINK */;

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * The base class for all Federated providers (OAuth (including OIDC), SAML).
     *
     * This class is not meant to be instantiated directly.
     *
     * @public
     */
    class FederatedAuthProvider {
        /**
         * Constructor for generic OAuth providers.
         *
         * @param providerId - Provider for which credentials should be generated.
         */
        constructor(providerId) {
            this.providerId = providerId;
            /** @internal */
            this.defaultLanguageCode = null;
            /** @internal */
            this.customParameters = {};
        }
        /**
         * Set the language gode.
         *
         * @param languageCode - language code
         */
        setDefaultLanguage(languageCode) {
            this.defaultLanguageCode = languageCode;
        }
        /**
         * Sets the OAuth custom parameters to pass in an OAuth request for popup and redirect sign-in
         * operations.
         *
         * @remarks
         * For a detailed list, check the reserved required OAuth 2.0 parameters such as `client_id`,
         * `redirect_uri`, `scope`, `response_type`, and `state` are not allowed and will be ignored.
         *
         * @param customOAuthParameters - The custom OAuth parameters to pass in the OAuth request.
         */
        setCustomParameters(customOAuthParameters) {
            this.customParameters = customOAuthParameters;
            return this;
        }
        /**
         * Retrieve the current list of {@link CustomParameters}.
         */
        getCustomParameters() {
            return this.customParameters;
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Common code to all OAuth providers. This is separate from the
     * {@link OAuthProvider} so that child providers (like
     * {@link GoogleAuthProvider}) don't inherit the `credential` instance method.
     * Instead, they rely on a static `credential` method.
     */
    class BaseOAuthProvider extends FederatedAuthProvider {
        constructor() {
            super(...arguments);
            /** @internal */
            this.scopes = [];
        }
        /**
         * Add an OAuth scope to the credential.
         *
         * @param scope - Provider OAuth scope to add.
         */
        addScope(scope) {
            // If not already added, add scope to list.
            if (!this.scopes.includes(scope)) {
                this.scopes.push(scope);
            }
            return this;
        }
        /**
         * Retrieve the current list of OAuth scopes.
         */
        getScopes() {
            return [...this.scopes];
        }
    }
    /**
     * Provider for generating generic {@link OAuthCredential}.
     *
     * @example
     * ```javascript
     * // Sign in using a redirect.
     * const provider = new OAuthProvider('google.com');
     * // Start a sign in process for an unauthenticated user.
     * provider.addScope('profile');
     * provider.addScope('email');
     * await signInWithRedirect(auth, provider);
     * // This will trigger a full page redirect away from your app
     *
     * // After returning from the redirect when your app initializes you can obtain the result
     * const result = await getRedirectResult(auth);
     * if (result) {
     *   // This is the signed-in user
     *   const user = result.user;
     *   // This gives you a OAuth Access Token for the provider.
     *   const credential = provider.credentialFromResult(auth, result);
     *   const token = credential.accessToken;
     * }
     * ```
     *
     * @example
     * ```javascript
     * // Sign in using a popup.
     * const provider = new OAuthProvider('google.com');
     * provider.addScope('profile');
     * provider.addScope('email');
     * const result = await signInWithPopup(auth, provider);
     *
     * // The signed-in user info.
     * const user = result.user;
     * // This gives you a OAuth Access Token for the provider.
     * const credential = provider.credentialFromResult(auth, result);
     * const token = credential.accessToken;
     * ```
     * @public
     */
    class OAuthProvider extends BaseOAuthProvider {
        /**
         * Creates an {@link OAuthCredential} from a JSON string or a plain object.
         * @param json - A plain object or a JSON string
         */
        static credentialFromJSON(json) {
            const obj = typeof json === 'string' ? JSON.parse(json) : json;
            _assert$4('providerId' in obj && 'signInMethod' in obj, "argument-error" /* ARGUMENT_ERROR */);
            return OAuthCredential._fromParams(obj);
        }
        /**
         * Creates a {@link OAuthCredential} from a generic OAuth provider's access token or ID token.
         *
         * @remarks
         * The raw nonce is required when an ID token with a nonce field is provided. The SHA-256 hash of
         * the raw nonce must match the nonce field in the ID token.
         *
         * @example
         * ```javascript
         * // `googleUser` from the onsuccess Google Sign In callback.
         * // Initialize a generate OAuth provider with a `google.com` providerId.
         * const provider = new OAuthProvider('google.com');
         * const credential = provider.credential({
         *   idToken: googleUser.getAuthResponse().id_token,
         * });
         * const result = await signInWithCredential(credential);
         * ```
         *
         * @param params - Either the options object containing the ID token, access token and raw nonce
         * or the ID token string.
         */
        credential(params) {
            return this._credential(Object.assign(Object.assign({}, params), { nonce: params.rawNonce }));
        }
        /** An internal credential method that accepts more permissive options */
        _credential(params) {
            _assert$4(params.idToken || params.accessToken, "argument-error" /* ARGUMENT_ERROR */);
            // For OAuthCredential, sign in method is same as providerId.
            return OAuthCredential._fromParams(Object.assign(Object.assign({}, params), { providerId: this.providerId, signInMethod: this.providerId }));
        }
        /**
         * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
         *
         * @param userCredential - The user credential.
         */
        static credentialFromResult(userCredential) {
            return OAuthProvider.oauthCredentialFromTaggedObject(userCredential);
        }
        /**
         * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
         * thrown during a sign-in, link, or reauthenticate operation.
         *
         * @param userCredential - The user credential.
         */
        static credentialFromError(error) {
            return OAuthProvider.oauthCredentialFromTaggedObject((error.customData || {}));
        }
        static oauthCredentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
            if (!tokenResponse) {
                return null;
            }
            const { oauthIdToken, oauthAccessToken, oauthTokenSecret, pendingToken, nonce, providerId } = tokenResponse;
            if (!oauthAccessToken &&
                !oauthTokenSecret &&
                !oauthIdToken &&
                !pendingToken) {
                return null;
            }
            if (!providerId) {
                return null;
            }
            try {
                return new OAuthProvider(providerId)._credential({
                    idToken: oauthIdToken,
                    accessToken: oauthAccessToken,
                    nonce,
                    pendingToken
                });
            }
            catch (e) {
                return null;
            }
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.FACEBOOK.
     *
     * @example
     * ```javascript
     * // Sign in using a redirect.
     * const provider = new FacebookAuthProvider();
     * // Start a sign in process for an unauthenticated user.
     * provider.addScope('user_birthday');
     * await signInWithRedirect(auth, provider);
     * // This will trigger a full page redirect away from your app
     *
     * // After returning from the redirect when your app initializes you can obtain the result
     * const result = await getRedirectResult(auth);
     * if (result) {
     *   // This is the signed-in user
     *   const user = result.user;
     *   // This gives you a Facebook Access Token.
     *   const credential = FacebookAuthProvider.credentialFromResult(result);
     *   const token = credential.accessToken;
     * }
     * ```
     *
     * @example
     * ```javascript
     * // Sign in using a popup.
     * const provider = new FacebookAuthProvider();
     * provider.addScope('user_birthday');
     * const result = await signInWithPopup(auth, provider);
     *
     * // The signed-in user info.
     * const user = result.user;
     * // This gives you a Facebook Access Token.
     * const credential = FacebookAuthProvider.credentialFromResult(result);
     * const token = credential.accessToken;
     * ```
     *
     * @public
     */
    class FacebookAuthProvider extends BaseOAuthProvider {
        constructor() {
            super("facebook.com" /* FACEBOOK */);
        }
        /**
         * Creates a credential for Facebook.
         *
         * @example
         * ```javascript
         * // `event` from the Facebook auth.authResponseChange callback.
         * const credential = FacebookAuthProvider.credential(event.authResponse.accessToken);
         * const result = await signInWithCredential(credential);
         * ```
         *
         * @param accessToken - Facebook access token.
         */
        static credential(accessToken) {
            return OAuthCredential._fromParams({
                providerId: FacebookAuthProvider.PROVIDER_ID,
                signInMethod: FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD,
                accessToken
            });
        }
        /**
         * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
         *
         * @param userCredential - The user credential.
         */
        static credentialFromResult(userCredential) {
            return FacebookAuthProvider.credentialFromTaggedObject(userCredential);
        }
        /**
         * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
         * thrown during a sign-in, link, or reauthenticate operation.
         *
         * @param userCredential - The user credential.
         */
        static credentialFromError(error) {
            return FacebookAuthProvider.credentialFromTaggedObject((error.customData || {}));
        }
        static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
            if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {
                return null;
            }
            if (!tokenResponse.oauthAccessToken) {
                return null;
            }
            try {
                return FacebookAuthProvider.credential(tokenResponse.oauthAccessToken);
            }
            catch (_a) {
                return null;
            }
        }
    }
    /** Always set to {@link SignInMethod}.FACEBOOK. */
    FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD = "facebook.com" /* FACEBOOK */;
    /** Always set to {@link ProviderId}.FACEBOOK. */
    FacebookAuthProvider.PROVIDER_ID = "facebook.com" /* FACEBOOK */;

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Provider for generating an an {@link OAuthCredential} for {@link ProviderId}.GOOGLE.
     *
     * @example
     * ```javascript
     * // Sign in using a redirect.
     * const provider = new GoogleAuthProvider();
     * // Start a sign in process for an unauthenticated user.
     * provider.addScope('profile');
     * provider.addScope('email');
     * await signInWithRedirect(auth, provider);
     * // This will trigger a full page redirect away from your app
     *
     * // After returning from the redirect when your app initializes you can obtain the result
     * const result = await getRedirectResult(auth);
     * if (result) {
     *   // This is the signed-in user
     *   const user = result.user;
     *   // This gives you a Google Access Token.
     *   const credential = GoogleAuthProvider.credentialFromResult(result);
     *   const token = credential.accessToken;
     * }
     * ```
     *
     * @example
     * ```javascript
     * // Sign in using a popup.
     * const provider = new GoogleAuthProvider();
     * provider.addScope('profile');
     * provider.addScope('email');
     * const result = await signInWithPopup(auth, provider);
     *
     * // The signed-in user info.
     * const user = result.user;
     * // This gives you a Google Access Token.
     * const credential = GoogleAuthProvider.credentialFromResult(result);
     * const token = credential.accessToken;
     * ```
     *
     * @public
     */
    class GoogleAuthProvider extends BaseOAuthProvider {
        constructor() {
            super("google.com" /* GOOGLE */);
            this.addScope('profile');
        }
        /**
         * Creates a credential for Google. At least one of ID token and access token is required.
         *
         * @example
         * ```javascript
         * // \`googleUser\` from the onsuccess Google Sign In callback.
         * const credential = GoogleAuthProvider.credential(googleUser.getAuthResponse().id_token);
         * const result = await signInWithCredential(credential);
         * ```
         *
         * @param idToken - Google ID token.
         * @param accessToken - Google access token.
         */
        static credential(idToken, accessToken) {
            return OAuthCredential._fromParams({
                providerId: GoogleAuthProvider.PROVIDER_ID,
                signInMethod: GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD,
                idToken,
                accessToken
            });
        }
        /**
         * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
         *
         * @param userCredential - The user credential.
         */
        static credentialFromResult(userCredential) {
            return GoogleAuthProvider.credentialFromTaggedObject(userCredential);
        }
        /**
         * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
         * thrown during a sign-in, link, or reauthenticate operation.
         *
         * @param userCredential - The user credential.
         */
        static credentialFromError(error) {
            return GoogleAuthProvider.credentialFromTaggedObject((error.customData || {}));
        }
        static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
            if (!tokenResponse) {
                return null;
            }
            const { oauthIdToken, oauthAccessToken } = tokenResponse;
            if (!oauthIdToken && !oauthAccessToken) {
                // This could be an oauth 1 credential or a phone credential
                return null;
            }
            try {
                return GoogleAuthProvider.credential(oauthIdToken, oauthAccessToken);
            }
            catch (_a) {
                return null;
            }
        }
    }
    /** Always set to {@link SignInMethod}.GOOGLE. */
    GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD = "google.com" /* GOOGLE */;
    /** Always set to {@link ProviderId}.GOOGLE. */
    GoogleAuthProvider.PROVIDER_ID = "google.com" /* GOOGLE */;

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.GITHUB.
     *
     * @remarks
     * GitHub requires an OAuth 2.0 redirect, so you can either handle the redirect directly, or use
     * the {@link signInWithPopup} handler:
     *
     * @example
     * ```javascript
     * // Sign in using a redirect.
     * const provider = new GithubAuthProvider();
     * // Start a sign in process for an unauthenticated user.
     * provider.addScope('repo');
     * await signInWithRedirect(auth, provider);
     * // This will trigger a full page redirect away from your app
     *
     * // After returning from the redirect when your app initializes you can obtain the result
     * const result = await getRedirectResult(auth);
     * if (result) {
     *   // This is the signed-in user
     *   const user = result.user;
     *   // This gives you a Github Access Token.
     *   const credential = GithubAuthProvider.credentialFromResult(result);
     *   const token = credential.accessToken;
     * }
     * ```
     *
     * @example
     * ```javascript
     * // Sign in using a popup.
     * const provider = new GithubAuthProvider();
     * provider.addScope('repo');
     * const result = await signInWithPopup(auth, provider);
     *
     * // The signed-in user info.
     * const user = result.user;
     * // This gives you a Github Access Token.
     * const credential = GithubAuthProvider.credentialFromResult(result);
     * const token = credential.accessToken;
     * ```
     * @public
     */
    class GithubAuthProvider extends BaseOAuthProvider {
        constructor() {
            super("github.com" /* GITHUB */);
        }
        /**
         * Creates a credential for Github.
         *
         * @param accessToken - Github access token.
         */
        static credential(accessToken) {
            return OAuthCredential._fromParams({
                providerId: GithubAuthProvider.PROVIDER_ID,
                signInMethod: GithubAuthProvider.GITHUB_SIGN_IN_METHOD,
                accessToken
            });
        }
        /**
         * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
         *
         * @param userCredential - The user credential.
         */
        static credentialFromResult(userCredential) {
            return GithubAuthProvider.credentialFromTaggedObject(userCredential);
        }
        /**
         * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
         * thrown during a sign-in, link, or reauthenticate operation.
         *
         * @param userCredential - The user credential.
         */
        static credentialFromError(error) {
            return GithubAuthProvider.credentialFromTaggedObject((error.customData || {}));
        }
        static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
            if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {
                return null;
            }
            if (!tokenResponse.oauthAccessToken) {
                return null;
            }
            try {
                return GithubAuthProvider.credential(tokenResponse.oauthAccessToken);
            }
            catch (_a) {
                return null;
            }
        }
    }
    /** Always set to {@link SignInMethod}.GITHUB. */
    GithubAuthProvider.GITHUB_SIGN_IN_METHOD = "github.com" /* GITHUB */;
    /** Always set to {@link ProviderId}.GITHUB. */
    GithubAuthProvider.PROVIDER_ID = "github.com" /* GITHUB */;

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const IDP_REQUEST_URI = 'http://localhost';
    /**
     * @public
     */
    class SAMLAuthCredential extends AuthCredential {
        /** @internal */
        constructor(providerId, pendingToken) {
            super(providerId, providerId);
            this.pendingToken = pendingToken;
        }
        /** @internal */
        _getIdTokenResponse(auth) {
            const request = this.buildRequest();
            return signInWithIdp(auth, request);
        }
        /** @internal */
        _linkToIdToken(auth, idToken) {
            const request = this.buildRequest();
            request.idToken = idToken;
            return signInWithIdp(auth, request);
        }
        /** @internal */
        _getReauthenticationResolver(auth) {
            const request = this.buildRequest();
            request.autoCreate = false;
            return signInWithIdp(auth, request);
        }
        /** {@inheritdoc AuthCredential.toJSON}  */
        toJSON() {
            return {
                signInMethod: this.signInMethod,
                providerId: this.providerId,
                pendingToken: this.pendingToken
            };
        }
        /**
         * Static method to deserialize a JSON representation of an object into an
         * {@link  AuthCredential}.
         *
         * @param json - Input can be either Object or the stringified representation of the object.
         * When string is provided, JSON.parse would be called first.
         *
         * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.
         */
        static fromJSON(json) {
            const obj = typeof json === 'string' ? JSON.parse(json) : json;
            const { providerId, signInMethod, pendingToken } = obj;
            if (!providerId ||
                !signInMethod ||
                !pendingToken ||
                providerId !== signInMethod) {
                return null;
            }
            return new SAMLAuthCredential(providerId, pendingToken);
        }
        /**
         * Helper static method to avoid exposing the constructor to end users.
         *
         * @internal
         */
        static _create(providerId, pendingToken) {
            return new SAMLAuthCredential(providerId, pendingToken);
        }
        buildRequest() {
            return {
                requestUri: IDP_REQUEST_URI,
                returnSecureToken: true,
                pendingToken: this.pendingToken
            };
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const SAML_PROVIDER_PREFIX = 'saml.';
    /**
     * An {@link AuthProvider} for SAML.
     *
     * @public
     */
    class SAMLAuthProvider extends FederatedAuthProvider {
        /**
         * Constructor. The providerId must start with "saml."
         * @param providerId - SAML provider ID.
         */
        constructor(providerId) {
            _assert$4(providerId.startsWith(SAML_PROVIDER_PREFIX), "argument-error" /* ARGUMENT_ERROR */);
            super(providerId);
        }
        /**
         * Generates an {@link AuthCredential} from a {@link UserCredential} after a
         * successful SAML flow completes.
         *
         * @remarks
         *
         * For example, to get an {@link AuthCredential}, you could write the
         * following code:
         *
         * ```js
         * const userCredential = await signInWithPopup(auth, samlProvider);
         * const credential = SAMLAuthProvider.credentialFromResult(userCredential);
         * ```
         *
         * @param userCredential - The user credential.
         */
        static credentialFromResult(userCredential) {
            return SAMLAuthProvider.samlCredentialFromTaggedObject(userCredential);
        }
        /**
         * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
         * thrown during a sign-in, link, or reauthenticate operation.
         *
         * @param userCredential - The user credential.
         */
        static credentialFromError(error) {
            return SAMLAuthProvider.samlCredentialFromTaggedObject((error.customData || {}));
        }
        /**
         * Creates an {@link AuthCredential} from a JSON string or a plain object.
         * @param json - A plain object or a JSON string
         */
        static credentialFromJSON(json) {
            const credential = SAMLAuthCredential.fromJSON(json);
            _assert$4(credential, "argument-error" /* ARGUMENT_ERROR */);
            return credential;
        }
        static samlCredentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
            if (!tokenResponse) {
                return null;
            }
            const { pendingToken, providerId } = tokenResponse;
            if (!pendingToken || !providerId) {
                return null;
            }
            try {
                return SAMLAuthCredential._create(providerId, pendingToken);
            }
            catch (e) {
                return null;
            }
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.TWITTER.
     *
     * @example
     * ```javascript
     * // Sign in using a redirect.
     * const provider = new TwitterAuthProvider();
     * // Start a sign in process for an unauthenticated user.
     * await signInWithRedirect(auth, provider);
     * // This will trigger a full page redirect away from your app
     *
     * // After returning from the redirect when your app initializes you can obtain the result
     * const result = await getRedirectResult(auth);
     * if (result) {
     *   // This is the signed-in user
     *   const user = result.user;
     *   // This gives you a Twitter Access Token and Secret.
     *   const credential = TwitterAuthProvider.credentialFromResult(result);
     *   const token = credential.accessToken;
     *   const secret = credential.secret;
     * }
     * ```
     *
     * @example
     * ```javascript
     * // Sign in using a popup.
     * const provider = new TwitterAuthProvider();
     * const result = await signInWithPopup(auth, provider);
     *
     * // The signed-in user info.
     * const user = result.user;
     * // This gives you a Twitter Access Token and Secret.
     * const credential = TwitterAuthProvider.credentialFromResult(result);
     * const token = credential.accessToken;
     * const secret = credential.secret;
     * ```
     *
     * @public
     */
    class TwitterAuthProvider extends BaseOAuthProvider {
        constructor() {
            super("twitter.com" /* TWITTER */);
        }
        /**
         * Creates a credential for Twitter.
         *
         * @param token - Twitter access token.
         * @param secret - Twitter secret.
         */
        static credential(token, secret) {
            return OAuthCredential._fromParams({
                providerId: TwitterAuthProvider.PROVIDER_ID,
                signInMethod: TwitterAuthProvider.TWITTER_SIGN_IN_METHOD,
                oauthToken: token,
                oauthTokenSecret: secret
            });
        }
        /**
         * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
         *
         * @param userCredential - The user credential.
         */
        static credentialFromResult(userCredential) {
            return TwitterAuthProvider.credentialFromTaggedObject(userCredential);
        }
        /**
         * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
         * thrown during a sign-in, link, or reauthenticate operation.
         *
         * @param userCredential - The user credential.
         */
        static credentialFromError(error) {
            return TwitterAuthProvider.credentialFromTaggedObject((error.customData || {}));
        }
        static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
            if (!tokenResponse) {
                return null;
            }
            const { oauthAccessToken, oauthTokenSecret } = tokenResponse;
            if (!oauthAccessToken || !oauthTokenSecret) {
                return null;
            }
            try {
                return TwitterAuthProvider.credential(oauthAccessToken, oauthTokenSecret);
            }
            catch (_a) {
                return null;
            }
        }
    }
    /** Always set to {@link SignInMethod}.TWITTER. */
    TwitterAuthProvider.TWITTER_SIGN_IN_METHOD = "twitter.com" /* TWITTER */;
    /** Always set to {@link ProviderId}.TWITTER. */
    TwitterAuthProvider.PROVIDER_ID = "twitter.com" /* TWITTER */;

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    async function signUp(auth, request) {
        return _performSignInRequest(auth, "POST" /* POST */, "/v1/accounts:signUp" /* SIGN_UP */, _addTidIfNecessary(auth, request));
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class UserCredentialImpl {
        constructor(params) {
            this.user = params.user;
            this.providerId = params.providerId;
            this._tokenResponse = params._tokenResponse;
            this.operationType = params.operationType;
        }
        static async _fromIdTokenResponse(auth, operationType, idTokenResponse, isAnonymous = false) {
            const user = await UserImpl._fromIdTokenResponse(auth, idTokenResponse, isAnonymous);
            const providerId = providerIdForResponse(idTokenResponse);
            const userCred = new UserCredentialImpl({
                user,
                providerId,
                _tokenResponse: idTokenResponse,
                operationType
            });
            return userCred;
        }
        static async _forOperation(user, operationType, response) {
            await user._updateTokensIfNecessary(response, /* reload */ true);
            const providerId = providerIdForResponse(response);
            return new UserCredentialImpl({
                user,
                providerId,
                _tokenResponse: response,
                operationType
            });
        }
    }
    function providerIdForResponse(response) {
        if (response.providerId) {
            return response.providerId;
        }
        if ('phoneNumber' in response) {
            return "phone" /* PHONE */;
        }
        return null;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Asynchronously signs in as an anonymous user.
     *
     * @remarks
     * If there is already an anonymous user signed in, that user will be returned; otherwise, a
     * new anonymous user identity will be created and returned.
     *
     * @param auth - The {@link Auth} instance.
     *
     * @public
     */
    async function signInAnonymously(auth) {
        var _a;
        const authInternal = _castAuth(auth);
        await authInternal._initializationPromise;
        if ((_a = authInternal.currentUser) === null || _a === void 0 ? void 0 : _a.isAnonymous) {
            // If an anonymous user is already signed in, no need to sign them in again.
            return new UserCredentialImpl({
                user: authInternal.currentUser,
                providerId: null,
                operationType: "signIn" /* SIGN_IN */
            });
        }
        const response = await signUp(authInternal, {
            returnSecureToken: true
        });
        const userCredential = await UserCredentialImpl._fromIdTokenResponse(authInternal, "signIn" /* SIGN_IN */, response, true);
        await authInternal._updateCurrentUser(userCredential.user);
        return userCredential;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class MultiFactorError extends FirebaseError {
        constructor(auth, error, operationType, user) {
            var _a;
            super(error.code, error.message);
            this.operationType = operationType;
            this.user = user;
            // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
            Object.setPrototypeOf(this, MultiFactorError.prototype);
            this.customData = {
                appName: auth.name,
                tenantId: (_a = auth.tenantId) !== null && _a !== void 0 ? _a : undefined,
                _serverResponse: error.customData._serverResponse,
                operationType,
            };
        }
        static _fromErrorAndOperation(auth, error, operationType, user) {
            return new MultiFactorError(auth, error, operationType, user);
        }
    }
    function _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user) {
        const idTokenProvider = operationType === "reauthenticate" /* REAUTHENTICATE */
            ? credential._getReauthenticationResolver(auth)
            : credential._getIdTokenResponse(auth);
        return idTokenProvider.catch(error => {
            if (error.code === `auth/${"multi-factor-auth-required" /* MFA_REQUIRED */}`) {
                throw MultiFactorError._fromErrorAndOperation(auth, error, operationType, user);
            }
            throw error;
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Takes a set of UserInfo provider data and converts it to a set of names
     */
    function providerDataAsNames(providerData) {
        return new Set(providerData
            .map(({ providerId }) => providerId)
            .filter(pid => !!pid));
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Unlinks a provider from a user account.
     *
     * @param user - The user.
     * @param providerId - The provider to unlink.
     *
     * @public
     */
    async function unlink(user, providerId) {
        const userInternal = getModularInstance(user);
        await _assertLinkedStatus(true, userInternal, providerId);
        const { providerUserInfo } = await deleteLinkedAccounts(userInternal.auth, {
            idToken: await userInternal.getIdToken(),
            deleteProvider: [providerId]
        });
        const providersLeft = providerDataAsNames(providerUserInfo || []);
        userInternal.providerData = userInternal.providerData.filter(pd => providersLeft.has(pd.providerId));
        if (!providersLeft.has("phone" /* PHONE */)) {
            userInternal.phoneNumber = null;
        }
        await userInternal.auth._persistUserIfCurrent(userInternal);
        return userInternal;
    }
    async function _link$1(user, credential, bypassAuthState = false) {
        const response = await _logoutIfInvalidated(user, credential._linkToIdToken(user.auth, await user.getIdToken()), bypassAuthState);
        return UserCredentialImpl._forOperation(user, "link" /* LINK */, response);
    }
    async function _assertLinkedStatus(expected, user, provider) {
        await _reloadWithoutSaving(user);
        const providerIds = providerDataAsNames(user.providerData);
        const code = expected === false
            ? "provider-already-linked" /* PROVIDER_ALREADY_LINKED */
            : "no-such-provider" /* NO_SUCH_PROVIDER */;
        _assert$4(providerIds.has(provider) === expected, user.auth, code);
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    async function _reauthenticate(user, credential, bypassAuthState = false) {
        var _a;
        const { auth } = user;
        const operationType = "reauthenticate" /* REAUTHENTICATE */;
        try {
            const response = await _logoutIfInvalidated(user, _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user), bypassAuthState);
            _assert$4(response.idToken, auth, "internal-error" /* INTERNAL_ERROR */);
            const parsed = _parseToken(response.idToken);
            _assert$4(parsed, auth, "internal-error" /* INTERNAL_ERROR */);
            const { sub: localId } = parsed;
            _assert$4(user.uid === localId, auth, "user-mismatch" /* USER_MISMATCH */);
            return UserCredentialImpl._forOperation(user, operationType, response);
        }
        catch (e) {
            // Convert user deleted error into user mismatch
            if (((_a = e) === null || _a === void 0 ? void 0 : _a.code) === `auth/${"user-not-found" /* USER_DELETED */}`) {
                _fail(auth, "user-mismatch" /* USER_MISMATCH */);
            }
            throw e;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    async function _signInWithCredential(auth, credential, bypassAuthState = false) {
        const operationType = "signIn" /* SIGN_IN */;
        const response = await _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential);
        const userCredential = await UserCredentialImpl._fromIdTokenResponse(auth, operationType, response);
        if (!bypassAuthState) {
            await auth._updateCurrentUser(userCredential.user);
        }
        return userCredential;
    }
    /**
     * Asynchronously signs in with the given credentials.
     *
     * @remarks
     * An {@link AuthProvider} can be used to generate the credential.
     *
     * @param auth - The {@link Auth} instance.
     * @param credential - The auth credential.
     *
     * @public
     */
    async function signInWithCredential(auth, credential) {
        return _signInWithCredential(_castAuth(auth), credential);
    }
    /**
     * Links the user account with the given credentials.
     *
     * @remarks
     * An {@link AuthProvider} can be used to generate the credential.
     *
     * @param user - The user.
     * @param credential - The auth credential.
     *
     * @public
     */
    async function linkWithCredential(user, credential) {
        const userInternal = getModularInstance(user);
        await _assertLinkedStatus(false, userInternal, credential.providerId);
        return _link$1(userInternal, credential);
    }
    /**
     * Re-authenticates a user using a fresh credential.
     *
     * @remarks
     * Use before operations such as {@link updatePassword} that require tokens from recent sign-in
     * attempts. This method can be used to recover from a `CREDENTIAL_TOO_OLD_LOGIN_AGAIN` error.
     *
     * @param user - The user.
     * @param credential - The auth credential.
     *
     * @public
     */
    async function reauthenticateWithCredential(user, credential) {
        return _reauthenticate(getModularInstance(user), credential);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    async function signInWithCustomToken$1(auth, request) {
        return _performSignInRequest(auth, "POST" /* POST */, "/v1/accounts:signInWithCustomToken" /* SIGN_IN_WITH_CUSTOM_TOKEN */, _addTidIfNecessary(auth, request));
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Asynchronously signs in using a custom token.
     *
     * @remarks
     * Custom tokens are used to integrate Firebase Auth with existing auth systems, and must
     * be generated by an auth backend using the
     * {@link https://firebase.google.com/docs/reference/admin/node/admin.auth.Auth#createcustomtoken | createCustomToken}
     * method in the {@link https://firebase.google.com/docs/auth/admin | Admin SDK} .
     *
     * Fails with an error if the token is invalid, expired, or not accepted by the Firebase Auth service.
     *
     * @param auth - The {@link Auth} instance.
     * @param customToken - The custom token to sign in with.
     *
     * @public
     */
    async function signInWithCustomToken(auth, customToken) {
        const authInternal = _castAuth(auth);
        const response = await signInWithCustomToken$1(authInternal, {
            token: customToken,
            returnSecureToken: true
        });
        const cred = await UserCredentialImpl._fromIdTokenResponse(authInternal, "signIn" /* SIGN_IN */, response);
        await authInternal._updateCurrentUser(cred.user);
        return cred;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class MultiFactorInfoImpl {
        constructor(factorId, response) {
            this.factorId = factorId;
            this.uid = response.mfaEnrollmentId;
            this.enrollmentTime = new Date(response.enrolledAt).toUTCString();
            this.displayName = response.displayName;
        }
        static _fromServerResponse(auth, enrollment) {
            if ('phoneInfo' in enrollment) {
                return PhoneMultiFactorInfoImpl._fromServerResponse(auth, enrollment);
            }
            return _fail(auth, "internal-error" /* INTERNAL_ERROR */);
        }
    }
    class PhoneMultiFactorInfoImpl extends MultiFactorInfoImpl {
        constructor(response) {
            super("phone" /* PHONE */, response);
            this.phoneNumber = response.phoneInfo;
        }
        static _fromServerResponse(_auth, enrollment) {
            return new PhoneMultiFactorInfoImpl(enrollment);
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _setActionCodeSettingsOnRequest(auth, request, actionCodeSettings) {
        var _a;
        _assert$4(((_a = actionCodeSettings.url) === null || _a === void 0 ? void 0 : _a.length) > 0, auth, "invalid-continue-uri" /* INVALID_CONTINUE_URI */);
        _assert$4(typeof actionCodeSettings.dynamicLinkDomain === 'undefined' ||
            actionCodeSettings.dynamicLinkDomain.length > 0, auth, "invalid-dynamic-link-domain" /* INVALID_DYNAMIC_LINK_DOMAIN */);
        request.continueUrl = actionCodeSettings.url;
        request.dynamicLinkDomain = actionCodeSettings.dynamicLinkDomain;
        request.canHandleCodeInApp = actionCodeSettings.handleCodeInApp;
        if (actionCodeSettings.iOS) {
            _assert$4(actionCodeSettings.iOS.bundleId.length > 0, auth, "missing-ios-bundle-id" /* MISSING_IOS_BUNDLE_ID */);
            request.iOSBundleId = actionCodeSettings.iOS.bundleId;
        }
        if (actionCodeSettings.android) {
            _assert$4(actionCodeSettings.android.packageName.length > 0, auth, "missing-android-pkg-name" /* MISSING_ANDROID_PACKAGE_NAME */);
            request.androidInstallApp = actionCodeSettings.android.installApp;
            request.androidMinimumVersionCode =
                actionCodeSettings.android.minimumVersion;
            request.androidPackageName = actionCodeSettings.android.packageName;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Sends a password reset email to the given email address.
     *
     * @remarks
     * To complete the password reset, call {@link confirmPasswordReset} with the code supplied in
     * the email sent to the user, along with the new password specified by the user.
     *
     * @example
     * ```javascript
     * const actionCodeSettings = {
     *   url: 'https://www.example.com/?email=user@example.com',
     *   iOS: {
     *      bundleId: 'com.example.ios'
     *   },
     *   android: {
     *     packageName: 'com.example.android',
     *     installApp: true,
     *     minimumVersion: '12'
     *   },
     *   handleCodeInApp: true
     * };
     * await sendPasswordResetEmail(auth, 'user@example.com', actionCodeSettings);
     * // Obtain code from user.
     * await confirmPasswordReset('user@example.com', code);
     * ```
     *
     * @param auth - The {@link Auth} instance.
     * @param email - The user's email address.
     * @param actionCodeSettings - The {@link ActionCodeSettings}.
     *
     * @public
     */
    async function sendPasswordResetEmail(auth, email, actionCodeSettings) {
        const authModular = getModularInstance(auth);
        const request = {
            requestType: "PASSWORD_RESET" /* PASSWORD_RESET */,
            email
        };
        if (actionCodeSettings) {
            _setActionCodeSettingsOnRequest(authModular, request, actionCodeSettings);
        }
        await sendPasswordResetEmail$1(authModular, request);
    }
    /**
     * Completes the password reset process, given a confirmation code and new password.
     *
     * @param auth - The {@link Auth} instance.
     * @param oobCode - A confirmation code sent to the user.
     * @param newPassword - The new password.
     *
     * @public
     */
    async function confirmPasswordReset(auth, oobCode, newPassword) {
        await resetPassword(getModularInstance(auth), {
            oobCode,
            newPassword
        });
        // Do not return the email.
    }
    /**
     * Applies a verification code sent to the user by email or other out-of-band mechanism.
     *
     * @param auth - The {@link Auth} instance.
     * @param oobCode - A verification code sent to the user.
     *
     * @public
     */
    async function applyActionCode(auth, oobCode) {
        await applyActionCode$1(getModularInstance(auth), { oobCode });
    }
    /**
     * Checks a verification code sent to the user by email or other out-of-band mechanism.
     *
     * @returns metadata about the code.
     *
     * @param auth - The {@link Auth} instance.
     * @param oobCode - A verification code sent to the user.
     *
     * @public
     */
    async function checkActionCode(auth, oobCode) {
        const authModular = getModularInstance(auth);
        const response = await resetPassword(authModular, { oobCode });
        // Email could be empty only if the request type is EMAIL_SIGNIN or
        // VERIFY_AND_CHANGE_EMAIL.
        // New email should not be empty if the request type is
        // VERIFY_AND_CHANGE_EMAIL.
        // Multi-factor info could not be empty if the request type is
        // REVERT_SECOND_FACTOR_ADDITION.
        const operation = response.requestType;
        _assert$4(operation, authModular, "internal-error" /* INTERNAL_ERROR */);
        switch (operation) {
            case "EMAIL_SIGNIN" /* EMAIL_SIGNIN */:
                break;
            case "VERIFY_AND_CHANGE_EMAIL" /* VERIFY_AND_CHANGE_EMAIL */:
                _assert$4(response.newEmail, authModular, "internal-error" /* INTERNAL_ERROR */);
                break;
            case "REVERT_SECOND_FACTOR_ADDITION" /* REVERT_SECOND_FACTOR_ADDITION */:
                _assert$4(response.mfaInfo, authModular, "internal-error" /* INTERNAL_ERROR */);
            // fall through
            default:
                _assert$4(response.email, authModular, "internal-error" /* INTERNAL_ERROR */);
        }
        // The multi-factor info for revert second factor addition
        let multiFactorInfo = null;
        if (response.mfaInfo) {
            multiFactorInfo = MultiFactorInfoImpl._fromServerResponse(_castAuth(authModular), response.mfaInfo);
        }
        return {
            data: {
                email: (response.requestType === "VERIFY_AND_CHANGE_EMAIL" /* VERIFY_AND_CHANGE_EMAIL */
                    ? response.newEmail
                    : response.email) || null,
                previousEmail: (response.requestType === "VERIFY_AND_CHANGE_EMAIL" /* VERIFY_AND_CHANGE_EMAIL */
                    ? response.email
                    : response.newEmail) || null,
                multiFactorInfo
            },
            operation
        };
    }
    /**
     * Checks a password reset code sent to the user by email or other out-of-band mechanism.
     *
     * @returns the user's email address if valid.
     *
     * @param auth - The {@link Auth} instance.
     * @param code - A verification code sent to the user.
     *
     * @public
     */
    async function verifyPasswordResetCode(auth, code) {
        const { data } = await checkActionCode(getModularInstance(auth), code);
        // Email should always be present since a code was sent to it
        return data.email;
    }
    /**
     * Creates a new user account associated with the specified email address and password.
     *
     * @remarks
     * On successful creation of the user account, this user will also be signed in to your application.
     *
     * User account creation can fail if the account already exists or the password is invalid.
     *
     * Note: The email address acts as a unique identifier for the user and enables an email-based
     * password reset. This function will create a new user account and set the initial user password.
     *
     * @param auth - The {@link Auth} instance.
     * @param email - The user's email address.
     * @param password - The user's chosen password.
     *
     * @public
     */
    async function createUserWithEmailAndPassword(auth, email, password) {
        const authInternal = _castAuth(auth);
        const response = await signUp(authInternal, {
            returnSecureToken: true,
            email,
            password
        });
        const userCredential = await UserCredentialImpl._fromIdTokenResponse(authInternal, "signIn" /* SIGN_IN */, response);
        await authInternal._updateCurrentUser(userCredential.user);
        return userCredential;
    }
    /**
     * Asynchronously signs in using an email and password.
     *
     * @remarks
     * Fails with an error if the email address and password do not match.
     *
     * Note: The user's password is NOT the password used to access the user's email account. The
     * email address serves as a unique identifier for the user, and the password is used to access
     * the user's account in your Firebase project. See also: {@link createUserWithEmailAndPassword}.
     *
     * @param auth - The {@link Auth} instance.
     * @param email - The users email address.
     * @param password - The users password.
     *
     * @public
     */
    function signInWithEmailAndPassword(auth, email, password) {
        return signInWithCredential(getModularInstance(auth), EmailAuthProvider.credential(email, password));
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Sends a sign-in email link to the user with the specified email.
     *
     * @remarks
     * The sign-in operation has to always be completed in the app unlike other out of band email
     * actions (password reset and email verifications). This is because, at the end of the flow,
     * the user is expected to be signed in and their Auth state persisted within the app.
     *
     * To complete sign in with the email link, call {@link signInWithEmailLink} with the email
     * address and the email link supplied in the email sent to the user.
     *
     * @example
     * ```javascript
     * const actionCodeSettings = {
     *   url: 'https://www.example.com/?email=user@example.com',
     *   iOS: {
     *      bundleId: 'com.example.ios'
     *   },
     *   android: {
     *     packageName: 'com.example.android',
     *     installApp: true,
     *     minimumVersion: '12'
     *   },
     *   handleCodeInApp: true
     * };
     * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);
     * // Obtain emailLink from the user.
     * if(isSignInWithEmailLink(auth, emailLink)) {
     *   await signInWithEmailLink(auth, 'user@example.com', emailLink);
     * }
     * ```
     *
     * @param authInternal - The {@link Auth} instance.
     * @param email - The user's email address.
     * @param actionCodeSettings - The {@link ActionCodeSettings}.
     *
     * @public
     */
    async function sendSignInLinkToEmail(auth, email, actionCodeSettings) {
        const authModular = getModularInstance(auth);
        const request = {
            requestType: "EMAIL_SIGNIN" /* EMAIL_SIGNIN */,
            email
        };
        _assert$4(actionCodeSettings.handleCodeInApp, authModular, "argument-error" /* ARGUMENT_ERROR */);
        if (actionCodeSettings) {
            _setActionCodeSettingsOnRequest(authModular, request, actionCodeSettings);
        }
        await sendSignInLinkToEmail$1(authModular, request);
    }
    /**
     * Checks if an incoming link is a sign-in with email link suitable for {@link signInWithEmailLink}.
     *
     * @param auth - The {@link Auth} instance.
     * @param emailLink - The link sent to the user's email address.
     *
     * @public
     */
    function isSignInWithEmailLink(auth, emailLink) {
        const actionCodeUrl = ActionCodeURL.parseLink(emailLink);
        return (actionCodeUrl === null || actionCodeUrl === void 0 ? void 0 : actionCodeUrl.operation) === "EMAIL_SIGNIN" /* EMAIL_SIGNIN */;
    }
    /**
     * Asynchronously signs in using an email and sign-in email link.
     *
     * @remarks
     * If no link is passed, the link is inferred from the current URL.
     *
     * Fails with an error if the email address is invalid or OTP in email link expires.
     *
     * Note: Confirm the link is a sign-in email link before calling this method firebase.auth.Auth.isSignInWithEmailLink.
     *
     * @example
     * ```javascript
     * const actionCodeSettings = {
     *   url: 'https://www.example.com/?email=user@example.com',
     *   iOS: {
     *      bundleId: 'com.example.ios'
     *   },
     *   android: {
     *     packageName: 'com.example.android',
     *     installApp: true,
     *     minimumVersion: '12'
     *   },
     *   handleCodeInApp: true
     * };
     * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);
     * // Obtain emailLink from the user.
     * if(isSignInWithEmailLink(auth, emailLink)) {
     *   await signInWithEmailLink(auth, 'user@example.com', emailLink);
     * }
     * ```
     *
     * @param auth - The {@link Auth} instance.
     * @param email - The user's email address.
     * @param emailLink - The link sent to the user's email address.
     *
     * @public
     */
    async function signInWithEmailLink(auth, email, emailLink) {
        const authModular = getModularInstance(auth);
        const credential = EmailAuthProvider.credentialWithLink(email, emailLink || _getCurrentUrl());
        // Check if the tenant ID in the email link matches the tenant ID on Auth
        // instance.
        _assert$4(credential._tenantId === (authModular.tenantId || null), authModular, "tenant-id-mismatch" /* TENANT_ID_MISMATCH */);
        return signInWithCredential(authModular, credential);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    async function createAuthUri(auth, request) {
        return _performApiRequest(auth, "POST" /* POST */, "/v1/accounts:createAuthUri" /* CREATE_AUTH_URI */, _addTidIfNecessary(auth, request));
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Gets the list of possible sign in methods for the given email address.
     *
     * @remarks
     * This is useful to differentiate methods of sign-in for the same provider, eg.
     * {@link EmailAuthProvider} which has 2 methods of sign-in,
     * {@link SignInMethod}.EMAIL_PASSWORD and
     * {@link SignInMethod}.EMAIL_LINK.
     *
     * @param auth - The {@link Auth} instance.
     * @param email - The user's email address.
     *
     * @public
     */
    async function fetchSignInMethodsForEmail(auth, email) {
        // createAuthUri returns an error if continue URI is not http or https.
        // For environments like Cordova, Chrome extensions, native frameworks, file
        // systems, etc, use http://localhost as continue URL.
        const continueUri = _isHttpOrHttps$1() ? _getCurrentUrl() : 'http://localhost';
        const request = {
            identifier: email,
            continueUri
        };
        const { signinMethods } = await createAuthUri(getModularInstance(auth), request);
        return signinMethods || [];
    }
    /**
     * Sends a verification email to a user.
     *
     * @remarks
     * The verification process is completed by calling {@link applyActionCode}.
     *
     * @example
     * ```javascript
     * const actionCodeSettings = {
     *   url: 'https://www.example.com/?email=user@example.com',
     *   iOS: {
     *      bundleId: 'com.example.ios'
     *   },
     *   android: {
     *     packageName: 'com.example.android',
     *     installApp: true,
     *     minimumVersion: '12'
     *   },
     *   handleCodeInApp: true
     * };
     * await sendEmailVerification(user, actionCodeSettings);
     * // Obtain code from the user.
     * await applyActionCode(auth, code);
     * ```
     *
     * @param user - The user.
     * @param actionCodeSettings - The {@link ActionCodeSettings}.
     *
     * @public
     */
    async function sendEmailVerification(user, actionCodeSettings) {
        const userInternal = getModularInstance(user);
        const idToken = await user.getIdToken();
        const request = {
            requestType: "VERIFY_EMAIL" /* VERIFY_EMAIL */,
            idToken
        };
        if (actionCodeSettings) {
            _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);
        }
        const { email } = await sendEmailVerification$1(userInternal.auth, request);
        if (email !== user.email) {
            await user.reload();
        }
    }
    /**
     * Sends a verification email to a new email address.
     *
     * @remarks
     * The user's email will be updated to the new one after being verified.
     *
     * If you have a custom email action handler, you can complete the verification process by calling
     * {@link applyActionCode}.
     *
     * @example
     * ```javascript
     * const actionCodeSettings = {
     *   url: 'https://www.example.com/?email=user@example.com',
     *   iOS: {
     *      bundleId: 'com.example.ios'
     *   },
     *   android: {
     *     packageName: 'com.example.android',
     *     installApp: true,
     *     minimumVersion: '12'
     *   },
     *   handleCodeInApp: true
     * };
     * await verifyBeforeUpdateEmail(user, 'newemail@example.com', actionCodeSettings);
     * // Obtain code from the user.
     * await applyActionCode(auth, code);
     * ```
     *
     * @param user - The user.
     * @param newEmail - The new email address to be verified before update.
     * @param actionCodeSettings - The {@link ActionCodeSettings}.
     *
     * @public
     */
    async function verifyBeforeUpdateEmail(user, newEmail, actionCodeSettings) {
        const userInternal = getModularInstance(user);
        const idToken = await user.getIdToken();
        const request = {
            requestType: "VERIFY_AND_CHANGE_EMAIL" /* VERIFY_AND_CHANGE_EMAIL */,
            idToken,
            newEmail
        };
        if (actionCodeSettings) {
            _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);
        }
        const { email } = await verifyAndChangeEmail(userInternal.auth, request);
        if (email !== user.email) {
            // If the local copy of the email on user is outdated, reload the
            // user.
            await user.reload();
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    async function updateProfile$1(auth, request) {
        return _performApiRequest(auth, "POST" /* POST */, "/v1/accounts:update" /* SET_ACCOUNT_INFO */, request);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Updates a user's profile data.
     *
     * @param user - The user.
     * @param profile - The profile's `displayName` and `photoURL` to update.
     *
     * @public
     */
    async function updateProfile(user, { displayName, photoURL: photoUrl }) {
        if (displayName === undefined && photoUrl === undefined) {
            return;
        }
        const userInternal = getModularInstance(user);
        const idToken = await userInternal.getIdToken();
        const profileRequest = {
            idToken,
            displayName,
            photoUrl,
            returnSecureToken: true
        };
        const response = await _logoutIfInvalidated(userInternal, updateProfile$1(userInternal.auth, profileRequest));
        userInternal.displayName = response.displayName || null;
        userInternal.photoURL = response.photoUrl || null;
        // Update the password provider as well
        const passwordProvider = userInternal.providerData.find(({ providerId }) => providerId === "password" /* PASSWORD */);
        if (passwordProvider) {
            passwordProvider.displayName = userInternal.displayName;
            passwordProvider.photoURL = userInternal.photoURL;
        }
        await userInternal._updateTokensIfNecessary(response);
    }
    /**
     * Updates the user's email address.
     *
     * @remarks
     * An email will be sent to the original email address (if it was set) that allows to revoke the
     * email address change, in order to protect them from account hijacking.
     *
     * Important: this is a security sensitive operation that requires the user to have recently signed
     * in. If this requirement isn't met, ask the user to authenticate again and then call
     * {@link reauthenticateWithCredential}.
     *
     * @param user - The user.
     * @param newEmail - The new email address.
     *
     * @public
     */
    function updateEmail(user, newEmail) {
        return updateEmailOrPassword(getModularInstance(user), newEmail, null);
    }
    /**
     * Updates the user's password.
     *
     * @remarks
     * Important: this is a security sensitive operation that requires the user to have recently signed
     * in. If this requirement isn't met, ask the user to authenticate again and then call
     * {@link reauthenticateWithCredential}.
     *
     * @param user - The user.
     * @param newPassword - The new password.
     *
     * @public
     */
    function updatePassword(user, newPassword) {
        return updateEmailOrPassword(getModularInstance(user), null, newPassword);
    }
    async function updateEmailOrPassword(user, email, password) {
        const { auth } = user;
        const idToken = await user.getIdToken();
        const request = {
            idToken,
            returnSecureToken: true
        };
        if (email) {
            request.email = email;
        }
        if (password) {
            request.password = password;
        }
        const response = await _logoutIfInvalidated(user, updateEmailPassword(auth, request));
        await user._updateTokensIfNecessary(response, /* reload */ true);
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Parse the `AdditionalUserInfo` from the ID token response.
     *
     */
    function _fromIdTokenResponse(idTokenResponse) {
        var _a, _b;
        if (!idTokenResponse) {
            return null;
        }
        const { providerId } = idTokenResponse;
        const profile = idTokenResponse.rawUserInfo
            ? JSON.parse(idTokenResponse.rawUserInfo)
            : {};
        const isNewUser = idTokenResponse.isNewUser ||
            idTokenResponse.kind === "identitytoolkit#SignupNewUserResponse" /* SignupNewUser */;
        if (!providerId && (idTokenResponse === null || idTokenResponse === void 0 ? void 0 : idTokenResponse.idToken)) {
            const signInProvider = (_b = (_a = _parseToken(idTokenResponse.idToken)) === null || _a === void 0 ? void 0 : _a.firebase) === null || _b === void 0 ? void 0 : _b['sign_in_provider'];
            if (signInProvider) {
                const filteredProviderId = signInProvider !== "anonymous" /* ANONYMOUS */ &&
                    signInProvider !== "custom" /* CUSTOM */
                    ? signInProvider
                    : null;
                // Uses generic class in accordance with the legacy SDK.
                return new GenericAdditionalUserInfo(isNewUser, filteredProviderId);
            }
        }
        if (!providerId) {
            return null;
        }
        switch (providerId) {
            case "facebook.com" /* FACEBOOK */:
                return new FacebookAdditionalUserInfo(isNewUser, profile);
            case "github.com" /* GITHUB */:
                return new GithubAdditionalUserInfo(isNewUser, profile);
            case "google.com" /* GOOGLE */:
                return new GoogleAdditionalUserInfo(isNewUser, profile);
            case "twitter.com" /* TWITTER */:
                return new TwitterAdditionalUserInfo(isNewUser, profile, idTokenResponse.screenName || null);
            case "custom" /* CUSTOM */:
            case "anonymous" /* ANONYMOUS */:
                return new GenericAdditionalUserInfo(isNewUser, null);
            default:
                return new GenericAdditionalUserInfo(isNewUser, providerId, profile);
        }
    }
    class GenericAdditionalUserInfo {
        constructor(isNewUser, providerId, profile = {}) {
            this.isNewUser = isNewUser;
            this.providerId = providerId;
            this.profile = profile;
        }
    }
    class FederatedAdditionalUserInfoWithUsername extends GenericAdditionalUserInfo {
        constructor(isNewUser, providerId, profile, username) {
            super(isNewUser, providerId, profile);
            this.username = username;
        }
    }
    class FacebookAdditionalUserInfo extends GenericAdditionalUserInfo {
        constructor(isNewUser, profile) {
            super(isNewUser, "facebook.com" /* FACEBOOK */, profile);
        }
    }
    class GithubAdditionalUserInfo extends FederatedAdditionalUserInfoWithUsername {
        constructor(isNewUser, profile) {
            super(isNewUser, "github.com" /* GITHUB */, profile, typeof (profile === null || profile === void 0 ? void 0 : profile.login) === 'string' ? profile === null || profile === void 0 ? void 0 : profile.login : null);
        }
    }
    class GoogleAdditionalUserInfo extends GenericAdditionalUserInfo {
        constructor(isNewUser, profile) {
            super(isNewUser, "google.com" /* GOOGLE */, profile);
        }
    }
    class TwitterAdditionalUserInfo extends FederatedAdditionalUserInfoWithUsername {
        constructor(isNewUser, profile, screenName) {
            super(isNewUser, "twitter.com" /* TWITTER */, profile, screenName);
        }
    }
    /**
     * Extracts provider specific {@link AdditionalUserInfo} for the given credential.
     *
     * @param userCredential - The user credential.
     *
     * @public
     */
    function getAdditionalUserInfo(userCredential) {
        const { user, _tokenResponse } = userCredential;
        if (user.isAnonymous && !_tokenResponse) {
            // Handle the special case where signInAnonymously() gets called twice.
            // No network call is made so there's nothing to actually fill this in
            return {
                providerId: null,
                isNewUser: false,
                profile: null
            };
        }
        return _fromIdTokenResponse(_tokenResponse);
    }
    /**
     * Adds an observer for changes to the user's sign-in state.
     *
     * @remarks
     * To keep the old behavior, see {@link onIdTokenChanged}.
     *
     * @param auth - The {@link Auth} instance.
     * @param nextOrObserver - callback triggered on change.
     * @param error - Deprecated. This callback is never triggered. Errors
     * on signing in/out can be caught in promises returned from
     * sign-in/sign-out functions.
     * @param completed - Deprecated. This callback is never triggered.
     *
     * @public
     */
    function onAuthStateChanged(auth, nextOrObserver, error, completed) {
        return getModularInstance(auth).onAuthStateChanged(nextOrObserver, error, completed);
    }

    class MultiFactorSessionImpl {
        constructor(type, credential) {
            this.type = type;
            this.credential = credential;
        }
        static _fromIdtoken(idToken) {
            return new MultiFactorSessionImpl("enroll" /* ENROLL */, idToken);
        }
        static _fromMfaPendingCredential(mfaPendingCredential) {
            return new MultiFactorSessionImpl("signin" /* SIGN_IN */, mfaPendingCredential);
        }
        toJSON() {
            const key = this.type === "enroll" /* ENROLL */
                ? 'idToken'
                : 'pendingCredential';
            return {
                multiFactorSession: {
                    [key]: this.credential
                }
            };
        }
        static fromJSON(obj) {
            var _a, _b;
            if (obj === null || obj === void 0 ? void 0 : obj.multiFactorSession) {
                if ((_a = obj.multiFactorSession) === null || _a === void 0 ? void 0 : _a.pendingCredential) {
                    return MultiFactorSessionImpl._fromMfaPendingCredential(obj.multiFactorSession.pendingCredential);
                }
                else if ((_b = obj.multiFactorSession) === null || _b === void 0 ? void 0 : _b.idToken) {
                    return MultiFactorSessionImpl._fromIdtoken(obj.multiFactorSession.idToken);
                }
            }
            return null;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class MultiFactorResolverImpl {
        constructor(session, hints, signInResolver) {
            this.session = session;
            this.hints = hints;
            this.signInResolver = signInResolver;
        }
        /** @internal */
        static _fromError(authExtern, error) {
            const auth = _castAuth(authExtern);
            const serverResponse = error.customData._serverResponse;
            const hints = (serverResponse.mfaInfo || []).map(enrollment => MultiFactorInfoImpl._fromServerResponse(auth, enrollment));
            _assert$4(serverResponse.mfaPendingCredential, auth, "internal-error" /* INTERNAL_ERROR */);
            const session = MultiFactorSessionImpl._fromMfaPendingCredential(serverResponse.mfaPendingCredential);
            return new MultiFactorResolverImpl(session, hints, async (assertion) => {
                const mfaResponse = await assertion._process(auth, session);
                // Clear out the unneeded fields from the old login response
                delete serverResponse.mfaInfo;
                delete serverResponse.mfaPendingCredential;
                // Use in the new token & refresh token in the old response
                const idTokenResponse = Object.assign(Object.assign({}, serverResponse), { idToken: mfaResponse.idToken, refreshToken: mfaResponse.refreshToken });
                // TODO: we should collapse this switch statement into UserCredentialImpl._forOperation and have it support the SIGN_IN case
                switch (error.operationType) {
                    case "signIn" /* SIGN_IN */:
                        const userCredential = await UserCredentialImpl._fromIdTokenResponse(auth, error.operationType, idTokenResponse);
                        await auth._updateCurrentUser(userCredential.user);
                        return userCredential;
                    case "reauthenticate" /* REAUTHENTICATE */:
                        _assert$4(error.user, auth, "internal-error" /* INTERNAL_ERROR */);
                        return UserCredentialImpl._forOperation(error.user, error.operationType, idTokenResponse);
                    default:
                        _fail(auth, "internal-error" /* INTERNAL_ERROR */);
                }
            });
        }
        async resolveSignIn(assertionExtern) {
            const assertion = assertionExtern;
            return this.signInResolver(assertion);
        }
    }
    /**
     * Provides a {@link MultiFactorResolver} suitable for completion of a
     * multi-factor flow.
     *
     * @param auth - The {@link Auth} instance.
     * @param error - The {@link MultiFactorError} raised during a sign-in, or
     * reauthentication operation.
     *
     * @public
     */
    function getMultiFactorResolver(auth, error) {
        var _a;
        const authModular = getModularInstance(auth);
        const errorInternal = error;
        _assert$4(error.customData.operationType, authModular, "argument-error" /* ARGUMENT_ERROR */);
        _assert$4((_a = errorInternal.customData._serverResponse) === null || _a === void 0 ? void 0 : _a.mfaPendingCredential, authModular, "argument-error" /* ARGUMENT_ERROR */);
        return MultiFactorResolverImpl._fromError(authModular, errorInternal);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function startEnrollPhoneMfa(auth, request) {
        return _performApiRequest(auth, "POST" /* POST */, "/v2/accounts/mfaEnrollment:start" /* START_PHONE_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));
    }
    function finalizeEnrollPhoneMfa(auth, request) {
        return _performApiRequest(auth, "POST" /* POST */, "/v2/accounts/mfaEnrollment:finalize" /* FINALIZE_PHONE_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));
    }
    function withdrawMfa(auth, request) {
        return _performApiRequest(auth, "POST" /* POST */, "/v2/accounts/mfaEnrollment:withdraw" /* WITHDRAW_MFA */, _addTidIfNecessary(auth, request));
    }

    class MultiFactorUserImpl {
        constructor(user) {
            this.user = user;
            this.enrolledFactors = [];
            user._onReload(userInfo => {
                if (userInfo.mfaInfo) {
                    this.enrolledFactors = userInfo.mfaInfo.map(enrollment => MultiFactorInfoImpl._fromServerResponse(user.auth, enrollment));
                }
            });
        }
        static _fromUser(user) {
            return new MultiFactorUserImpl(user);
        }
        async getSession() {
            return MultiFactorSessionImpl._fromIdtoken(await this.user.getIdToken());
        }
        async enroll(assertionExtern, displayName) {
            const assertion = assertionExtern;
            const session = (await this.getSession());
            const finalizeMfaResponse = await _logoutIfInvalidated(this.user, assertion._process(this.user.auth, session, displayName));
            // New tokens will be issued after enrollment of the new second factors.
            // They need to be updated on the user.
            await this.user._updateTokensIfNecessary(finalizeMfaResponse);
            // The user needs to be reloaded to get the new multi-factor information
            // from server. USER_RELOADED event will be triggered and `enrolledFactors`
            // will be updated.
            return this.user.reload();
        }
        async unenroll(infoOrUid) {
            var _a;
            const mfaEnrollmentId = typeof infoOrUid === 'string' ? infoOrUid : infoOrUid.uid;
            const idToken = await this.user.getIdToken();
            const idTokenResponse = await _logoutIfInvalidated(this.user, withdrawMfa(this.user.auth, {
                idToken,
                mfaEnrollmentId
            }));
            // Remove the second factor from the user's list.
            this.enrolledFactors = this.enrolledFactors.filter(({ uid }) => uid !== mfaEnrollmentId);
            // Depending on whether the backend decided to revoke the user's session,
            // the tokenResponse may be empty. If the tokens were not updated (and they
            // are now invalid), reloading the user will discover this and invalidate
            // the user's state accordingly.
            await this.user._updateTokensIfNecessary(idTokenResponse);
            try {
                await this.user.reload();
            }
            catch (e) {
                if (((_a = e) === null || _a === void 0 ? void 0 : _a.code) !== `auth/${"user-token-expired" /* TOKEN_EXPIRED */}`) {
                    throw e;
                }
            }
        }
    }
    const multiFactorUserCache = new WeakMap();
    /**
     * The {@link MultiFactorUser} corresponding to the user.
     *
     * @remarks
     * This is used to access all multi-factor properties and operations related to the user.
     *
     * @param user - The user.
     *
     * @public
     */
    function multiFactor(user) {
        const userModular = getModularInstance(user);
        if (!multiFactorUserCache.has(userModular)) {
            multiFactorUserCache.set(userModular, MultiFactorUserImpl._fromUser(userModular));
        }
        return multiFactorUserCache.get(userModular);
    }

    const STORAGE_AVAILABLE_KEY = '__sak';

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // There are two different browser persistence types: local and session.
    // Both have the same implementation but use a different underlying storage
    // object.
    class BrowserPersistenceClass {
        constructor(storageRetriever, type) {
            this.storageRetriever = storageRetriever;
            this.type = type;
        }
        _isAvailable() {
            try {
                if (!this.storage) {
                    return Promise.resolve(false);
                }
                this.storage.setItem(STORAGE_AVAILABLE_KEY, '1');
                this.storage.removeItem(STORAGE_AVAILABLE_KEY);
                return Promise.resolve(true);
            }
            catch (_a) {
                return Promise.resolve(false);
            }
        }
        _set(key, value) {
            this.storage.setItem(key, JSON.stringify(value));
            return Promise.resolve();
        }
        _get(key) {
            const json = this.storage.getItem(key);
            return Promise.resolve(json ? JSON.parse(json) : null);
        }
        _remove(key) {
            this.storage.removeItem(key);
            return Promise.resolve();
        }
        get storage() {
            return this.storageRetriever();
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _iframeCannotSyncWebStorage() {
        const ua = getUA();
        return _isSafari(ua) || _isIOS(ua);
    }
    // The polling period in case events are not supported
    const _POLLING_INTERVAL_MS$1 = 1000;
    // The IE 10 localStorage cross tab synchronization delay in milliseconds
    const IE10_LOCAL_STORAGE_SYNC_DELAY = 10;
    class BrowserLocalPersistence extends BrowserPersistenceClass {
        constructor() {
            super(() => window.localStorage, "LOCAL" /* LOCAL */);
            this.boundEventHandler = (event, poll) => this.onStorageEvent(event, poll);
            this.listeners = {};
            this.localCache = {};
            // setTimeout return value is platform specific
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            this.pollTimer = null;
            // Safari or iOS browser and embedded in an iframe.
            this.safariLocalStorageNotSynced = _iframeCannotSyncWebStorage() && _isIframe();
            // Whether to use polling instead of depending on window events
            this.fallbackToPolling = _isMobileBrowser();
            this._shouldAllowMigration = true;
        }
        forAllChangedKeys(cb) {
            // Check all keys with listeners on them.
            for (const key of Object.keys(this.listeners)) {
                // Get value from localStorage.
                const newValue = this.storage.getItem(key);
                const oldValue = this.localCache[key];
                // If local map value does not match, trigger listener with storage event.
                // Differentiate this simulated event from the real storage event.
                if (newValue !== oldValue) {
                    cb(key, oldValue, newValue);
                }
            }
        }
        onStorageEvent(event, poll = false) {
            // Key would be null in some situations, like when localStorage is cleared
            if (!event.key) {
                this.forAllChangedKeys((key, _oldValue, newValue) => {
                    this.notifyListeners(key, newValue);
                });
                return;
            }
            const key = event.key;
            // Check the mechanism how this event was detected.
            // The first event will dictate the mechanism to be used.
            if (poll) {
                // Environment detects storage changes via polling.
                // Remove storage event listener to prevent possible event duplication.
                this.detachListener();
            }
            else {
                // Environment detects storage changes via storage event listener.
                // Remove polling listener to prevent possible event duplication.
                this.stopPolling();
            }
            // Safari embedded iframe. Storage event will trigger with the delta
            // changes but no changes will be applied to the iframe localStorage.
            if (this.safariLocalStorageNotSynced) {
                // Get current iframe page value.
                const storedValue = this.storage.getItem(key);
                // Value not synchronized, synchronize manually.
                if (event.newValue !== storedValue) {
                    if (event.newValue !== null) {
                        // Value changed from current value.
                        this.storage.setItem(key, event.newValue);
                    }
                    else {
                        // Current value deleted.
                        this.storage.removeItem(key);
                    }
                }
                else if (this.localCache[key] === event.newValue && !poll) {
                    // Already detected and processed, do not trigger listeners again.
                    return;
                }
            }
            const triggerListeners = () => {
                // Keep local map up to date in case storage event is triggered before
                // poll.
                const storedValue = this.storage.getItem(key);
                if (!poll && this.localCache[key] === storedValue) {
                    // Real storage event which has already been detected, do nothing.
                    // This seems to trigger in some IE browsers for some reason.
                    return;
                }
                this.notifyListeners(key, storedValue);
            };
            const storedValue = this.storage.getItem(key);
            if (_isIE10() &&
                storedValue !== event.newValue &&
                event.newValue !== event.oldValue) {
                // IE 10 has this weird bug where a storage event would trigger with the
                // correct key, oldValue and newValue but localStorage.getItem(key) does
                // not yield the updated value until a few milliseconds. This ensures
                // this recovers from that situation.
                setTimeout(triggerListeners, IE10_LOCAL_STORAGE_SYNC_DELAY);
            }
            else {
                triggerListeners();
            }
        }
        notifyListeners(key, value) {
            this.localCache[key] = value;
            const listeners = this.listeners[key];
            if (listeners) {
                for (const listener of Array.from(listeners)) {
                    listener(value ? JSON.parse(value) : value);
                }
            }
        }
        startPolling() {
            this.stopPolling();
            this.pollTimer = setInterval(() => {
                this.forAllChangedKeys((key, oldValue, newValue) => {
                    this.onStorageEvent(new StorageEvent('storage', {
                        key,
                        oldValue,
                        newValue
                    }), 
                    /* poll */ true);
                });
            }, _POLLING_INTERVAL_MS$1);
        }
        stopPolling() {
            if (this.pollTimer) {
                clearInterval(this.pollTimer);
                this.pollTimer = null;
            }
        }
        attachListener() {
            window.addEventListener('storage', this.boundEventHandler);
        }
        detachListener() {
            window.removeEventListener('storage', this.boundEventHandler);
        }
        _addListener(key, listener) {
            if (Object.keys(this.listeners).length === 0) {
                // Whether browser can detect storage event when it had already been pushed to the background.
                // This may happen in some mobile browsers. A localStorage change in the foreground window
                // will not be detected in the background window via the storage event.
                // This was detected in iOS 7.x mobile browsers
                if (this.fallbackToPolling) {
                    this.startPolling();
                }
                else {
                    this.attachListener();
                }
            }
            if (!this.listeners[key]) {
                this.listeners[key] = new Set();
                // Populate the cache to avoid spuriously triggering on first poll.
                this.localCache[key] = this.storage.getItem(key);
            }
            this.listeners[key].add(listener);
        }
        _removeListener(key, listener) {
            if (this.listeners[key]) {
                this.listeners[key].delete(listener);
                if (this.listeners[key].size === 0) {
                    delete this.listeners[key];
                }
            }
            if (Object.keys(this.listeners).length === 0) {
                this.detachListener();
                this.stopPolling();
            }
        }
        // Update local cache on base operations:
        async _set(key, value) {
            await super._set(key, value);
            this.localCache[key] = JSON.stringify(value);
        }
        async _get(key) {
            const value = await super._get(key);
            this.localCache[key] = JSON.stringify(value);
            return value;
        }
        async _remove(key) {
            await super._remove(key);
            delete this.localCache[key];
        }
    }
    BrowserLocalPersistence.type = 'LOCAL';
    /**
     * An implementation of {@link Persistence} of type `LOCAL` using `localStorage`
     * for the underlying storage.
     *
     * @public
     */
    const browserLocalPersistence = BrowserLocalPersistence;

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class BrowserSessionPersistence extends BrowserPersistenceClass {
        constructor() {
            super(() => window.sessionStorage, "SESSION" /* SESSION */);
        }
        _addListener(_key, _listener) {
            // Listeners are not supported for session storage since it cannot be shared across windows
            return;
        }
        _removeListener(_key, _listener) {
            // Listeners are not supported for session storage since it cannot be shared across windows
            return;
        }
    }
    BrowserSessionPersistence.type = 'SESSION';
    /**
     * An implementation of {@link Persistence} of `SESSION` using `sessionStorage`
     * for the underlying storage.
     *
     * @public
     */
    const browserSessionPersistence = BrowserSessionPersistence;

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Shim for Promise.allSettled, note the slightly different format of `fulfilled` vs `status`.
     *
     * @param promises - Array of promises to wait on.
     */
    function _allSettled(promises) {
        return Promise.all(promises.map(async (promise) => {
            try {
                const value = await promise;
                return {
                    fulfilled: true,
                    value
                };
            }
            catch (reason) {
                return {
                    fulfilled: false,
                    reason
                };
            }
        }));
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Interface class for receiving messages.
     *
     */
    class Receiver {
        constructor(eventTarget) {
            this.eventTarget = eventTarget;
            this.handlersMap = {};
            this.boundEventHandler = this.handleEvent.bind(this);
        }
        /**
         * Obtain an instance of a Receiver for a given event target, if none exists it will be created.
         *
         * @param eventTarget - An event target (such as window or self) through which the underlying
         * messages will be received.
         */
        static _getInstance(eventTarget) {
            // The results are stored in an array since objects can't be keys for other
            // objects. In addition, setting a unique property on an event target as a
            // hash map key may not be allowed due to CORS restrictions.
            const existingInstance = this.receivers.find(receiver => receiver.isListeningto(eventTarget));
            if (existingInstance) {
                return existingInstance;
            }
            const newInstance = new Receiver(eventTarget);
            this.receivers.push(newInstance);
            return newInstance;
        }
        isListeningto(eventTarget) {
            return this.eventTarget === eventTarget;
        }
        /**
         * Fans out a MessageEvent to the appropriate listeners.
         *
         * @remarks
         * Sends an {@link Status.ACK} upon receipt and a {@link Status.DONE} once all handlers have
         * finished processing.
         *
         * @param event - The MessageEvent.
         *
         */
        async handleEvent(event) {
            const messageEvent = event;
            const { eventId, eventType, data } = messageEvent.data;
            const handlers = this.handlersMap[eventType];
            if (!(handlers === null || handlers === void 0 ? void 0 : handlers.size)) {
                return;
            }
            messageEvent.ports[0].postMessage({
                status: "ack" /* ACK */,
                eventId,
                eventType
            });
            const promises = Array.from(handlers).map(async (handler) => handler(messageEvent.origin, data));
            const response = await _allSettled(promises);
            messageEvent.ports[0].postMessage({
                status: "done" /* DONE */,
                eventId,
                eventType,
                response
            });
        }
        /**
         * Subscribe an event handler for a particular event.
         *
         * @param eventType - Event name to subscribe to.
         * @param eventHandler - The event handler which should receive the events.
         *
         */
        _subscribe(eventType, eventHandler) {
            if (Object.keys(this.handlersMap).length === 0) {
                this.eventTarget.addEventListener('message', this.boundEventHandler);
            }
            if (!this.handlersMap[eventType]) {
                this.handlersMap[eventType] = new Set();
            }
            this.handlersMap[eventType].add(eventHandler);
        }
        /**
         * Unsubscribe an event handler from a particular event.
         *
         * @param eventType - Event name to unsubscribe from.
         * @param eventHandler - Optinoal event handler, if none provided, unsubscribe all handlers on this event.
         *
         */
        _unsubscribe(eventType, eventHandler) {
            if (this.handlersMap[eventType] && eventHandler) {
                this.handlersMap[eventType].delete(eventHandler);
            }
            if (!eventHandler || this.handlersMap[eventType].size === 0) {
                delete this.handlersMap[eventType];
            }
            if (Object.keys(this.handlersMap).length === 0) {
                this.eventTarget.removeEventListener('message', this.boundEventHandler);
            }
        }
    }
    Receiver.receivers = [];

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _generateEventId(prefix = '', digits = 10) {
        let random = '';
        for (let i = 0; i < digits; i++) {
            random += Math.floor(Math.random() * 10);
        }
        return prefix + random;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Interface for sending messages and waiting for a completion response.
     *
     */
    class Sender {
        constructor(target) {
            this.target = target;
            this.handlers = new Set();
        }
        /**
         * Unsubscribe the handler and remove it from our tracking Set.
         *
         * @param handler - The handler to unsubscribe.
         */
        removeMessageHandler(handler) {
            if (handler.messageChannel) {
                handler.messageChannel.port1.removeEventListener('message', handler.onMessage);
                handler.messageChannel.port1.close();
            }
            this.handlers.delete(handler);
        }
        /**
         * Send a message to the Receiver located at {@link target}.
         *
         * @remarks
         * We'll first wait a bit for an ACK , if we get one we will wait significantly longer until the
         * receiver has had a chance to fully process the event.
         *
         * @param eventType - Type of event to send.
         * @param data - The payload of the event.
         * @param timeout - Timeout for waiting on an ACK from the receiver.
         *
         * @returns An array of settled promises from all the handlers that were listening on the receiver.
         */
        async _send(eventType, data, timeout = 50 /* ACK */) {
            const messageChannel = typeof MessageChannel !== 'undefined' ? new MessageChannel() : null;
            if (!messageChannel) {
                throw new Error("connection_unavailable" /* CONNECTION_UNAVAILABLE */);
            }
            // Node timers and browser timers return fundamentally different types.
            // We don't actually care what the value is but TS won't accept unknown and
            // we can't cast properly in both environments.
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            let completionTimer;
            let handler;
            return new Promise((resolve, reject) => {
                const eventId = _generateEventId('', 20);
                messageChannel.port1.start();
                const ackTimer = setTimeout(() => {
                    reject(new Error("unsupported_event" /* UNSUPPORTED_EVENT */));
                }, timeout);
                handler = {
                    messageChannel,
                    onMessage(event) {
                        const messageEvent = event;
                        if (messageEvent.data.eventId !== eventId) {
                            return;
                        }
                        switch (messageEvent.data.status) {
                            case "ack" /* ACK */:
                                // The receiver should ACK first.
                                clearTimeout(ackTimer);
                                completionTimer = setTimeout(() => {
                                    reject(new Error("timeout" /* TIMEOUT */));
                                }, 3000 /* COMPLETION */);
                                break;
                            case "done" /* DONE */:
                                // Once the receiver's handlers are finished we will get the results.
                                clearTimeout(completionTimer);
                                resolve(messageEvent.data.response);
                                break;
                            default:
                                clearTimeout(ackTimer);
                                clearTimeout(completionTimer);
                                reject(new Error("invalid_response" /* INVALID_RESPONSE */));
                                break;
                        }
                    }
                };
                this.handlers.add(handler);
                messageChannel.port1.addEventListener('message', handler.onMessage);
                this.target.postMessage({
                    eventType,
                    eventId,
                    data
                }, [messageChannel.port2]);
            }).finally(() => {
                if (handler) {
                    this.removeMessageHandler(handler);
                }
            });
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Lazy accessor for window, since the compat layer won't tree shake this out,
     * we need to make sure not to mess with window unless we have to
     */
    function _window() {
        return window;
    }
    function _setWindowLocation(url) {
        _window().location.href = url;
    }

    /**
     * @license
     * Copyright 2020 Google LLC.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _isWorker$1() {
        return (typeof _window()['WorkerGlobalScope'] !== 'undefined' &&
            typeof _window()['importScripts'] === 'function');
    }
    async function _getActiveServiceWorker() {
        if (!(navigator === null || navigator === void 0 ? void 0 : navigator.serviceWorker)) {
            return null;
        }
        try {
            const registration = await navigator.serviceWorker.ready;
            return registration.active;
        }
        catch (_a) {
            return null;
        }
    }
    function _getServiceWorkerController() {
        var _a;
        return ((_a = navigator === null || navigator === void 0 ? void 0 : navigator.serviceWorker) === null || _a === void 0 ? void 0 : _a.controller) || null;
    }
    function _getWorkerGlobalScope() {
        return _isWorker$1() ? self : null;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const DB_NAME = 'firebaseLocalStorageDb';
    const DB_VERSION = 1;
    const DB_OBJECTSTORE_NAME = 'firebaseLocalStorage';
    const DB_DATA_KEYPATH = 'fbase_key';
    /**
     * Promise wrapper for IDBRequest
     *
     * Unfortunately we can't cleanly extend Promise<T> since promises are not callable in ES6
     *
     */
    class DBPromise {
        constructor(request) {
            this.request = request;
        }
        toPromise() {
            return new Promise((resolve, reject) => {
                this.request.addEventListener('success', () => {
                    resolve(this.request.result);
                });
                this.request.addEventListener('error', () => {
                    reject(this.request.error);
                });
            });
        }
    }
    function getObjectStore(db, isReadWrite) {
        return db
            .transaction([DB_OBJECTSTORE_NAME], isReadWrite ? 'readwrite' : 'readonly')
            .objectStore(DB_OBJECTSTORE_NAME);
    }
    function _deleteDatabase() {
        const request = indexedDB.deleteDatabase(DB_NAME);
        return new DBPromise(request).toPromise();
    }
    function _openDatabase() {
        const request = indexedDB.open(DB_NAME, DB_VERSION);
        return new Promise((resolve, reject) => {
            request.addEventListener('error', () => {
                reject(request.error);
            });
            request.addEventListener('upgradeneeded', () => {
                const db = request.result;
                try {
                    db.createObjectStore(DB_OBJECTSTORE_NAME, { keyPath: DB_DATA_KEYPATH });
                }
                catch (e) {
                    reject(e);
                }
            });
            request.addEventListener('success', async () => {
                const db = request.result;
                // Strange bug that occurs in Firefox when multiple tabs are opened at the
                // same time. The only way to recover seems to be deleting the database
                // and re-initializing it.
                // https://github.com/firebase/firebase-js-sdk/issues/634
                if (!db.objectStoreNames.contains(DB_OBJECTSTORE_NAME)) {
                    // Need to close the database or else you get a `blocked` event
                    db.close();
                    await _deleteDatabase();
                    resolve(await _openDatabase());
                }
                else {
                    resolve(db);
                }
            });
        });
    }
    async function _putObject(db, key, value) {
        const request = getObjectStore(db, true).put({
            [DB_DATA_KEYPATH]: key,
            value
        });
        return new DBPromise(request).toPromise();
    }
    async function getObject(db, key) {
        const request = getObjectStore(db, false).get(key);
        const data = await new DBPromise(request).toPromise();
        return data === undefined ? null : data.value;
    }
    function _deleteObject(db, key) {
        const request = getObjectStore(db, true).delete(key);
        return new DBPromise(request).toPromise();
    }
    const _POLLING_INTERVAL_MS = 800;
    const _TRANSACTION_RETRY_COUNT = 3;
    class IndexedDBLocalPersistence {
        constructor() {
            this.type = "LOCAL" /* LOCAL */;
            this._shouldAllowMigration = true;
            this.listeners = {};
            this.localCache = {};
            // setTimeout return value is platform specific
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            this.pollTimer = null;
            this.pendingWrites = 0;
            this.receiver = null;
            this.sender = null;
            this.serviceWorkerReceiverAvailable = false;
            this.activeServiceWorker = null;
            // Fire & forget the service worker registration as it may never resolve
            this._workerInitializationPromise =
                this.initializeServiceWorkerMessaging().then(() => { }, () => { });
        }
        async _openDb() {
            if (this.db) {
                return this.db;
            }
            this.db = await _openDatabase();
            return this.db;
        }
        async _withRetries(op) {
            let numAttempts = 0;
            while (true) {
                try {
                    const db = await this._openDb();
                    return await op(db);
                }
                catch (e) {
                    if (numAttempts++ > _TRANSACTION_RETRY_COUNT) {
                        throw e;
                    }
                    if (this.db) {
                        this.db.close();
                        this.db = undefined;
                    }
                    // TODO: consider adding exponential backoff
                }
            }
        }
        /**
         * IndexedDB events do not propagate from the main window to the worker context.  We rely on a
         * postMessage interface to send these events to the worker ourselves.
         */
        async initializeServiceWorkerMessaging() {
            return _isWorker$1() ? this.initializeReceiver() : this.initializeSender();
        }
        /**
         * As the worker we should listen to events from the main window.
         */
        async initializeReceiver() {
            this.receiver = Receiver._getInstance(_getWorkerGlobalScope());
            // Refresh from persistence if we receive a KeyChanged message.
            this.receiver._subscribe("keyChanged" /* KEY_CHANGED */, async (_origin, data) => {
                const keys = await this._poll();
                return {
                    keyProcessed: keys.includes(data.key)
                };
            });
            // Let the sender know that we are listening so they give us more timeout.
            this.receiver._subscribe("ping" /* PING */, async (_origin, _data) => {
                return ["keyChanged" /* KEY_CHANGED */];
            });
        }
        /**
         * As the main window, we should let the worker know when keys change (set and remove).
         *
         * @remarks
         * {@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/ready | ServiceWorkerContainer.ready}
         * may not resolve.
         */
        async initializeSender() {
            var _a, _b;
            // Check to see if there's an active service worker.
            this.activeServiceWorker = await _getActiveServiceWorker();
            if (!this.activeServiceWorker) {
                return;
            }
            this.sender = new Sender(this.activeServiceWorker);
            // Ping the service worker to check what events they can handle.
            const results = await this.sender._send("ping" /* PING */, {}, 800 /* LONG_ACK */);
            if (!results) {
                return;
            }
            if (((_a = results[0]) === null || _a === void 0 ? void 0 : _a.fulfilled) &&
                ((_b = results[0]) === null || _b === void 0 ? void 0 : _b.value.includes("keyChanged" /* KEY_CHANGED */))) {
                this.serviceWorkerReceiverAvailable = true;
            }
        }
        /**
         * Let the worker know about a changed key, the exact key doesn't technically matter since the
         * worker will just trigger a full sync anyway.
         *
         * @remarks
         * For now, we only support one service worker per page.
         *
         * @param key - Storage key which changed.
         */
        async notifyServiceWorker(key) {
            if (!this.sender ||
                !this.activeServiceWorker ||
                _getServiceWorkerController() !== this.activeServiceWorker) {
                return;
            }
            try {
                await this.sender._send("keyChanged" /* KEY_CHANGED */, { key }, 
                // Use long timeout if receiver has previously responded to a ping from us.
                this.serviceWorkerReceiverAvailable
                    ? 800 /* LONG_ACK */
                    : 50 /* ACK */);
            }
            catch (_a) {
                // This is a best effort approach. Ignore errors.
            }
        }
        async _isAvailable() {
            try {
                if (!indexedDB) {
                    return false;
                }
                const db = await _openDatabase();
                await _putObject(db, STORAGE_AVAILABLE_KEY, '1');
                await _deleteObject(db, STORAGE_AVAILABLE_KEY);
                return true;
            }
            catch (_a) { }
            return false;
        }
        async _withPendingWrite(write) {
            this.pendingWrites++;
            try {
                await write();
            }
            finally {
                this.pendingWrites--;
            }
        }
        async _set(key, value) {
            return this._withPendingWrite(async () => {
                await this._withRetries((db) => _putObject(db, key, value));
                this.localCache[key] = value;
                return this.notifyServiceWorker(key);
            });
        }
        async _get(key) {
            const obj = (await this._withRetries((db) => getObject(db, key)));
            this.localCache[key] = obj;
            return obj;
        }
        async _remove(key) {
            return this._withPendingWrite(async () => {
                await this._withRetries((db) => _deleteObject(db, key));
                delete this.localCache[key];
                return this.notifyServiceWorker(key);
            });
        }
        async _poll() {
            // TODO: check if we need to fallback if getAll is not supported
            const result = await this._withRetries((db) => {
                const getAllRequest = getObjectStore(db, false).getAll();
                return new DBPromise(getAllRequest).toPromise();
            });
            if (!result) {
                return [];
            }
            // If we have pending writes in progress abort, we'll get picked up on the next poll
            if (this.pendingWrites !== 0) {
                return [];
            }
            const keys = [];
            const keysInResult = new Set();
            for (const { fbase_key: key, value } of result) {
                keysInResult.add(key);
                if (JSON.stringify(this.localCache[key]) !== JSON.stringify(value)) {
                    this.notifyListeners(key, value);
                    keys.push(key);
                }
            }
            for (const localKey of Object.keys(this.localCache)) {
                if (this.localCache[localKey] && !keysInResult.has(localKey)) {
                    // Deleted
                    this.notifyListeners(localKey, null);
                    keys.push(localKey);
                }
            }
            return keys;
        }
        notifyListeners(key, newValue) {
            this.localCache[key] = newValue;
            const listeners = this.listeners[key];
            if (listeners) {
                for (const listener of Array.from(listeners)) {
                    listener(newValue);
                }
            }
        }
        startPolling() {
            this.stopPolling();
            this.pollTimer = setInterval(async () => this._poll(), _POLLING_INTERVAL_MS);
        }
        stopPolling() {
            if (this.pollTimer) {
                clearInterval(this.pollTimer);
                this.pollTimer = null;
            }
        }
        _addListener(key, listener) {
            if (Object.keys(this.listeners).length === 0) {
                this.startPolling();
            }
            if (!this.listeners[key]) {
                this.listeners[key] = new Set();
                // Populate the cache to avoid spuriously triggering on first poll.
                void this._get(key); // This can happen in the background async and we can return immediately.
            }
            this.listeners[key].add(listener);
        }
        _removeListener(key, listener) {
            if (this.listeners[key]) {
                this.listeners[key].delete(listener);
                if (this.listeners[key].size === 0) {
                    delete this.listeners[key];
                }
            }
            if (Object.keys(this.listeners).length === 0) {
                this.stopPolling();
            }
        }
    }
    IndexedDBLocalPersistence.type = 'LOCAL';
    /**
     * An implementation of {@link Persistence} of type `LOCAL` using `indexedDB`
     * for the underlying storage.
     *
     * @public
     */
    const indexedDBLocalPersistence = IndexedDBLocalPersistence;

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function startSignInPhoneMfa(auth, request) {
        return _performApiRequest(auth, "POST" /* POST */, "/v2/accounts/mfaSignIn:start" /* START_PHONE_MFA_SIGN_IN */, _addTidIfNecessary(auth, request));
    }
    function finalizeSignInPhoneMfa(auth, request) {
        return _performApiRequest(auth, "POST" /* POST */, "/v2/accounts/mfaSignIn:finalize" /* FINALIZE_PHONE_MFA_SIGN_IN */, _addTidIfNecessary(auth, request));
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    async function getRecaptchaParams(auth) {
        return ((await _performApiRequest(auth, "GET" /* GET */, "/v1/recaptchaParams" /* GET_RECAPTCHA_PARAM */)).recaptchaSiteKey || '');
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function getScriptParentElement() {
        var _a, _b;
        return (_b = (_a = document.getElementsByTagName('head')) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : document;
    }
    function _loadJS(url) {
        // TODO: consider adding timeout support & cancellation
        return new Promise((resolve, reject) => {
            const el = document.createElement('script');
            el.setAttribute('src', url);
            el.onload = resolve;
            el.onerror = e => {
                const error = _createError("internal-error" /* INTERNAL_ERROR */);
                error.customData = e;
                reject(error);
            };
            el.type = 'text/javascript';
            el.charset = 'UTF-8';
            getScriptParentElement().appendChild(el);
        });
    }
    function _generateCallbackName(prefix) {
        return `__${prefix}${Math.floor(Math.random() * 1000000)}`;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const _SOLVE_TIME_MS = 500;
    const _EXPIRATION_TIME_MS = 60000;
    const _WIDGET_ID_START = 1000000000000;
    class MockReCaptcha {
        constructor(auth) {
            this.auth = auth;
            this.counter = _WIDGET_ID_START;
            this._widgets = new Map();
        }
        render(container, parameters) {
            const id = this.counter;
            this._widgets.set(id, new MockWidget(container, this.auth.name, parameters || {}));
            this.counter++;
            return id;
        }
        reset(optWidgetId) {
            var _a;
            const id = optWidgetId || _WIDGET_ID_START;
            void ((_a = this._widgets.get(id)) === null || _a === void 0 ? void 0 : _a.delete());
            this._widgets.delete(id);
        }
        getResponse(optWidgetId) {
            var _a;
            const id = optWidgetId || _WIDGET_ID_START;
            return ((_a = this._widgets.get(id)) === null || _a === void 0 ? void 0 : _a.getResponse()) || '';
        }
        async execute(optWidgetId) {
            var _a;
            const id = optWidgetId || _WIDGET_ID_START;
            void ((_a = this._widgets.get(id)) === null || _a === void 0 ? void 0 : _a.execute());
            return '';
        }
    }
    class MockWidget {
        constructor(containerOrId, appName, params) {
            this.params = params;
            this.timerId = null;
            this.deleted = false;
            this.responseToken = null;
            this.clickHandler = () => {
                this.execute();
            };
            const container = typeof containerOrId === 'string'
                ? document.getElementById(containerOrId)
                : containerOrId;
            _assert$4(container, "argument-error" /* ARGUMENT_ERROR */, { appName });
            this.container = container;
            this.isVisible = this.params.size !== 'invisible';
            if (this.isVisible) {
                this.execute();
            }
            else {
                this.container.addEventListener('click', this.clickHandler);
            }
        }
        getResponse() {
            this.checkIfDeleted();
            return this.responseToken;
        }
        delete() {
            this.checkIfDeleted();
            this.deleted = true;
            if (this.timerId) {
                clearTimeout(this.timerId);
                this.timerId = null;
            }
            this.container.removeEventListener('click', this.clickHandler);
        }
        execute() {
            this.checkIfDeleted();
            if (this.timerId) {
                return;
            }
            this.timerId = window.setTimeout(() => {
                this.responseToken = generateRandomAlphaNumericString(50);
                const { callback, 'expired-callback': expiredCallback } = this.params;
                if (callback) {
                    try {
                        callback(this.responseToken);
                    }
                    catch (e) { }
                }
                this.timerId = window.setTimeout(() => {
                    this.timerId = null;
                    this.responseToken = null;
                    if (expiredCallback) {
                        try {
                            expiredCallback();
                        }
                        catch (e) { }
                    }
                    if (this.isVisible) {
                        this.execute();
                    }
                }, _EXPIRATION_TIME_MS);
            }, _SOLVE_TIME_MS);
        }
        checkIfDeleted() {
            if (this.deleted) {
                throw new Error('reCAPTCHA mock was already deleted!');
            }
        }
    }
    function generateRandomAlphaNumericString(len) {
        const chars = [];
        const allowedChars = '1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
        for (let i = 0; i < len; i++) {
            chars.push(allowedChars.charAt(Math.floor(Math.random() * allowedChars.length)));
        }
        return chars.join('');
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // ReCaptcha will load using the same callback, so the callback function needs
    // to be kept around
    const _JSLOAD_CALLBACK = _generateCallbackName('rcb');
    const NETWORK_TIMEOUT_DELAY = new Delay(30000, 60000);
    const RECAPTCHA_BASE = 'https://www.google.com/recaptcha/api.js?';
    /**
     * Loader for the GReCaptcha library. There should only ever be one of this.
     */
    class ReCaptchaLoaderImpl {
        constructor() {
            var _a;
            this.hostLanguage = '';
            this.counter = 0;
            /**
             * Check for `render()` method. `window.grecaptcha` will exist if the Enterprise
             * version of the ReCAPTCHA script was loaded by someone else (e.g. App Check) but
             * `window.grecaptcha.render()` will not. Another load will add it.
             */
            this.librarySeparatelyLoaded = !!((_a = _window().grecaptcha) === null || _a === void 0 ? void 0 : _a.render);
        }
        load(auth, hl = '') {
            _assert$4(isHostLanguageValid(hl), auth, "argument-error" /* ARGUMENT_ERROR */);
            if (this.shouldResolveImmediately(hl)) {
                return Promise.resolve(_window().grecaptcha);
            }
            return new Promise((resolve, reject) => {
                const networkTimeout = _window().setTimeout(() => {
                    reject(_createError(auth, "network-request-failed" /* NETWORK_REQUEST_FAILED */));
                }, NETWORK_TIMEOUT_DELAY.get());
                _window()[_JSLOAD_CALLBACK] = () => {
                    _window().clearTimeout(networkTimeout);
                    delete _window()[_JSLOAD_CALLBACK];
                    const recaptcha = _window().grecaptcha;
                    if (!recaptcha) {
                        reject(_createError(auth, "internal-error" /* INTERNAL_ERROR */));
                        return;
                    }
                    // Wrap the greptcha render function so that we know if the developer has
                    // called it separately
                    const render = recaptcha.render;
                    recaptcha.render = (container, params) => {
                        const widgetId = render(container, params);
                        this.counter++;
                        return widgetId;
                    };
                    this.hostLanguage = hl;
                    resolve(recaptcha);
                };
                const url = `${RECAPTCHA_BASE}?${querystring({
                onload: _JSLOAD_CALLBACK,
                render: 'explicit',
                hl
            })}`;
                _loadJS(url).catch(() => {
                    clearTimeout(networkTimeout);
                    reject(_createError(auth, "internal-error" /* INTERNAL_ERROR */));
                });
            });
        }
        clearedOneInstance() {
            this.counter--;
        }
        shouldResolveImmediately(hl) {
            var _a;
            // We can resolve immediately if:
            //   • grecaptcha is already defined AND (
            //     1. the requested language codes are the same OR
            //     2. there exists already a ReCaptcha on the page
            //     3. the library was already loaded by the app
            // In cases (2) and (3), we _can't_ reload as it would break the recaptchas
            // that are already in the page
            return (!!((_a = _window().grecaptcha) === null || _a === void 0 ? void 0 : _a.render) &&
                (hl === this.hostLanguage ||
                    this.counter > 0 ||
                    this.librarySeparatelyLoaded));
        }
    }
    function isHostLanguageValid(hl) {
        return hl.length <= 6 && /^\s*[a-zA-Z0-9\-]*\s*$/.test(hl);
    }
    class MockReCaptchaLoaderImpl {
        async load(auth) {
            return new MockReCaptcha(auth);
        }
        clearedOneInstance() { }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const RECAPTCHA_VERIFIER_TYPE = 'recaptcha';
    const DEFAULT_PARAMS = {
        theme: 'light',
        type: 'image'
    };
    /**
     * An {@link https://www.google.com/recaptcha/ | reCAPTCHA}-based application verifier.
     *
     * @public
     */
    class RecaptchaVerifier$1 {
        /**
         *
         * @param containerOrId - The reCAPTCHA container parameter.
         *
         * @remarks
         * This has different meaning depending on whether the reCAPTCHA is hidden or visible. For a
         * visible reCAPTCHA the container must be empty. If a string is used, it has to correspond to
         * an element ID. The corresponding element must also must be in the DOM at the time of
         * initialization.
         *
         * @param parameters - The optional reCAPTCHA parameters.
         *
         * @remarks
         * Check the reCAPTCHA docs for a comprehensive list. All parameters are accepted except for
         * the sitekey. Firebase Auth backend provisions a reCAPTCHA for each project and will
         * configure this upon rendering. For an invisible reCAPTCHA, a size key must have the value
         * 'invisible'.
         *
         * @param authExtern - The corresponding Firebase {@link Auth} instance.
         *
         * @remarks
         * If none is provided, the default Firebase {@link Auth} instance is used. A Firebase {@link Auth} instance
         * must be initialized with an API key, otherwise an error will be thrown.
         */
        constructor(containerOrId, parameters = Object.assign({}, DEFAULT_PARAMS), authExtern) {
            this.parameters = parameters;
            /**
             * The application verifier type.
             *
             * @remarks
             * For a reCAPTCHA verifier, this is 'recaptcha'.
             */
            this.type = RECAPTCHA_VERIFIER_TYPE;
            this.destroyed = false;
            this.widgetId = null;
            this.tokenChangeListeners = new Set();
            this.renderPromise = null;
            this.recaptcha = null;
            this.auth = _castAuth(authExtern);
            this.isInvisible = this.parameters.size === 'invisible';
            _assert$4(typeof document !== 'undefined', this.auth, "operation-not-supported-in-this-environment" /* OPERATION_NOT_SUPPORTED */);
            const container = typeof containerOrId === 'string'
                ? document.getElementById(containerOrId)
                : containerOrId;
            _assert$4(container, this.auth, "argument-error" /* ARGUMENT_ERROR */);
            this.container = container;
            this.parameters.callback = this.makeTokenCallback(this.parameters.callback);
            this._recaptchaLoader = this.auth.settings.appVerificationDisabledForTesting
                ? new MockReCaptchaLoaderImpl()
                : new ReCaptchaLoaderImpl();
            this.validateStartingState();
            // TODO: Figure out if sdk version is needed
        }
        /**
         * Waits for the user to solve the reCAPTCHA and resolves with the reCAPTCHA token.
         *
         * @returns A Promise for the reCAPTCHA token.
         */
        async verify() {
            this.assertNotDestroyed();
            const id = await this.render();
            const recaptcha = this.getAssertedRecaptcha();
            const response = recaptcha.getResponse(id);
            if (response) {
                return response;
            }
            return new Promise(resolve => {
                const tokenChange = (token) => {
                    if (!token) {
                        return; // Ignore token expirations.
                    }
                    this.tokenChangeListeners.delete(tokenChange);
                    resolve(token);
                };
                this.tokenChangeListeners.add(tokenChange);
                if (this.isInvisible) {
                    recaptcha.execute(id);
                }
            });
        }
        /**
         * Renders the reCAPTCHA widget on the page.
         *
         * @returns A Promise that resolves with the reCAPTCHA widget ID.
         */
        render() {
            try {
                this.assertNotDestroyed();
            }
            catch (e) {
                // This method returns a promise. Since it's not async (we want to return the
                // _same_ promise if rendering is still occurring), the API surface should
                // reject with the error rather than just throw
                return Promise.reject(e);
            }
            if (this.renderPromise) {
                return this.renderPromise;
            }
            this.renderPromise = this.makeRenderPromise().catch(e => {
                this.renderPromise = null;
                throw e;
            });
            return this.renderPromise;
        }
        /** @internal */
        _reset() {
            this.assertNotDestroyed();
            if (this.widgetId !== null) {
                this.getAssertedRecaptcha().reset(this.widgetId);
            }
        }
        /**
         * Clears the reCAPTCHA widget from the page and destroys the instance.
         */
        clear() {
            this.assertNotDestroyed();
            this.destroyed = true;
            this._recaptchaLoader.clearedOneInstance();
            if (!this.isInvisible) {
                this.container.childNodes.forEach(node => {
                    this.container.removeChild(node);
                });
            }
        }
        validateStartingState() {
            _assert$4(!this.parameters.sitekey, this.auth, "argument-error" /* ARGUMENT_ERROR */);
            _assert$4(this.isInvisible || !this.container.hasChildNodes(), this.auth, "argument-error" /* ARGUMENT_ERROR */);
            _assert$4(typeof document !== 'undefined', this.auth, "operation-not-supported-in-this-environment" /* OPERATION_NOT_SUPPORTED */);
        }
        makeTokenCallback(existing) {
            return token => {
                this.tokenChangeListeners.forEach(listener => listener(token));
                if (typeof existing === 'function') {
                    existing(token);
                }
                else if (typeof existing === 'string') {
                    const globalFunc = _window()[existing];
                    if (typeof globalFunc === 'function') {
                        globalFunc(token);
                    }
                }
            };
        }
        assertNotDestroyed() {
            _assert$4(!this.destroyed, this.auth, "internal-error" /* INTERNAL_ERROR */);
        }
        async makeRenderPromise() {
            await this.init();
            if (!this.widgetId) {
                let container = this.container;
                if (!this.isInvisible) {
                    const guaranteedEmpty = document.createElement('div');
                    container.appendChild(guaranteedEmpty);
                    container = guaranteedEmpty;
                }
                this.widgetId = this.getAssertedRecaptcha().render(container, this.parameters);
            }
            return this.widgetId;
        }
        async init() {
            _assert$4(_isHttpOrHttps$1() && !_isWorker$1(), this.auth, "internal-error" /* INTERNAL_ERROR */);
            await domReady();
            this.recaptcha = await this._recaptchaLoader.load(this.auth, this.auth.languageCode || undefined);
            const siteKey = await getRecaptchaParams(this.auth);
            _assert$4(siteKey, this.auth, "internal-error" /* INTERNAL_ERROR */);
            this.parameters.sitekey = siteKey;
        }
        getAssertedRecaptcha() {
            _assert$4(this.recaptcha, this.auth, "internal-error" /* INTERNAL_ERROR */);
            return this.recaptcha;
        }
    }
    function domReady() {
        let resolver = null;
        return new Promise(resolve => {
            if (document.readyState === 'complete') {
                resolve();
                return;
            }
            // Document not ready, wait for load before resolving.
            // Save resolver, so we can remove listener in case it was externally
            // cancelled.
            resolver = () => resolve();
            window.addEventListener('load', resolver);
        }).catch(e => {
            if (resolver) {
                window.removeEventListener('load', resolver);
            }
            throw e;
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class ConfirmationResultImpl {
        constructor(verificationId, onConfirmation) {
            this.verificationId = verificationId;
            this.onConfirmation = onConfirmation;
        }
        confirm(verificationCode) {
            const authCredential = PhoneAuthCredential._fromVerification(this.verificationId, verificationCode);
            return this.onConfirmation(authCredential);
        }
    }
    /**
     * Asynchronously signs in using a phone number.
     *
     * @remarks
     * This method sends a code via SMS to the given
     * phone number, and returns a {@link ConfirmationResult}. After the user
     * provides the code sent to their phone, call {@link ConfirmationResult.confirm}
     * with the code to sign the user in.
     *
     * For abuse prevention, this method also requires a {@link ApplicationVerifier}.
     * This SDK includes a reCAPTCHA-based implementation, {@link RecaptchaVerifier}.
     * This function can work on other platforms that do not support the
     * {@link RecaptchaVerifier} (like React Native), but you need to use a
     * third-party {@link ApplicationVerifier} implementation.
     *
     * @example
     * ```javascript
     * // 'recaptcha-container' is the ID of an element in the DOM.
     * const applicationVerifier = new firebase.auth.RecaptchaVerifier('recaptcha-container');
     * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);
     * // Obtain a verificationCode from the user.
     * const credential = await confirmationResult.confirm(verificationCode);
     * ```
     *
     * @param auth - The {@link Auth} instance.
     * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).
     * @param appVerifier - The {@link ApplicationVerifier}.
     *
     * @public
     */
    async function signInWithPhoneNumber(auth, phoneNumber, appVerifier) {
        const authInternal = _castAuth(auth);
        const verificationId = await _verifyPhoneNumber(authInternal, phoneNumber, getModularInstance(appVerifier));
        return new ConfirmationResultImpl(verificationId, cred => signInWithCredential(authInternal, cred));
    }
    /**
     * Links the user account with the given phone number.
     *
     * @param user - The user.
     * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).
     * @param appVerifier - The {@link ApplicationVerifier}.
     *
     * @public
     */
    async function linkWithPhoneNumber(user, phoneNumber, appVerifier) {
        const userInternal = getModularInstance(user);
        await _assertLinkedStatus(false, userInternal, "phone" /* PHONE */);
        const verificationId = await _verifyPhoneNumber(userInternal.auth, phoneNumber, getModularInstance(appVerifier));
        return new ConfirmationResultImpl(verificationId, cred => linkWithCredential(userInternal, cred));
    }
    /**
     * Re-authenticates a user using a fresh phone credential.
     *
     * @remarks Use before operations such as {@link updatePassword} that require tokens from recent sign-in attempts.
     *
     * @param user - The user.
     * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).
     * @param appVerifier - The {@link ApplicationVerifier}.
     *
     * @public
     */
    async function reauthenticateWithPhoneNumber(user, phoneNumber, appVerifier) {
        const userInternal = getModularInstance(user);
        const verificationId = await _verifyPhoneNumber(userInternal.auth, phoneNumber, getModularInstance(appVerifier));
        return new ConfirmationResultImpl(verificationId, cred => reauthenticateWithCredential(userInternal, cred));
    }
    /**
     * Returns a verification ID to be used in conjunction with the SMS code that is sent.
     *
     */
    async function _verifyPhoneNumber(auth, options, verifier) {
        var _a;
        const recaptchaToken = await verifier.verify();
        try {
            _assert$4(typeof recaptchaToken === 'string', auth, "argument-error" /* ARGUMENT_ERROR */);
            _assert$4(verifier.type === RECAPTCHA_VERIFIER_TYPE, auth, "argument-error" /* ARGUMENT_ERROR */);
            let phoneInfoOptions;
            if (typeof options === 'string') {
                phoneInfoOptions = {
                    phoneNumber: options
                };
            }
            else {
                phoneInfoOptions = options;
            }
            if ('session' in phoneInfoOptions) {
                const session = phoneInfoOptions.session;
                if ('phoneNumber' in phoneInfoOptions) {
                    _assert$4(session.type === "enroll" /* ENROLL */, auth, "internal-error" /* INTERNAL_ERROR */);
                    const response = await startEnrollPhoneMfa(auth, {
                        idToken: session.credential,
                        phoneEnrollmentInfo: {
                            phoneNumber: phoneInfoOptions.phoneNumber,
                            recaptchaToken
                        }
                    });
                    return response.phoneSessionInfo.sessionInfo;
                }
                else {
                    _assert$4(session.type === "signin" /* SIGN_IN */, auth, "internal-error" /* INTERNAL_ERROR */);
                    const mfaEnrollmentId = ((_a = phoneInfoOptions.multiFactorHint) === null || _a === void 0 ? void 0 : _a.uid) ||
                        phoneInfoOptions.multiFactorUid;
                    _assert$4(mfaEnrollmentId, auth, "missing-multi-factor-info" /* MISSING_MFA_INFO */);
                    const response = await startSignInPhoneMfa(auth, {
                        mfaPendingCredential: session.credential,
                        mfaEnrollmentId,
                        phoneSignInInfo: {
                            recaptchaToken
                        }
                    });
                    return response.phoneResponseInfo.sessionInfo;
                }
            }
            else {
                const { sessionInfo } = await sendPhoneVerificationCode(auth, {
                    phoneNumber: phoneInfoOptions.phoneNumber,
                    recaptchaToken
                });
                return sessionInfo;
            }
        }
        finally {
            verifier._reset();
        }
    }
    /**
     * Updates the user's phone number.
     *
     * @example
     * ```
     * // 'recaptcha-container' is the ID of an element in the DOM.
     * const applicationVerifier = new RecaptchaVerifier('recaptcha-container');
     * const provider = new PhoneAuthProvider(auth);
     * const verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);
     * // Obtain the verificationCode from the user.
     * const phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);
     * await updatePhoneNumber(user, phoneCredential);
     * ```
     *
     * @param user - The user.
     * @param credential - A credential authenticating the new phone number.
     *
     * @public
     */
    async function updatePhoneNumber(user, credential) {
        await _link$1(getModularInstance(user), credential);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Provider for generating an {@link PhoneAuthCredential}.
     *
     * @example
     * ```javascript
     * // 'recaptcha-container' is the ID of an element in the DOM.
     * const applicationVerifier = new RecaptchaVerifier('recaptcha-container');
     * const provider = new PhoneAuthProvider(auth);
     * const verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);
     * // Obtain the verificationCode from the user.
     * const phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);
     * const userCredential = await signInWithCredential(auth, phoneCredential);
     * ```
     *
     * @public
     */
    class PhoneAuthProvider$1 {
        /**
         * @param auth - The Firebase {@link Auth} instance in which sign-ins should occur.
         *
         */
        constructor(auth) {
            /** Always set to {@link ProviderId}.PHONE. */
            this.providerId = PhoneAuthProvider$1.PROVIDER_ID;
            this.auth = _castAuth(auth);
        }
        /**
         *
         * Starts a phone number authentication flow by sending a verification code to the given phone
         * number.
         *
         * @example
         * ```javascript
         * const provider = new PhoneAuthProvider(auth);
         * const verificationId = await provider.verifyPhoneNumber(phoneNumber, applicationVerifier);
         * // Obtain verificationCode from the user.
         * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);
         * const userCredential = await signInWithCredential(auth, authCredential);
         * ```
         *
         * @example
         * An alternative flow is provided using the `signInWithPhoneNumber` method.
         * ```javascript
         * const confirmationResult = signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);
         * // Obtain verificationCode from the user.
         * const userCredential = confirmationResult.confirm(verificationCode);
         * ```
         *
         * @param phoneInfoOptions - The user's {@link PhoneInfoOptions}. The phone number should be in
         * E.164 format (e.g. +16505550101).
         * @param applicationVerifier - For abuse prevention, this method also requires a
         * {@link ApplicationVerifier}. This SDK includes a reCAPTCHA-based implementation,
         * {@link RecaptchaVerifier}.
         *
         * @returns A Promise for a verification ID that can be passed to
         * {@link PhoneAuthProvider.credential} to identify this flow..
         */
        verifyPhoneNumber(phoneOptions, applicationVerifier) {
            return _verifyPhoneNumber(this.auth, phoneOptions, getModularInstance(applicationVerifier));
        }
        /**
         * Creates a phone auth credential, given the verification ID from
         * {@link PhoneAuthProvider.verifyPhoneNumber} and the code that was sent to the user's
         * mobile device.
         *
         * @example
         * ```javascript
         * const provider = new PhoneAuthProvider(auth);
         * const verificationId = provider.verifyPhoneNumber(phoneNumber, applicationVerifier);
         * // Obtain verificationCode from the user.
         * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);
         * const userCredential = signInWithCredential(auth, authCredential);
         * ```
         *
         * @example
         * An alternative flow is provided using the `signInWithPhoneNumber` method.
         * ```javascript
         * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);
         * // Obtain verificationCode from the user.
         * const userCredential = await confirmationResult.confirm(verificationCode);
         * ```
         *
         * @param verificationId - The verification ID returned from {@link PhoneAuthProvider.verifyPhoneNumber}.
         * @param verificationCode - The verification code sent to the user's mobile device.
         *
         * @returns The auth provider credential.
         */
        static credential(verificationId, verificationCode) {
            return PhoneAuthCredential._fromVerification(verificationId, verificationCode);
        }
        /**
         * Generates an {@link AuthCredential} from a {@link UserCredential}.
         * @param userCredential - The user credential.
         */
        static credentialFromResult(userCredential) {
            const credential = userCredential;
            return PhoneAuthProvider$1.credentialFromTaggedObject(credential);
        }
        /**
         * Returns an {@link AuthCredential} when passed an error.
         *
         * @remarks
         *
         * This method works for errors like
         * `auth/account-exists-with-different-credentials`. This is useful for
         * recovering when attempting to set a user's phone number but the number
         * in question is already tied to another account. For example, the following
         * code tries to update the current user's phone number, and if that
         * fails, links the user with the account associated with that number:
         *
         * ```js
         * const provider = new PhoneAuthProvider(auth);
         * const verificationId = await provider.verifyPhoneNumber(number, verifier);
         * try {
         *   const code = ''; // Prompt the user for the verification code
         *   await updatePhoneNumber(
         *       auth.currentUser,
         *       PhoneAuthProvider.credential(verificationId, code));
         * } catch (e) {
         *   if ((e as FirebaseError)?.code === 'auth/account-exists-with-different-credential') {
         *     const cred = PhoneAuthProvider.credentialFromError(e);
         *     await linkWithCredential(auth.currentUser, cred);
         *   }
         * }
         *
         * // At this point, auth.currentUser.phoneNumber === number.
         * ```
         *
         * @param error - The error to generate a credential from.
         */
        static credentialFromError(error) {
            return PhoneAuthProvider$1.credentialFromTaggedObject((error.customData || {}));
        }
        static credentialFromTaggedObject({ _tokenResponse: tokenResponse }) {
            if (!tokenResponse) {
                return null;
            }
            const { phoneNumber, temporaryProof } = tokenResponse;
            if (phoneNumber && temporaryProof) {
                return PhoneAuthCredential._fromTokenResponse(phoneNumber, temporaryProof);
            }
            return null;
        }
    }
    /** Always set to {@link ProviderId}.PHONE. */
    PhoneAuthProvider$1.PROVIDER_ID = "phone" /* PHONE */;
    /** Always set to {@link SignInMethod}.PHONE. */
    PhoneAuthProvider$1.PHONE_SIGN_IN_METHOD = "phone" /* PHONE */;

    /**
     * @license
     * Copyright 2021 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Chooses a popup/redirect resolver to use. This prefers the override (which
     * is directly passed in), and falls back to the property set on the auth
     * object. If neither are available, this function errors w/ an argument error.
     */
    function _withDefaultResolver(auth, resolverOverride) {
        if (resolverOverride) {
            return _getInstance(resolverOverride);
        }
        _assert$4(auth._popupRedirectResolver, auth, "argument-error" /* ARGUMENT_ERROR */);
        return auth._popupRedirectResolver;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class IdpCredential extends AuthCredential {
        constructor(params) {
            super("custom" /* CUSTOM */, "custom" /* CUSTOM */);
            this.params = params;
        }
        _getIdTokenResponse(auth) {
            return signInWithIdp(auth, this._buildIdpRequest());
        }
        _linkToIdToken(auth, idToken) {
            return signInWithIdp(auth, this._buildIdpRequest(idToken));
        }
        _getReauthenticationResolver(auth) {
            return signInWithIdp(auth, this._buildIdpRequest());
        }
        _buildIdpRequest(idToken) {
            const request = {
                requestUri: this.params.requestUri,
                sessionId: this.params.sessionId,
                postBody: this.params.postBody,
                tenantId: this.params.tenantId,
                pendingToken: this.params.pendingToken,
                returnSecureToken: true,
                returnIdpCredential: true
            };
            if (idToken) {
                request.idToken = idToken;
            }
            return request;
        }
    }
    function _signIn(params) {
        return _signInWithCredential(params.auth, new IdpCredential(params), params.bypassAuthState);
    }
    function _reauth(params) {
        const { auth, user } = params;
        _assert$4(user, auth, "internal-error" /* INTERNAL_ERROR */);
        return _reauthenticate(user, new IdpCredential(params), params.bypassAuthState);
    }
    async function _link(params) {
        const { auth, user } = params;
        _assert$4(user, auth, "internal-error" /* INTERNAL_ERROR */);
        return _link$1(user, new IdpCredential(params), params.bypassAuthState);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Popup event manager. Handles the popup's entire lifecycle; listens to auth
     * events
     */
    class AbstractPopupRedirectOperation {
        constructor(auth, filter, resolver, user, bypassAuthState = false) {
            this.auth = auth;
            this.resolver = resolver;
            this.user = user;
            this.bypassAuthState = bypassAuthState;
            this.pendingPromise = null;
            this.eventManager = null;
            this.filter = Array.isArray(filter) ? filter : [filter];
        }
        execute() {
            return new Promise(async (resolve, reject) => {
                this.pendingPromise = { resolve, reject };
                try {
                    this.eventManager = await this.resolver._initialize(this.auth);
                    await this.onExecution();
                    this.eventManager.registerConsumer(this);
                }
                catch (e) {
                    this.reject(e);
                }
            });
        }
        async onAuthEvent(event) {
            const { urlResponse, sessionId, postBody, tenantId, error, type } = event;
            if (error) {
                this.reject(error);
                return;
            }
            const params = {
                auth: this.auth,
                requestUri: urlResponse,
                sessionId: sessionId,
                tenantId: tenantId || undefined,
                postBody: postBody || undefined,
                user: this.user,
                bypassAuthState: this.bypassAuthState
            };
            try {
                this.resolve(await this.getIdpTask(type)(params));
            }
            catch (e) {
                this.reject(e);
            }
        }
        onError(error) {
            this.reject(error);
        }
        getIdpTask(type) {
            switch (type) {
                case "signInViaPopup" /* SIGN_IN_VIA_POPUP */:
                case "signInViaRedirect" /* SIGN_IN_VIA_REDIRECT */:
                    return _signIn;
                case "linkViaPopup" /* LINK_VIA_POPUP */:
                case "linkViaRedirect" /* LINK_VIA_REDIRECT */:
                    return _link;
                case "reauthViaPopup" /* REAUTH_VIA_POPUP */:
                case "reauthViaRedirect" /* REAUTH_VIA_REDIRECT */:
                    return _reauth;
                default:
                    _fail(this.auth, "internal-error" /* INTERNAL_ERROR */);
            }
        }
        resolve(cred) {
            debugAssert(this.pendingPromise, 'Pending promise was never set');
            this.pendingPromise.resolve(cred);
            this.unregisterAndCleanUp();
        }
        reject(error) {
            debugAssert(this.pendingPromise, 'Pending promise was never set');
            this.pendingPromise.reject(error);
            this.unregisterAndCleanUp();
        }
        unregisterAndCleanUp() {
            if (this.eventManager) {
                this.eventManager.unregisterConsumer(this);
            }
            this.pendingPromise = null;
            this.cleanUp();
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const _POLL_WINDOW_CLOSE_TIMEOUT = new Delay(2000, 10000);
    /**
     * Authenticates a Firebase client using a popup-based OAuth authentication flow.
     *
     * @remarks
     * If succeeds, returns the signed in user along with the provider's credential. If sign in was
     * unsuccessful, returns an error object containing additional information about the error.
     *
     * @example
     * ```javascript
     * // Sign in using a popup.
     * const provider = new FacebookAuthProvider();
     * const result = await signInWithPopup(auth, provider);
     *
     * // The signed-in user info.
     * const user = result.user;
     * // This gives you a Facebook Access Token.
     * const credential = provider.credentialFromResult(auth, result);
     * const token = credential.accessToken;
     * ```
     *
     * @param auth - The {@link Auth} instance.
     * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.
     * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.
     * @param resolver - An instance of {@link PopupRedirectResolver}, optional
     * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
     *
     *
     * @public
     */
    async function signInWithPopup(auth, provider, resolver) {
        const authInternal = _castAuth(auth);
        _assertInstanceOf(auth, provider, FederatedAuthProvider);
        const resolverInternal = _withDefaultResolver(authInternal, resolver);
        const action = new PopupOperation(authInternal, "signInViaPopup" /* SIGN_IN_VIA_POPUP */, provider, resolverInternal);
        return action.executeNotNull();
    }
    /**
     * Reauthenticates the current user with the specified {@link OAuthProvider} using a pop-up based
     * OAuth flow.
     *
     * @remarks
     * If the reauthentication is successful, the returned result will contain the user and the
     * provider's credential.
     *
     * @example
     * ```javascript
     * // Sign in using a popup.
     * const provider = new FacebookAuthProvider();
     * const result = await signInWithPopup(auth, provider);
     * // Reauthenticate using a popup.
     * await reauthenticateWithPopup(result.user, provider);
     * ```
     *
     * @param user - The user.
     * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.
     * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.
     * @param resolver - An instance of {@link PopupRedirectResolver}, optional
     * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
     *
     * @public
     */
    async function reauthenticateWithPopup(user, provider, resolver) {
        const userInternal = getModularInstance(user);
        _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);
        const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);
        const action = new PopupOperation(userInternal.auth, "reauthViaPopup" /* REAUTH_VIA_POPUP */, provider, resolverInternal, userInternal);
        return action.executeNotNull();
    }
    /**
     * Links the authenticated provider to the user account using a pop-up based OAuth flow.
     *
     * @remarks
     * If the linking is successful, the returned result will contain the user and the provider's credential.
     *
     *
     * @example
     * ```javascript
     * // Sign in using some other provider.
     * const result = await signInWithEmailAndPassword(auth, email, password);
     * // Link using a popup.
     * const provider = new FacebookAuthProvider();
     * await linkWithPopup(result.user, provider);
     * ```
     *
     * @param user - The user.
     * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.
     * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.
     * @param resolver - An instance of {@link PopupRedirectResolver}, optional
     * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
     *
     * @public
     */
    async function linkWithPopup(user, provider, resolver) {
        const userInternal = getModularInstance(user);
        _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);
        const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);
        const action = new PopupOperation(userInternal.auth, "linkViaPopup" /* LINK_VIA_POPUP */, provider, resolverInternal, userInternal);
        return action.executeNotNull();
    }
    /**
     * Popup event manager. Handles the popup's entire lifecycle; listens to auth
     * events
     *
     */
    class PopupOperation extends AbstractPopupRedirectOperation {
        constructor(auth, filter, provider, resolver, user) {
            super(auth, filter, resolver, user);
            this.provider = provider;
            this.authWindow = null;
            this.pollId = null;
            if (PopupOperation.currentPopupAction) {
                PopupOperation.currentPopupAction.cancel();
            }
            PopupOperation.currentPopupAction = this;
        }
        async executeNotNull() {
            const result = await this.execute();
            _assert$4(result, this.auth, "internal-error" /* INTERNAL_ERROR */);
            return result;
        }
        async onExecution() {
            debugAssert(this.filter.length === 1, 'Popup operations only handle one event');
            const eventId = _generateEventId();
            this.authWindow = await this.resolver._openPopup(this.auth, this.provider, this.filter[0], // There's always one, see constructor
            eventId);
            this.authWindow.associatedEvent = eventId;
            // Check for web storage support and origin validation _after_ the popup is
            // loaded. These operations are slow (~1 second or so) Rather than
            // waiting on them before opening the window, optimistically open the popup
            // and check for storage support at the same time. If storage support is
            // not available, this will cause the whole thing to reject properly. It
            // will also close the popup, but since the promise has already rejected,
            // the popup closed by user poll will reject into the void.
            this.resolver._originValidation(this.auth).catch(e => {
                this.reject(e);
            });
            this.resolver._isIframeWebStorageSupported(this.auth, isSupported => {
                if (!isSupported) {
                    this.reject(_createError(this.auth, "web-storage-unsupported" /* WEB_STORAGE_UNSUPPORTED */));
                }
            });
            // Handle user closure. Notice this does *not* use await
            this.pollUserCancellation();
        }
        get eventId() {
            var _a;
            return ((_a = this.authWindow) === null || _a === void 0 ? void 0 : _a.associatedEvent) || null;
        }
        cancel() {
            this.reject(_createError(this.auth, "cancelled-popup-request" /* EXPIRED_POPUP_REQUEST */));
        }
        cleanUp() {
            if (this.authWindow) {
                this.authWindow.close();
            }
            if (this.pollId) {
                window.clearTimeout(this.pollId);
            }
            this.authWindow = null;
            this.pollId = null;
            PopupOperation.currentPopupAction = null;
        }
        pollUserCancellation() {
            const poll = () => {
                var _a, _b;
                if ((_b = (_a = this.authWindow) === null || _a === void 0 ? void 0 : _a.window) === null || _b === void 0 ? void 0 : _b.closed) {
                    // Make sure that there is sufficient time for whatever action to
                    // complete. The window could have closed but the sign in network
                    // call could still be in flight.
                    this.pollId = window.setTimeout(() => {
                        this.pollId = null;
                        this.reject(_createError(this.auth, "popup-closed-by-user" /* POPUP_CLOSED_BY_USER */));
                    }, 2000 /* AUTH_EVENT */);
                    return;
                }
                this.pollId = window.setTimeout(poll, _POLL_WINDOW_CLOSE_TIMEOUT.get());
            };
            poll();
        }
    }
    // Only one popup is ever shown at once. The lifecycle of the current popup
    // can be managed / cancelled by the constructor.
    PopupOperation.currentPopupAction = null;

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const PENDING_REDIRECT_KEY = 'pendingRedirect';
    // We only get one redirect outcome for any one auth, so just store it
    // in here.
    const redirectOutcomeMap = new Map();
    class RedirectAction extends AbstractPopupRedirectOperation {
        constructor(auth, resolver, bypassAuthState = false) {
            super(auth, [
                "signInViaRedirect" /* SIGN_IN_VIA_REDIRECT */,
                "linkViaRedirect" /* LINK_VIA_REDIRECT */,
                "reauthViaRedirect" /* REAUTH_VIA_REDIRECT */,
                "unknown" /* UNKNOWN */
            ], resolver, undefined, bypassAuthState);
            this.eventId = null;
        }
        /**
         * Override the execute function; if we already have a redirect result, then
         * just return it.
         */
        async execute() {
            let readyOutcome = redirectOutcomeMap.get(this.auth._key());
            if (!readyOutcome) {
                try {
                    const hasPendingRedirect = await _getAndClearPendingRedirectStatus(this.resolver, this.auth);
                    const result = hasPendingRedirect ? await super.execute() : null;
                    readyOutcome = () => Promise.resolve(result);
                }
                catch (e) {
                    readyOutcome = () => Promise.reject(e);
                }
                redirectOutcomeMap.set(this.auth._key(), readyOutcome);
            }
            // If we're not bypassing auth state, the ready outcome should be set to
            // null.
            if (!this.bypassAuthState) {
                redirectOutcomeMap.set(this.auth._key(), () => Promise.resolve(null));
            }
            return readyOutcome();
        }
        async onAuthEvent(event) {
            if (event.type === "signInViaRedirect" /* SIGN_IN_VIA_REDIRECT */) {
                return super.onAuthEvent(event);
            }
            else if (event.type === "unknown" /* UNKNOWN */) {
                // This is a sentinel value indicating there's no pending redirect
                this.resolve(null);
                return;
            }
            if (event.eventId) {
                const user = await this.auth._redirectUserForId(event.eventId);
                if (user) {
                    this.user = user;
                    return super.onAuthEvent(event);
                }
                else {
                    this.resolve(null);
                }
            }
        }
        async onExecution() { }
        cleanUp() { }
    }
    async function _getAndClearPendingRedirectStatus(resolver, auth) {
        const key = pendingRedirectKey(auth);
        const persistence = resolverPersistence(resolver);
        if (!(await persistence._isAvailable())) {
            return false;
        }
        const hasPendingRedirect = (await persistence._get(key)) === 'true';
        await persistence._remove(key);
        return hasPendingRedirect;
    }
    async function _setPendingRedirectStatus(resolver, auth) {
        return resolverPersistence(resolver)._set(pendingRedirectKey(auth), 'true');
    }
    function _clearRedirectOutcomes() {
        redirectOutcomeMap.clear();
    }
    function _overrideRedirectResult(auth, result) {
        redirectOutcomeMap.set(auth._key(), result);
    }
    function resolverPersistence(resolver) {
        return _getInstance(resolver._redirectPersistence);
    }
    function pendingRedirectKey(auth) {
        return _persistenceKeyName(PENDING_REDIRECT_KEY, auth.config.apiKey, auth.name);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Authenticates a Firebase client using a full-page redirect flow.
     *
     * @remarks
     * To handle the results and errors for this operation, refer to {@link getRedirectResult}.
     *
     * @example
     * ```javascript
     * // Sign in using a redirect.
     * const provider = new FacebookAuthProvider();
     * // You can add additional scopes to the provider:
     * provider.addScope('user_birthday');
     * // Start a sign in process for an unauthenticated user.
     * await signInWithRedirect(auth, provider);
     * // This will trigger a full page redirect away from your app
     *
     * // After returning from the redirect when your app initializes you can obtain the result
     * const result = await getRedirectResult(auth);
     * if (result) {
     *   // This is the signed-in user
     *   const user = result.user;
     *   // This gives you a Facebook Access Token.
     *   const credential = provider.credentialFromResult(auth, result);
     *   const token = credential.accessToken;
     * }
     * // As this API can be used for sign-in, linking and reauthentication,
     * // check the operationType to determine what triggered this redirect
     * // operation.
     * const operationType = result.operationType;
     * ```
     *
     * @param auth - The {@link Auth} instance.
     * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.
     * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.
     * @param resolver - An instance of {@link PopupRedirectResolver}, optional
     * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
     *
     * @public
     */
    function signInWithRedirect(auth, provider, resolver) {
        return _signInWithRedirect(auth, provider, resolver);
    }
    async function _signInWithRedirect(auth, provider, resolver) {
        const authInternal = _castAuth(auth);
        _assertInstanceOf(auth, provider, FederatedAuthProvider);
        const resolverInternal = _withDefaultResolver(authInternal, resolver);
        await _setPendingRedirectStatus(resolverInternal, authInternal);
        return resolverInternal._openRedirect(authInternal, provider, "signInViaRedirect" /* SIGN_IN_VIA_REDIRECT */);
    }
    /**
     * Reauthenticates the current user with the specified {@link OAuthProvider} using a full-page redirect flow.
     *
     * @example
     * ```javascript
     * // Sign in using a redirect.
     * const provider = new FacebookAuthProvider();
     * const result = await signInWithRedirect(auth, provider);
     * // This will trigger a full page redirect away from your app
     *
     * // After returning from the redirect when your app initializes you can obtain the result
     * const result = await getRedirectResult(auth);
     * // Link using a redirect.
     * await linkWithRedirect(result.user, provider);
     * // This will again trigger a full page redirect away from your app
     *
     * // After returning from the redirect when your app initializes you can obtain the result
     * const result = await getRedirectResult(auth);
     * ```
     *
     * @param user - The user.
     * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.
     * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.
     * @param resolver - An instance of {@link PopupRedirectResolver}, optional
     * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
     *
     * @public
     */
    function reauthenticateWithRedirect(user, provider, resolver) {
        return _reauthenticateWithRedirect(user, provider, resolver);
    }
    async function _reauthenticateWithRedirect(user, provider, resolver) {
        const userInternal = getModularInstance(user);
        _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);
        // Allow the resolver to error before persisting the redirect user
        const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);
        await _setPendingRedirectStatus(resolverInternal, userInternal.auth);
        const eventId = await prepareUserForRedirect(userInternal);
        return resolverInternal._openRedirect(userInternal.auth, provider, "reauthViaRedirect" /* REAUTH_VIA_REDIRECT */, eventId);
    }
    /**
     * Links the {@link OAuthProvider} to the user account using a full-page redirect flow.
     *
     * @example
     * ```javascript
     * // Sign in using some other provider.
     * const result = await signInWithEmailAndPassword(auth, email, password);
     * // Link using a redirect.
     * const provider = new FacebookAuthProvider();
     * await linkWithRedirect(result.user, provider);
     * // This will trigger a full page redirect away from your app
     *
     * // After returning from the redirect when your app initializes you can obtain the result
     * const result = await getRedirectResult(auth);
     * ```
     *
     * @param user - The user.
     * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.
     * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.
     * @param resolver - An instance of {@link PopupRedirectResolver}, optional
     * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
     *
     *
     * @public
     */
    function linkWithRedirect(user, provider, resolver) {
        return _linkWithRedirect(user, provider, resolver);
    }
    async function _linkWithRedirect(user, provider, resolver) {
        const userInternal = getModularInstance(user);
        _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);
        // Allow the resolver to error before persisting the redirect user
        const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);
        await _assertLinkedStatus(false, userInternal, provider.providerId);
        await _setPendingRedirectStatus(resolverInternal, userInternal.auth);
        const eventId = await prepareUserForRedirect(userInternal);
        return resolverInternal._openRedirect(userInternal.auth, provider, "linkViaRedirect" /* LINK_VIA_REDIRECT */, eventId);
    }
    /**
     * Returns a {@link UserCredential} from the redirect-based sign-in flow.
     *
     * @remarks
     * If sign-in succeeded, returns the signed in user. If sign-in was unsuccessful, fails with an
     * error. If no redirect operation was called, returns a {@link UserCredential}
     * with a null `user`.
     *
     * @example
     * ```javascript
     * // Sign in using a redirect.
     * const provider = new FacebookAuthProvider();
     * // You can add additional scopes to the provider:
     * provider.addScope('user_birthday');
     * // Start a sign in process for an unauthenticated user.
     * await signInWithRedirect(auth, provider);
     * // This will trigger a full page redirect away from your app
     *
     * // After returning from the redirect when your app initializes you can obtain the result
     * const result = await getRedirectResult(auth);
     * if (result) {
     *   // This is the signed-in user
     *   const user = result.user;
     *   // This gives you a Facebook Access Token.
     *   const credential = provider.credentialFromResult(auth, result);
     *   const token = credential.accessToken;
     * }
     * // As this API can be used for sign-in, linking and reauthentication,
     * // check the operationType to determine what triggered this redirect
     * // operation.
     * const operationType = result.operationType;
     * ```
     *
     * @param auth - The {@link Auth} instance.
     * @param resolver - An instance of {@link PopupRedirectResolver}, optional
     * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
     *
     * @public
     */
    async function getRedirectResult(auth, resolver) {
        await _castAuth(auth)._initializationPromise;
        return _getRedirectResult(auth, resolver, false);
    }
    async function _getRedirectResult(auth, resolverExtern, bypassAuthState = false) {
        const authInternal = _castAuth(auth);
        const resolver = _withDefaultResolver(authInternal, resolverExtern);
        const action = new RedirectAction(authInternal, resolver, bypassAuthState);
        const result = await action.execute();
        if (result && !bypassAuthState) {
            delete result.user._redirectEventId;
            await authInternal._persistUserIfCurrent(result.user);
            await authInternal._setRedirectUser(null, resolverExtern);
        }
        return result;
    }
    async function prepareUserForRedirect(user) {
        const eventId = _generateEventId(`${user.uid}:::`);
        user._redirectEventId = eventId;
        await user.auth._setRedirectUser(user);
        await user.auth._persistUserIfCurrent(user);
        return eventId;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // The amount of time to store the UIDs of seen events; this is
    // set to 10 min by default
    const EVENT_DUPLICATION_CACHE_DURATION_MS = 10 * 60 * 1000;
    class AuthEventManager {
        constructor(auth) {
            this.auth = auth;
            this.cachedEventUids = new Set();
            this.consumers = new Set();
            this.queuedRedirectEvent = null;
            this.hasHandledPotentialRedirect = false;
            this.lastProcessedEventTime = Date.now();
        }
        registerConsumer(authEventConsumer) {
            this.consumers.add(authEventConsumer);
            if (this.queuedRedirectEvent &&
                this.isEventForConsumer(this.queuedRedirectEvent, authEventConsumer)) {
                this.sendToConsumer(this.queuedRedirectEvent, authEventConsumer);
                this.saveEventToCache(this.queuedRedirectEvent);
                this.queuedRedirectEvent = null;
            }
        }
        unregisterConsumer(authEventConsumer) {
            this.consumers.delete(authEventConsumer);
        }
        onEvent(event) {
            // Check if the event has already been handled
            if (this.hasEventBeenHandled(event)) {
                return false;
            }
            let handled = false;
            this.consumers.forEach(consumer => {
                if (this.isEventForConsumer(event, consumer)) {
                    handled = true;
                    this.sendToConsumer(event, consumer);
                    this.saveEventToCache(event);
                }
            });
            if (this.hasHandledPotentialRedirect || !isRedirectEvent(event)) {
                // If we've already seen a redirect before, or this is a popup event,
                // bail now
                return handled;
            }
            this.hasHandledPotentialRedirect = true;
            // If the redirect wasn't handled, hang on to it
            if (!handled) {
                this.queuedRedirectEvent = event;
                handled = true;
            }
            return handled;
        }
        sendToConsumer(event, consumer) {
            var _a;
            if (event.error && !isNullRedirectEvent(event)) {
                const code = ((_a = event.error.code) === null || _a === void 0 ? void 0 : _a.split('auth/')[1]) ||
                    "internal-error" /* INTERNAL_ERROR */;
                consumer.onError(_createError(this.auth, code));
            }
            else {
                consumer.onAuthEvent(event);
            }
        }
        isEventForConsumer(event, consumer) {
            const eventIdMatches = consumer.eventId === null ||
                (!!event.eventId && event.eventId === consumer.eventId);
            return consumer.filter.includes(event.type) && eventIdMatches;
        }
        hasEventBeenHandled(event) {
            if (Date.now() - this.lastProcessedEventTime >=
                EVENT_DUPLICATION_CACHE_DURATION_MS) {
                this.cachedEventUids.clear();
            }
            return this.cachedEventUids.has(eventUid(event));
        }
        saveEventToCache(event) {
            this.cachedEventUids.add(eventUid(event));
            this.lastProcessedEventTime = Date.now();
        }
    }
    function eventUid(e) {
        return [e.type, e.eventId, e.sessionId, e.tenantId].filter(v => v).join('-');
    }
    function isNullRedirectEvent({ type, error }) {
        return (type === "unknown" /* UNKNOWN */ &&
            (error === null || error === void 0 ? void 0 : error.code) === `auth/${"no-auth-event" /* NO_AUTH_EVENT */}`);
    }
    function isRedirectEvent(event) {
        switch (event.type) {
            case "signInViaRedirect" /* SIGN_IN_VIA_REDIRECT */:
            case "linkViaRedirect" /* LINK_VIA_REDIRECT */:
            case "reauthViaRedirect" /* REAUTH_VIA_REDIRECT */:
                return true;
            case "unknown" /* UNKNOWN */:
                return isNullRedirectEvent(event);
            default:
                return false;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    async function _getProjectConfig(auth, request = {}) {
        return _performApiRequest(auth, "GET" /* GET */, "/v1/projects" /* GET_PROJECT_CONFIG */, request);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const IP_ADDRESS_REGEX = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/;
    const HTTP_REGEX = /^https?/;
    async function _validateOrigin$1(auth) {
        // Skip origin validation if we are in an emulated environment
        if (auth.config.emulator) {
            return;
        }
        const { authorizedDomains } = await _getProjectConfig(auth);
        for (const domain of authorizedDomains) {
            try {
                if (matchDomain(domain)) {
                    return;
                }
            }
            catch (_a) {
                // Do nothing if there's a URL error; just continue searching
            }
        }
        // In the old SDK, this error also provides helpful messages.
        _fail(auth, "unauthorized-domain" /* INVALID_ORIGIN */);
    }
    function matchDomain(expected) {
        const currentUrl = _getCurrentUrl();
        const { protocol, hostname } = new URL(currentUrl);
        if (expected.startsWith('chrome-extension://')) {
            const ceUrl = new URL(expected);
            if (ceUrl.hostname === '' && hostname === '') {
                // For some reason we're not parsing chrome URLs properly
                return (protocol === 'chrome-extension:' &&
                    expected.replace('chrome-extension://', '') ===
                        currentUrl.replace('chrome-extension://', ''));
            }
            return protocol === 'chrome-extension:' && ceUrl.hostname === hostname;
        }
        if (!HTTP_REGEX.test(protocol)) {
            return false;
        }
        if (IP_ADDRESS_REGEX.test(expected)) {
            // The domain has to be exactly equal to the pattern, as an IP domain will
            // only contain the IP, no extra character.
            return hostname === expected;
        }
        // Dots in pattern should be escaped.
        const escapedDomainPattern = expected.replace(/\./g, '\\.');
        // Non ip address domains.
        // domain.com = *.domain.com OR domain.com
        const re = new RegExp('^(.+\\.' + escapedDomainPattern + '|' + escapedDomainPattern + ')$', 'i');
        return re.test(hostname);
    }

    /**
     * @license
     * Copyright 2020 Google LLC.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const NETWORK_TIMEOUT = new Delay(30000, 60000);
    /**
     * Reset unlaoded GApi modules. If gapi.load fails due to a network error,
     * it will stop working after a retrial. This is a hack to fix this issue.
     */
    function resetUnloadedGapiModules() {
        // Clear last failed gapi.load state to force next gapi.load to first
        // load the failed gapi.iframes module.
        // Get gapix.beacon context.
        const beacon = _window().___jsl;
        // Get current hint.
        if (beacon === null || beacon === void 0 ? void 0 : beacon.H) {
            // Get gapi hint.
            for (const hint of Object.keys(beacon.H)) {
                // Requested modules.
                beacon.H[hint].r = beacon.H[hint].r || [];
                // Loaded modules.
                beacon.H[hint].L = beacon.H[hint].L || [];
                // Set requested modules to a copy of the loaded modules.
                beacon.H[hint].r = [...beacon.H[hint].L];
                // Clear pending callbacks.
                if (beacon.CP) {
                    for (let i = 0; i < beacon.CP.length; i++) {
                        // Remove all failed pending callbacks.
                        beacon.CP[i] = null;
                    }
                }
            }
        }
    }
    function loadGapi(auth) {
        return new Promise((resolve, reject) => {
            var _a, _b, _c;
            // Function to run when gapi.load is ready.
            function loadGapiIframe() {
                // The developer may have tried to previously run gapi.load and failed.
                // Run this to fix that.
                resetUnloadedGapiModules();
                gapi.load('gapi.iframes', {
                    callback: () => {
                        resolve(gapi.iframes.getContext());
                    },
                    ontimeout: () => {
                        // The above reset may be sufficient, but having this reset after
                        // failure ensures that if the developer calls gapi.load after the
                        // connection is re-established and before another attempt to embed
                        // the iframe, it would work and would not be broken because of our
                        // failed attempt.
                        // Timeout when gapi.iframes.Iframe not loaded.
                        resetUnloadedGapiModules();
                        reject(_createError(auth, "network-request-failed" /* NETWORK_REQUEST_FAILED */));
                    },
                    timeout: NETWORK_TIMEOUT.get()
                });
            }
            if ((_b = (_a = _window().gapi) === null || _a === void 0 ? void 0 : _a.iframes) === null || _b === void 0 ? void 0 : _b.Iframe) {
                // If gapi.iframes.Iframe available, resolve.
                resolve(gapi.iframes.getContext());
            }
            else if (!!((_c = _window().gapi) === null || _c === void 0 ? void 0 : _c.load)) {
                // Gapi loader ready, load gapi.iframes.
                loadGapiIframe();
            }
            else {
                // Create a new iframe callback when this is called so as not to overwrite
                // any previous defined callback. This happens if this method is called
                // multiple times in parallel and could result in the later callback
                // overwriting the previous one. This would end up with a iframe
                // timeout.
                const cbName = _generateCallbackName('iframefcb');
                // GApi loader not available, dynamically load platform.js.
                _window()[cbName] = () => {
                    // GApi loader should be ready.
                    if (!!gapi.load) {
                        loadGapiIframe();
                    }
                    else {
                        // Gapi loader failed, throw error.
                        reject(_createError(auth, "network-request-failed" /* NETWORK_REQUEST_FAILED */));
                    }
                };
                // Load GApi loader.
                return _loadJS(`https://apis.google.com/js/api.js?onload=${cbName}`).catch(e => reject(e));
            }
        }).catch(error => {
            // Reset cached promise to allow for retrial.
            cachedGApiLoader = null;
            throw error;
        });
    }
    let cachedGApiLoader = null;
    function _loadGapi(auth) {
        cachedGApiLoader = cachedGApiLoader || loadGapi(auth);
        return cachedGApiLoader;
    }

    /**
     * @license
     * Copyright 2020 Google LLC.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const PING_TIMEOUT = new Delay(5000, 15000);
    const IFRAME_PATH = '__/auth/iframe';
    const EMULATED_IFRAME_PATH = 'emulator/auth/iframe';
    const IFRAME_ATTRIBUTES = {
        style: {
            position: 'absolute',
            top: '-100px',
            width: '1px',
            height: '1px'
        },
        'aria-hidden': 'true',
        tabindex: '-1'
    };
    // Map from apiHost to endpoint ID for passing into iframe. In current SDK, apiHost can be set to
    // anything (not from a list of endpoints with IDs as in legacy), so this is the closest we can get.
    const EID_FROM_APIHOST = new Map([
        ["identitytoolkit.googleapis.com" /* API_HOST */, 'p'],
        ['staging-identitytoolkit.sandbox.googleapis.com', 's'],
        ['test-identitytoolkit.sandbox.googleapis.com', 't'] // test
    ]);
    function getIframeUrl(auth) {
        const config = auth.config;
        _assert$4(config.authDomain, auth, "auth-domain-config-required" /* MISSING_AUTH_DOMAIN */);
        const url = config.emulator
            ? _emulatorUrl(config, EMULATED_IFRAME_PATH)
            : `https://${auth.config.authDomain}/${IFRAME_PATH}`;
        const params = {
            apiKey: config.apiKey,
            appName: auth.name,
            v: SDK_VERSION
        };
        const eid = EID_FROM_APIHOST.get(auth.config.apiHost);
        if (eid) {
            params.eid = eid;
        }
        const frameworks = auth._getFrameworks();
        if (frameworks.length) {
            params.fw = frameworks.join(',');
        }
        return `${url}?${querystring(params).slice(1)}`;
    }
    async function _openIframe(auth) {
        const context = await _loadGapi(auth);
        const gapi = _window().gapi;
        _assert$4(gapi, auth, "internal-error" /* INTERNAL_ERROR */);
        return context.open({
            where: document.body,
            url: getIframeUrl(auth),
            messageHandlersFilter: gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER,
            attributes: IFRAME_ATTRIBUTES,
            dontclear: true
        }, (iframe) => new Promise(async (resolve, reject) => {
            await iframe.restyle({
                // Prevent iframe from closing on mouse out.
                setHideOnLeave: false
            });
            const networkError = _createError(auth, "network-request-failed" /* NETWORK_REQUEST_FAILED */);
            // Confirm iframe is correctly loaded.
            // To fallback on failure, set a timeout.
            const networkErrorTimer = _window().setTimeout(() => {
                reject(networkError);
            }, PING_TIMEOUT.get());
            // Clear timer and resolve pending iframe ready promise.
            function clearTimerAndResolve() {
                _window().clearTimeout(networkErrorTimer);
                resolve(iframe);
            }
            // This returns an IThenable. However the reject part does not call
            // when the iframe is not loaded.
            iframe.ping(clearTimerAndResolve).then(clearTimerAndResolve, () => {
                reject(networkError);
            });
        }));
    }

    /**
     * @license
     * Copyright 2020 Google LLC.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const BASE_POPUP_OPTIONS = {
        location: 'yes',
        resizable: 'yes',
        statusbar: 'yes',
        toolbar: 'no'
    };
    const DEFAULT_WIDTH = 500;
    const DEFAULT_HEIGHT = 600;
    const TARGET_BLANK = '_blank';
    const FIREFOX_EMPTY_URL = 'http://localhost';
    class AuthPopup {
        constructor(window) {
            this.window = window;
            this.associatedEvent = null;
        }
        close() {
            if (this.window) {
                try {
                    this.window.close();
                }
                catch (e) { }
            }
        }
    }
    function _open(auth, url, name, width = DEFAULT_WIDTH, height = DEFAULT_HEIGHT) {
        const top = Math.max((window.screen.availHeight - height) / 2, 0).toString();
        const left = Math.max((window.screen.availWidth - width) / 2, 0).toString();
        let target = '';
        const options = Object.assign(Object.assign({}, BASE_POPUP_OPTIONS), { width: width.toString(), height: height.toString(), top,
            left });
        // Chrome iOS 7 and 8 is returning an undefined popup win when target is
        // specified, even though the popup is not necessarily blocked.
        const ua = getUA().toLowerCase();
        if (name) {
            target = _isChromeIOS(ua) ? TARGET_BLANK : name;
        }
        if (_isFirefox(ua)) {
            // Firefox complains when invalid URLs are popped out. Hacky way to bypass.
            url = url || FIREFOX_EMPTY_URL;
            // Firefox disables by default scrolling on popup windows, which can create
            // issues when the user has many Google accounts, for instance.
            options.scrollbars = 'yes';
        }
        const optionsString = Object.entries(options).reduce((accum, [key, value]) => `${accum}${key}=${value},`, '');
        if (_isIOSStandalone(ua) && target !== '_self') {
            openAsNewWindowIOS(url || '', target);
            return new AuthPopup(null);
        }
        // about:blank getting sanitized causing browsers like IE/Edge to display
        // brief error message before redirecting to handler.
        const newWin = window.open(url || '', target, optionsString);
        _assert$4(newWin, auth, "popup-blocked" /* POPUP_BLOCKED */);
        // Flaky on IE edge, encapsulate with a try and catch.
        try {
            newWin.focus();
        }
        catch (e) { }
        return new AuthPopup(newWin);
    }
    function openAsNewWindowIOS(url, target) {
        const el = document.createElement('a');
        el.href = url;
        el.target = target;
        const click = document.createEvent('MouseEvent');
        click.initMouseEvent('click', true, true, window, 1, 0, 0, 0, 0, false, false, false, false, 1, null);
        el.dispatchEvent(click);
    }

    /**
     * @license
     * Copyright 2021 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * URL for Authentication widget which will initiate the OAuth handshake
     *
     * @internal
     */
    const WIDGET_PATH = '__/auth/handler';
    /**
     * URL for emulated environment
     *
     * @internal
     */
    const EMULATOR_WIDGET_PATH = 'emulator/auth/handler';
    function _getRedirectUrl(auth, provider, authType, redirectUrl, eventId, additionalParams) {
        _assert$4(auth.config.authDomain, auth, "auth-domain-config-required" /* MISSING_AUTH_DOMAIN */);
        _assert$4(auth.config.apiKey, auth, "invalid-api-key" /* INVALID_API_KEY */);
        const params = {
            apiKey: auth.config.apiKey,
            appName: auth.name,
            authType,
            redirectUrl,
            v: SDK_VERSION,
            eventId
        };
        if (provider instanceof FederatedAuthProvider) {
            provider.setDefaultLanguage(auth.languageCode);
            params.providerId = provider.providerId || '';
            if (!isEmpty(provider.getCustomParameters())) {
                params.customParameters = JSON.stringify(provider.getCustomParameters());
            }
            // TODO set additionalParams from the provider as well?
            for (const [key, value] of Object.entries(additionalParams || {})) {
                params[key] = value;
            }
        }
        if (provider instanceof BaseOAuthProvider) {
            const scopes = provider.getScopes().filter(scope => scope !== '');
            if (scopes.length > 0) {
                params.scopes = scopes.join(',');
            }
        }
        if (auth.tenantId) {
            params.tid = auth.tenantId;
        }
        // TODO: maybe set eid as endipointId
        // TODO: maybe set fw as Frameworks.join(",")
        const paramsDict = params;
        for (const key of Object.keys(paramsDict)) {
            if (paramsDict[key] === undefined) {
                delete paramsDict[key];
            }
        }
        return `${getHandlerBase(auth)}?${querystring(paramsDict).slice(1)}`;
    }
    function getHandlerBase({ config }) {
        if (!config.emulator) {
            return `https://${config.authDomain}/${WIDGET_PATH}`;
        }
        return _emulatorUrl(config, EMULATOR_WIDGET_PATH);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * The special web storage event
     *
     */
    const WEB_STORAGE_SUPPORT_KEY = 'webStorageSupport';
    class BrowserPopupRedirectResolver {
        constructor() {
            this.eventManagers = {};
            this.iframes = {};
            this.originValidationPromises = {};
            this._redirectPersistence = browserSessionPersistence;
            this._completeRedirectFn = _getRedirectResult;
            this._overrideRedirectResult = _overrideRedirectResult;
        }
        // Wrapping in async even though we don't await anywhere in order
        // to make sure errors are raised as promise rejections
        async _openPopup(auth, provider, authType, eventId) {
            var _a;
            debugAssert((_a = this.eventManagers[auth._key()]) === null || _a === void 0 ? void 0 : _a.manager, '_initialize() not called before _openPopup()');
            const url = _getRedirectUrl(auth, provider, authType, _getCurrentUrl(), eventId);
            return _open(auth, url, _generateEventId());
        }
        async _openRedirect(auth, provider, authType, eventId) {
            await this._originValidation(auth);
            _setWindowLocation(_getRedirectUrl(auth, provider, authType, _getCurrentUrl(), eventId));
            return new Promise(() => { });
        }
        _initialize(auth) {
            const key = auth._key();
            if (this.eventManagers[key]) {
                const { manager, promise } = this.eventManagers[key];
                if (manager) {
                    return Promise.resolve(manager);
                }
                else {
                    debugAssert(promise, 'If manager is not set, promise should be');
                    return promise;
                }
            }
            const promise = this.initAndGetManager(auth);
            this.eventManagers[key] = { promise };
            // If the promise is rejected, the key should be removed so that the
            // operation can be retried later.
            promise.catch(() => {
                delete this.eventManagers[key];
            });
            return promise;
        }
        async initAndGetManager(auth) {
            const iframe = await _openIframe(auth);
            const manager = new AuthEventManager(auth);
            iframe.register('authEvent', (iframeEvent) => {
                _assert$4(iframeEvent === null || iframeEvent === void 0 ? void 0 : iframeEvent.authEvent, auth, "invalid-auth-event" /* INVALID_AUTH_EVENT */);
                // TODO: Consider splitting redirect and popup events earlier on
                const handled = manager.onEvent(iframeEvent.authEvent);
                return { status: handled ? "ACK" /* ACK */ : "ERROR" /* ERROR */ };
            }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);
            this.eventManagers[auth._key()] = { manager };
            this.iframes[auth._key()] = iframe;
            return manager;
        }
        _isIframeWebStorageSupported(auth, cb) {
            const iframe = this.iframes[auth._key()];
            iframe.send(WEB_STORAGE_SUPPORT_KEY, { type: WEB_STORAGE_SUPPORT_KEY }, result => {
                var _a;
                const isSupported = (_a = result === null || result === void 0 ? void 0 : result[0]) === null || _a === void 0 ? void 0 : _a[WEB_STORAGE_SUPPORT_KEY];
                if (isSupported !== undefined) {
                    cb(!!isSupported);
                }
                _fail(auth, "internal-error" /* INTERNAL_ERROR */);
            }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);
        }
        _originValidation(auth) {
            const key = auth._key();
            if (!this.originValidationPromises[key]) {
                this.originValidationPromises[key] = _validateOrigin$1(auth);
            }
            return this.originValidationPromises[key];
        }
        get _shouldInitProactively() {
            // Mobile browsers and Safari need to optimistically initialize
            return _isMobileBrowser() || _isSafari() || _isIOS();
        }
    }
    /**
     * An implementation of {@link PopupRedirectResolver} suitable for browser
     * based applications.
     *
     * @public
     */
    const browserPopupRedirectResolver = BrowserPopupRedirectResolver;

    class MultiFactorAssertionImpl {
        constructor(factorId) {
            this.factorId = factorId;
        }
        _process(auth, session, displayName) {
            switch (session.type) {
                case "enroll" /* ENROLL */:
                    return this._finalizeEnroll(auth, session.credential, displayName);
                case "signin" /* SIGN_IN */:
                    return this._finalizeSignIn(auth, session.credential);
                default:
                    return debugFail('unexpected MultiFactorSessionType');
            }
        }
    }

    /**
     * {@inheritdoc PhoneMultiFactorAssertion}
     *
     * @public
     */
    class PhoneMultiFactorAssertionImpl extends MultiFactorAssertionImpl {
        constructor(credential) {
            super("phone" /* PHONE */);
            this.credential = credential;
        }
        /** @internal */
        static _fromCredential(credential) {
            return new PhoneMultiFactorAssertionImpl(credential);
        }
        /** @internal */
        _finalizeEnroll(auth, idToken, displayName) {
            return finalizeEnrollPhoneMfa(auth, {
                idToken,
                displayName,
                phoneVerificationInfo: this.credential._makeVerificationRequest()
            });
        }
        /** @internal */
        _finalizeSignIn(auth, mfaPendingCredential) {
            return finalizeSignInPhoneMfa(auth, {
                mfaPendingCredential,
                phoneVerificationInfo: this.credential._makeVerificationRequest()
            });
        }
    }
    /**
     * Provider for generating a {@link PhoneMultiFactorAssertion}.
     *
     * @public
     */
    class PhoneMultiFactorGenerator {
        constructor() { }
        /**
         * Provides a {@link PhoneMultiFactorAssertion} to confirm ownership of the phone second factor.
         *
         * @param phoneAuthCredential - A credential provided by {@link PhoneAuthProvider.credential}.
         * @returns A {@link PhoneMultiFactorAssertion} which can be used with
         * {@link MultiFactorResolver.resolveSignIn}
         */
        static assertion(credential) {
            return PhoneMultiFactorAssertionImpl._fromCredential(credential);
        }
    }
    /**
     * The identifier of the phone second factor: `phone`.
     */
    PhoneMultiFactorGenerator.FACTOR_ID = 'phone';

    var name$2 = "@firebase/auth";
    var version$2 = "0.20.5";

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class AuthInterop {
        constructor(auth) {
            this.auth = auth;
            this.internalListeners = new Map();
        }
        getUid() {
            var _a;
            this.assertAuthConfigured();
            return ((_a = this.auth.currentUser) === null || _a === void 0 ? void 0 : _a.uid) || null;
        }
        async getToken(forceRefresh) {
            this.assertAuthConfigured();
            await this.auth._initializationPromise;
            if (!this.auth.currentUser) {
                return null;
            }
            const accessToken = await this.auth.currentUser.getIdToken(forceRefresh);
            return { accessToken };
        }
        addAuthTokenListener(listener) {
            this.assertAuthConfigured();
            if (this.internalListeners.has(listener)) {
                return;
            }
            const unsubscribe = this.auth.onIdTokenChanged(user => {
                var _a;
                listener(((_a = user) === null || _a === void 0 ? void 0 : _a.stsTokenManager.accessToken) || null);
            });
            this.internalListeners.set(listener, unsubscribe);
            this.updateProactiveRefresh();
        }
        removeAuthTokenListener(listener) {
            this.assertAuthConfigured();
            const unsubscribe = this.internalListeners.get(listener);
            if (!unsubscribe) {
                return;
            }
            this.internalListeners.delete(listener);
            unsubscribe();
            this.updateProactiveRefresh();
        }
        assertAuthConfigured() {
            _assert$4(this.auth._initializationPromise, "dependent-sdk-initialized-before-auth" /* DEPENDENT_SDK_INIT_BEFORE_AUTH */);
        }
        updateProactiveRefresh() {
            if (this.internalListeners.size > 0) {
                this.auth._startProactiveRefresh();
            }
            else {
                this.auth._stopProactiveRefresh();
            }
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function getVersionForPlatform(clientPlatform) {
        switch (clientPlatform) {
            case "Node" /* NODE */:
                return 'node';
            case "ReactNative" /* REACT_NATIVE */:
                return 'rn';
            case "Worker" /* WORKER */:
                return 'webworker';
            case "Cordova" /* CORDOVA */:
                return 'cordova';
            default:
                return undefined;
        }
    }
    /** @internal */
    function registerAuth(clientPlatform) {
        _registerComponent(new Component$1("auth" /* AUTH */, (container, { options: deps }) => {
            const app = container.getProvider('app').getImmediate();
            const heartbeatServiceProvider = container.getProvider('heartbeat');
            const { apiKey, authDomain } = app.options;
            return ((app, heartbeatServiceProvider) => {
                _assert$4(apiKey && !apiKey.includes(':'), "invalid-api-key" /* INVALID_API_KEY */, { appName: app.name });
                // Auth domain is optional if IdP sign in isn't being used
                _assert$4(!(authDomain === null || authDomain === void 0 ? void 0 : authDomain.includes(':')), "argument-error" /* ARGUMENT_ERROR */, {
                    appName: app.name
                });
                const config = {
                    apiKey,
                    authDomain,
                    clientPlatform,
                    apiHost: "identitytoolkit.googleapis.com" /* API_HOST */,
                    tokenApiHost: "securetoken.googleapis.com" /* TOKEN_API_HOST */,
                    apiScheme: "https" /* API_SCHEME */,
                    sdkClientVersion: _getClientVersion(clientPlatform)
                };
                const authInstance = new AuthImpl(app, heartbeatServiceProvider, config);
                _initializeAuthInstance(authInstance, deps);
                return authInstance;
            })(app, heartbeatServiceProvider);
        }, "PUBLIC" /* PUBLIC */)
            /**
             * Auth can only be initialized by explicitly calling getAuth() or initializeAuth()
             * For why we do this, See go/firebase-next-auth-init
             */
            .setInstantiationMode("EXPLICIT" /* EXPLICIT */)
            /**
             * Because all firebase products that depend on auth depend on auth-internal directly,
             * we need to initialize auth-internal after auth is initialized to make it available to other firebase products.
             */
            .setInstanceCreatedCallback((container, _instanceIdentifier, _instance) => {
            const authInternalProvider = container.getProvider("auth-internal" /* AUTH_INTERNAL */);
            authInternalProvider.initialize();
        }));
        _registerComponent(new Component$1("auth-internal" /* AUTH_INTERNAL */, container => {
            const auth = _castAuth(container.getProvider("auth" /* AUTH */).getImmediate());
            return (auth => new AuthInterop(auth))(auth);
        }, "PRIVATE" /* PRIVATE */).setInstantiationMode("EXPLICIT" /* EXPLICIT */));
        registerVersion(name$2, version$2, getVersionForPlatform(clientPlatform));
        // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation
        registerVersion(name$2, version$2, 'esm2017');
    }
    registerAuth("Browser" /* BROWSER */);

    /**
     * @license
     * Copyright 2021 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _cordovaWindow() {
        return window;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * How long to wait after the app comes back into focus before concluding that
     * the user closed the sign in tab.
     */
    const REDIRECT_TIMEOUT_MS = 2000;
    /**
     * Generates the URL for the OAuth handler.
     */
    async function _generateHandlerUrl(auth, event, provider) {
        var _a;
        // Get the cordova plugins
        const { BuildInfo } = _cordovaWindow();
        debugAssert(event.sessionId, 'AuthEvent did not contain a session ID');
        const sessionDigest = await computeSha256(event.sessionId);
        const additionalParams = {};
        if (_isIOS()) {
            // iOS app identifier
            additionalParams['ibi'] = BuildInfo.packageName;
        }
        else if (_isAndroid()) {
            // Android app identifier
            additionalParams['apn'] = BuildInfo.packageName;
        }
        else {
            _fail(auth, "operation-not-supported-in-this-environment" /* OPERATION_NOT_SUPPORTED */);
        }
        // Add the display name if available
        if (BuildInfo.displayName) {
            additionalParams['appDisplayName'] = BuildInfo.displayName;
        }
        // Attached the hashed session ID
        additionalParams['sessionId'] = sessionDigest;
        return _getRedirectUrl(auth, provider, event.type, undefined, (_a = event.eventId) !== null && _a !== void 0 ? _a : undefined, additionalParams);
    }
    /**
     * Validates that this app is valid for this project configuration
     */
    async function _validateOrigin(auth) {
        const { BuildInfo } = _cordovaWindow();
        const request = {};
        if (_isIOS()) {
            request.iosBundleId = BuildInfo.packageName;
        }
        else if (_isAndroid()) {
            request.androidPackageName = BuildInfo.packageName;
        }
        else {
            _fail(auth, "operation-not-supported-in-this-environment" /* OPERATION_NOT_SUPPORTED */);
        }
        // Will fail automatically if package name is not authorized
        await _getProjectConfig(auth, request);
    }
    function _performRedirect(handlerUrl) {
        // Get the cordova plugins
        const { cordova } = _cordovaWindow();
        return new Promise(resolve => {
            cordova.plugins.browsertab.isAvailable(browserTabIsAvailable => {
                let iabRef = null;
                if (browserTabIsAvailable) {
                    cordova.plugins.browsertab.openUrl(handlerUrl);
                }
                else {
                    // TODO: Return the inappbrowser ref that's returned from the open call
                    iabRef = cordova.InAppBrowser.open(handlerUrl, _isIOS7Or8() ? '_blank' : '_system', 'location=yes');
                }
                resolve(iabRef);
            });
        });
    }
    /**
     * This function waits for app activity to be seen before resolving. It does
     * this by attaching listeners to various dom events. Once the app is determined
     * to be visible, this promise resolves. AFTER that resolution, the listeners
     * are detached and any browser tabs left open will be closed.
     */
    async function _waitForAppResume(auth, eventListener, iabRef) {
        // Get the cordova plugins
        const { cordova } = _cordovaWindow();
        let cleanup = () => { };
        try {
            await new Promise((resolve, reject) => {
                let onCloseTimer = null;
                // DEFINE ALL THE CALLBACKS =====
                function authEventSeen() {
                    var _a;
                    // Auth event was detected. Resolve this promise and close the extra
                    // window if it's still open.
                    resolve();
                    const closeBrowserTab = (_a = cordova.plugins.browsertab) === null || _a === void 0 ? void 0 : _a.close;
                    if (typeof closeBrowserTab === 'function') {
                        closeBrowserTab();
                    }
                    // Close inappbrowser emebedded webview in iOS7 and 8 case if still
                    // open.
                    if (typeof (iabRef === null || iabRef === void 0 ? void 0 : iabRef.close) === 'function') {
                        iabRef.close();
                    }
                }
                function resumed() {
                    if (onCloseTimer) {
                        // This code already ran; do not rerun.
                        return;
                    }
                    onCloseTimer = window.setTimeout(() => {
                        // Wait two seeconds after resume then reject.
                        reject(_createError(auth, "redirect-cancelled-by-user" /* REDIRECT_CANCELLED_BY_USER */));
                    }, REDIRECT_TIMEOUT_MS);
                }
                function visibilityChanged() {
                    if ((document === null || document === void 0 ? void 0 : document.visibilityState) === 'visible') {
                        resumed();
                    }
                }
                // ATTACH ALL THE LISTENERS =====
                // Listen for the auth event
                eventListener.addPassiveListener(authEventSeen);
                // Listen for resume and visibility events
                document.addEventListener('resume', resumed, false);
                if (_isAndroid()) {
                    document.addEventListener('visibilitychange', visibilityChanged, false);
                }
                // SETUP THE CLEANUP FUNCTION =====
                cleanup = () => {
                    eventListener.removePassiveListener(authEventSeen);
                    document.removeEventListener('resume', resumed, false);
                    document.removeEventListener('visibilitychange', visibilityChanged, false);
                    if (onCloseTimer) {
                        window.clearTimeout(onCloseTimer);
                    }
                };
            });
        }
        finally {
            cleanup();
        }
    }
    /**
     * Checks the configuration of the Cordova environment. This has no side effect
     * if the configuration is correct; otherwise it throws an error with the
     * missing plugin.
     */
    function _checkCordovaConfiguration(auth) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        const win = _cordovaWindow();
        // Check all dependencies installed.
        // https://github.com/nordnet/cordova-universal-links-plugin
        // Note that cordova-universal-links-plugin has been abandoned.
        // A fork with latest fixes is available at:
        // https://www.npmjs.com/package/cordova-universal-links-plugin-fix
        _assert$4(typeof ((_a = win === null || win === void 0 ? void 0 : win.universalLinks) === null || _a === void 0 ? void 0 : _a.subscribe) === 'function', auth, "invalid-cordova-configuration" /* INVALID_CORDOVA_CONFIGURATION */, {
            missingPlugin: 'cordova-universal-links-plugin-fix'
        });
        // https://www.npmjs.com/package/cordova-plugin-buildinfo
        _assert$4(typeof ((_b = win === null || win === void 0 ? void 0 : win.BuildInfo) === null || _b === void 0 ? void 0 : _b.packageName) !== 'undefined', auth, "invalid-cordova-configuration" /* INVALID_CORDOVA_CONFIGURATION */, {
            missingPlugin: 'cordova-plugin-buildInfo'
        });
        // https://github.com/google/cordova-plugin-browsertab
        _assert$4(typeof ((_e = (_d = (_c = win === null || win === void 0 ? void 0 : win.cordova) === null || _c === void 0 ? void 0 : _c.plugins) === null || _d === void 0 ? void 0 : _d.browsertab) === null || _e === void 0 ? void 0 : _e.openUrl) === 'function', auth, "invalid-cordova-configuration" /* INVALID_CORDOVA_CONFIGURATION */, {
            missingPlugin: 'cordova-plugin-browsertab'
        });
        _assert$4(typeof ((_h = (_g = (_f = win === null || win === void 0 ? void 0 : win.cordova) === null || _f === void 0 ? void 0 : _f.plugins) === null || _g === void 0 ? void 0 : _g.browsertab) === null || _h === void 0 ? void 0 : _h.isAvailable) === 'function', auth, "invalid-cordova-configuration" /* INVALID_CORDOVA_CONFIGURATION */, {
            missingPlugin: 'cordova-plugin-browsertab'
        });
        // https://cordova.apache.org/docs/en/latest/reference/cordova-plugin-inappbrowser/
        _assert$4(typeof ((_k = (_j = win === null || win === void 0 ? void 0 : win.cordova) === null || _j === void 0 ? void 0 : _j.InAppBrowser) === null || _k === void 0 ? void 0 : _k.open) === 'function', auth, "invalid-cordova-configuration" /* INVALID_CORDOVA_CONFIGURATION */, {
            missingPlugin: 'cordova-plugin-inappbrowser'
        });
    }
    /**
     * Computes the SHA-256 of a session ID. The SubtleCrypto interface is only
     * available in "secure" contexts, which covers Cordova (which is served on a file
     * protocol).
     */
    async function computeSha256(sessionId) {
        const bytes = stringToArrayBuffer(sessionId);
        // TODO: For IE11 crypto has a different name and this operation comes back
        //       as an object, not a promise. This is the old proposed standard that
        //       is used by IE11:
        // https://www.w3.org/TR/2013/WD-WebCryptoAPI-20130108/#cryptooperation-interface
        const buf = await crypto.subtle.digest('SHA-256', bytes);
        const arr = Array.from(new Uint8Array(buf));
        return arr.map(num => num.toString(16).padStart(2, '0')).join('');
    }
    function stringToArrayBuffer(str) {
        // This function is only meant to deal with an ASCII charset and makes
        // certain simplifying assumptions.
        debugAssert(/[0-9a-zA-Z]+/.test(str), 'Can only convert alpha-numeric strings');
        if (typeof TextEncoder !== 'undefined') {
            return new TextEncoder().encode(str);
        }
        const buff = new ArrayBuffer(str.length);
        const view = new Uint8Array(buff);
        for (let i = 0; i < str.length; i++) {
            view[i] = str.charCodeAt(i);
        }
        return view;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const SESSION_ID_LENGTH = 20;
    /** Custom AuthEventManager that adds passive listeners to events */
    class CordovaAuthEventManager extends AuthEventManager {
        constructor() {
            super(...arguments);
            this.passiveListeners = new Set();
            this.initPromise = new Promise(resolve => {
                this.resolveInialized = resolve;
            });
        }
        addPassiveListener(cb) {
            this.passiveListeners.add(cb);
        }
        removePassiveListener(cb) {
            this.passiveListeners.delete(cb);
        }
        // In a Cordova environment, this manager can live through multiple redirect
        // operations
        resetRedirect() {
            this.queuedRedirectEvent = null;
            this.hasHandledPotentialRedirect = false;
        }
        /** Override the onEvent method */
        onEvent(event) {
            this.resolveInialized();
            this.passiveListeners.forEach(cb => cb(event));
            return super.onEvent(event);
        }
        async initialized() {
            await this.initPromise;
        }
    }
    /**
     * Generates a (partial) {@link AuthEvent}.
     */
    function _generateNewEvent(auth, type, eventId = null) {
        return {
            type,
            eventId,
            urlResponse: null,
            sessionId: generateSessionId(),
            postBody: null,
            tenantId: auth.tenantId,
            error: _createError(auth, "no-auth-event" /* NO_AUTH_EVENT */)
        };
    }
    function _savePartialEvent(auth, event) {
        return storage()._set(persistenceKey(auth), event);
    }
    async function _getAndRemoveEvent(auth) {
        const event = (await storage()._get(persistenceKey(auth)));
        if (event) {
            await storage()._remove(persistenceKey(auth));
        }
        return event;
    }
    function _eventFromPartialAndUrl(partialEvent, url) {
        var _a, _b;
        // Parse the deep link within the dynamic link URL.
        const callbackUrl = _getDeepLinkFromCallback(url);
        // Confirm it is actually a callback URL.
        // Currently the universal link will be of this format:
        // https://<AUTH_DOMAIN>/__/auth/callback<OAUTH_RESPONSE>
        // This is a fake URL but is not intended to take the user anywhere
        // and just redirect to the app.
        if (callbackUrl.includes('/__/auth/callback')) {
            // Check if there is an error in the URL.
            // This mechanism is also used to pass errors back to the app:
            // https://<AUTH_DOMAIN>/__/auth/callback?firebaseError=<STRINGIFIED_ERROR>
            const params = searchParamsOrEmpty(callbackUrl);
            // Get the error object corresponding to the stringified error if found.
            const errorObject = params['firebaseError']
                ? parseJsonOrNull(decodeURIComponent(params['firebaseError']))
                : null;
            const code = (_b = (_a = errorObject === null || errorObject === void 0 ? void 0 : errorObject['code']) === null || _a === void 0 ? void 0 : _a.split('auth/')) === null || _b === void 0 ? void 0 : _b[1];
            const error = code ? _createError(code) : null;
            if (error) {
                return {
                    type: partialEvent.type,
                    eventId: partialEvent.eventId,
                    tenantId: partialEvent.tenantId,
                    error,
                    urlResponse: null,
                    sessionId: null,
                    postBody: null
                };
            }
            else {
                return {
                    type: partialEvent.type,
                    eventId: partialEvent.eventId,
                    tenantId: partialEvent.tenantId,
                    sessionId: partialEvent.sessionId,
                    urlResponse: callbackUrl,
                    postBody: null
                };
            }
        }
        return null;
    }
    function generateSessionId() {
        const chars = [];
        const allowedChars = '1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
        for (let i = 0; i < SESSION_ID_LENGTH; i++) {
            const idx = Math.floor(Math.random() * allowedChars.length);
            chars.push(allowedChars.charAt(idx));
        }
        return chars.join('');
    }
    function storage() {
        return _getInstance(browserLocalPersistence);
    }
    function persistenceKey(auth) {
        return _persistenceKeyName("authEvent" /* AUTH_EVENT */, auth.config.apiKey, auth.name);
    }
    function parseJsonOrNull(json) {
        try {
            return JSON.parse(json);
        }
        catch (e) {
            return null;
        }
    }
    // Exported for testing
    function _getDeepLinkFromCallback(url) {
        const params = searchParamsOrEmpty(url);
        const link = params['link'] ? decodeURIComponent(params['link']) : undefined;
        // Double link case (automatic redirect)
        const doubleDeepLink = searchParamsOrEmpty(link)['link'];
        // iOS custom scheme links.
        const iOSDeepLink = params['deep_link_id']
            ? decodeURIComponent(params['deep_link_id'])
            : undefined;
        const iOSDoubleDeepLink = searchParamsOrEmpty(iOSDeepLink)['link'];
        return iOSDoubleDeepLink || iOSDeepLink || doubleDeepLink || link || url;
    }
    /**
     * Optimistically tries to get search params from a string, or else returns an
     * empty search params object.
     */
    function searchParamsOrEmpty(url) {
        if (!(url === null || url === void 0 ? void 0 : url.includes('?'))) {
            return {};
        }
        const [_, ...rest] = url.split('?');
        return querystringDecode(rest.join('?'));
    }

    /**
     * @license
     * Copyright 2021 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * How long to wait for the initial auth event before concluding no
     * redirect pending
     */
    const INITIAL_EVENT_TIMEOUT_MS = 500;
    class CordovaPopupRedirectResolver {
        constructor() {
            this._redirectPersistence = browserSessionPersistence;
            this._shouldInitProactively = true; // This is lightweight for Cordova
            this.eventManagers = new Map();
            this.originValidationPromises = {};
            this._completeRedirectFn = _getRedirectResult;
            this._overrideRedirectResult = _overrideRedirectResult;
        }
        async _initialize(auth) {
            const key = auth._key();
            let manager = this.eventManagers.get(key);
            if (!manager) {
                manager = new CordovaAuthEventManager(auth);
                this.eventManagers.set(key, manager);
                this.attachCallbackListeners(auth, manager);
            }
            return manager;
        }
        _openPopup(auth) {
            _fail(auth, "operation-not-supported-in-this-environment" /* OPERATION_NOT_SUPPORTED */);
        }
        async _openRedirect(auth, provider, authType, eventId) {
            _checkCordovaConfiguration(auth);
            const manager = await this._initialize(auth);
            await manager.initialized();
            // Reset the persisted redirect states. This does not matter on Web where
            // the redirect always blows away application state entirely. On Cordova,
            // the app maintains control flow through the redirect.
            manager.resetRedirect();
            _clearRedirectOutcomes();
            await this._originValidation(auth);
            const event = _generateNewEvent(auth, authType, eventId);
            await _savePartialEvent(auth, event);
            const url = await _generateHandlerUrl(auth, event, provider);
            const iabRef = await _performRedirect(url);
            return _waitForAppResume(auth, manager, iabRef);
        }
        _isIframeWebStorageSupported(_auth, _cb) {
            throw new Error('Method not implemented.');
        }
        _originValidation(auth) {
            const key = auth._key();
            if (!this.originValidationPromises[key]) {
                this.originValidationPromises[key] = _validateOrigin(auth);
            }
            return this.originValidationPromises[key];
        }
        attachCallbackListeners(auth, manager) {
            // Get the global plugins
            const { universalLinks, handleOpenURL, BuildInfo } = _cordovaWindow();
            const noEventTimeout = setTimeout(async () => {
                // We didn't see that initial event. Clear any pending object and
                // dispatch no event
                await _getAndRemoveEvent(auth);
                manager.onEvent(generateNoEvent());
            }, INITIAL_EVENT_TIMEOUT_MS);
            const universalLinksCb = async (eventData) => {
                // We have an event so we can clear the no event timeout
                clearTimeout(noEventTimeout);
                const partialEvent = await _getAndRemoveEvent(auth);
                let finalEvent = null;
                if (partialEvent && (eventData === null || eventData === void 0 ? void 0 : eventData['url'])) {
                    finalEvent = _eventFromPartialAndUrl(partialEvent, eventData['url']);
                }
                // If finalEvent is never filled, trigger with no event
                manager.onEvent(finalEvent || generateNoEvent());
            };
            // Universal links subscriber doesn't exist for iOS, so we need to check
            if (typeof universalLinks !== 'undefined' &&
                typeof universalLinks.subscribe === 'function') {
                universalLinks.subscribe(null, universalLinksCb);
            }
            // iOS 7 or 8 custom URL schemes.
            // This is also the current default behavior for iOS 9+.
            // For this to work, cordova-plugin-customurlscheme needs to be installed.
            // https://github.com/EddyVerbruggen/Custom-URL-scheme
            // Do not overwrite the existing developer's URL handler.
            const existingHandleOpenURL = handleOpenURL;
            const packagePrefix = `${BuildInfo.packageName.toLowerCase()}://`;
            _cordovaWindow().handleOpenURL = async (url) => {
                if (url.toLowerCase().startsWith(packagePrefix)) {
                    // We want this intentionally to float
                    // eslint-disable-next-line @typescript-eslint/no-floating-promises
                    universalLinksCb({ url });
                }
                // Call the developer's handler if it is present.
                if (typeof existingHandleOpenURL === 'function') {
                    try {
                        existingHandleOpenURL(url);
                    }
                    catch (e) {
                        // This is a developer error. Don't stop the flow of the SDK.
                        console.error(e);
                    }
                }
            };
        }
    }
    /**
     * An implementation of {@link PopupRedirectResolver} suitable for Cordova
     * based applications.
     *
     * @public
     */
    const cordovaPopupRedirectResolver = CordovaPopupRedirectResolver;
    function generateNoEvent() {
        return {
            type: "unknown" /* UNKNOWN */,
            eventId: null,
            sessionId: null,
            urlResponse: null,
            postBody: null,
            tenantId: null,
            error: _createError("no-auth-event" /* NO_AUTH_EVENT */)
        };
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // This function should only be called by frameworks (e.g. FirebaseUI-web) to log their usage.
    // It is not intended for direct use by developer apps. NO jsdoc here to intentionally leave it out
    // of autogenerated documentation pages to reduce accidental misuse.
    function addFrameworkForLogging(auth, framework) {
        _castAuth(auth)._logFramework(framework);
    }

    var name$1 = "@firebase/auth-compat";
    var version$1 = "0.2.18";

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const CORDOVA_ONDEVICEREADY_TIMEOUT_MS = 1000;
    function _getCurrentScheme() {
        var _a;
        return ((_a = self === null || self === void 0 ? void 0 : self.location) === null || _a === void 0 ? void 0 : _a.protocol) || null;
    }
    /**
     * @return {boolean} Whether the current environment is http or https.
     */
    function _isHttpOrHttps() {
        return _getCurrentScheme() === 'http:' || _getCurrentScheme() === 'https:';
    }
    /**
     * @param {?string=} ua The user agent.
     * @return {boolean} Whether the app is rendered in a mobile iOS or Android
     *     Cordova environment.
     */
    function _isAndroidOrIosCordovaScheme(ua = getUA()) {
        return !!((_getCurrentScheme() === 'file:' ||
            _getCurrentScheme() === 'ionic:' ||
            _getCurrentScheme() === 'capacitor:') &&
            ua.toLowerCase().match(/iphone|ipad|ipod|android/));
    }
    /**
     * @return {boolean} Whether the environment is a native environment, where
     *     CORS checks do not apply.
     */
    function _isNativeEnvironment() {
        return isReactNative() || isNode();
    }
    /**
     * Checks whether the user agent is IE11.
     * @return {boolean} True if it is IE11.
     */
    function _isIe11() {
        return isIE() && (document === null || document === void 0 ? void 0 : document.documentMode) === 11;
    }
    /**
     * Checks whether the user agent is Edge.
     * @param {string} userAgent The browser user agent string.
     * @return {boolean} True if it is Edge.
     */
    function _isEdge(ua = getUA()) {
        return /Edge\/\d+/.test(ua);
    }
    /**
     * @param {?string=} opt_userAgent The navigator user agent.
     * @return {boolean} Whether local storage is not synchronized between an iframe
     *     and a popup of the same domain.
     */
    function _isLocalStorageNotSynchronized(ua = getUA()) {
        return _isIe11() || _isEdge(ua);
    }
    /** @return {boolean} Whether web storage is supported. */
    function _isWebStorageSupported() {
        try {
            const storage = self.localStorage;
            const key = _generateEventId();
            if (storage) {
                // setItem will throw an exception if we cannot access WebStorage (e.g.,
                // Safari in private mode).
                storage['setItem'](key, '1');
                storage['removeItem'](key);
                // For browsers where iframe web storage does not synchronize with a popup
                // of the same domain, indexedDB is used for persistent storage. These
                // browsers include IE11 and Edge.
                // Make sure it is supported (IE11 and Edge private mode does not support
                // that).
                if (_isLocalStorageNotSynchronized()) {
                    // In such browsers, if indexedDB is not supported, an iframe cannot be
                    // notified of the popup sign in result.
                    return isIndexedDBAvailable();
                }
                return true;
            }
        }
        catch (e) {
            // localStorage is not available from a worker. Test availability of
            // indexedDB.
            return _isWorker() && isIndexedDBAvailable();
        }
        return false;
    }
    /**
     * @param {?Object=} global The optional global scope.
     * @return {boolean} Whether current environment is a worker.
     */
    function _isWorker() {
        // WorkerGlobalScope only defined in worker environment.
        return (typeof global !== 'undefined' &&
            'WorkerGlobalScope' in global &&
            'importScripts' in global);
    }
    function _isPopupRedirectSupported() {
        return ((_isHttpOrHttps() ||
            isBrowserExtension() ||
            _isAndroidOrIosCordovaScheme()) &&
            // React Native with remote debugging reports its location.protocol as
            // http.
            !_isNativeEnvironment() &&
            // Local storage has to be supported for browser popup and redirect
            // operations to work.
            _isWebStorageSupported() &&
            // DOM, popups and redirects are not supported within a worker.
            !_isWorker());
    }
    /** Quick check that indicates the platform *may* be Cordova */
    function _isLikelyCordova() {
        return _isAndroidOrIosCordovaScheme() && typeof document !== 'undefined';
    }
    async function _isCordova() {
        if (!_isLikelyCordova()) {
            return false;
        }
        return new Promise(resolve => {
            const timeoutId = setTimeout(() => {
                // We've waited long enough; the telltale Cordova event didn't happen
                resolve(false);
            }, CORDOVA_ONDEVICEREADY_TIMEOUT_MS);
            document.addEventListener('deviceready', () => {
                clearTimeout(timeoutId);
                resolve(true);
            });
        });
    }
    function _getSelfWindow() {
        return typeof window !== 'undefined' ? window : null;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const Persistence = {
        LOCAL: 'local',
        NONE: 'none',
        SESSION: 'session'
    };
    const _assert$3 = _assert$4;
    const PERSISTENCE_KEY = 'persistence';
    /**
     * Validates that an argument is a valid persistence value. If an invalid type
     * is specified, an error is thrown synchronously.
     */
    function _validatePersistenceArgument(auth, persistence) {
        _assert$3(Object.values(Persistence).includes(persistence), auth, "invalid-persistence-type" /* INVALID_PERSISTENCE */);
        // Validate if the specified type is supported in the current environment.
        if (isReactNative()) {
            // This is only supported in a browser.
            _assert$3(persistence !== Persistence.SESSION, auth, "unsupported-persistence-type" /* UNSUPPORTED_PERSISTENCE */);
            return;
        }
        if (isNode()) {
            // Only none is supported in Node.js.
            _assert$3(persistence === Persistence.NONE, auth, "unsupported-persistence-type" /* UNSUPPORTED_PERSISTENCE */);
            return;
        }
        if (_isWorker()) {
            // In a worker environment, either LOCAL or NONE are supported.
            // If indexedDB not supported and LOCAL provided, throw an error
            _assert$3(persistence === Persistence.NONE ||
                (persistence === Persistence.LOCAL && isIndexedDBAvailable()), auth, "unsupported-persistence-type" /* UNSUPPORTED_PERSISTENCE */);
            return;
        }
        // This is restricted by what the browser supports.
        _assert$3(persistence === Persistence.NONE || _isWebStorageSupported(), auth, "unsupported-persistence-type" /* UNSUPPORTED_PERSISTENCE */);
    }
    async function _savePersistenceForRedirect(auth) {
        await auth._initializationPromise;
        const session = getSessionStorageIfAvailable();
        const key = _persistenceKeyName(PERSISTENCE_KEY, auth.config.apiKey, auth.name);
        if (session) {
            session.setItem(key, auth._getPersistence());
        }
    }
    function _getPersistencesFromRedirect(apiKey, appName) {
        const session = getSessionStorageIfAvailable();
        if (!session) {
            return [];
        }
        const key = _persistenceKeyName(PERSISTENCE_KEY, apiKey, appName);
        const persistence = session.getItem(key);
        switch (persistence) {
            case Persistence.NONE:
                return [inMemoryPersistence];
            case Persistence.LOCAL:
                return [indexedDBLocalPersistence, browserSessionPersistence];
            case Persistence.SESSION:
                return [browserSessionPersistence];
            default:
                return [];
        }
    }
    /** Returns session storage, or null if the property access errors */
    function getSessionStorageIfAvailable() {
        var _a;
        try {
            return ((_a = _getSelfWindow()) === null || _a === void 0 ? void 0 : _a.sessionStorage) || null;
        }
        catch (e) {
            return null;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const _assert$2 = _assert$4;
    /** Platform-agnostic popup-redirect resolver */
    class CompatPopupRedirectResolver {
        constructor() {
            // Create both resolvers for dynamic resolution later
            this.browserResolver = _getInstance(browserPopupRedirectResolver);
            this.cordovaResolver = _getInstance(cordovaPopupRedirectResolver);
            // The actual resolver in use: either browserResolver or cordovaResolver.
            this.underlyingResolver = null;
            this._redirectPersistence = browserSessionPersistence;
            this._completeRedirectFn = _getRedirectResult;
            this._overrideRedirectResult = _overrideRedirectResult;
        }
        async _initialize(auth) {
            await this.selectUnderlyingResolver();
            return this.assertedUnderlyingResolver._initialize(auth);
        }
        async _openPopup(auth, provider, authType, eventId) {
            await this.selectUnderlyingResolver();
            return this.assertedUnderlyingResolver._openPopup(auth, provider, authType, eventId);
        }
        async _openRedirect(auth, provider, authType, eventId) {
            await this.selectUnderlyingResolver();
            return this.assertedUnderlyingResolver._openRedirect(auth, provider, authType, eventId);
        }
        _isIframeWebStorageSupported(auth, cb) {
            this.assertedUnderlyingResolver._isIframeWebStorageSupported(auth, cb);
        }
        _originValidation(auth) {
            return this.assertedUnderlyingResolver._originValidation(auth);
        }
        get _shouldInitProactively() {
            return _isLikelyCordova() || this.browserResolver._shouldInitProactively;
        }
        get assertedUnderlyingResolver() {
            _assert$2(this.underlyingResolver, "internal-error" /* INTERNAL_ERROR */);
            return this.underlyingResolver;
        }
        async selectUnderlyingResolver() {
            if (this.underlyingResolver) {
                return;
            }
            // We haven't yet determined whether or not we're in Cordova; go ahead
            // and determine that state now.
            const isCordova = await _isCordova();
            this.underlyingResolver = isCordova
                ? this.cordovaResolver
                : this.browserResolver;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function unwrap(object) {
        return object.unwrap();
    }
    function wrapped(object) {
        return object.wrapped();
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function credentialFromResponse(userCredential) {
        return credentialFromObject(userCredential);
    }
    function attachExtraErrorFields(auth, e) {
        var _a, _b;
        // The response contains all fields from the server which may or may not
        // actually match the underlying type
        const response = (_a = e.customData) === null || _a === void 0 ? void 0 : _a._tokenResponse;
        if (((_b = e) === null || _b === void 0 ? void 0 : _b.code) === 'auth/multi-factor-auth-required') {
            const mfaErr = e;
            mfaErr.resolver = new MultiFactorResolver(auth, getMultiFactorResolver(auth, e));
        }
        else if (response) {
            const credential = credentialFromObject(e);
            const credErr = e;
            if (credential) {
                credErr.credential = credential;
                credErr.tenantId = response.tenantId || undefined;
                credErr.email = response.email || undefined;
                credErr.phoneNumber = response.phoneNumber || undefined;
            }
        }
    }
    function credentialFromObject(object) {
        const { _tokenResponse } = (object instanceof FirebaseError ? object.customData : object);
        if (!_tokenResponse) {
            return null;
        }
        // Handle phone Auth credential responses, as they have a different format
        // from other backend responses (i.e. no providerId). This is also only the
        // case for user credentials (does not work for errors).
        if (!(object instanceof FirebaseError)) {
            if ('temporaryProof' in _tokenResponse && 'phoneNumber' in _tokenResponse) {
                return PhoneAuthProvider$1.credentialFromResult(object);
            }
        }
        const providerId = _tokenResponse.providerId;
        // Email and password is not supported as there is no situation where the
        // server would return the password to the client.
        if (!providerId || providerId === ProviderId.PASSWORD) {
            return null;
        }
        let provider;
        switch (providerId) {
            case ProviderId.GOOGLE:
                provider = GoogleAuthProvider;
                break;
            case ProviderId.FACEBOOK:
                provider = FacebookAuthProvider;
                break;
            case ProviderId.GITHUB:
                provider = GithubAuthProvider;
                break;
            case ProviderId.TWITTER:
                provider = TwitterAuthProvider;
                break;
            default:
                const { oauthIdToken, oauthAccessToken, oauthTokenSecret, pendingToken, nonce } = _tokenResponse;
                if (!oauthAccessToken &&
                    !oauthTokenSecret &&
                    !oauthIdToken &&
                    !pendingToken) {
                    return null;
                }
                // TODO(avolkovi): uncomment this and get it working with SAML & OIDC
                if (pendingToken) {
                    if (providerId.startsWith('saml.')) {
                        return SAMLAuthCredential._create(providerId, pendingToken);
                    }
                    else {
                        // OIDC and non-default providers excluding Twitter.
                        return OAuthCredential._fromParams({
                            providerId,
                            signInMethod: providerId,
                            pendingToken,
                            idToken: oauthIdToken,
                            accessToken: oauthAccessToken
                        });
                    }
                }
                return new OAuthProvider(providerId).credential({
                    idToken: oauthIdToken,
                    accessToken: oauthAccessToken,
                    rawNonce: nonce
                });
        }
        return object instanceof FirebaseError
            ? provider.credentialFromError(object)
            : provider.credentialFromResult(object);
    }
    function convertCredential(auth, credentialPromise) {
        return credentialPromise
            .catch(e => {
            if (e instanceof FirebaseError) {
                attachExtraErrorFields(auth, e);
            }
            throw e;
        })
            .then(credential => {
            const operationType = credential.operationType;
            const user = credential.user;
            return {
                operationType,
                credential: credentialFromResponse(credential),
                additionalUserInfo: getAdditionalUserInfo(credential),
                user: User.getOrCreate(user)
            };
        });
    }
    async function convertConfirmationResult(auth, confirmationResultPromise) {
        const confirmationResultExp = await confirmationResultPromise;
        return {
            verificationId: confirmationResultExp.verificationId,
            confirm: (verificationCode) => convertCredential(auth, confirmationResultExp.confirm(verificationCode))
        };
    }
    class MultiFactorResolver {
        constructor(auth, resolver) {
            this.resolver = resolver;
            this.auth = wrapped(auth);
        }
        get session() {
            return this.resolver.session;
        }
        get hints() {
            return this.resolver.hints;
        }
        resolveSignIn(assertion) {
            return convertCredential(unwrap(this.auth), this.resolver.resolveSignIn(assertion));
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class User {
        constructor(_delegate) {
            this._delegate = _delegate;
            this.multiFactor = multiFactor(_delegate);
        }
        static getOrCreate(user) {
            if (!User.USER_MAP.has(user)) {
                User.USER_MAP.set(user, new User(user));
            }
            return User.USER_MAP.get(user);
        }
        delete() {
            return this._delegate.delete();
        }
        reload() {
            return this._delegate.reload();
        }
        toJSON() {
            return this._delegate.toJSON();
        }
        getIdTokenResult(forceRefresh) {
            return this._delegate.getIdTokenResult(forceRefresh);
        }
        getIdToken(forceRefresh) {
            return this._delegate.getIdToken(forceRefresh);
        }
        linkAndRetrieveDataWithCredential(credential) {
            return this.linkWithCredential(credential);
        }
        async linkWithCredential(credential) {
            return convertCredential(this.auth, linkWithCredential(this._delegate, credential));
        }
        async linkWithPhoneNumber(phoneNumber, applicationVerifier) {
            return convertConfirmationResult(this.auth, linkWithPhoneNumber(this._delegate, phoneNumber, applicationVerifier));
        }
        async linkWithPopup(provider) {
            return convertCredential(this.auth, linkWithPopup(this._delegate, provider, CompatPopupRedirectResolver));
        }
        async linkWithRedirect(provider) {
            await _savePersistenceForRedirect(_castAuth(this.auth));
            return linkWithRedirect(this._delegate, provider, CompatPopupRedirectResolver);
        }
        reauthenticateAndRetrieveDataWithCredential(credential) {
            return this.reauthenticateWithCredential(credential);
        }
        async reauthenticateWithCredential(credential) {
            return convertCredential(this.auth, reauthenticateWithCredential(this._delegate, credential));
        }
        reauthenticateWithPhoneNumber(phoneNumber, applicationVerifier) {
            return convertConfirmationResult(this.auth, reauthenticateWithPhoneNumber(this._delegate, phoneNumber, applicationVerifier));
        }
        reauthenticateWithPopup(provider) {
            return convertCredential(this.auth, reauthenticateWithPopup(this._delegate, provider, CompatPopupRedirectResolver));
        }
        async reauthenticateWithRedirect(provider) {
            await _savePersistenceForRedirect(_castAuth(this.auth));
            return reauthenticateWithRedirect(this._delegate, provider, CompatPopupRedirectResolver);
        }
        sendEmailVerification(actionCodeSettings) {
            return sendEmailVerification(this._delegate, actionCodeSettings);
        }
        async unlink(providerId) {
            await unlink(this._delegate, providerId);
            return this;
        }
        updateEmail(newEmail) {
            return updateEmail(this._delegate, newEmail);
        }
        updatePassword(newPassword) {
            return updatePassword(this._delegate, newPassword);
        }
        updatePhoneNumber(phoneCredential) {
            return updatePhoneNumber(this._delegate, phoneCredential);
        }
        updateProfile(profile) {
            return updateProfile(this._delegate, profile);
        }
        verifyBeforeUpdateEmail(newEmail, actionCodeSettings) {
            return verifyBeforeUpdateEmail(this._delegate, newEmail, actionCodeSettings);
        }
        get emailVerified() {
            return this._delegate.emailVerified;
        }
        get isAnonymous() {
            return this._delegate.isAnonymous;
        }
        get metadata() {
            return this._delegate.metadata;
        }
        get phoneNumber() {
            return this._delegate.phoneNumber;
        }
        get providerData() {
            return this._delegate.providerData;
        }
        get refreshToken() {
            return this._delegate.refreshToken;
        }
        get tenantId() {
            return this._delegate.tenantId;
        }
        get displayName() {
            return this._delegate.displayName;
        }
        get email() {
            return this._delegate.email;
        }
        get photoURL() {
            return this._delegate.photoURL;
        }
        get providerId() {
            return this._delegate.providerId;
        }
        get uid() {
            return this._delegate.uid;
        }
        get auth() {
            return this._delegate.auth;
        }
    }
    // Maintain a map so that there's always a 1:1 mapping between new User and
    // legacy compat users
    User.USER_MAP = new WeakMap();

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const _assert$1 = _assert$4;
    class Auth {
        constructor(app, provider) {
            this.app = app;
            if (provider.isInitialized()) {
                this._delegate = provider.getImmediate();
                this.linkUnderlyingAuth();
                return;
            }
            const { apiKey } = app.options;
            // TODO: platform needs to be determined using heuristics
            _assert$1(apiKey, "invalid-api-key" /* INVALID_API_KEY */, {
                appName: app.name
            });
            // TODO: platform needs to be determined using heuristics
            _assert$1(apiKey, "invalid-api-key" /* INVALID_API_KEY */, {
                appName: app.name
            });
            // Only use a popup/redirect resolver in browser environments
            const resolver = typeof window !== 'undefined' ? CompatPopupRedirectResolver : undefined;
            this._delegate = provider.initialize({
                options: {
                    persistence: buildPersistenceHierarchy(apiKey, app.name),
                    popupRedirectResolver: resolver
                }
            });
            this._delegate._updateErrorMap(debugErrorMap);
            this.linkUnderlyingAuth();
        }
        get emulatorConfig() {
            return this._delegate.emulatorConfig;
        }
        get currentUser() {
            if (!this._delegate.currentUser) {
                return null;
            }
            return User.getOrCreate(this._delegate.currentUser);
        }
        get languageCode() {
            return this._delegate.languageCode;
        }
        set languageCode(languageCode) {
            this._delegate.languageCode = languageCode;
        }
        get settings() {
            return this._delegate.settings;
        }
        get tenantId() {
            return this._delegate.tenantId;
        }
        set tenantId(tid) {
            this._delegate.tenantId = tid;
        }
        useDeviceLanguage() {
            this._delegate.useDeviceLanguage();
        }
        signOut() {
            return this._delegate.signOut();
        }
        useEmulator(url, options) {
            connectAuthEmulator(this._delegate, url, options);
        }
        applyActionCode(code) {
            return applyActionCode(this._delegate, code);
        }
        checkActionCode(code) {
            return checkActionCode(this._delegate, code);
        }
        confirmPasswordReset(code, newPassword) {
            return confirmPasswordReset(this._delegate, code, newPassword);
        }
        async createUserWithEmailAndPassword(email, password) {
            return convertCredential(this._delegate, createUserWithEmailAndPassword(this._delegate, email, password));
        }
        fetchProvidersForEmail(email) {
            return this.fetchSignInMethodsForEmail(email);
        }
        fetchSignInMethodsForEmail(email) {
            return fetchSignInMethodsForEmail(this._delegate, email);
        }
        isSignInWithEmailLink(emailLink) {
            return isSignInWithEmailLink(this._delegate, emailLink);
        }
        async getRedirectResult() {
            _assert$1(_isPopupRedirectSupported(), this._delegate, "operation-not-supported-in-this-environment" /* OPERATION_NOT_SUPPORTED */);
            const credential = await getRedirectResult(this._delegate, CompatPopupRedirectResolver);
            if (!credential) {
                return {
                    credential: null,
                    user: null
                };
            }
            return convertCredential(this._delegate, Promise.resolve(credential));
        }
        // This function should only be called by frameworks (e.g. FirebaseUI-web) to log their usage.
        // It is not intended for direct use by developer apps. NO jsdoc here to intentionally leave it
        // out of autogenerated documentation pages to reduce accidental misuse.
        addFrameworkForLogging(framework) {
            addFrameworkForLogging(this._delegate, framework);
        }
        onAuthStateChanged(nextOrObserver, errorFn, completed) {
            const { next, error, complete } = wrapObservers(nextOrObserver, errorFn, completed);
            return this._delegate.onAuthStateChanged(next, error, complete);
        }
        onIdTokenChanged(nextOrObserver, errorFn, completed) {
            const { next, error, complete } = wrapObservers(nextOrObserver, errorFn, completed);
            return this._delegate.onIdTokenChanged(next, error, complete);
        }
        sendSignInLinkToEmail(email, actionCodeSettings) {
            return sendSignInLinkToEmail(this._delegate, email, actionCodeSettings);
        }
        sendPasswordResetEmail(email, actionCodeSettings) {
            return sendPasswordResetEmail(this._delegate, email, actionCodeSettings || undefined);
        }
        async setPersistence(persistence) {
            _validatePersistenceArgument(this._delegate, persistence);
            let converted;
            switch (persistence) {
                case Persistence.SESSION:
                    converted = browserSessionPersistence;
                    break;
                case Persistence.LOCAL:
                    // Not using isIndexedDBAvailable() since it only checks if indexedDB is defined.
                    const isIndexedDBFullySupported = await _getInstance(indexedDBLocalPersistence)
                        ._isAvailable();
                    converted = isIndexedDBFullySupported
                        ? indexedDBLocalPersistence
                        : browserLocalPersistence;
                    break;
                case Persistence.NONE:
                    converted = inMemoryPersistence;
                    break;
                default:
                    return _fail("argument-error" /* ARGUMENT_ERROR */, {
                        appName: this._delegate.name
                    });
            }
            return this._delegate.setPersistence(converted);
        }
        signInAndRetrieveDataWithCredential(credential) {
            return this.signInWithCredential(credential);
        }
        signInAnonymously() {
            return convertCredential(this._delegate, signInAnonymously(this._delegate));
        }
        signInWithCredential(credential) {
            return convertCredential(this._delegate, signInWithCredential(this._delegate, credential));
        }
        signInWithCustomToken(token) {
            return convertCredential(this._delegate, signInWithCustomToken(this._delegate, token));
        }
        signInWithEmailAndPassword(email, password) {
            return convertCredential(this._delegate, signInWithEmailAndPassword(this._delegate, email, password));
        }
        signInWithEmailLink(email, emailLink) {
            return convertCredential(this._delegate, signInWithEmailLink(this._delegate, email, emailLink));
        }
        signInWithPhoneNumber(phoneNumber, applicationVerifier) {
            return convertConfirmationResult(this._delegate, signInWithPhoneNumber(this._delegate, phoneNumber, applicationVerifier));
        }
        async signInWithPopup(provider) {
            _assert$1(_isPopupRedirectSupported(), this._delegate, "operation-not-supported-in-this-environment" /* OPERATION_NOT_SUPPORTED */);
            return convertCredential(this._delegate, signInWithPopup(this._delegate, provider, CompatPopupRedirectResolver));
        }
        async signInWithRedirect(provider) {
            _assert$1(_isPopupRedirectSupported(), this._delegate, "operation-not-supported-in-this-environment" /* OPERATION_NOT_SUPPORTED */);
            await _savePersistenceForRedirect(this._delegate);
            return signInWithRedirect(this._delegate, provider, CompatPopupRedirectResolver);
        }
        updateCurrentUser(user) {
            // remove ts-ignore once overloads are defined for exp functions to accept compat objects
            // @ts-ignore
            return this._delegate.updateCurrentUser(user);
        }
        verifyPasswordResetCode(code) {
            return verifyPasswordResetCode(this._delegate, code);
        }
        unwrap() {
            return this._delegate;
        }
        _delete() {
            return this._delegate._delete();
        }
        linkUnderlyingAuth() {
            this._delegate.wrapped = () => this;
        }
    }
    Auth.Persistence = Persistence;
    function wrapObservers(nextOrObserver, error, complete) {
        let next = nextOrObserver;
        if (typeof nextOrObserver !== 'function') {
            ({ next, error, complete } = nextOrObserver);
        }
        // We know 'next' is now a function
        const oldNext = next;
        const newNext = (user) => oldNext(user && User.getOrCreate(user));
        return {
            next: newNext,
            error: error,
            complete
        };
    }
    function buildPersistenceHierarchy(apiKey, appName) {
        // Note this is slightly different behavior: in this case, the stored
        // persistence is checked *first* rather than last. This is because we want
        // to prefer stored persistence type in the hierarchy. This is an empty
        // array if window is not available or there is no pending redirect
        const persistences = _getPersistencesFromRedirect(apiKey, appName);
        // If "self" is available, add indexedDB
        if (typeof self !== 'undefined' &&
            !persistences.includes(indexedDBLocalPersistence)) {
            persistences.push(indexedDBLocalPersistence);
        }
        // If "window" is available, add HTML Storage persistences
        if (typeof window !== 'undefined') {
            for (const persistence of [
                browserLocalPersistence,
                browserSessionPersistence
            ]) {
                if (!persistences.includes(persistence)) {
                    persistences.push(persistence);
                }
            }
        }
        // Add in-memory as a final fallback
        if (!persistences.includes(inMemoryPersistence)) {
            persistences.push(inMemoryPersistence);
        }
        return persistences;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class PhoneAuthProvider {
        constructor() {
            this.providerId = 'phone';
            // TODO: remove ts-ignore when moving types from auth-types to auth-compat
            // @ts-ignore
            this._delegate = new PhoneAuthProvider$1(unwrap(firebase.auth()));
        }
        static credential(verificationId, verificationCode) {
            return PhoneAuthProvider$1.credential(verificationId, verificationCode);
        }
        verifyPhoneNumber(phoneInfoOptions, applicationVerifier) {
            return this._delegate.verifyPhoneNumber(
            // The implementation matches but the types are subtly incompatible
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            phoneInfoOptions, applicationVerifier);
        }
        unwrap() {
            return this._delegate;
        }
    }
    PhoneAuthProvider.PHONE_SIGN_IN_METHOD = PhoneAuthProvider$1.PHONE_SIGN_IN_METHOD;
    PhoneAuthProvider.PROVIDER_ID = PhoneAuthProvider$1.PROVIDER_ID;

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const _assert = _assert$4;
    class RecaptchaVerifier {
        constructor(container, parameters, app = firebase.app()) {
            var _a;
            // API key is required for web client RPC calls.
            _assert((_a = app.options) === null || _a === void 0 ? void 0 : _a.apiKey, "invalid-api-key" /* INVALID_API_KEY */, {
                appName: app.name
            });
            this._delegate = new RecaptchaVerifier$1(container, 
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            parameters, 
            // TODO: remove ts-ignore when moving types from auth-types to auth-compat
            // @ts-ignore
            app.auth());
            this.type = this._delegate.type;
        }
        clear() {
            this._delegate.clear();
        }
        render() {
            return this._delegate.render();
        }
        verify() {
            return this._delegate.verify();
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const AUTH_TYPE = 'auth-compat';
    // Create auth components to register with firebase.
    // Provides Auth public APIs.
    function registerAuthCompat(instance) {
        instance.INTERNAL.registerComponent(new Component$1(AUTH_TYPE, container => {
            // getImmediate for FirebaseApp will always succeed
            const app = container.getProvider('app-compat').getImmediate();
            const authProvider = container.getProvider('auth');
            return new Auth(app, authProvider);
        }, "PUBLIC" /* PUBLIC */)
            .setServiceProps({
            ActionCodeInfo: {
                Operation: {
                    EMAIL_SIGNIN: ActionCodeOperation.EMAIL_SIGNIN,
                    PASSWORD_RESET: ActionCodeOperation.PASSWORD_RESET,
                    RECOVER_EMAIL: ActionCodeOperation.RECOVER_EMAIL,
                    REVERT_SECOND_FACTOR_ADDITION: ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION,
                    VERIFY_AND_CHANGE_EMAIL: ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL,
                    VERIFY_EMAIL: ActionCodeOperation.VERIFY_EMAIL
                }
            },
            EmailAuthProvider: EmailAuthProvider,
            FacebookAuthProvider: FacebookAuthProvider,
            GithubAuthProvider: GithubAuthProvider,
            GoogleAuthProvider: GoogleAuthProvider,
            OAuthProvider: OAuthProvider,
            SAMLAuthProvider: SAMLAuthProvider,
            PhoneAuthProvider: PhoneAuthProvider,
            PhoneMultiFactorGenerator: PhoneMultiFactorGenerator,
            RecaptchaVerifier: RecaptchaVerifier,
            TwitterAuthProvider: TwitterAuthProvider,
            Auth,
            AuthCredential: AuthCredential,
            Error: FirebaseError
        })
            .setInstantiationMode("LAZY" /* LAZY */)
            .setMultipleInstances(false));
        instance.registerVersion(name$1, version$1);
    }
    registerAuthCompat(firebase);

    const name = "@firebase/firestore-compat";
    const version = "0.1.21";

    /**
     * @license
     * Copyright 2021 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function validateSetOptions(methodName, options) {
        if (options === undefined) {
            return {
                merge: false
            };
        }
        if (options.mergeFields !== undefined && options.merge !== undefined) {
            throw new Q('invalid-argument', `Invalid options passed to function ${methodName}(): You cannot ` +
                'specify both "merge" and "mergeFields".');
        }
        return options;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Helper function to assert Uint8Array is available at runtime. */
    function assertUint8ArrayAvailable() {
        if (typeof Uint8Array === 'undefined') {
            throw new Q('unimplemented', 'Uint8Arrays are not available in this environment.');
        }
    }
    /** Helper function to assert Base64 functions are available at runtime. */
    function assertBase64Available() {
        if (!Ht()) {
            throw new Q('unimplemented', 'Blobs are unavailable in Firestore in this environment.');
        }
    }
    /** Immutable class holding a blob (binary data) */
    class Blob$1 {
        constructor(_delegate) {
            this._delegate = _delegate;
        }
        static fromBase64String(base64) {
            assertBase64Available();
            return new Blob$1(eh.fromBase64String(base64));
        }
        static fromUint8Array(array) {
            assertUint8ArrayAvailable();
            return new Blob$1(eh.fromUint8Array(array));
        }
        toBase64() {
            assertBase64Available();
            return this._delegate.toBase64();
        }
        toUint8Array() {
            assertUint8ArrayAvailable();
            return this._delegate.toUint8Array();
        }
        isEqual(other) {
            return this._delegate.isEqual(other._delegate);
        }
        toString() {
            return 'Blob(base64: ' + this.toBase64() + ')';
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function isPartialObserver(obj) {
        return implementsAnyMethods(obj, ['next', 'error', 'complete']);
    }
    /**
     * Returns true if obj is an object and contains at least one of the specified
     * methods.
     */
    function implementsAnyMethods(obj, methods) {
        if (typeof obj !== 'object' || obj === null) {
            return false;
        }
        const object = obj;
        for (const method of methods) {
            if (method in object && typeof object[method] === 'function') {
                return true;
            }
        }
        return false;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * The persistence provider included with the full Firestore SDK.
     */
    class IndexedDbPersistenceProvider {
        enableIndexedDbPersistence(firestore, forceOwnership) {
            return qa(firestore._delegate, { forceOwnership });
        }
        enableMultiTabIndexedDbPersistence(firestore) {
            return Ka(firestore._delegate);
        }
        clearIndexedDbPersistence(firestore) {
            return Qa(firestore._delegate);
        }
    }
    /**
     * Compat class for Firestore. Exposes Firestore Legacy API, but delegates
     * to the functional API of firestore-exp.
     */
    class Firestore {
        constructor(databaseIdOrApp, _delegate, _persistenceProvider) {
            this._delegate = _delegate;
            this._persistenceProvider = _persistenceProvider;
            this.INTERNAL = {
                delete: () => this.terminate()
            };
            if (!(databaseIdOrApp instanceof re)) {
                this._appCompat = databaseIdOrApp;
            }
        }
        get _databaseId() {
            return this._delegate._databaseId;
        }
        settings(settingsLiteral) {
            const currentSettings = this._delegate._getSettings();
            if (!settingsLiteral.merge &&
                currentSettings.host !== settingsLiteral.host) {
                $('You are overriding the original host. If you did not intend ' +
                    'to override your settings, use {merge: true}.');
            }
            if (settingsLiteral.merge) {
                settingsLiteral = Object.assign(Object.assign({}, currentSettings), settingsLiteral);
                // Remove the property from the settings once the merge is completed
                delete settingsLiteral.merge;
            }
            this._delegate._setSettings(settingsLiteral);
        }
        useEmulator(host, port, options = {}) {
            Ra(this._delegate, host, port, options);
        }
        enableNetwork() {
            return Wa(this._delegate);
        }
        disableNetwork() {
            return za(this._delegate);
        }
        enablePersistence(settings) {
            let synchronizeTabs = false;
            let experimentalForceOwningTab = false;
            if (settings) {
                synchronizeTabs = !!settings.synchronizeTabs;
                experimentalForceOwningTab = !!settings.experimentalForceOwningTab;
                ma('synchronizeTabs', synchronizeTabs, 'experimentalForceOwningTab', experimentalForceOwningTab);
            }
            return synchronizeTabs
                ? this._persistenceProvider.enableMultiTabIndexedDbPersistence(this)
                : this._persistenceProvider.enableIndexedDbPersistence(this, experimentalForceOwningTab);
        }
        clearPersistence() {
            return this._persistenceProvider.clearIndexedDbPersistence(this);
        }
        terminate() {
            if (this._appCompat) {
                this._appCompat._removeServiceInstance('firestore-compat');
                this._appCompat._removeServiceInstance('firestore');
            }
            return this._delegate._delete();
        }
        waitForPendingWrites() {
            return ja(this._delegate);
        }
        onSnapshotsInSync(arg) {
            return Al(this._delegate, arg);
        }
        get app() {
            if (!this._appCompat) {
                throw new Q('failed-precondition', "Firestore was not initialized using the Firebase SDK. 'app' is " +
                    'not available');
            }
            return this._appCompat;
        }
        collection(pathString) {
            try {
                return new CollectionReference(this, Va(this._delegate, pathString));
            }
            catch (e) {
                throw replaceFunctionName(e, 'collection()', 'Firestore.collection()');
            }
        }
        doc(pathString) {
            try {
                return new DocumentReference(this, Da(this._delegate, pathString));
            }
            catch (e) {
                throw replaceFunctionName(e, 'doc()', 'Firestore.doc()');
            }
        }
        collectionGroup(collectionId) {
            try {
                return new Query(this, Sa(this._delegate, collectionId));
            }
            catch (e) {
                throw replaceFunctionName(e, 'collectionGroup()', 'Firestore.collectionGroup()');
            }
        }
        runTransaction(updateFunction) {
            return vl(this._delegate, transaction => updateFunction(new Transaction(this, transaction)));
        }
        batch() {
            La(this._delegate);
            return new WriteBatch(new al(this._delegate, mutations => Rl(this._delegate, mutations)));
        }
        loadBundle(bundleData) {
            return Ja(this._delegate, bundleData);
        }
        namedQuery(name) {
            return Ya(this._delegate, name).then(expQuery => {
                if (!expQuery) {
                    return null;
                }
                return new Query(this, 
                // We can pass `expQuery` here directly since named queries don't have a UserDataConverter.
                // Otherwise, we would have to create a new ExpQuery and pass the old UserDataConverter.
                expQuery);
            });
        }
    }
    class UserDataWriter extends ol {
        constructor(firestore) {
            super();
            this.firestore = firestore;
        }
        convertBytes(bytes) {
            return new Blob$1(new eh(bytes));
        }
        convertReference(name) {
            const key = this.convertDocumentKey(name, this.firestore._databaseId);
            return DocumentReference.forKey(key, this.firestore, /* converter= */ null);
        }
    }
    function setLogLevel(level) {
        O(level);
    }
    /**
     * A reference to a transaction.
     */
    class Transaction {
        constructor(_firestore, _delegate) {
            this._firestore = _firestore;
            this._delegate = _delegate;
            this._userDataWriter = new UserDataWriter(_firestore);
        }
        get(documentRef) {
            const ref = castReference(documentRef);
            return this._delegate
                .get(ref)
                .then(result => new DocumentSnapshot(this._firestore, new kh(this._firestore._delegate, this._userDataWriter, result._key, result._document, result.metadata, ref.converter)));
        }
        set(documentRef, data, options) {
            const ref = castReference(documentRef);
            if (options) {
                validateSetOptions('Transaction.set', options);
                this._delegate.set(ref, data, options);
            }
            else {
                this._delegate.set(ref, data);
            }
            return this;
        }
        update(documentRef, dataOrField, value, ...moreFieldsAndValues) {
            const ref = castReference(documentRef);
            if (arguments.length === 2) {
                this._delegate.update(ref, dataOrField);
            }
            else {
                this._delegate.update(ref, dataOrField, value, ...moreFieldsAndValues);
            }
            return this;
        }
        delete(documentRef) {
            const ref = castReference(documentRef);
            this._delegate.delete(ref);
            return this;
        }
    }
    class WriteBatch {
        constructor(_delegate) {
            this._delegate = _delegate;
        }
        set(documentRef, data, options) {
            const ref = castReference(documentRef);
            if (options) {
                validateSetOptions('WriteBatch.set', options);
                this._delegate.set(ref, data, options);
            }
            else {
                this._delegate.set(ref, data);
            }
            return this;
        }
        update(documentRef, dataOrField, value, ...moreFieldsAndValues) {
            const ref = castReference(documentRef);
            if (arguments.length === 2) {
                this._delegate.update(ref, dataOrField);
            }
            else {
                this._delegate.update(ref, dataOrField, value, ...moreFieldsAndValues);
            }
            return this;
        }
        delete(documentRef) {
            const ref = castReference(documentRef);
            this._delegate.delete(ref);
            return this;
        }
        commit() {
            return this._delegate.commit();
        }
    }
    /**
     * Wraps a `PublicFirestoreDataConverter` translating the types from the
     * experimental SDK into corresponding types from the Classic SDK before passing
     * them to the wrapped converter.
     */
    class FirestoreDataConverter {
        constructor(_firestore, _userDataWriter, _delegate) {
            this._firestore = _firestore;
            this._userDataWriter = _userDataWriter;
            this._delegate = _delegate;
        }
        fromFirestore(snapshot, options) {
            const expSnapshot = new Oh(this._firestore._delegate, this._userDataWriter, snapshot._key, snapshot._document, snapshot.metadata, 
            /* converter= */ null);
            return this._delegate.fromFirestore(new QueryDocumentSnapshot(this._firestore, expSnapshot), options !== null && options !== void 0 ? options : {});
        }
        toFirestore(modelObject, options) {
            if (!options) {
                return this._delegate.toFirestore(modelObject);
            }
            else {
                return this._delegate.toFirestore(modelObject, options);
            }
        }
        // Use the same instance of `FirestoreDataConverter` for the given instances
        // of `Firestore` and `PublicFirestoreDataConverter` so that isEqual() will
        // compare equal for two objects created with the same converter instance.
        static getInstance(firestore, converter) {
            const converterMapByFirestore = FirestoreDataConverter.INSTANCES;
            let untypedConverterByConverter = converterMapByFirestore.get(firestore);
            if (!untypedConverterByConverter) {
                untypedConverterByConverter = new WeakMap();
                converterMapByFirestore.set(firestore, untypedConverterByConverter);
            }
            let instance = untypedConverterByConverter.get(converter);
            if (!instance) {
                instance = new FirestoreDataConverter(firestore, new UserDataWriter(firestore), converter);
                untypedConverterByConverter.set(converter, instance);
            }
            return instance;
        }
    }
    FirestoreDataConverter.INSTANCES = new WeakMap();
    /**
     * A reference to a particular document in a collection in the database.
     */
    class DocumentReference {
        constructor(firestore, _delegate) {
            this.firestore = firestore;
            this._delegate = _delegate;
            this._userDataWriter = new UserDataWriter(firestore);
        }
        static forPath(path, firestore, converter) {
            if (path.length % 2 !== 0) {
                throw new Q('invalid-argument', 'Invalid document reference. Document ' +
                    'references must have an even number of segments, but ' +
                    `${path.canonicalString()} has ${path.length}`);
            }
            return new DocumentReference(firestore, new ba(firestore._delegate, converter, new dt(path)));
        }
        static forKey(key, firestore, converter) {
            return new DocumentReference(firestore, new ba(firestore._delegate, converter, key));
        }
        get id() {
            return this._delegate.id;
        }
        get parent() {
            return new CollectionReference(this.firestore, this._delegate.parent);
        }
        get path() {
            return this._delegate.path;
        }
        collection(pathString) {
            try {
                return new CollectionReference(this.firestore, Va(this._delegate, pathString));
            }
            catch (e) {
                throw replaceFunctionName(e, 'collection()', 'DocumentReference.collection()');
            }
        }
        isEqual(other) {
            other = getModularInstance(other);
            if (!(other instanceof ba)) {
                return false;
            }
            return Ca(this._delegate, other);
        }
        set(value, options) {
            options = validateSetOptions('DocumentReference.set', options);
            try {
                if (options) {
                    return yl(this._delegate, value, options);
                }
                else {
                    return yl(this._delegate, value);
                }
            }
            catch (e) {
                throw replaceFunctionName(e, 'setDoc()', 'DocumentReference.set()');
            }
        }
        update(fieldOrUpdateData, value, ...moreFieldsAndValues) {
            try {
                if (arguments.length === 1) {
                    return pl(this._delegate, fieldOrUpdateData);
                }
                else {
                    return pl(this._delegate, fieldOrUpdateData, value, ...moreFieldsAndValues);
                }
            }
            catch (e) {
                throw replaceFunctionName(e, 'updateDoc()', 'DocumentReference.update()');
            }
        }
        delete() {
            return Il(this._delegate);
        }
        onSnapshot(...args) {
            const options = extractSnapshotOptions(args);
            const observer = wrapObserver(args, result => new DocumentSnapshot(this.firestore, new kh(this.firestore._delegate, this._userDataWriter, result._key, result._document, result.metadata, this._delegate.converter)));
            return El(this._delegate, options, observer);
        }
        get(options) {
            let snap;
            if ((options === null || options === void 0 ? void 0 : options.source) === 'cache') {
                snap = dl(this._delegate);
            }
            else if ((options === null || options === void 0 ? void 0 : options.source) === 'server') {
                snap = _l(this._delegate);
            }
            else {
                snap = ll(this._delegate);
            }
            return snap.then(result => new DocumentSnapshot(this.firestore, new kh(this.firestore._delegate, this._userDataWriter, result._key, result._document, result.metadata, this._delegate.converter)));
        }
        withConverter(converter) {
            return new DocumentReference(this.firestore, converter
                ? this._delegate.withConverter(FirestoreDataConverter.getInstance(this.firestore, converter))
                : this._delegate.withConverter(null));
        }
    }
    /**
     * Replaces the function name in an error thrown by the firestore-exp API
     * with the function names used in the classic API.
     */
    function replaceFunctionName(e, original, updated) {
        e.message = e.message.replace(original, updated);
        return e;
    }
    /**
     * Iterates the list of arguments from an `onSnapshot` call and returns the
     * first argument that may be an `SnapshotListenOptions` object. Returns an
     * empty object if none is found.
     */
    function extractSnapshotOptions(args) {
        for (const arg of args) {
            if (typeof arg === 'object' && !isPartialObserver(arg)) {
                return arg;
            }
        }
        return {};
    }
    /**
     * Creates an observer that can be passed to the firestore-exp SDK. The
     * observer converts all observed values into the format expected by the classic
     * SDK.
     *
     * @param args - The list of arguments from an `onSnapshot` call.
     * @param wrapper - The function that converts the firestore-exp type into the
     * type used by this shim.
     */
    function wrapObserver(args, wrapper) {
        var _a, _b;
        let userObserver;
        if (isPartialObserver(args[0])) {
            userObserver = args[0];
        }
        else if (isPartialObserver(args[1])) {
            userObserver = args[1];
        }
        else if (typeof args[0] === 'function') {
            userObserver = {
                next: args[0],
                error: args[1],
                complete: args[2]
            };
        }
        else {
            userObserver = {
                next: args[1],
                error: args[2],
                complete: args[3]
            };
        }
        return {
            next: val => {
                if (userObserver.next) {
                    userObserver.next(wrapper(val));
                }
            },
            error: (_a = userObserver.error) === null || _a === void 0 ? void 0 : _a.bind(userObserver),
            complete: (_b = userObserver.complete) === null || _b === void 0 ? void 0 : _b.bind(userObserver)
        };
    }
    class DocumentSnapshot {
        constructor(_firestore, _delegate) {
            this._firestore = _firestore;
            this._delegate = _delegate;
        }
        get ref() {
            return new DocumentReference(this._firestore, this._delegate.ref);
        }
        get id() {
            return this._delegate.id;
        }
        get metadata() {
            return this._delegate.metadata;
        }
        get exists() {
            return this._delegate.exists();
        }
        data(options) {
            return this._delegate.data(options);
        }
        get(fieldPath, options
        // We are using `any` here to avoid an explicit cast by our users.
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        ) {
            return this._delegate.get(fieldPath, options);
        }
        isEqual(other) {
            return $h(this._delegate, other._delegate);
        }
    }
    class QueryDocumentSnapshot extends DocumentSnapshot {
        data(options) {
            const data = this._delegate.data(options);
            q(data !== undefined);
            return data;
        }
    }
    class Query {
        constructor(firestore, _delegate) {
            this.firestore = firestore;
            this._delegate = _delegate;
            this._userDataWriter = new UserDataWriter(firestore);
        }
        where(fieldPath, opStr, value) {
            try {
                // The "as string" cast is a little bit of a hack. `where` accepts the
                // FieldPath Compat type as input, but is not typed as such in order to
                // not expose this via our public typings file.
                return new Query(this.firestore, Uh(this._delegate, Kh(fieldPath, opStr, value)));
            }
            catch (e) {
                throw replaceFunctionName(e, /(orderBy|where)\(\)/, 'Query.$1()');
            }
        }
        orderBy(fieldPath, directionStr) {
            try {
                // The "as string" cast is a little bit of a hack. `orderBy` accepts the
                // FieldPath Compat type as input, but is not typed as such in order to
                // not expose this via our public typings file.
                return new Query(this.firestore, Uh(this._delegate, Qh(fieldPath, directionStr)));
            }
            catch (e) {
                throw replaceFunctionName(e, /(orderBy|where)\(\)/, 'Query.$1()');
            }
        }
        limit(n) {
            try {
                return new Query(this.firestore, Uh(this._delegate, Wh(n)));
            }
            catch (e) {
                throw replaceFunctionName(e, 'limit()', 'Query.limit()');
            }
        }
        limitToLast(n) {
            try {
                return new Query(this.firestore, Uh(this._delegate, zh(n)));
            }
            catch (e) {
                throw replaceFunctionName(e, 'limitToLast()', 'Query.limitToLast()');
            }
        }
        startAt(...args) {
            try {
                return new Query(this.firestore, Uh(this._delegate, Jh(...args)));
            }
            catch (e) {
                throw replaceFunctionName(e, 'startAt()', 'Query.startAt()');
            }
        }
        startAfter(...args) {
            try {
                return new Query(this.firestore, Uh(this._delegate, Yh(...args)));
            }
            catch (e) {
                throw replaceFunctionName(e, 'startAfter()', 'Query.startAfter()');
            }
        }
        endBefore(...args) {
            try {
                return new Query(this.firestore, Uh(this._delegate, Zh(...args)));
            }
            catch (e) {
                throw replaceFunctionName(e, 'endBefore()', 'Query.endBefore()');
            }
        }
        endAt(...args) {
            try {
                return new Query(this.firestore, Uh(this._delegate, tl(...args)));
            }
            catch (e) {
                throw replaceFunctionName(e, 'endAt()', 'Query.endAt()');
            }
        }
        isEqual(other) {
            return xa(this._delegate, other._delegate);
        }
        get(options) {
            let query;
            if ((options === null || options === void 0 ? void 0 : options.source) === 'cache') {
                query = ml(this._delegate);
            }
            else if ((options === null || options === void 0 ? void 0 : options.source) === 'server') {
                query = gl(this._delegate);
            }
            else {
                query = wl(this._delegate);
            }
            return query.then(result => new QuerySnapshot(this.firestore, new Mh(this.firestore._delegate, this._userDataWriter, this._delegate, result._snapshot)));
        }
        onSnapshot(...args) {
            const options = extractSnapshotOptions(args);
            const observer = wrapObserver(args, snap => new QuerySnapshot(this.firestore, new Mh(this.firestore._delegate, this._userDataWriter, this._delegate, snap._snapshot)));
            return El(this._delegate, options, observer);
        }
        withConverter(converter) {
            return new Query(this.firestore, converter
                ? this._delegate.withConverter(FirestoreDataConverter.getInstance(this.firestore, converter))
                : this._delegate.withConverter(null));
        }
    }
    class DocumentChange {
        constructor(_firestore, _delegate) {
            this._firestore = _firestore;
            this._delegate = _delegate;
        }
        get type() {
            return this._delegate.type;
        }
        get doc() {
            return new QueryDocumentSnapshot(this._firestore, this._delegate.doc);
        }
        get oldIndex() {
            return this._delegate.oldIndex;
        }
        get newIndex() {
            return this._delegate.newIndex;
        }
    }
    class QuerySnapshot {
        constructor(_firestore, _delegate) {
            this._firestore = _firestore;
            this._delegate = _delegate;
        }
        get query() {
            return new Query(this._firestore, this._delegate.query);
        }
        get metadata() {
            return this._delegate.metadata;
        }
        get size() {
            return this._delegate.size;
        }
        get empty() {
            return this._delegate.empty;
        }
        get docs() {
            return this._delegate.docs.map(doc => new QueryDocumentSnapshot(this._firestore, doc));
        }
        docChanges(options) {
            return this._delegate
                .docChanges(options)
                .map(docChange => new DocumentChange(this._firestore, docChange));
        }
        forEach(callback, thisArg) {
            this._delegate.forEach(snapshot => {
                callback.call(thisArg, new QueryDocumentSnapshot(this._firestore, snapshot));
            });
        }
        isEqual(other) {
            return $h(this._delegate, other._delegate);
        }
    }
    class CollectionReference extends Query {
        constructor(firestore, _delegate) {
            super(firestore, _delegate);
            this.firestore = firestore;
            this._delegate = _delegate;
        }
        get id() {
            return this._delegate.id;
        }
        get path() {
            return this._delegate.path;
        }
        get parent() {
            const docRef = this._delegate.parent;
            return docRef ? new DocumentReference(this.firestore, docRef) : null;
        }
        doc(documentPath) {
            try {
                if (documentPath === undefined) {
                    // Call `doc` without `documentPath` if `documentPath` is `undefined`
                    // as `doc` validates the number of arguments to prevent users from
                    // accidentally passing `undefined`.
                    return new DocumentReference(this.firestore, Da(this._delegate));
                }
                else {
                    return new DocumentReference(this.firestore, Da(this._delegate, documentPath));
                }
            }
            catch (e) {
                throw replaceFunctionName(e, 'doc()', 'CollectionReference.doc()');
            }
        }
        add(data) {
            return Tl(this._delegate, data).then(docRef => new DocumentReference(this.firestore, docRef));
        }
        isEqual(other) {
            return Ca(this._delegate, other._delegate);
        }
        withConverter(converter) {
            return new CollectionReference(this.firestore, converter
                ? this._delegate.withConverter(FirestoreDataConverter.getInstance(this.firestore, converter))
                : this._delegate.withConverter(null));
        }
    }
    function castReference(documentRef) {
        return Ia(documentRef, ba);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // The objects that are a part of this API are exposed to third-parties as
    // compiled javascript so we want to flag our private members with a leading
    // underscore to discourage their use.
    /**
     * A `FieldPath` refers to a field in a document. The path may consist of a
     * single field name (referring to a top-level field in the document), or a list
     * of field names (referring to a nested field in the document).
     */
    class FieldPath {
        /**
         * Creates a FieldPath from the provided field names. If more than one field
         * name is provided, the path will point to a nested field in a document.
         *
         * @param fieldNames - A list of field names.
         */
        constructor(...fieldNames) {
            this._delegate = new Za(...fieldNames);
        }
        static documentId() {
            /**
             * Internal Note: The backend doesn't technically support querying by
             * document ID. Instead it queries by the entire document name (full path
             * included), but in the cases we currently support documentId(), the net
             * effect is the same.
             */
            return new FieldPath(ft.keyField().canonicalString());
        }
        isEqual(other) {
            other = getModularInstance(other);
            if (!(other instanceof Za)) {
                return false;
            }
            return this._delegate._internalPath.isEqual(other._internalPath);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class FieldValue {
        constructor(_delegate) {
            this._delegate = _delegate;
        }
        static serverTimestamp() {
            const delegate = Sl();
            delegate._methodName = 'FieldValue.serverTimestamp';
            return new FieldValue(delegate);
        }
        static delete() {
            const delegate = Vl();
            delegate._methodName = 'FieldValue.delete';
            return new FieldValue(delegate);
        }
        static arrayUnion(...elements) {
            const delegate = Dl(...elements);
            delegate._methodName = 'FieldValue.arrayUnion';
            return new FieldValue(delegate);
        }
        static arrayRemove(...elements) {
            const delegate = Cl(...elements);
            delegate._methodName = 'FieldValue.arrayRemove';
            return new FieldValue(delegate);
        }
        static increment(n) {
            const delegate = xl(n);
            delegate._methodName = 'FieldValue.increment';
            return new FieldValue(delegate);
        }
        isEqual(other) {
            return this._delegate.isEqual(other._delegate);
        }
    }

    /**
     * @license
     * Copyright 2021 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const firestoreNamespace = {
        Firestore,
        GeoPoint: sh,
        Timestamp: ut,
        Blob: Blob$1,
        Transaction,
        WriteBatch,
        DocumentReference,
        DocumentSnapshot,
        Query,
        QueryDocumentSnapshot,
        QuerySnapshot,
        CollectionReference,
        FieldPath,
        FieldValue,
        setLogLevel,
        CACHE_SIZE_UNLIMITED: Ma
    };
    /**
     * Configures Firestore as part of the Firebase SDK by calling registerComponent.
     *
     * @param firebase - The FirebaseNamespace to register Firestore with
     * @param firestoreFactory - A factory function that returns a new Firestore
     *    instance.
     */
    function configureForFirebase(firebase, firestoreFactory) {
        firebase.INTERNAL.registerComponent(new Component$1('firestore-compat', container => {
            const app = container.getProvider('app-compat').getImmediate();
            const firestoreExp = container.getProvider('firestore').getImmediate();
            return firestoreFactory(app, firestoreExp);
        }, 'PUBLIC').setServiceProps(Object.assign({}, firestoreNamespace)));
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Registers the main Firestore build with the components framework.
     * Persistence can be enabled via `firebase.firestore().enablePersistence()`.
     */
    function registerFirestore(instance) {
        configureForFirebase(instance, (app, firestoreExp) => new Firestore(app, firestoreExp, new IndexedDbPersistenceProvider()));
        instance.registerVersion(name, version);
    }
    registerFirestore(firebase);

    const config$1 = {
      apiKey: 'AIzaSyBJJ7P4v4R9899S8-ZPhy-dNr_Md2iG6GA',
      authDomain: 'capstone-803db.firebaseapp.com',
      databaseURL: 'https://capstone-803db-default-rtdb.firebaseio.com',
      projectId: 'capstone-803db',
      storageBucket: 'capstone-803db.appspot.com',
      messagingSenderId: '104089541669',
      appId: '1:104089541669:web:51ff5ab4a495243cfd33cc',
    };
    firebase.initializeApp(config$1);

    const db = firebase.firestore();
    const auth = firebase.auth();
    const googleProvider = new firebase.auth.GoogleAuthProvider();
    googleProvider.setCustomParameters({
      prompt: 'select_account',
    });
    googleProvider.addScope('https://www.googleapis.com/auth/drive');
    googleProvider.addScope('https://www.googleapis.com/auth/drive.file');

    /* eslint-disable max-len */

    const fetchDataFromFirebase = async (user, dateTimeDictionary) => {
      try {
        const data = [];
        const docRef = Da(db, 'users', user.uid);

        let colRef = null;
        if (dateTimeDictionary.startDateTime === '' || dateTimeDictionary.endDateTime === '') {
          colRef = Uh(Va(docRef, 'geojson'));
        } else {
          const startDateTime = firebase.firestore.Timestamp.fromDate(new Date(dateTimeDictionary.startDateTime));
          const endDateTime = firebase.firestore.Timestamp.fromDate(new Date(dateTimeDictionary.endDateTime));
          colRef = Uh(Va(docRef, 'geojson'), Kh('dateTime', '>', startDateTime), Kh('dateTime', '<', endDateTime), Qh('dateTime', 'desc'));
        }

        const querySnapshot = await wl(colRef);
        querySnapshot.forEach((document) => {
          const docData = document.data();
          docData.dataId = document.id;
          data.push(docData);
        });

        return { status: 200, data };
      } catch (error) {
        return error;
      }
    };

    const deleteDocumentFromFirebase = async (user, documentId) => {
      try {
        const docRef = Da(db, 'users', user.uid);
        const colRef = Uh(Va(docRef, 'geojson'));
        const querySnapshot = await wl(colRef);
        let isDocumentDeleted = false;
        querySnapshot.forEach((document) => {
          if (document.id === documentId) {
            Il(document.ref);
            isDocumentDeleted = true;
          }
        });
        if (isDocumentDeleted) {
          return { status: 200, message: 'Deleted Document' };
        }
        return { status: 400, message: 'Document does not exist' };
      } catch (error) {
        return error;
      }
    };

    /* eslint-disable import/prefer-default-export */
    const convertFirestoreTimeStampToDateTime = (firestoreTimeStamp) => {
      const dateTime = new Date(firestoreTimeStamp.seconds * 1000);
      return dateTime;
    };

    const convertDateTimeToString = (timeStamp) => {
      let dateTimeString = '';
      if (typeof timeStamp !== 'string') {
        const tempDateTime = convertFirestoreTimeStampToDateTime(timeStamp);
        dateTimeString = `${tempDateTime.getFullYear()}-${tempDateTime.getMonth() + 1}-${tempDateTime.getDate()} ${tempDateTime.getHours()}:${tempDateTime.getMinutes()}:${tempDateTime.getSeconds()}`;
      } else {
        dateTimeString = timeStamp;
      }
      return dateTimeString;
    };

    /* eslint-disable prefer-destructuring */

    const getSpeed = (properties) => {
      for (const [key, value] of Object.entries(properties)) {
        const lowerKey = key.toLowerCase();
        if (lowerKey.includes('speed')) {
          return value;
        }
      }
      return 0;
    };

    const gpsJsonToGeojson = (rawData) => {
      const geoJsonArray = [];
      rawData.forEach((rawGeoJsonFile) => {
        const dataId = rawGeoJsonFile.dataId || null;
        const dataName = rawGeoJsonFile.dataName || v4();
        const dateTime = rawGeoJsonFile.dateTime ? convertDateTimeToString(rawGeoJsonFile.dateTime) : null;
        const dataType = rawGeoJsonFile.dataType || rawGeoJsonFile.features[0].geometry.type;
        const hasFilter = !!rawGeoJsonFile.dataName; // If the name exists, that means we need to make a filter

        const geoJson = {
          type: 'FeatureCollection',
          dataId,
          dataName,
          dateTime,
          dataType,
          hasFilter,
          features: [],
        };
        for (const point of rawGeoJsonFile.features) {
          const coordinate = [point.geometry.coordinates[0], point.geometry.coordinates[1]];
          let properties = {};
          if (point.properties === null) {
            properties = {
              Id: `Firebase-${v4()}`,
              Item: 'POI',
              Count: 1,
              Color: 'Green',
            };
          } else {
            properties = point.properties;
            properties['Speed'] = getSpeed(properties);
            properties['Color'] = point.properties['Color'] || '#53a548';
          }

          const feature = {
            type: 'Feature',
            geometry: { type: point.geometry.type, coordinates: coordinate },
            properties,
          };
          geoJson.features.push(feature);
        }
        geoJsonArray.push(geoJson);
      });
      return geoJsonArray;
    };

    const googleSignIn = async () => {
      let accessToken = null;
      await auth.signInWithPopup(googleProvider).then((result) => {
        accessToken = result.credential.accessToken;
      }).catch((error) => error.message);

      return accessToken;
    };

    /* src/components/menu/Profile.svelte generated by Svelte v3.49.0 */

    const file$d = "src/components/menu/Profile.svelte";

    // (40:2) {#if showTerms}
    function create_if_block$7(ctx) {
    	let hr;
    	let t0;
    	let p;
    	let t2;
    	let div;
    	let button;
    	let i;
    	let t3;

    	const block = {
    		c: function create() {
    			hr = element("hr");
    			t0 = space();
    			p = element("p");
    			p.textContent = "Attention! deleting your account will remove all the GPS Data on Firebase. Videos collected through the dashcam will not be deleted.";
    			t2 = space();
    			div = element("div");
    			button = element("button");
    			i = element("i");
    			t3 = text("\n\t\t\t\t\tDelete Account");
    			attr_dev(hr, "class", "my-2");
    			add_location(hr, file$d, 40, 3, 903);
    			add_location(p, file$d, 42, 3, 927);
    			attr_dev(i, "class", "fa-solid fa-trash");
    			add_location(i, file$d, 46, 5, 1159);
    			attr_dev(button, "class", `card-btn btn-error-outline my-1`);
    			add_location(button, file$d, 45, 4, 1103);
    			attr_dev(div, "class", "flex flex-row");
    			add_location(div, file$d, 44, 3, 1071);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, hr, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, p, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div, anchor);
    			append_dev(div, button);
    			append_dev(button, i);
    			append_dev(button, t3);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(hr);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(p);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$7.name,
    		type: "if",
    		source: "(40:2) {#if showTerms}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$e(ctx) {
    	let section;
    	let div4;
    	let div0;
    	let t0;
    	let div3;
    	let div1;
    	let p0;
    	let t2;
    	let div2;
    	let button0;
    	let i0;
    	let t3;
    	let t4;
    	let p1;
    	let t6;
    	let p2;
    	let t7_value = /*user*/ ctx[0].displayName + "";
    	let t7;
    	let t8;
    	let p3;
    	let t10;
    	let p4;
    	let t11_value = /*user*/ ctx[0].email + "";
    	let t11;
    	let t12;
    	let p5;
    	let t14;
    	let p6;
    	let t15_value = /*user*/ ctx[0].emailVerified + "";
    	let t15;
    	let t16;
    	let hr;
    	let t17;
    	let button1;
    	let i1;
    	let t18;
    	let t19;
    	let mounted;
    	let dispose;
    	let if_block = /*showTerms*/ ctx[2] && create_if_block$7(ctx);

    	const block = {
    		c: function create() {
    			section = element("section");
    			div4 = element("div");
    			div0 = element("div");
    			t0 = space();
    			div3 = element("div");
    			div1 = element("div");
    			p0 = element("p");
    			p0.textContent = "Account:";
    			t2 = space();
    			div2 = element("div");
    			button0 = element("button");
    			i0 = element("i");
    			t3 = text("\n\t\t\t\tManage Account");
    			t4 = space();
    			p1 = element("p");
    			p1.textContent = "Name:";
    			t6 = space();
    			p2 = element("p");
    			t7 = text(t7_value);
    			t8 = space();
    			p3 = element("p");
    			p3.textContent = "Email:";
    			t10 = space();
    			p4 = element("p");
    			t11 = text(t11_value);
    			t12 = space();
    			p5 = element("p");
    			p5.textContent = "Email Verified:";
    			t14 = space();
    			p6 = element("p");
    			t15 = text(t15_value);
    			t16 = space();
    			hr = element("hr");
    			t17 = space();
    			button1 = element("button");
    			i1 = element("i");
    			t18 = text(" Sign Out");
    			t19 = space();
    			if (if_block) if_block.c();
    			attr_dev(div0, "class", "float-right");
    			add_location(div0, file$d, 14, 2, 216);
    			add_location(p0, file$d, 18, 5, 319);
    			add_location(div1, file$d, 17, 4, 308);
    			attr_dev(i0, "class", "fa-solid fa-gear");
    			add_location(i0, file$d, 24, 4, 436);
    			attr_dev(button0, "class", "text-center hover:underline");
    			add_location(button0, file$d, 23, 3, 364);
    			add_location(div2, file$d, 22, 3, 355);
    			attr_dev(div3, "class", "flex flow-row justify-between my-1");
    			add_location(div3, file$d, 16, 3, 255);
    			attr_dev(p1, "class", "font-bold my-1");
    			add_location(p1, file$d, 29, 2, 516);
    			add_location(p2, file$d, 30, 2, 554);
    			attr_dev(p3, "class", "font-bold my-1");
    			add_location(p3, file$d, 31, 2, 582);
    			add_location(p4, file$d, 32, 2, 621);
    			attr_dev(p5, "class", "font-bold my-1");
    			add_location(p5, file$d, 33, 2, 643);
    			add_location(p6, file$d, 34, 2, 691);
    			attr_dev(hr, "class", "solid my-2");
    			add_location(hr, file$d, 36, 2, 722);
    			attr_dev(i1, "class", "fa-solid fa-right-from-bracket");
    			add_location(i1, file$d, 37, 69, 817);
    			attr_dev(button1, "class", "card-btn btn-error-outline my-1");
    			add_location(button1, file$d, 37, 2, 750);
    			attr_dev(div4, "class", "p-4");
    			add_location(div4, file$d, 13, 1, 196);
    			attr_dev(section, "class", "card h-fit scale-in-center w-96");
    			add_location(section, file$d, 12, 0, 145);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, div4);
    			append_dev(div4, div0);
    			append_dev(div4, t0);
    			append_dev(div4, div3);
    			append_dev(div3, div1);
    			append_dev(div1, p0);
    			append_dev(div3, t2);
    			append_dev(div3, div2);
    			append_dev(div2, button0);
    			append_dev(button0, i0);
    			append_dev(button0, t3);
    			append_dev(div4, t4);
    			append_dev(div4, p1);
    			append_dev(div4, t6);
    			append_dev(div4, p2);
    			append_dev(p2, t7);
    			append_dev(div4, t8);
    			append_dev(div4, p3);
    			append_dev(div4, t10);
    			append_dev(div4, p4);
    			append_dev(p4, t11);
    			append_dev(div4, t12);
    			append_dev(div4, p5);
    			append_dev(div4, t14);
    			append_dev(div4, p6);
    			append_dev(p6, t15);
    			append_dev(div4, t16);
    			append_dev(div4, hr);
    			append_dev(div4, t17);
    			append_dev(div4, button1);
    			append_dev(button1, i1);
    			append_dev(button1, t18);
    			append_dev(div4, t19);
    			if (if_block) if_block.m(div4, null);

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", /*toggleTerms*/ ctx[3], false, false, false),
    					listen_dev(
    						button1,
    						"click",
    						function () {
    							if (is_function(/*signOut*/ ctx[1])) /*signOut*/ ctx[1].apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;
    			if (dirty & /*user*/ 1 && t7_value !== (t7_value = /*user*/ ctx[0].displayName + "")) set_data_dev(t7, t7_value);
    			if (dirty & /*user*/ 1 && t11_value !== (t11_value = /*user*/ ctx[0].email + "")) set_data_dev(t11, t11_value);
    			if (dirty & /*user*/ 1 && t15_value !== (t15_value = /*user*/ ctx[0].emailVerified + "")) set_data_dev(t15, t15_value);

    			if (/*showTerms*/ ctx[2]) {
    				if (if_block) ; else {
    					if_block = create_if_block$7(ctx);
    					if_block.c();
    					if_block.m(div4, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop$2,
    		o: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			if (if_block) if_block.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$e.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$e($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Profile', slots, []);
    	let { user } = $$props;
    	let { signOut } = $$props;
    	let showTerms = false;

    	const toggleTerms = () => {
    		$$invalidate(2, showTerms = !showTerms);
    	};

    	const writable_props = ['user', 'signOut'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Profile> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('user' in $$props) $$invalidate(0, user = $$props.user);
    		if ('signOut' in $$props) $$invalidate(1, signOut = $$props.signOut);
    	};

    	$$self.$capture_state = () => ({ user, signOut, showTerms, toggleTerms });

    	$$self.$inject_state = $$props => {
    		if ('user' in $$props) $$invalidate(0, user = $$props.user);
    		if ('signOut' in $$props) $$invalidate(1, signOut = $$props.signOut);
    		if ('showTerms' in $$props) $$invalidate(2, showTerms = $$props.showTerms);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [user, signOut, showTerms, toggleTerms];
    }

    class Profile extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$e, create_fragment$e, safe_not_equal, { user: 0, signOut: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Profile",
    			options,
    			id: create_fragment$e.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*user*/ ctx[0] === undefined && !('user' in props)) {
    			console.warn("<Profile> was created without expected prop 'user'");
    		}

    		if (/*signOut*/ ctx[1] === undefined && !('signOut' in props)) {
    			console.warn("<Profile> was created without expected prop 'signOut'");
    		}
    	}

    	get user() {
    		throw new Error("<Profile>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set user(value) {
    		throw new Error("<Profile>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get signOut() {
    		throw new Error("<Profile>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set signOut(value) {
    		throw new Error("<Profile>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var bind$1 = function bind(fn, thisArg) {
      return function wrap() {
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        return fn.apply(thisArg, args);
      };
    };

    // utils is a library of generic helper functions non-specific to axios

    var toString = Object.prototype.toString;

    // eslint-disable-next-line func-names
    var kindOf = (function(cache) {
      // eslint-disable-next-line func-names
      return function(thing) {
        var str = toString.call(thing);
        return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
      };
    })(Object.create(null));

    function kindOfTest(type) {
      type = type.toLowerCase();
      return function isKindOf(thing) {
        return kindOf(thing) === type;
      };
    }

    /**
     * Determine if a value is an Array
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is an Array, otherwise false
     */
    function isArray$1(val) {
      return Array.isArray(val);
    }

    /**
     * Determine if a value is undefined
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if the value is undefined, otherwise false
     */
    function isUndefined(val) {
      return typeof val === 'undefined';
    }

    /**
     * Determine if a value is a Buffer
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Buffer, otherwise false
     */
    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
        && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
    }

    /**
     * Determine if a value is an ArrayBuffer
     *
     * @function
     * @param {Object} val The value to test
     * @returns {boolean} True if value is an ArrayBuffer, otherwise false
     */
    var isArrayBuffer = kindOfTest('ArrayBuffer');


    /**
     * Determine if a value is a view on an ArrayBuffer
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
     */
    function isArrayBufferView(val) {
      var result;
      if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
        result = ArrayBuffer.isView(val);
      } else {
        result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));
      }
      return result;
    }

    /**
     * Determine if a value is a String
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a String, otherwise false
     */
    function isString$1(val) {
      return typeof val === 'string';
    }

    /**
     * Determine if a value is a Number
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Number, otherwise false
     */
    function isNumber$1(val) {
      return typeof val === 'number';
    }

    /**
     * Determine if a value is an Object
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is an Object, otherwise false
     */
    function isObject$1(val) {
      return val !== null && typeof val === 'object';
    }

    /**
     * Determine if a value is a plain Object
     *
     * @param {Object} val The value to test
     * @return {boolean} True if value is a plain Object, otherwise false
     */
    function isPlainObject(val) {
      if (kindOf(val) !== 'object') {
        return false;
      }

      var prototype = Object.getPrototypeOf(val);
      return prototype === null || prototype === Object.prototype;
    }

    /**
     * Determine if a value is a Date
     *
     * @function
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Date, otherwise false
     */
    var isDate$1 = kindOfTest('Date');

    /**
     * Determine if a value is a File
     *
     * @function
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a File, otherwise false
     */
    var isFile = kindOfTest('File');

    /**
     * Determine if a value is a Blob
     *
     * @function
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Blob, otherwise false
     */
    var isBlob = kindOfTest('Blob');

    /**
     * Determine if a value is a FileList
     *
     * @function
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a File, otherwise false
     */
    var isFileList = kindOfTest('FileList');

    /**
     * Determine if a value is a Function
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Function, otherwise false
     */
    function isFunction$1(val) {
      return toString.call(val) === '[object Function]';
    }

    /**
     * Determine if a value is a Stream
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Stream, otherwise false
     */
    function isStream(val) {
      return isObject$1(val) && isFunction$1(val.pipe);
    }

    /**
     * Determine if a value is a FormData
     *
     * @param {Object} thing The value to test
     * @returns {boolean} True if value is an FormData, otherwise false
     */
    function isFormData(thing) {
      var pattern = '[object FormData]';
      return thing && (
        (typeof FormData === 'function' && thing instanceof FormData) ||
        toString.call(thing) === pattern ||
        (isFunction$1(thing.toString) && thing.toString() === pattern)
      );
    }

    /**
     * Determine if a value is a URLSearchParams object
     * @function
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a URLSearchParams object, otherwise false
     */
    var isURLSearchParams = kindOfTest('URLSearchParams');

    /**
     * Trim excess whitespace off the beginning and end of a string
     *
     * @param {String} str The String to trim
     * @returns {String} The String freed of excess whitespace
     */
    function trim$1(str) {
      return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
    }

    /**
     * Determine if we're running in a standard browser environment
     *
     * This allows axios to run in a web worker, and react-native.
     * Both environments support XMLHttpRequest, but not fully standard globals.
     *
     * web workers:
     *  typeof window -> undefined
     *  typeof document -> undefined
     *
     * react-native:
     *  navigator.product -> 'ReactNative'
     * nativescript
     *  navigator.product -> 'NativeScript' or 'NS'
     */
    function isStandardBrowserEnv() {
      if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                                               navigator.product === 'NativeScript' ||
                                               navigator.product === 'NS')) {
        return false;
      }
      return (
        typeof window !== 'undefined' &&
        typeof document !== 'undefined'
      );
    }

    /**
     * Iterate over an Array or an Object invoking a function for each item.
     *
     * If `obj` is an Array callback will be called passing
     * the value, index, and complete array for each item.
     *
     * If 'obj' is an Object callback will be called passing
     * the value, key, and complete object for each property.
     *
     * @param {Object|Array} obj The object to iterate
     * @param {Function} fn The callback to invoke for each item
     */
    function forEach(obj, fn) {
      // Don't bother if no value provided
      if (obj === null || typeof obj === 'undefined') {
        return;
      }

      // Force an array if not already something iterable
      if (typeof obj !== 'object') {
        /*eslint no-param-reassign:0*/
        obj = [obj];
      }

      if (isArray$1(obj)) {
        // Iterate over array values
        for (var i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        // Iterate over object keys
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            fn.call(null, obj[key], key, obj);
          }
        }
      }
    }

    /**
     * Accepts varargs expecting each argument to be an object, then
     * immutably merges the properties of each object and returns result.
     *
     * When multiple objects contain the same key the later object in
     * the arguments list will take precedence.
     *
     * Example:
     *
     * ```js
     * var result = merge({foo: 123}, {foo: 456});
     * console.log(result.foo); // outputs 456
     * ```
     *
     * @param {Object} obj1 Object to merge
     * @returns {Object} Result of all merge properties
     */
    function merge(/* obj1, obj2, obj3, ... */) {
      var result = {};
      function assignValue(val, key) {
        if (isPlainObject(result[key]) && isPlainObject(val)) {
          result[key] = merge(result[key], val);
        } else if (isPlainObject(val)) {
          result[key] = merge({}, val);
        } else if (isArray$1(val)) {
          result[key] = val.slice();
        } else {
          result[key] = val;
        }
      }

      for (var i = 0, l = arguments.length; i < l; i++) {
        forEach(arguments[i], assignValue);
      }
      return result;
    }

    /**
     * Extends object a by mutably adding to it the properties of object b.
     *
     * @param {Object} a The object to be extended
     * @param {Object} b The object to copy properties from
     * @param {Object} thisArg The object to bind function to
     * @return {Object} The resulting value of object a
     */
    function extend(a, b, thisArg) {
      forEach(b, function assignValue(val, key) {
        if (thisArg && typeof val === 'function') {
          a[key] = bind$1(val, thisArg);
        } else {
          a[key] = val;
        }
      });
      return a;
    }

    /**
     * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
     *
     * @param {string} content with BOM
     * @return {string} content value without BOM
     */
    function stripBOM(content) {
      if (content.charCodeAt(0) === 0xFEFF) {
        content = content.slice(1);
      }
      return content;
    }

    /**
     * Inherit the prototype methods from one constructor into another
     * @param {function} constructor
     * @param {function} superConstructor
     * @param {object} [props]
     * @param {object} [descriptors]
     */

    function inherits(constructor, superConstructor, props, descriptors) {
      constructor.prototype = Object.create(superConstructor.prototype, descriptors);
      constructor.prototype.constructor = constructor;
      props && Object.assign(constructor.prototype, props);
    }

    /**
     * Resolve object with deep prototype chain to a flat object
     * @param {Object} sourceObj source object
     * @param {Object} [destObj]
     * @param {Function} [filter]
     * @returns {Object}
     */

    function toFlatObject(sourceObj, destObj, filter) {
      var props;
      var i;
      var prop;
      var merged = {};

      destObj = destObj || {};

      do {
        props = Object.getOwnPropertyNames(sourceObj);
        i = props.length;
        while (i-- > 0) {
          prop = props[i];
          if (!merged[prop]) {
            destObj[prop] = sourceObj[prop];
            merged[prop] = true;
          }
        }
        sourceObj = Object.getPrototypeOf(sourceObj);
      } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);

      return destObj;
    }

    /*
     * determines whether a string ends with the characters of a specified string
     * @param {String} str
     * @param {String} searchString
     * @param {Number} [position= 0]
     * @returns {boolean}
     */
    function endsWith(str, searchString, position) {
      str = String(str);
      if (position === undefined || position > str.length) {
        position = str.length;
      }
      position -= searchString.length;
      var lastIndex = str.indexOf(searchString, position);
      return lastIndex !== -1 && lastIndex === position;
    }


    /**
     * Returns new array from array like object
     * @param {*} [thing]
     * @returns {Array}
     */
    function toArray$1(thing) {
      if (!thing) return null;
      var i = thing.length;
      if (isUndefined(i)) return null;
      var arr = new Array(i);
      while (i-- > 0) {
        arr[i] = thing[i];
      }
      return arr;
    }

    // eslint-disable-next-line func-names
    var isTypedArray = (function(TypedArray) {
      // eslint-disable-next-line func-names
      return function(thing) {
        return TypedArray && thing instanceof TypedArray;
      };
    })(typeof Uint8Array !== 'undefined' && Object.getPrototypeOf(Uint8Array));

    var utils = {
      isArray: isArray$1,
      isArrayBuffer: isArrayBuffer,
      isBuffer: isBuffer,
      isFormData: isFormData,
      isArrayBufferView: isArrayBufferView,
      isString: isString$1,
      isNumber: isNumber$1,
      isObject: isObject$1,
      isPlainObject: isPlainObject,
      isUndefined: isUndefined,
      isDate: isDate$1,
      isFile: isFile,
      isBlob: isBlob,
      isFunction: isFunction$1,
      isStream: isStream,
      isURLSearchParams: isURLSearchParams,
      isStandardBrowserEnv: isStandardBrowserEnv,
      forEach: forEach,
      merge: merge,
      extend: extend,
      trim: trim$1,
      stripBOM: stripBOM,
      inherits: inherits,
      toFlatObject: toFlatObject,
      kindOf: kindOf,
      kindOfTest: kindOfTest,
      endsWith: endsWith,
      toArray: toArray$1,
      isTypedArray: isTypedArray,
      isFileList: isFileList
    };

    function encode(val) {
      return encodeURIComponent(val).
        replace(/%3A/gi, ':').
        replace(/%24/g, '$').
        replace(/%2C/gi, ',').
        replace(/%20/g, '+').
        replace(/%5B/gi, '[').
        replace(/%5D/gi, ']');
    }

    /**
     * Build a URL by appending params to the end
     *
     * @param {string} url The base of the url (e.g., http://www.google.com)
     * @param {object} [params] The params to be appended
     * @returns {string} The formatted url
     */
    var buildURL = function buildURL(url, params, paramsSerializer) {
      /*eslint no-param-reassign:0*/
      if (!params) {
        return url;
      }

      var serializedParams;
      if (paramsSerializer) {
        serializedParams = paramsSerializer(params);
      } else if (utils.isURLSearchParams(params)) {
        serializedParams = params.toString();
      } else {
        var parts = [];

        utils.forEach(params, function serialize(val, key) {
          if (val === null || typeof val === 'undefined') {
            return;
          }

          if (utils.isArray(val)) {
            key = key + '[]';
          } else {
            val = [val];
          }

          utils.forEach(val, function parseValue(v) {
            if (utils.isDate(v)) {
              v = v.toISOString();
            } else if (utils.isObject(v)) {
              v = JSON.stringify(v);
            }
            parts.push(encode(key) + '=' + encode(v));
          });
        });

        serializedParams = parts.join('&');
      }

      if (serializedParams) {
        var hashmarkIndex = url.indexOf('#');
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }

        url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
      }

      return url;
    };

    function InterceptorManager() {
      this.handlers = [];
    }

    /**
     * Add a new interceptor to the stack
     *
     * @param {Function} fulfilled The function to handle `then` for a `Promise`
     * @param {Function} rejected The function to handle `reject` for a `Promise`
     *
     * @return {Number} An ID used to remove interceptor later
     */
    InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
      this.handlers.push({
        fulfilled: fulfilled,
        rejected: rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null
      });
      return this.handlers.length - 1;
    };

    /**
     * Remove an interceptor from the stack
     *
     * @param {Number} id The ID that was returned by `use`
     */
    InterceptorManager.prototype.eject = function eject(id) {
      if (this.handlers[id]) {
        this.handlers[id] = null;
      }
    };

    /**
     * Iterate over all the registered interceptors
     *
     * This method is particularly useful for skipping over any
     * interceptors that may have become `null` calling `eject`.
     *
     * @param {Function} fn The function to call for each interceptor
     */
    InterceptorManager.prototype.forEach = function forEach(fn) {
      utils.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) {
          fn(h);
        }
      });
    };

    var InterceptorManager_1 = InterceptorManager;

    var normalizeHeaderName = function normalizeHeaderName(headers, normalizedName) {
      utils.forEach(headers, function processHeader(value, name) {
        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
          headers[normalizedName] = value;
          delete headers[name];
        }
      });
    };

    /**
     * Create an Error with the specified message, config, error code, request and response.
     *
     * @param {string} message The error message.
     * @param {string} [code] The error code (for example, 'ECONNABORTED').
     * @param {Object} [config] The config.
     * @param {Object} [request] The request.
     * @param {Object} [response] The response.
     * @returns {Error} The created error.
     */
    function AxiosError(message, code, config, request, response) {
      Error.call(this);
      this.message = message;
      this.name = 'AxiosError';
      code && (this.code = code);
      config && (this.config = config);
      request && (this.request = request);
      response && (this.response = response);
    }

    utils.inherits(AxiosError, Error, {
      toJSON: function toJSON() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: this.config,
          code: this.code,
          status: this.response && this.response.status ? this.response.status : null
        };
      }
    });

    var prototype = AxiosError.prototype;
    var descriptors = {};

    [
      'ERR_BAD_OPTION_VALUE',
      'ERR_BAD_OPTION',
      'ECONNABORTED',
      'ETIMEDOUT',
      'ERR_NETWORK',
      'ERR_FR_TOO_MANY_REDIRECTS',
      'ERR_DEPRECATED',
      'ERR_BAD_RESPONSE',
      'ERR_BAD_REQUEST',
      'ERR_CANCELED'
    // eslint-disable-next-line func-names
    ].forEach(function(code) {
      descriptors[code] = {value: code};
    });

    Object.defineProperties(AxiosError, descriptors);
    Object.defineProperty(prototype, 'isAxiosError', {value: true});

    // eslint-disable-next-line func-names
    AxiosError.from = function(error, code, config, request, response, customProps) {
      var axiosError = Object.create(prototype);

      utils.toFlatObject(error, axiosError, function filter(obj) {
        return obj !== Error.prototype;
      });

      AxiosError.call(axiosError, error.message, code, config, request, response);

      axiosError.name = error.name;

      customProps && Object.assign(axiosError, customProps);

      return axiosError;
    };

    var AxiosError_1 = AxiosError;

    var transitional = {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    };

    /**
     * Convert a data object to FormData
     * @param {Object} obj
     * @param {?Object} [formData]
     * @returns {Object}
     **/

    function toFormData(obj, formData) {
      // eslint-disable-next-line no-param-reassign
      formData = formData || new FormData();

      var stack = [];

      function convertValue(value) {
        if (value === null) return '';

        if (utils.isDate(value)) {
          return value.toISOString();
        }

        if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) {
          return typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);
        }

        return value;
      }

      function build(data, parentKey) {
        if (utils.isPlainObject(data) || utils.isArray(data)) {
          if (stack.indexOf(data) !== -1) {
            throw Error('Circular reference detected in ' + parentKey);
          }

          stack.push(data);

          utils.forEach(data, function each(value, key) {
            if (utils.isUndefined(value)) return;
            var fullKey = parentKey ? parentKey + '.' + key : key;
            var arr;

            if (value && !parentKey && typeof value === 'object') {
              if (utils.endsWith(key, '{}')) {
                // eslint-disable-next-line no-param-reassign
                value = JSON.stringify(value);
              } else if (utils.endsWith(key, '[]') && (arr = utils.toArray(value))) {
                // eslint-disable-next-line func-names
                arr.forEach(function(el) {
                  !utils.isUndefined(el) && formData.append(fullKey, convertValue(el));
                });
                return;
              }
            }

            build(value, fullKey);
          });

          stack.pop();
        } else {
          formData.append(parentKey, convertValue(data));
        }
      }

      build(obj);

      return formData;
    }

    var toFormData_1 = toFormData;

    /**
     * Resolve or reject a Promise based on response status.
     *
     * @param {Function} resolve A function that resolves the promise.
     * @param {Function} reject A function that rejects the promise.
     * @param {object} response The response.
     */
    var settle = function settle(resolve, reject, response) {
      var validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(new AxiosError_1(
          'Request failed with status code ' + response.status,
          [AxiosError_1.ERR_BAD_REQUEST, AxiosError_1.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
          response.config,
          response.request,
          response
        ));
      }
    };

    var cookies = (
      utils.isStandardBrowserEnv() ?

      // Standard browser envs support document.cookie
        (function standardBrowserEnv() {
          return {
            write: function write(name, value, expires, path, domain, secure) {
              var cookie = [];
              cookie.push(name + '=' + encodeURIComponent(value));

              if (utils.isNumber(expires)) {
                cookie.push('expires=' + new Date(expires).toGMTString());
              }

              if (utils.isString(path)) {
                cookie.push('path=' + path);
              }

              if (utils.isString(domain)) {
                cookie.push('domain=' + domain);
              }

              if (secure === true) {
                cookie.push('secure');
              }

              document.cookie = cookie.join('; ');
            },

            read: function read(name) {
              var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
              return (match ? decodeURIComponent(match[3]) : null);
            },

            remove: function remove(name) {
              this.write(name, '', Date.now() - 86400000);
            }
          };
        })() :

      // Non standard browser env (web workers, react-native) lack needed support.
        (function nonStandardBrowserEnv() {
          return {
            write: function write() {},
            read: function read() { return null; },
            remove: function remove() {}
          };
        })()
    );

    /**
     * Determines whether the specified URL is absolute
     *
     * @param {string} url The URL to test
     * @returns {boolean} True if the specified URL is absolute, otherwise false
     */
    var isAbsoluteURL = function isAbsoluteURL(url) {
      // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
      // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
      // by any combination of letters, digits, plus, period, or hyphen.
      return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
    };

    /**
     * Creates a new URL by combining the specified URLs
     *
     * @param {string} baseURL The base URL
     * @param {string} relativeURL The relative URL
     * @returns {string} The combined URL
     */
    var combineURLs = function combineURLs(baseURL, relativeURL) {
      return relativeURL
        ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
        : baseURL;
    };

    /**
     * Creates a new URL by combining the baseURL with the requestedURL,
     * only when the requestedURL is not already an absolute URL.
     * If the requestURL is absolute, this function returns the requestedURL untouched.
     *
     * @param {string} baseURL The base URL
     * @param {string} requestedURL Absolute or relative URL to combine
     * @returns {string} The combined full path
     */
    var buildFullPath = function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    };

    // Headers whose duplicates are ignored by node
    // c.f. https://nodejs.org/api/http.html#http_message_headers
    var ignoreDuplicateOf = [
      'age', 'authorization', 'content-length', 'content-type', 'etag',
      'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
      'last-modified', 'location', 'max-forwards', 'proxy-authorization',
      'referer', 'retry-after', 'user-agent'
    ];

    /**
     * Parse headers into an object
     *
     * ```
     * Date: Wed, 27 Aug 2014 08:58:49 GMT
     * Content-Type: application/json
     * Connection: keep-alive
     * Transfer-Encoding: chunked
     * ```
     *
     * @param {String} headers Headers needing to be parsed
     * @returns {Object} Headers parsed into an object
     */
    var parseHeaders = function parseHeaders(headers) {
      var parsed = {};
      var key;
      var val;
      var i;

      if (!headers) { return parsed; }

      utils.forEach(headers.split('\n'), function parser(line) {
        i = line.indexOf(':');
        key = utils.trim(line.substr(0, i)).toLowerCase();
        val = utils.trim(line.substr(i + 1));

        if (key) {
          if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
            return;
          }
          if (key === 'set-cookie') {
            parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
          } else {
            parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
          }
        }
      });

      return parsed;
    };

    var isURLSameOrigin = (
      utils.isStandardBrowserEnv() ?

      // Standard browser envs have full support of the APIs needed to test
      // whether the request URL is of the same origin as current location.
        (function standardBrowserEnv() {
          var msie = /(msie|trident)/i.test(navigator.userAgent);
          var urlParsingNode = document.createElement('a');
          var originURL;

          /**
        * Parse a URL to discover it's components
        *
        * @param {String} url The URL to be parsed
        * @returns {Object}
        */
          function resolveURL(url) {
            var href = url;

            if (msie) {
            // IE needs attribute set twice to normalize properties
              urlParsingNode.setAttribute('href', href);
              href = urlParsingNode.href;
            }

            urlParsingNode.setAttribute('href', href);

            // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
            return {
              href: urlParsingNode.href,
              protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
              host: urlParsingNode.host,
              search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
              hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
              hostname: urlParsingNode.hostname,
              port: urlParsingNode.port,
              pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
                urlParsingNode.pathname :
                '/' + urlParsingNode.pathname
            };
          }

          originURL = resolveURL(window.location.href);

          /**
        * Determine if a URL shares the same origin as the current location
        *
        * @param {String} requestURL The URL to test
        * @returns {boolean} True if URL shares the same origin, otherwise false
        */
          return function isURLSameOrigin(requestURL) {
            var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
            return (parsed.protocol === originURL.protocol &&
                parsed.host === originURL.host);
          };
        })() :

      // Non standard browser envs (web workers, react-native) lack needed support.
        (function nonStandardBrowserEnv() {
          return function isURLSameOrigin() {
            return true;
          };
        })()
    );

    /**
     * A `CanceledError` is an object that is thrown when an operation is canceled.
     *
     * @class
     * @param {string=} message The message.
     */
    function CanceledError(message) {
      // eslint-disable-next-line no-eq-null,eqeqeq
      AxiosError_1.call(this, message == null ? 'canceled' : message, AxiosError_1.ERR_CANCELED);
      this.name = 'CanceledError';
    }

    utils.inherits(CanceledError, AxiosError_1, {
      __CANCEL__: true
    });

    var CanceledError_1 = CanceledError;

    var parseProtocol = function parseProtocol(url) {
      var match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
      return match && match[1] || '';
    };

    var xhr = function xhrAdapter(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;
        var responseType = config.responseType;
        var onCanceled;
        function done() {
          if (config.cancelToken) {
            config.cancelToken.unsubscribe(onCanceled);
          }

          if (config.signal) {
            config.signal.removeEventListener('abort', onCanceled);
          }
        }

        if (utils.isFormData(requestData) && utils.isStandardBrowserEnv()) {
          delete requestHeaders['Content-Type']; // Let the browser set it
        }

        var request = new XMLHttpRequest();

        // HTTP basic authentication
        if (config.auth) {
          var username = config.auth.username || '';
          var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
          requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
        }

        var fullPath = buildFullPath(config.baseURL, config.url);

        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

        // Set the request timeout in MS
        request.timeout = config.timeout;

        function onloadend() {
          if (!request) {
            return;
          }
          // Prepare the response
          var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
          var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?
            request.responseText : request.response;
          var response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config: config,
            request: request
          };

          settle(function _resolve(value) {
            resolve(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);

          // Clean up request
          request = null;
        }

        if ('onloadend' in request) {
          // Use onloadend if available
          request.onloadend = onloadend;
        } else {
          // Listen for ready state to emulate onloadend
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }

            // The request errored out and we didn't get a response, this will be
            // handled by onerror instead
            // With one exception: request that using file: protocol, most browsers
            // will return status as 0 even though it's a successful request
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
              return;
            }
            // readystate handler is calling before onerror or ontimeout handlers,
            // so we should call onloadend on the next 'tick'
            setTimeout(onloadend);
          };
        }

        // Handle browser request cancellation (as opposed to a manual cancellation)
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }

          reject(new AxiosError_1('Request aborted', AxiosError_1.ECONNABORTED, config, request));

          // Clean up request
          request = null;
        };

        // Handle low level network errors
        request.onerror = function handleError() {
          // Real errors are hidden from us by the browser
          // onerror should only fire if it's a network error
          reject(new AxiosError_1('Network Error', AxiosError_1.ERR_NETWORK, config, request, request));

          // Clean up request
          request = null;
        };

        // Handle timeout
        request.ontimeout = function handleTimeout() {
          var timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
          var transitional$1 = config.transitional || transitional;
          if (config.timeoutErrorMessage) {
            timeoutErrorMessage = config.timeoutErrorMessage;
          }
          reject(new AxiosError_1(
            timeoutErrorMessage,
            transitional$1.clarifyTimeoutError ? AxiosError_1.ETIMEDOUT : AxiosError_1.ECONNABORTED,
            config,
            request));

          // Clean up request
          request = null;
        };

        // Add xsrf header
        // This is only done if running in a standard browser environment.
        // Specifically not if we're in a web worker, or react-native.
        if (utils.isStandardBrowserEnv()) {
          // Add xsrf header
          var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
            cookies.read(config.xsrfCookieName) :
            undefined;

          if (xsrfValue) {
            requestHeaders[config.xsrfHeaderName] = xsrfValue;
          }
        }

        // Add headers to the request
        if ('setRequestHeader' in request) {
          utils.forEach(requestHeaders, function setRequestHeader(val, key) {
            if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
              // Remove Content-Type if data is undefined
              delete requestHeaders[key];
            } else {
              // Otherwise add header to the request
              request.setRequestHeader(key, val);
            }
          });
        }

        // Add withCredentials to request if needed
        if (!utils.isUndefined(config.withCredentials)) {
          request.withCredentials = !!config.withCredentials;
        }

        // Add responseType to request if needed
        if (responseType && responseType !== 'json') {
          request.responseType = config.responseType;
        }

        // Handle progress if needed
        if (typeof config.onDownloadProgress === 'function') {
          request.addEventListener('progress', config.onDownloadProgress);
        }

        // Not all browsers support upload events
        if (typeof config.onUploadProgress === 'function' && request.upload) {
          request.upload.addEventListener('progress', config.onUploadProgress);
        }

        if (config.cancelToken || config.signal) {
          // Handle cancellation
          // eslint-disable-next-line func-names
          onCanceled = function(cancel) {
            if (!request) {
              return;
            }
            reject(!cancel || (cancel && cancel.type) ? new CanceledError_1() : cancel);
            request.abort();
            request = null;
          };

          config.cancelToken && config.cancelToken.subscribe(onCanceled);
          if (config.signal) {
            config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
          }
        }

        if (!requestData) {
          requestData = null;
        }

        var protocol = parseProtocol(fullPath);

        if (protocol && [ 'http', 'https', 'file' ].indexOf(protocol) === -1) {
          reject(new AxiosError_1('Unsupported protocol ' + protocol + ':', AxiosError_1.ERR_BAD_REQUEST, config));
          return;
        }


        // Send the request
        request.send(requestData);
      });
    };

    // eslint-disable-next-line strict
    var _null = null;

    var DEFAULT_CONTENT_TYPE = {
      'Content-Type': 'application/x-www-form-urlencoded'
    };

    function setContentTypeIfUnset(headers, value) {
      if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
        headers['Content-Type'] = value;
      }
    }

    function getDefaultAdapter() {
      var adapter;
      if (typeof XMLHttpRequest !== 'undefined') {
        // For browsers use XHR adapter
        adapter = xhr;
      } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
        // For node use HTTP adapter
        adapter = xhr;
      }
      return adapter;
    }

    function stringifySafely(rawValue, parser, encoder) {
      if (utils.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils.trim(rawValue);
        } catch (e) {
          if (e.name !== 'SyntaxError') {
            throw e;
          }
        }
      }

      return (encoder || JSON.stringify)(rawValue);
    }

    var defaults = {

      transitional: transitional,

      adapter: getDefaultAdapter(),

      transformRequest: [function transformRequest(data, headers) {
        normalizeHeaderName(headers, 'Accept');
        normalizeHeaderName(headers, 'Content-Type');

        if (utils.isFormData(data) ||
          utils.isArrayBuffer(data) ||
          utils.isBuffer(data) ||
          utils.isStream(data) ||
          utils.isFile(data) ||
          utils.isBlob(data)
        ) {
          return data;
        }
        if (utils.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils.isURLSearchParams(data)) {
          setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
          return data.toString();
        }

        var isObjectPayload = utils.isObject(data);
        var contentType = headers && headers['Content-Type'];

        var isFileList;

        if ((isFileList = utils.isFileList(data)) || (isObjectPayload && contentType === 'multipart/form-data')) {
          var _FormData = this.env && this.env.FormData;
          return toFormData_1(isFileList ? {'files[]': data} : data, _FormData && new _FormData());
        } else if (isObjectPayload || contentType === 'application/json') {
          setContentTypeIfUnset(headers, 'application/json');
          return stringifySafely(data);
        }

        return data;
      }],

      transformResponse: [function transformResponse(data) {
        var transitional = this.transitional || defaults.transitional;
        var silentJSONParsing = transitional && transitional.silentJSONParsing;
        var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';

        if (strictJSONParsing || (forcedJSONParsing && utils.isString(data) && data.length)) {
          try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === 'SyntaxError') {
                throw AxiosError_1.from(e, AxiosError_1.ERR_BAD_RESPONSE, this, null, this.response);
              }
              throw e;
            }
          }
        }

        return data;
      }],

      /**
       * A timeout in milliseconds to abort a request. If set to 0 (default) a
       * timeout is not created.
       */
      timeout: 0,

      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',

      maxContentLength: -1,
      maxBodyLength: -1,

      env: {
        FormData: _null
      },

      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },

      headers: {
        common: {
          'Accept': 'application/json, text/plain, */*'
        }
      }
    };

    utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
      defaults.headers[method] = {};
    });

    utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
      defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
    });

    var defaults_1 = defaults;

    /**
     * Transform the data for a request or a response
     *
     * @param {Object|String} data The data to be transformed
     * @param {Array} headers The headers for the request or response
     * @param {Array|Function} fns A single function or Array of functions
     * @returns {*} The resulting transformed data
     */
    var transformData = function transformData(data, headers, fns) {
      var context = this || defaults_1;
      /*eslint no-param-reassign:0*/
      utils.forEach(fns, function transform(fn) {
        data = fn.call(context, data, headers);
      });

      return data;
    };

    var isCancel = function isCancel(value) {
      return !!(value && value.__CANCEL__);
    };

    /**
     * Throws a `CanceledError` if cancellation has been requested.
     */
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }

      if (config.signal && config.signal.aborted) {
        throw new CanceledError_1();
      }
    }

    /**
     * Dispatch a request to the server using the configured adapter.
     *
     * @param {object} config The config that is to be used for the request
     * @returns {Promise} The Promise to be fulfilled
     */
    var dispatchRequest = function dispatchRequest(config) {
      throwIfCancellationRequested(config);

      // Ensure headers exist
      config.headers = config.headers || {};

      // Transform request data
      config.data = transformData.call(
        config,
        config.data,
        config.headers,
        config.transformRequest
      );

      // Flatten headers
      config.headers = utils.merge(
        config.headers.common || {},
        config.headers[config.method] || {},
        config.headers
      );

      utils.forEach(
        ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
        function cleanHeaderConfig(method) {
          delete config.headers[method];
        }
      );

      var adapter = config.adapter || defaults_1.adapter;

      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);

        // Transform response data
        response.data = transformData.call(
          config,
          response.data,
          response.headers,
          config.transformResponse
        );

        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);

          // Transform response data
          if (reason && reason.response) {
            reason.response.data = transformData.call(
              config,
              reason.response.data,
              reason.response.headers,
              config.transformResponse
            );
          }
        }

        return Promise.reject(reason);
      });
    };

    /**
     * Config-specific merge-function which creates a new config-object
     * by merging two configuration objects together.
     *
     * @param {Object} config1
     * @param {Object} config2
     * @returns {Object} New object resulting from merging config2 to config1
     */
    var mergeConfig = function mergeConfig(config1, config2) {
      // eslint-disable-next-line no-param-reassign
      config2 = config2 || {};
      var config = {};

      function getMergedValue(target, source) {
        if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
          return utils.merge(target, source);
        } else if (utils.isPlainObject(source)) {
          return utils.merge({}, source);
        } else if (utils.isArray(source)) {
          return source.slice();
        }
        return source;
      }

      // eslint-disable-next-line consistent-return
      function mergeDeepProperties(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(undefined, config1[prop]);
        }
      }

      // eslint-disable-next-line consistent-return
      function valueFromConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(undefined, config2[prop]);
        }
      }

      // eslint-disable-next-line consistent-return
      function defaultToConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(undefined, config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(undefined, config1[prop]);
        }
      }

      // eslint-disable-next-line consistent-return
      function mergeDirectKeys(prop) {
        if (prop in config2) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (prop in config1) {
          return getMergedValue(undefined, config1[prop]);
        }
      }

      var mergeMap = {
        'url': valueFromConfig2,
        'method': valueFromConfig2,
        'data': valueFromConfig2,
        'baseURL': defaultToConfig2,
        'transformRequest': defaultToConfig2,
        'transformResponse': defaultToConfig2,
        'paramsSerializer': defaultToConfig2,
        'timeout': defaultToConfig2,
        'timeoutMessage': defaultToConfig2,
        'withCredentials': defaultToConfig2,
        'adapter': defaultToConfig2,
        'responseType': defaultToConfig2,
        'xsrfCookieName': defaultToConfig2,
        'xsrfHeaderName': defaultToConfig2,
        'onUploadProgress': defaultToConfig2,
        'onDownloadProgress': defaultToConfig2,
        'decompress': defaultToConfig2,
        'maxContentLength': defaultToConfig2,
        'maxBodyLength': defaultToConfig2,
        'beforeRedirect': defaultToConfig2,
        'transport': defaultToConfig2,
        'httpAgent': defaultToConfig2,
        'httpsAgent': defaultToConfig2,
        'cancelToken': defaultToConfig2,
        'socketPath': defaultToConfig2,
        'responseEncoding': defaultToConfig2,
        'validateStatus': mergeDirectKeys
      };

      utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
        var merge = mergeMap[prop] || mergeDeepProperties;
        var configValue = merge(prop);
        (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);
      });

      return config;
    };

    var data$1 = {
      "version": "0.27.2"
    };

    var VERSION = data$1.version;


    var validators$1 = {};

    // eslint-disable-next-line func-names
    ['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {
      validators$1[type] = function validator(thing) {
        return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
      };
    });

    var deprecatedWarnings = {};

    /**
     * Transitional option validator
     * @param {function|boolean?} validator - set to false if the transitional option has been removed
     * @param {string?} version - deprecated version / removed since version
     * @param {string?} message - some message with additional info
     * @returns {function}
     */
    validators$1.transitional = function transitional(validator, version, message) {
      function formatMessage(opt, desc) {
        return '[Axios v' + VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
      }

      // eslint-disable-next-line func-names
      return function(value, opt, opts) {
        if (validator === false) {
          throw new AxiosError_1(
            formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')),
            AxiosError_1.ERR_DEPRECATED
          );
        }

        if (version && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          // eslint-disable-next-line no-console
          console.warn(
            formatMessage(
              opt,
              ' has been deprecated since v' + version + ' and will be removed in the near future'
            )
          );
        }

        return validator ? validator(value, opt, opts) : true;
      };
    };

    /**
     * Assert object's properties type
     * @param {object} options
     * @param {object} schema
     * @param {boolean?} allowUnknown
     */

    function assertOptions(options, schema, allowUnknown) {
      if (typeof options !== 'object') {
        throw new AxiosError_1('options must be an object', AxiosError_1.ERR_BAD_OPTION_VALUE);
      }
      var keys = Object.keys(options);
      var i = keys.length;
      while (i-- > 0) {
        var opt = keys[i];
        var validator = schema[opt];
        if (validator) {
          var value = options[opt];
          var result = value === undefined || validator(value, opt, options);
          if (result !== true) {
            throw new AxiosError_1('option ' + opt + ' must be ' + result, AxiosError_1.ERR_BAD_OPTION_VALUE);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw new AxiosError_1('Unknown option ' + opt, AxiosError_1.ERR_BAD_OPTION);
        }
      }
    }

    var validator = {
      assertOptions: assertOptions,
      validators: validators$1
    };

    var validators = validator.validators;
    /**
     * Create a new instance of Axios
     *
     * @param {Object} instanceConfig The default config for the instance
     */
    function Axios(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager_1(),
        response: new InterceptorManager_1()
      };
    }

    /**
     * Dispatch a request
     *
     * @param {Object} config The config specific for this request (merged with this.defaults)
     */
    Axios.prototype.request = function request(configOrUrl, config) {
      /*eslint no-param-reassign:0*/
      // Allow for axios('example/url'[, config]) a la fetch API
      if (typeof configOrUrl === 'string') {
        config = config || {};
        config.url = configOrUrl;
      } else {
        config = configOrUrl || {};
      }

      config = mergeConfig(this.defaults, config);

      // Set config.method
      if (config.method) {
        config.method = config.method.toLowerCase();
      } else if (this.defaults.method) {
        config.method = this.defaults.method.toLowerCase();
      } else {
        config.method = 'get';
      }

      var transitional = config.transitional;

      if (transitional !== undefined) {
        validator.assertOptions(transitional, {
          silentJSONParsing: validators.transitional(validators.boolean),
          forcedJSONParsing: validators.transitional(validators.boolean),
          clarifyTimeoutError: validators.transitional(validators.boolean)
        }, false);
      }

      // filter out skipped interceptors
      var requestInterceptorChain = [];
      var synchronousRequestInterceptors = true;
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
          return;
        }

        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
      });

      var responseInterceptorChain = [];
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
      });

      var promise;

      if (!synchronousRequestInterceptors) {
        var chain = [dispatchRequest, undefined];

        Array.prototype.unshift.apply(chain, requestInterceptorChain);
        chain = chain.concat(responseInterceptorChain);

        promise = Promise.resolve(config);
        while (chain.length) {
          promise = promise.then(chain.shift(), chain.shift());
        }

        return promise;
      }


      var newConfig = config;
      while (requestInterceptorChain.length) {
        var onFulfilled = requestInterceptorChain.shift();
        var onRejected = requestInterceptorChain.shift();
        try {
          newConfig = onFulfilled(newConfig);
        } catch (error) {
          onRejected(error);
          break;
        }
      }

      try {
        promise = dispatchRequest(newConfig);
      } catch (error) {
        return Promise.reject(error);
      }

      while (responseInterceptorChain.length) {
        promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
      }

      return promise;
    };

    Axios.prototype.getUri = function getUri(config) {
      config = mergeConfig(this.defaults, config);
      var fullPath = buildFullPath(config.baseURL, config.url);
      return buildURL(fullPath, config.params, config.paramsSerializer);
    };

    // Provide aliases for supported request methods
    utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
      /*eslint func-names:0*/
      Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
          method: method,
          url: url,
          data: (config || {}).data
        }));
      };
    });

    utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
      /*eslint func-names:0*/

      function generateHTTPMethod(isForm) {
        return function httpMethod(url, data, config) {
          return this.request(mergeConfig(config || {}, {
            method: method,
            headers: isForm ? {
              'Content-Type': 'multipart/form-data'
            } : {},
            url: url,
            data: data
          }));
        };
      }

      Axios.prototype[method] = generateHTTPMethod();

      Axios.prototype[method + 'Form'] = generateHTTPMethod(true);
    });

    var Axios_1 = Axios;

    /**
     * A `CancelToken` is an object that can be used to request cancellation of an operation.
     *
     * @class
     * @param {Function} executor The executor function.
     */
    function CancelToken(executor) {
      if (typeof executor !== 'function') {
        throw new TypeError('executor must be a function.');
      }

      var resolvePromise;

      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });

      var token = this;

      // eslint-disable-next-line func-names
      this.promise.then(function(cancel) {
        if (!token._listeners) return;

        var i;
        var l = token._listeners.length;

        for (i = 0; i < l; i++) {
          token._listeners[i](cancel);
        }
        token._listeners = null;
      });

      // eslint-disable-next-line func-names
      this.promise.then = function(onfulfilled) {
        var _resolve;
        // eslint-disable-next-line func-names
        var promise = new Promise(function(resolve) {
          token.subscribe(resolve);
          _resolve = resolve;
        }).then(onfulfilled);

        promise.cancel = function reject() {
          token.unsubscribe(_resolve);
        };

        return promise;
      };

      executor(function cancel(message) {
        if (token.reason) {
          // Cancellation has already been requested
          return;
        }

        token.reason = new CanceledError_1(message);
        resolvePromise(token.reason);
      });
    }

    /**
     * Throws a `CanceledError` if cancellation has been requested.
     */
    CancelToken.prototype.throwIfRequested = function throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    };

    /**
     * Subscribe to the cancel signal
     */

    CancelToken.prototype.subscribe = function subscribe(listener) {
      if (this.reason) {
        listener(this.reason);
        return;
      }

      if (this._listeners) {
        this._listeners.push(listener);
      } else {
        this._listeners = [listener];
      }
    };

    /**
     * Unsubscribe from the cancel signal
     */

    CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
      if (!this._listeners) {
        return;
      }
      var index = this._listeners.indexOf(listener);
      if (index !== -1) {
        this._listeners.splice(index, 1);
      }
    };

    /**
     * Returns an object that contains a new `CancelToken` and a function that, when called,
     * cancels the `CancelToken`.
     */
    CancelToken.source = function source() {
      var cancel;
      var token = new CancelToken(function executor(c) {
        cancel = c;
      });
      return {
        token: token,
        cancel: cancel
      };
    };

    var CancelToken_1 = CancelToken;

    /**
     * Syntactic sugar for invoking a function and expanding an array for arguments.
     *
     * Common use case would be to use `Function.prototype.apply`.
     *
     *  ```js
     *  function f(x, y, z) {}
     *  var args = [1, 2, 3];
     *  f.apply(null, args);
     *  ```
     *
     * With `spread` this example can be re-written.
     *
     *  ```js
     *  spread(function(x, y, z) {})([1, 2, 3]);
     *  ```
     *
     * @param {Function} callback
     * @returns {Function}
     */
    var spread = function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    };

    /**
     * Determines whether the payload is an error thrown by Axios
     *
     * @param {*} payload The value to test
     * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
     */
    var isAxiosError = function isAxiosError(payload) {
      return utils.isObject(payload) && (payload.isAxiosError === true);
    };

    /**
     * Create an instance of Axios
     *
     * @param {Object} defaultConfig The default config for the instance
     * @return {Axios} A new instance of Axios
     */
    function createInstance(defaultConfig) {
      var context = new Axios_1(defaultConfig);
      var instance = bind$1(Axios_1.prototype.request, context);

      // Copy axios.prototype to instance
      utils.extend(instance, Axios_1.prototype, context);

      // Copy context to instance
      utils.extend(instance, context);

      // Factory for creating new instances
      instance.create = function create(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
      };

      return instance;
    }

    // Create the default instance to be exported
    var axios$1 = createInstance(defaults_1);

    // Expose Axios class to allow class inheritance
    axios$1.Axios = Axios_1;

    // Expose Cancel & CancelToken
    axios$1.CanceledError = CanceledError_1;
    axios$1.CancelToken = CancelToken_1;
    axios$1.isCancel = isCancel;
    axios$1.VERSION = data$1.version;
    axios$1.toFormData = toFormData_1;

    // Expose AxiosError class
    axios$1.AxiosError = AxiosError_1;

    // alias for CanceledError for backward compatibility
    axios$1.Cancel = axios$1.CanceledError;

    // Expose all/spread
    axios$1.all = function all(promises) {
      return Promise.all(promises);
    };
    axios$1.spread = spread;

    // Expose isAxiosError
    axios$1.isAxiosError = isAxiosError;

    var axios_1 = axios$1;

    // Allow use of default import syntax in TypeScript
    var _default = axios$1;
    axios_1.default = _default;

    var axios = axios_1;

    const processWithMachineLearning = async (user, videoFile, coordFile) => {
      try {
        const payload = {
          key: 1,
          user_id: `${user.uid}`,
          video_link: `https://drive.google.com/file/d/${videoFile.id}/view?usp=sharing`,
          coord_link: `https://drive.google.com/file/d/${coordFile.id}/view?usp=sharing`,
        };

        const promise = await axios({
          method: 'post',
          url: MACHINE_LEARNING_PROCESS_URL,
          headers: {
            'Content-Type': 'application/json',
          },
          data: JSON.stringify(payload),
        });
        return promise;
      } catch (error) {
        if (error.response) {
          return error.response.status;
        } if (error.request) {
          return error.request;
        }
        return error.message;
      }
    };

    const fetchGPSDataFromGoogleDrive = async (user, coordFile) => {
      try {
        const data = JSON.stringify({
          user_id: `${user.uid}`,
          coord_link: `https://drive.google.com/file/d/${coordFile.id}/view?usp=sharing`,
        });

        const config = {
          method: 'post',
          url: FETCH_GPS_DATA_URL,
          headers: {
            'Content-Type': 'application/json',
          },
          data,
        };
        const promise = await axios(config);
        return promise;
      } catch (error) {
        console.log(error);
        if (error.response) {
          return error.response.status;
        } if (error.request) {
          return error.request;
        }
        return error.message;
      }
    };

    const fetchAndSaveGPSDataFromGoogleDrive = async (user, coordFile) => {
      try {
        const data = JSON.stringify({
          user_id: `${user.uid}`,
          coord_link: `https://drive.google.com/file/d/${coordFile.id}/view?usp=sharing`,
        });

        const config = {
          method: 'post',
          url: FETCH_AND_SAVE_GPS_DATA_URL,
          headers: {
            'Content-Type': 'application/json',
          },
          data,
        };
        const promise = await axios(config);
        return promise;
      } catch (error) {
        console.log(error);
        if (error.response) {
          return error.response.status;
        } if (error.request) {
          return error.request;
        }
        return error.message;
      }
    };

    /* src/components/Navbar.svelte generated by Svelte v3.49.0 */

    const file$c = "src/components/Navbar.svelte";

    function create_fragment$d(ctx) {
    	let div;
    	let h1;
    	let t;
    	let div_class_value;

    	const block = {
    		c: function create() {
    			div = element("div");
    			h1 = element("h1");
    			t = text(/*title*/ ctx[0]);
    			attr_dev(h1, "class", "text-4xl ");
    			add_location(h1, file$c, 8, 1, 210);
    			attr_dev(div, "class", div_class_value = `${/*color*/ ctx[1]} ${/*rounded*/ ctx[2]}  py-5 text-center text-white sticky top-0 ${/*zHeight*/ ctx[3]}`);
    			add_location(div, file$c, 7, 0, 120);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h1);
    			append_dev(h1, t);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*title*/ 1) set_data_dev(t, /*title*/ ctx[0]);

    			if (dirty & /*color, rounded, zHeight*/ 14 && div_class_value !== (div_class_value = `${/*color*/ ctx[1]} ${/*rounded*/ ctx[2]}  py-5 text-center text-white sticky top-0 ${/*zHeight*/ ctx[3]}`)) {
    				attr_dev(div, "class", div_class_value);
    			}
    		},
    		i: noop$2,
    		o: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$d.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$d($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Navbar', slots, []);
    	let { title = "" } = $$props;
    	let { color = "" } = $$props;
    	let { rounded = "" } = $$props;
    	let { zHeight = "" } = $$props;
    	const writable_props = ['title', 'color', 'rounded', 'zHeight'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Navbar> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('title' in $$props) $$invalidate(0, title = $$props.title);
    		if ('color' in $$props) $$invalidate(1, color = $$props.color);
    		if ('rounded' in $$props) $$invalidate(2, rounded = $$props.rounded);
    		if ('zHeight' in $$props) $$invalidate(3, zHeight = $$props.zHeight);
    	};

    	$$self.$capture_state = () => ({ title, color, rounded, zHeight });

    	$$self.$inject_state = $$props => {
    		if ('title' in $$props) $$invalidate(0, title = $$props.title);
    		if ('color' in $$props) $$invalidate(1, color = $$props.color);
    		if ('rounded' in $$props) $$invalidate(2, rounded = $$props.rounded);
    		if ('zHeight' in $$props) $$invalidate(3, zHeight = $$props.zHeight);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [title, color, rounded, zHeight];
    }

    class Navbar extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$d, create_fragment$d, safe_not_equal, {
    			title: 0,
    			color: 1,
    			rounded: 2,
    			zHeight: 3
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Navbar",
    			options,
    			id: create_fragment$d.name
    		});
    	}

    	get title() {
    		throw new Error("<Navbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error("<Navbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<Navbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<Navbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rounded() {
    		throw new Error("<Navbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rounded(value) {
    		throw new Error("<Navbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get zHeight() {
    		throw new Error("<Navbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set zHeight(value) {
    		throw new Error("<Navbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/AttentionBar.svelte generated by Svelte v3.49.0 */

    const file$b = "src/components/AttentionBar.svelte";

    function create_fragment$c(ctx) {
    	let section;
    	let div;
    	let p0;
    	let t1;
    	let p1;
    	let t2;
    	let t3;
    	let hr;

    	const block = {
    		c: function create() {
    			section = element("section");
    			div = element("div");
    			p0 = element("p");
    			p0.textContent = "Attention";
    			t1 = space();
    			p1 = element("p");
    			t2 = text(/*message*/ ctx[0]);
    			t3 = space();
    			hr = element("hr");
    			attr_dev(p0, "class", "font-bold");
    			add_location(p0, file$b, 6, 2, 101);
    			attr_dev(p1, "class", "text-sm mt-2");
    			add_location(p1, file$b, 7, 2, 138);
    			attr_dev(div, "class", "py-8 px-5");
    			add_location(div, file$b, 5, 1, 74);
    			add_location(hr, file$b, 9, 1, 185);
    			attr_dev(section, "class", "bg-smoke");
    			add_location(section, file$b, 4, 0, 46);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, div);
    			append_dev(div, p0);
    			append_dev(div, t1);
    			append_dev(div, p1);
    			append_dev(p1, t2);
    			append_dev(section, t3);
    			append_dev(section, hr);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*message*/ 1) set_data_dev(t2, /*message*/ ctx[0]);
    		},
    		i: noop$2,
    		o: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$c.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$c($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('AttentionBar', slots, []);
    	let { message = "" } = $$props;
    	const writable_props = ['message'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<AttentionBar> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('message' in $$props) $$invalidate(0, message = $$props.message);
    	};

    	$$self.$capture_state = () => ({ message });

    	$$self.$inject_state = $$props => {
    		if ('message' in $$props) $$invalidate(0, message = $$props.message);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [message];
    }

    class AttentionBar extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$c, create_fragment$c, safe_not_equal, { message: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "AttentionBar",
    			options,
    			id: create_fragment$c.name
    		});
    	}

    	get message() {
    		throw new Error("<AttentionBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set message(value) {
    		throw new Error("<AttentionBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/menu/MenuBar.svelte generated by Svelte v3.49.0 */

    const file$a = "src/components/menu/MenuBar.svelte";

    function get_each_context$4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[3] = list[i];
    	return child_ctx;
    }

    // (8:2) {#each menuComponents as menuItem}
    function create_each_block$4(ctx) {
    	let button;
    	let i;
    	let i_class_value;
    	let t0;
    	let t1_value = /*menuItem*/ ctx[3].title + "";
    	let t1;
    	let t2;
    	let button_class_value;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[2](/*menuItem*/ ctx[3]);
    	}

    	const block = {
    		c: function create() {
    			button = element("button");
    			i = element("i");
    			t0 = space();
    			t1 = text(t1_value);
    			t2 = space();
    			attr_dev(i, "class", i_class_value = "fa-solid " + /*menuItem*/ ctx[3].icon + "");
    			add_location(i, file$a, 9, 5, 305);

    			attr_dev(button, "class", button_class_value = ` navbar-btn ${/*selectedMenu*/ ctx[0] == /*menuItem*/ ctx[3].id
			? "btn-primary"
			: ""} `);

    			add_location(button, file$a, 8, 3, 171);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, i);
    			append_dev(button, t0);
    			append_dev(button, t1);
    			append_dev(button, t2);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*menuComponents*/ 2 && i_class_value !== (i_class_value = "fa-solid " + /*menuItem*/ ctx[3].icon + "")) {
    				attr_dev(i, "class", i_class_value);
    			}

    			if (dirty & /*menuComponents*/ 2 && t1_value !== (t1_value = /*menuItem*/ ctx[3].title + "")) set_data_dev(t1, t1_value);

    			if (dirty & /*selectedMenu, menuComponents*/ 3 && button_class_value !== (button_class_value = ` navbar-btn ${/*selectedMenu*/ ctx[0] == /*menuItem*/ ctx[3].id
			? "btn-primary"
			: ""} `)) {
    				attr_dev(button, "class", button_class_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$4.name,
    		type: "each",
    		source: "(8:2) {#each menuComponents as menuItem}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$b(ctx) {
    	let section;
    	let div;
    	let each_value = /*menuComponents*/ ctx[1];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$4(get_each_context$4(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			section = element("section");
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div, "class", "flex flex-row");
    			add_location(div, file$a, 6, 1, 103);
    			attr_dev(section, "class", "shadow-xl");
    			add_location(section, file$a, 5, 0, 74);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, div);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*selectedMenu, menuComponents*/ 3) {
    				each_value = /*menuComponents*/ ctx[1];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$4(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$4(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: noop$2,
    		o: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$b.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$b($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MenuBar', slots, []);
    	let { selectedMenu } = $$props;
    	let { menuComponents } = $$props;
    	const writable_props = ['selectedMenu', 'menuComponents'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<MenuBar> was created with unknown prop '${key}'`);
    	});

    	const click_handler = menuItem => $$invalidate(0, selectedMenu = menuItem.id);

    	$$self.$$set = $$props => {
    		if ('selectedMenu' in $$props) $$invalidate(0, selectedMenu = $$props.selectedMenu);
    		if ('menuComponents' in $$props) $$invalidate(1, menuComponents = $$props.menuComponents);
    	};

    	$$self.$capture_state = () => ({ selectedMenu, menuComponents });

    	$$self.$inject_state = $$props => {
    		if ('selectedMenu' in $$props) $$invalidate(0, selectedMenu = $$props.selectedMenu);
    		if ('menuComponents' in $$props) $$invalidate(1, menuComponents = $$props.menuComponents);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [selectedMenu, menuComponents, click_handler];
    }

    class MenuBar extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$b, create_fragment$b, safe_not_equal, { selectedMenu: 0, menuComponents: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MenuBar",
    			options,
    			id: create_fragment$b.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*selectedMenu*/ ctx[0] === undefined && !('selectedMenu' in props)) {
    			console.warn("<MenuBar> was created without expected prop 'selectedMenu'");
    		}

    		if (/*menuComponents*/ ctx[1] === undefined && !('menuComponents' in props)) {
    			console.warn("<MenuBar> was created without expected prop 'menuComponents'");
    		}
    	}

    	get selectedMenu() {
    		throw new Error("<MenuBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selectedMenu(value) {
    		throw new Error("<MenuBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get menuComponents() {
    		throw new Error("<MenuBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set menuComponents(value) {
    		throw new Error("<MenuBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/menu/Video.svelte generated by Svelte v3.49.0 */

    const file$9 = "src/components/menu/Video.svelte";

    // (17:1) {:else}
    function create_else_block$4(ctx) {
    	let div1;
    	let p;
    	let t1;
    	let div0;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			p = element("p");
    			p.textContent = "Video Player:";
    			t1 = space();
    			div0 = element("div");
    			div0.textContent = "No Video selected.";
    			attr_dev(p, "class", "font-bold my-1");
    			add_location(p, file$9, 18, 3, 452);
    			attr_dev(div0, "class", "alert alert-red my-1");
    			attr_dev(div0, "role", "alert");
    			add_location(div0, file$9, 19, 3, 499);
    			attr_dev(div1, "class", "p-4");
    			add_location(div1, file$9, 17, 2, 431);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, p);
    			append_dev(div1, t1);
    			append_dev(div1, div0);
    		},
    		p: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$4.name,
    		type: "else",
    		source: "(17:1) {:else}",
    		ctx
    	});

    	return block;
    }

    // (6:1) {#if selectedVideoFile}
    function create_if_block$6(ctx) {
    	let iframe;
    	let iframe_title_value;
    	let iframe_src_value;

    	const block = {
    		c: function create() {
    			iframe = element("iframe");
    			attr_dev(iframe, "class", "h-96 w-full overflow-hidden rounded-lg");
    			iframe.allowFullscreen = true;
    			attr_dev(iframe, "frameborder", "0");
    			attr_dev(iframe, "height", "100%");
    			attr_dev(iframe, "width", "100%");
    			attr_dev(iframe, "title", iframe_title_value = `${/*selectedVideoFile*/ ctx[0].name}`);
    			if (!src_url_equal(iframe.src, iframe_src_value = `${/*selectedVideoFile*/ ctx[0].webViewLink.replace("view", "preview")}`)) attr_dev(iframe, "src", iframe_src_value);
    			attr_dev(iframe, "allow", "autoplay");
    			add_location(iframe, file$9, 6, 2, 156);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, iframe, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*selectedVideoFile*/ 1 && iframe_title_value !== (iframe_title_value = `${/*selectedVideoFile*/ ctx[0].name}`)) {
    				attr_dev(iframe, "title", iframe_title_value);
    			}

    			if (dirty & /*selectedVideoFile*/ 1 && !src_url_equal(iframe.src, iframe_src_value = `${/*selectedVideoFile*/ ctx[0].webViewLink.replace("view", "preview")}`)) {
    				attr_dev(iframe, "src", iframe_src_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(iframe);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$6.name,
    		type: "if",
    		source: "(6:1) {#if selectedVideoFile}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$a(ctx) {
    	let section;
    	let section_class_value;

    	function select_block_type(ctx, dirty) {
    		if (/*selectedVideoFile*/ ctx[0]) return create_if_block$6;
    		return create_else_block$4;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			section = element("section");
    			if_block.c();
    			attr_dev(section, "class", section_class_value = "card " + (/*selectedVideoFile*/ ctx[0] ? 'h-96' : 'h-fit') + " scale-in-center");
    			add_location(section, file$9, 4, 0, 51);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			if_block.m(section, null);
    		},
    		p: function update(ctx, [dirty]) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(section, null);
    				}
    			}

    			if (dirty & /*selectedVideoFile*/ 1 && section_class_value !== (section_class_value = "card " + (/*selectedVideoFile*/ ctx[0] ? 'h-96' : 'h-fit') + " scale-in-center")) {
    				attr_dev(section, "class", section_class_value);
    			}
    		},
    		i: noop$2,
    		o: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$a.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$a($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Video', slots, []);
    	let { selectedVideoFile } = $$props;
    	const writable_props = ['selectedVideoFile'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Video> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('selectedVideoFile' in $$props) $$invalidate(0, selectedVideoFile = $$props.selectedVideoFile);
    	};

    	$$self.$capture_state = () => ({ selectedVideoFile });

    	$$self.$inject_state = $$props => {
    		if ('selectedVideoFile' in $$props) $$invalidate(0, selectedVideoFile = $$props.selectedVideoFile);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [selectedVideoFile];
    }

    class Video extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$a, create_fragment$a, safe_not_equal, { selectedVideoFile: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Video",
    			options,
    			id: create_fragment$a.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*selectedVideoFile*/ ctx[0] === undefined && !('selectedVideoFile' in props)) {
    			console.warn("<Video> was created without expected prop 'selectedVideoFile'");
    		}
    	}

    	get selectedVideoFile() {
    		throw new Error("<Video>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selectedVideoFile(value) {
    		throw new Error("<Video>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /**
     * A collection of utility functions for various type checks and conversion
     * @hidden
     */
    /**
     * ============================================================================
     * TYPE CHECK
     * ============================================================================
     * @hidden
     */
    /**
     * Returns `true` if value is not a number (NaN).
     *
     * @param value Input value
     * @return Is NaN?
     */
    function isNaN$1(value) {
        return Number(value) !== value;
    }
    /**
     * Returns a type of the value.
     *
     * @param value  Input value
     * @return Type of the value
     * @ignore
     */
    function getType(value) {
        return ({}).toString.call(value);
    }
    /**
     * ============================================================================
     * QUICK CONVERSION
     * ============================================================================
     * @hidden
     */
    /**
     * Converts any value into a `number`.
     *
     * @param value  Source value
     * @return Number representation of value
     */
    function toNumber(value) {
        if (value != null && !isNumber(value)) {
            var converted = Number(value);
            if (isNaN$1(converted) && isString(value) && value != "") {
                return toNumber(value.replace(/[^0-9.\-]+/g, ''));
            }
            return converted;
        }
        return value;
    }
    /**
     * Converts anything to Date object.
     *
     * @param value  A value of any type
     * @return Date object representing a value
     */
    function toDate(value) {
        if (isDate(value)) {
            // TODO maybe don't create a new Date ?
            return new Date(value);
        }
        else if (isNumber(value)) {
            return new Date(value);
        }
        else {
            // Try converting to number (assuming timestamp)
            var num = Number(value);
            if (!isNumber(num)) {
                return new Date(value);
            }
            else {
                return new Date(num);
            }
        }
    }
    /**
     * Converts numeric value into string. Deals with large or small numbers that
     * would otherwise use exponents.
     *
     * @param value  Numeric value
     * @return Numeric value as string
     */
    function numberToString(value) {
        // TODO handle Infinity and -Infinity
        if (isNaN$1(value)) {
            return "NaN";
        }
        if (value === Infinity) {
            return "Infinity";
        }
        if (value === -Infinity) {
            return "-Infinity";
        }
        // Negative 0
        if ((value === 0) && (1 / value === -Infinity)) {
            return "-0";
        }
        // Preserve negative and deal with absoute values
        var negative = value < 0;
        value = Math.abs(value);
        // TODO test this
        var parsed = /^([0-9]+)(?:\.([0-9]+))?(?:e[\+\-]([0-9]+))?$/.exec("" + value);
        var digits = parsed[1];
        var decimals = parsed[2] || "";
        var res;
        // Leave the nummber as it is if it does not use exponents
        if (parsed[3] === undefined) {
            res = (decimals === "" ? digits : digits + "." + decimals);
        }
        else {
            var exponent = +parsed[3];
            // Deal with decimals
            if (value < 1) {
                var zeros = exponent - 1;
                res = "0." + repeat("0", zeros) + digits + decimals;
                // Deal with integers
            }
            else {
                var zeros = exponent - decimals.length;
                if (zeros === 0) {
                    res = digits + decimals;
                }
                else if (zeros < 0) {
                    res = digits + decimals.slice(0, zeros) + "." + decimals.slice(zeros);
                }
                else {
                    res = digits + decimals + repeat("0", zeros);
                }
            }
        }
        return negative ? "-" + res : res;
    }
    /**
     * Repeats a `string` number of times as set in `amount`.
     *
     * @ignore Exclude from docs
     * @todo Make this faster
     * @param string  Source string
     * @param amount  Number of times to repeat string
     * @return New string
     */
    function repeat(string, amount) {
        return new Array(amount + 1).join(string);
    }
    /**
     * ============================================================================
     * TYPE CHECK
     * ============================================================================
     * @hidden
     */
    /**
     * Checks if parameter is `Date`.
     *
     * @param value  Input value
     * @return Is Date?
     */
    function isDate(value) {
        return getType(value) === "[object Date]";
    }
    /**
     * Checks if parameter is `string`.
     *
     * @param value  Input value
     * @return Is string?
     */
    function isString(value) {
        return typeof value === "string";
    }
    /**
     * Checks if parameter is `number`.
     *
     * @param value  Input value
     * @return Is number?
     */
    function isNumber(value) {
        return typeof value === "number" && Number(value) == value;
    }
    /**
     * Checks if parameter is `object`.
     *
     * @param value  Input value
     * @return Is object?
     */
    function isObject(value) {
        return typeof value === "object" && value !== null;
    }
    /**
     * Checks if parameter is `Array`.
     *
     * @param value  Input value
     * @return Is Array?
     */
    function isArray(value) {
        return Array.isArray(value);
    }
    /**
     * ============================================================================
     * STATIC CONSTANTS
     * ============================================================================
     * @hidden
     */
    /**
     * @ignore Exclude from docs
     */
    var PLACEHOLDER = "__§§§__";
    /**
     * @ignore Exclude from docs
     */
    var PLACEHOLDER2 = "__§§§§__";

    var Type = /*#__PURE__*/Object.freeze({
        __proto__: null,
        isNaN: isNaN$1,
        getType: getType,
        toNumber: toNumber,
        toDate: toDate,
        numberToString: numberToString,
        repeat: repeat,
        isDate: isDate,
        isString: isString,
        isNumber: isNumber,
        isObject: isObject,
        isArray: isArray,
        PLACEHOLDER: PLACEHOLDER,
        PLACEHOLDER2: PLACEHOLDER2
    });

    /**
     * ============================================================================
     * UTILITY FUNCTIONS
     * ============================================================================
     * @hidden
     */
    /**
     * Searches `array` for `value`.
     *
     * Returns -1 if not found.
     *
     * @param array  Source array
     * @param value  Value to search
     * @returns Index
     */
    function indexOf(array, value) {
        var length = array.length;
        for (var i = 0; i < length; ++i) {
            // TODO handle NaN
            if (array[i] === value) {
                return i;
            }
        }
        return -1;
    }
    /**
     * Calls `test` for each element in `array`.
     *
     * If `test` returns `true` then it immediately returns `true`.
     *
     * If `test` returns `false` for all of the elements in `array` then it returns `false`.
     *
     * @param array  Source array
     * @param test   Function which is called on each element
     * @returns Whether `test` returned true or not
     */
    function any(array, test) {
        var length = array.length;
        for (var i = 0; i < length; ++i) {
            if (test(array[i])) {
                return true;
            }
        }
        return false;
    }
    /**
     * Calls `fn` function for every member of array and returns a new array out
     * of all outputs.
     *
     * @param array  Source array
     * @param fn     Callback function
     * @returns New array
     */
    function map(array, fn) {
        var length = array.length;
        var output = new Array(length);
        for (var i = 0; i < length; ++i) {
            output[i] = fn(array[i], i);
        }
        return output;
    }
    /**
     * Iterates through all items in array and calls `fn` function for each of
     * them.
     *
     * @param array  Source array
     * @param fn     Callback function
     */
    function each$1(array, fn) {
        var length = array.length;
        for (var i = 0; i < length; ++i) {
            fn(array[i], i);
        }
    }
    /**
     * Iterates through all items in array in reverse order and calls `fn` function for each of
     * them.
     *
     * @param array  Source array
     * @param fn     Callback function
     */
    function eachReverse(array, fn) {
        var i = array.length;
        while (i > 0) {
            --i;
            fn(array[i], i);
        }
    }
    /**
     * Iterates through all items in array and calls `fn` function for each of
     * them.
     *
     * If `fn` call evaluates to `false`, further iteration is cancelled.
     *
     * @param array  Source array
     * @param fn     Callback function
     */
    function eachContinue$1(array, fn) {
        var length = array.length;
        for (var i = 0; i < length; ++i) {
            if (!fn(array[i], i)) {
                break;
            }
        }
    }
    /**
     * Shifts an item at `index` towards beginning of the array.
     *
     * @param array  Source array
     * @param index  Target element index
     */
    function shiftLeft(array, index) {
        var length = array.length;
        for (var i = index; i < length; ++i) {
            array[i - index] = array[i];
        }
        array.length = length - index;
    }
    /**
     * Returns the last item of the array.
     *
     * @param array  Source array
     * @returns Last item
     */
    function last(array) {
        var length = array.length;
        return length ? array[length - 1] : undefined;
    }
    /**
     * Returns the first item of the array.
     *
     * @param array  Source array
     * @returns Last item
     */
    function first(array) {
        return array[0];
    }
    /**
     * Inserts `element` into `array` at `index`.
     *
     * Caps `index` to be between `0` and `array.length`
     *
     * @param array    Source array
     * @param element  Item to insert
     * @param array    Index to insert item at
     */
    function insert(array, element, index) {
        //if (array) {
        index = Math.max(0, Math.min(index, array.length));
        array.splice(index, 0, element);
        //}
    }
    /**
     * Removes all copies of `element` from `array` (if they exist) and then
     * inserts `element` at `index`.
     *
     * @param array    Source array
     * @param element  Item
     * @param array    Index to move item to
     */
    function setIndex(array, element, index) {
        remove(array, element);
        insert(array, element, index);
    }
    /**
     * Pushes all of the elements from `input` into `array`.
     *
     * @param array  Output array
     * @param input  Input array
     */
    function pushAll(array, input) {
        var length = input.length;
        for (var i = 0; i < length; ++i) {
            array.push(input[i]);
        }
    }
    /**
     * Removes `element` from `array`.
     *
     * If there are multiple copies of `element`, they are all removed.
     *
     * @param array    Source array
     * @param element  Item to remove
     */
    function remove(array, element) {
        var found = false;
        var index = 0;
        for (;;) {
            index = array.indexOf(element, index);
            if (index === -1) {
                return found;
            }
            else {
                found = true;
                array.splice(index, 1);
            }
        }
    }
    function removeFirst(array, element) {
        var index = array.indexOf(element);
        if (index !== -1) {
            array.splice(index, 1);
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * Adds an `element` to `array`.
     *
     * If array already contains and item like this, it is removed before adding
     * it again.
     *
     * Optionally `toIndex` can be specified to add element at specific index.
     *
     * @param array    Source array
     * @param element  Item to add
     * @param array    Index to move item to
     */
    function move(array, element, toIndex) {
        // @todo this implementation must be the same as the List.moveValue method
        // @todo don't do anything if the desired index is the same as the current index
        var index = indexOf(array, element);
        // @todo remove all old values rather than only the first ?
        if (index !== -1) {
            removeIndex(array, index);
        }
        if (toIndex == null) {
            array.push(element);
        }
        else {
            insertIndex(array, toIndex, element);
        }
    }
    /**
     * Inserts `element` into `array` at `index`.
     *
     * If `index` is not provided, it will insert `element` at the end of `array`.
     *
     * @param array    Source array
     * @param element  Item to add
     * @param array    Index to add item at
     */
    function add$1(array, element, index) {
        // Append to the end if index is not set
        if (!isNumber(index)) {
            array.push(element);
        }
        // Add to the beginning of array if index is 0
        else if (index === 0) {
            array.unshift(element);
        }
        // Add to indicated place if index is set
        else {
            array.splice(index, 0, element);
        }
    }
    /**
     * Pushes `element` into `array` if it doesn't already exist.
     *
     * @param array    Source array
     * @param element  Item to add
     */
    function pushOne(array, element) {
        if (array.indexOf(element) === -1) {
            array.push(element);
        }
    }
    /**
     * Removes `element` from `array` (if it exists) and then inserts `element` at
     * `index`.
     *
     * If `index` is not provided, it will insert `element` at the end of `array`.
     *
     * @param array    Source array
     * @param element  Item to remove
     * @param array    Index to move item to
     */
    function replace(array, element, index) {
        // check if exists
        var ind = array.indexOf(element);
        // remove if exists
        if (ind !== -1) {
            array.splice(ind, 1);
        }
        // add to end if index is not set
        if (!isNumber(index)) {
            array.push(element);
        }
        // add to indicated place if index is set
        else {
            array.splice(index, 0, element);
        }
    }
    /**
     * Wraps `input` in an array, if it isn't already an array.
     *
     * @param input  Source value
     * @return An array
     */
    function toArray(input) {
        if (Array.isArray(input)) {
            return input;
        }
        else {
            return [input];
        }
    }
    /**
     * Returns `true` if `element` exists in `array`.
     *
     * @param array    Source array
     * @param element  Item to search for
     * @returns Item in array?
     */
    function has(array, element) {
        return indexOf(array, element) !== -1;
    }
    /**
     * Returns a shallow copy of `array`.
     *
     * @param array  Source array
     * @returns Copy of the array
     */
    function copy$2(array) {
        var length = array.length;
        // It's faster to create the array with a pre-defined length
        var output = new Array(length);
        for (var i = 0; i < length; ++i) {
            // Because the array has a pre-defined length, we have to assign rather than push
            // This is also faster than pushing
            output[i] = array[i];
        }
        return output;
    }
    /**
     * Returns a copy of `array` which contains all the elements between `start`
     * and `end`. (including `start` and excluding `end`)
     *
     * If `end` is not provided, it defaults to `array.length`.
     *
     * @param array  Source array
     * @param start  Start index
     * @param end    End index
     * @returns Part of the array
     */
    function slice(array, start, end) {
        if (end === void 0) { end = array.length; }
        var output = new Array(end - start);
        for (var i = start; i < end; ++i) {
            output[i - start] = array[i];
        }
        return output;
    }
    /**
     * Inserts a value into array at specific index.
     *
     * @param array  Source array
     * @param index  Index
     * @param value  Value to insert
     */
    function insertIndex(array, index, value) {
        array.splice(index, 0, value);
    }
    /**
     * Removes a value from array at specific index.
     *
     * @param array  Source array
     * @param index  Index
     */
    function removeIndex(array, index) {
        array.splice(index, 1);
    }
    /**
     * Searches the array using custom function and returns index of the item if
     * found.
     *
     * Will call `matches` function on all items of the array. If return value
     * evaluates to `true`, index is returned.
     *
     * Otherwise returns -1.
     *
     * @param array    Source array
     * @param matches  Search function
     * @returns Index of the item if found
     */
    function findIndex(array, matches) {
        var length = array.length;
        for (var i = 0; i < length; ++i) {
            if (matches(array[i], i)) {
                return i;
            }
        }
        return -1;
    }
    /**
     * This is the same as `findIndex` except it searches from right to left.
     *
     * @param array    Source array
     * @param matches  Search function
     * @returns Index of the item if found
     */
    function findIndexReverse(array, matches) {
        var i = array.length;
        while (i > 0) {
            --i;
            if (matches(array[i], i)) {
                return i;
            }
        }
        return -1;
    }
    /**
     * Searches the array using custom function and returns item if found.
     *
     * Will call `matches` function on all items of the array. If return value
     * evaluates to `true`, index is returned.
     *
     * Otherwise returns `undefined`.
     *
     * @param array    Source array
     * @param matches  Search function
     * @returns Item if found
     */
    function find(array, matches) {
        var index = findIndex(array, matches);
        if (index !== -1) {
            return array[index];
        }
    }
    /**
     * This is the same as `find` except it searches from right to left.
     *
     * @param array    Source array
     * @param matches  Search function
     * @returns Item if found
     */
    function findReverse(array, matches) {
        var index = findIndexReverse(array, matches);
        if (index !== -1) {
            return array[index];
        }
    }
    /**
     * Searches the array using custom function and returns item if found.
     *
     * Will call `matches` function on all items of the array. If value
     * is not `undefined`, it returns it.
     *
     * Otherwise returns `undefined`.
     *
     * @param array    Source array
     * @param matches  Search function
     * @returns Item if found
     */
    function findMap(array, matches) {
        var length = array.length;
        for (var i = 0; i < length; ++i) {
            var value = matches(array[i], i);
            if (value !== undefined) {
                return value;
            }
        }
    }
    /**
     * Iterates through all items in array and calls `fn` function for each of
     * them.
     *
     * @param array  Source array
     * @param fn     Callback function
     */
    function shuffle(array) {
        // https://stackoverflow.com/a/2450976/449477
        var currentIndex = array.length, temporaryValue, randomIndex;
        // While there remain elements to shuffle...
        while (0 !== currentIndex) {
            // Pick a remaining element...
            randomIndex = Math.floor(Math.random() * currentIndex);
            currentIndex -= 1;
            // And swap it with the current element.
            temporaryValue = array[currentIndex];
            array[currentIndex] = array[randomIndex];
            array[randomIndex] = temporaryValue;
        }
    }
    /**
     * Orders an array using specific `ordering` function and returns right-most index of
     * the `value`.
     *
     * @ignore Exclude from docs
     * @param array     Source array
     * @param ordering  An ordering function
     * @returns Result of the search
     */
    function getSortedIndex(array, ordering) {
        var start = 0;
        var end = array.length;
        var found = false;
        while (start < end) {
            // TODO is this faster/slower than using Math.floor ?
            var pivot = (start + end) >> 1;
            var order = ordering(array[pivot]);
            // less
            if (order < 0) {
                start = pivot + 1;
                // equal
            }
            else if (order === 0) {
                found = true;
                start = pivot + 1;
                // more
            }
            else {
                end = pivot;
            }
        }
        return {
            found: found,
            index: (found ? start - 1 : start)
        };
    }
    /**
     * Orders an array using specific `ordering` function and returns left-most index of
     * the `value`.
     *
     * @ignore Exclude from docs
     * @param array     Source array
     * @param ordering  An ordering function
     * @returns Result of the search
     */
    function getFirstSortedIndex(array, ordering) {
        var start = 0;
        var end = array.length;
        var found = false;
        while (start < end) {
            // TODO is this faster/slower than using Math.floor ?
            var pivot = (start + end) >> 1;
            var order = ordering(array[pivot]);
            // less
            if (order < 0) {
                start = pivot + 1;
                // equal
            }
            else if (order === 0) {
                found = true;
                end = pivot;
                // more
            }
            else {
                end = pivot;
            }
        }
        return {
            found: found,
            index: start
        };
    }
    function keepIf(array, keep) {
        var i = array.length;
        while (i > 0) {
            --i;
            if (!keep(array[i])) {
                array.splice(i, 1);
            }
        }
    }

    var Array$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        indexOf: indexOf,
        any: any,
        map: map,
        each: each$1,
        eachReverse: eachReverse,
        eachContinue: eachContinue$1,
        shiftLeft: shiftLeft,
        last: last,
        first: first,
        insert: insert,
        setIndex: setIndex,
        pushAll: pushAll,
        remove: remove,
        removeFirst: removeFirst,
        move: move,
        add: add$1,
        pushOne: pushOne,
        replace: replace,
        toArray: toArray,
        has: has,
        copy: copy$2,
        slice: slice,
        insertIndex: insertIndex,
        removeIndex: removeIndex,
        findIndex: findIndex,
        findIndexReverse: findIndexReverse,
        find: find,
        findReverse: findReverse,
        findMap: findMap,
        shuffle: shuffle,
        getSortedIndex: getSortedIndex,
        getFirstSortedIndex: getFirstSortedIndex,
        keepIf: keepIf
    });

    /**
     * A base class for disposable objects.
     *
     * @ignore Exclude from docs
     */
    var DisposerClass = /** @class */ (function () {
        /**
         * Constructor.
         */
        function DisposerClass() {
            /**
             * Is object disposed?
             */
            Object.defineProperty(this, "_disposed", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            this._disposed = false;
        }
        /**
         * Checks if object is disposed.
         *
         * @return Disposed?
         */
        Object.defineProperty(DisposerClass.prototype, "isDisposed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this._disposed;
            }
        });
        /**
         * Disposes the object.
         */
        Object.defineProperty(DisposerClass.prototype, "dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (!this._disposed) {
                    this._disposed = true;
                    this._dispose();
                }
            }
        });
        return DisposerClass;
    }());
    /**
     * A class for creating an IDisposer.
     *
     * @ignore Exclude from docs
     */
    var Disposer = /** @class */ (function () {
        /**
         * Constructor.
         *
         * @param dispose  Function that disposes object
         */
        function Disposer(dispose) {
            /**
             * Is object disposed?
             */
            Object.defineProperty(this, "_disposed", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            /**
             * Method that disposes the object.
             */
            Object.defineProperty(this, "_dispose", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            this._disposed = false;
            this._dispose = dispose;
        }
        /**
         * Checks if object is disposed.
         *
         * @return Disposed?
         */
        Object.defineProperty(Disposer.prototype, "isDisposed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this._disposed;
            }
        });
        /**
         * Disposes the object.
         */
        Object.defineProperty(Disposer.prototype, "dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (!this._disposed) {
                    this._disposed = true;
                    this._dispose();
                }
            }
        });
        return Disposer;
    }());
    /**
     * This can be extended by other classes to add a `_disposers` property.
     *
     * @ignore Exclude from docs
     */
    var ArrayDisposer = /** @class */ (function (_super) {
        __extends(ArrayDisposer, _super);
        function ArrayDisposer() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_disposers", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            return _this;
        }
        Object.defineProperty(ArrayDisposer.prototype, "_dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                each$1(this._disposers, function (x) {
                    x.dispose();
                });
            }
        });
        return ArrayDisposer;
    }(DisposerClass));
    /**
     * A collection of related disposers that can be disposed in one go.
     *
     * @ignore Exclude from docs
     */
    var MultiDisposer = /** @class */ (function (_super) {
        __extends(MultiDisposer, _super);
        function MultiDisposer(disposers) {
            var _this = _super.call(this) || this;
            Object.defineProperty(_this, "_disposers", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            _this._disposers = disposers;
            return _this;
        }
        Object.defineProperty(MultiDisposer.prototype, "_dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                each$1(this._disposers, function (x) {
                    x.dispose();
                });
            }
        });
        return MultiDisposer;
    }(DisposerClass));
    /**
     * A special kind of Disposer that has attached value set.
     *
     * If a new value is set using `set()` method, the old disposer value is
     * disposed.
     *
     * @ignore Exclude from docs
     * @todo Description
     */
    /** @class */ ((function (_super) {
        __extends(MutableValueDisposer, _super);
        function MutableValueDisposer() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            /**
             * Current disposer.
             */
            Object.defineProperty(_this, "_disposer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            /**
             * Current value.
             */
            Object.defineProperty(_this, "_value", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            return _this;
        }
        Object.defineProperty(MutableValueDisposer.prototype, "_dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (this._disposer != null) {
                    this._disposer.dispose();
                    this._disposer = undefined;
                }
            }
        });
        /**
         * Returns current value.
         *
         * @return Value
         */
        Object.defineProperty(MutableValueDisposer.prototype, "get", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this._value;
            }
        });
        /**
         * Sets value and disposes previous disposer if it was set.
         *
         * @param value     New value
         * @param disposer  Disposer
         */
        Object.defineProperty(MutableValueDisposer.prototype, "set", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value, disposer) {
                if (this._disposer != null) {
                    this._disposer.dispose();
                }
                this._disposer = disposer;
                this._value = value;
            }
        });
        /**
         * Resets the disposer value.
         */
        Object.defineProperty(MutableValueDisposer.prototype, "reset", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.set(undefined, undefined);
            }
        });
        return MutableValueDisposer;
    })(DisposerClass));
    /**
     * @ignore Exclude from docs
     * @todo Description
     */
    var CounterDisposer = /** @class */ (function (_super) {
        __extends(CounterDisposer, _super);
        function CounterDisposer() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            /**
             * [_counter description]
             *
             * @todo Description
             */
            Object.defineProperty(_this, "_counter", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            return _this;
        }
        /**
         * [increment description]
         *
         * @todo Description
         */
        Object.defineProperty(CounterDisposer.prototype, "increment", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                // TODO throw an error if it is disposed
                ++this._counter;
                // TODO make this more efficient
                return new Disposer(function () {
                    --_this._counter;
                    if (_this._counter === 0) {
                        _this.dispose();
                    }
                });
            }
        });
        return CounterDisposer;
    }(Disposer));

    /**
     * Event Dispatcher module is used for registering listeners and dispatching
     * events across amCharts system.
     */
    /**
     * Universal Event Dispatcher.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/events/} for more info
     */
    var EventDispatcher = /** @class */ (function () {
        /**
         * Constructor
         */
        function EventDispatcher() {
            Object.defineProperty(this, "_listeners", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_killed", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_disabled", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_iterating", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_enabled", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_disposed", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            this._listeners = [];
            this._killed = [];
            this._disabled = {};
            this._iterating = 0;
            this._enabled = true;
            this._disposed = false;
        }
        /**
         * Returns if this object has been already disposed.
         *
         * @return Disposed?
         */
        Object.defineProperty(EventDispatcher.prototype, "isDisposed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this._disposed;
            }
        });
        /**
         * Dispose (destroy) this object.
         */
        Object.defineProperty(EventDispatcher.prototype, "dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (!this._disposed) {
                    this._disposed = true;
                    var a = this._listeners;
                    this._iterating = 1;
                    this._listeners = null;
                    this._disabled = null;
                    try {
                        each$1(a, function (x) {
                            x.disposer.dispose();
                        });
                    }
                    finally {
                        this._killed = null;
                        this._iterating = null;
                    }
                }
            }
        });
        /**
         * Checks if this particular event dispatcher has any listeners set.
         *
         * @return Has listeners?
         */
        Object.defineProperty(EventDispatcher.prototype, "hasListeners", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this._listeners.length !== 0;
            }
        });
        /**
         * Checks if this particular event dispatcher has any particular listeners set.
         *
         * @return Has particular event listeners?
         */
        Object.defineProperty(EventDispatcher.prototype, "hasListenersByType", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (type) {
                return any(this._listeners, function (x) { return (x.type === null || x.type === type) && !x.killed; });
            }
        });
        /**
         * Enable dispatching of events if they were previously disabled by
         * `disable()`.
         */
        Object.defineProperty(EventDispatcher.prototype, "enable", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._enabled = true;
            }
        });
        /**
         * Disable dispatching of events until re-enabled by `enable()`.
         */
        Object.defineProperty(EventDispatcher.prototype, "disable", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._enabled = false;
            }
        });
        /**
         * Enable dispatching particular event, if it was disabled before by
         * `disableType()`.
         *
         * @param type Event type
         */
        Object.defineProperty(EventDispatcher.prototype, "enableType", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (type) {
                delete this._disabled[type];
            }
        });
        /**
         * Disable dispatching of events for a certain event type.
         *
         * Optionally, can set how many dispatches to skip before automatically
         * re-enabling the dispatching.
         *
         * @param type    Event type
         * @param amount  Number of event dispatches to skip
         */
        Object.defineProperty(EventDispatcher.prototype, "disableType", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (type, amount) {
                if (amount === void 0) { amount = Infinity; }
                this._disabled[type] = amount;
            }
        });
        /**
         * Removes listener from dispatcher.
         *
         * Will throw an exception if such listener does not exists.
         *
         * @param listener Listener to remove
         */
        Object.defineProperty(EventDispatcher.prototype, "_removeListener", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (listener) {
                if (this._iterating === 0) {
                    var index = this._listeners.indexOf(listener);
                    if (index === -1) {
                        throw new Error("Invalid state: could not remove listener");
                    }
                    this._listeners.splice(index, 1);
                }
                else {
                    this._killed.push(listener);
                }
            }
        });
        /**
         * Removes existing listener by certain parameters.
         *
         * @param once         Listener's once setting
         * @param type         Listener's type
         * @param callback     Callback function
         * @param context      Callback context
         */
        Object.defineProperty(EventDispatcher.prototype, "_removeExistingListener", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (once, type, callback, context) {
                if (this._disposed) {
                    throw new Error("EventDispatcher is disposed");
                }
                this._eachListener(function (info) {
                    if (info.once === once && // TODO is this correct ?
                        info.type === type &&
                        (callback === undefined || info.callback === callback) &&
                        info.context === context) {
                        info.disposer.dispose();
                    }
                });
            }
        });
        /**
         * Checks if dispatching for particular event type is enabled.
         *
         * @param type  Event type
         * @return Enabled?
         */
        Object.defineProperty(EventDispatcher.prototype, "isEnabled", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (type) {
                if (this._disposed) {
                    throw new Error("EventDispatcher is disposed");
                }
                // TODO is this check correct ?
                return this._enabled && this._listeners.length > 0 && this.hasListenersByType(type) && this._disabled[type] === undefined;
            }
        });
        /**
         * Removes all listeners of a particular event type
         *
         * @param type  Listener's type
         */
        Object.defineProperty(EventDispatcher.prototype, "removeType", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (type) {
                if (this._disposed) {
                    throw new Error("EventDispatcher is disposed");
                }
                this._eachListener(function (info) {
                    if (info.type === type) {
                        info.disposer.dispose();
                    }
                });
            }
        });
        /**
         * Checks if there's already a listener with specific parameters.
         *
         * @param type      Listener's type
         * @param callback  Callback function
         * @param context   Callback context
         * @return Has listener?
         */
        Object.defineProperty(EventDispatcher.prototype, "has", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (type, callback, context) {
                var index = findIndex(this._listeners, function (info) {
                    return info.once !== true && // Ignoring "once" listeners
                        info.type === type &&
                        (callback === undefined || info.callback === callback) &&
                        info.context === context;
                });
                return index !== -1;
            }
        });
        /**
         * Checks whether event of the particular type should be dispatched.
         *
         * @param type  Event type
         * @return Dispatch?
         */
        Object.defineProperty(EventDispatcher.prototype, "_shouldDispatch", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (type) {
                if (this._disposed) {
                    throw new Error("EventDispatcher is disposed");
                }
                var count = this._disabled[type];
                if (!isNumber(count)) {
                    return this._enabled;
                }
                else {
                    if (count <= 1) {
                        delete this._disabled[type];
                    }
                    else {
                        --this._disabled[type];
                    }
                    return false;
                }
            }
        });
        /**
         * [_eachListener description]
         *
         * All of this extra code is needed when a listener is removed while iterating
         *
         * @todo Description
         * @param fn [description]
         */
        Object.defineProperty(EventDispatcher.prototype, "_eachListener", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (fn) {
                var _this = this;
                ++this._iterating;
                try {
                    each$1(this._listeners, fn);
                }
                finally {
                    --this._iterating;
                    // TODO should this be inside or outside the finally ?
                    if (this._iterating === 0 && this._killed.length !== 0) {
                        // Remove killed listeners
                        each$1(this._killed, function (killed) {
                            _this._removeListener(killed);
                        });
                        this._killed.length = 0;
                    }
                }
            }
        });
        /**
         * Dispatches an event immediately without waiting for next cycle.
         *
         * @param type   Event type
         * @param event  Event object
         * @todo automatically add in type and target properties if they are missing
         */
        Object.defineProperty(EventDispatcher.prototype, "dispatch", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (type, event) {
                if (this._shouldDispatch(type)) {
                    // TODO check if it's faster to use an object of listeners rather than a single big array
                    // TODO if the function throws, maybe it should keep going ?
                    this._eachListener(function (listener) {
                        if (!listener.killed && (listener.type === null || listener.type === type)) {
                            listener.dispatch(type, event);
                        }
                    });
                }
            }
        });
        /**
         * Shelves the event to be dispatched within next update cycle.
         *
         * @param type   Event type
         * @param event  Event object
         * @todo automatically add in type and target properties if they are missing
         */
        /*public dispatchLater<Key extends keyof T>(type: Key, event: T[Key]): void {
            if (this._shouldDispatch(type)) {
                this._eachListener((listener) => {
                    // TODO check if it's faster to use an object of listeners rather than a single big array
                    if (!listener.killed && (listener.type === null || listener.type === type)) {
                        // TODO if the function throws, maybe it should keep going ?
                        // TODO dispatch during the update cycle, rather than using whenIdle
                        $async.whenIdle(() => {
                            if (!listener.killed) {
                                listener.dispatch(type, event);
                            }
                        });
                    }
                });
            }
        }*/
        /**
         * Creates, catalogs and returns an [[EventListener]].
         *
         * Event listener can be disposed.
         *
         * @param once         Listener's once setting
         * @param type         Listener's type
         * @param callback     Callback function
         * @param context      Callback context
         * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied
         * @param dispatch
         * @returns An event listener
         */
        Object.defineProperty(EventDispatcher.prototype, "_on", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (once, type, callback, context, shouldClone, dispatch) {
                var _this = this;
                if (this._disposed) {
                    throw new Error("EventDispatcher is disposed");
                }
                this._removeExistingListener(once, type, callback, context);
                var info = {
                    type: type,
                    callback: callback,
                    context: context,
                    shouldClone: shouldClone,
                    dispatch: dispatch,
                    killed: false,
                    once: once,
                    disposer: new Disposer(function () {
                        info.killed = true;
                        _this._removeListener(info);
                    })
                };
                this._listeners.push(info);
                return info;
            }
        });
        /**
         * Creates an event listener to be invoked on **any** event.
         *
         * @param callback     Callback function
         * @param context      Callback context
         * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied
         * @returns A disposable event listener
         */
        Object.defineProperty(EventDispatcher.prototype, "onAll", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (callback, context, shouldClone) {
                if (shouldClone === void 0) { shouldClone = true; }
                return this._on(false, null, callback, context, shouldClone, function (_type, event) { return callback.call(context, event); }).disposer;
            }
        });
        /**
         * Creates an event listener to be invoked on a specific event type.
         *
         * ```TypeScript
         * button.events.once("click", (ev) => {
         *   console.log("Button clicked");
         * }, this);
         * ```
         * ```JavaScript
         * button.events.once("click", (ev) => {
         *   console.log("Button clicked");
         * }, this);
         * ```
         *
         * The above will invoke our custom event handler whenever series we put
         * event on is hidden.
         *
         * @param type         Listener's type
         * @param callback     Callback function
         * @param context      Callback context
         * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied
         * @returns A disposable event listener
         */
        Object.defineProperty(EventDispatcher.prototype, "on", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (type, callback, context, shouldClone) {
                if (shouldClone === void 0) { shouldClone = true; }
                return this._on(false, type, callback, context, shouldClone, function (_type, event) { return callback.call(context, event); }).disposer;
            }
        });
        /**
         * Creates an event listener to be invoked on a specific event type once.
         *
         * Once the event listener is invoked, it is automatically disposed.
         *
         * ```TypeScript
         * button.events.once("click", (ev) => {
         *   console.log("Button clicked");
         * }, this);
         * ```
         * ```JavaScript
         * button.events.once("click", (ev) => {
         *   console.log("Button clicked");
         * }, this);
         * ```
         *
         * The above will invoke our custom event handler the first time series we
         * put event on is hidden.
         *
         * @param type         Listener's type
         * @param callback     Callback function
         * @param context      Callback context
         * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied
         * @returns A disposable event listener
         */
        Object.defineProperty(EventDispatcher.prototype, "once", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (type, callback, context, shouldClone) {
                if (shouldClone === void 0) { shouldClone = true; }
                var x = this._on(true, type, callback, context, shouldClone, function (_type, event) {
                    x.disposer.dispose();
                    callback.call(context, event);
                });
                // TODO maybe this should return a different Disposer ?
                return x.disposer;
            }
        });
        /**
         * Removes the event listener with specific parameters.
         *
         * @param type         Listener's type
         * @param callback     Callback function
         * @param context      Callback context
         */
        Object.defineProperty(EventDispatcher.prototype, "off", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (type, callback, context) {
                this._removeExistingListener(false, type, callback, context);
            }
        });
        /**
         * Copies all dispatcher parameters, including listeners, from another event
         * dispatcher.
         *
         * @param source Source event dispatcher
         * @ignore
         */
        Object.defineProperty(EventDispatcher.prototype, "copyFrom", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (source) {
                var _this = this;
                if (this._disposed) {
                    throw new Error("EventDispatcher is disposed");
                }
                if (source === this) {
                    throw new Error("Cannot copyFrom the same TargetedEventDispatcher");
                }
                var disposers = [];
                each$1(source._listeners, function (x) {
                    // TODO is this correct ?
                    if (!x.killed && x.shouldClone) {
                        if (x.type === null) {
                            disposers.push(_this.onAll(x.callback, x.context));
                        }
                        else if (x.once) {
                            disposers.push(_this.once(x.type, x.callback, x.context));
                        }
                        else {
                            disposers.push(_this.on(x.type, x.callback, x.context));
                        }
                    }
                });
                return new MultiDisposer(disposers);
            }
        });
        return EventDispatcher;
    }());
    /**
     * A version of the [[EventDispatcher]] that dispatches events for a specific
     * target object.
     *
     * @ignore
     */
    /** @class */ ((function (_super) {
        __extends(TargetedEventDispatcher, _super);
        /**
         * Constructor
         *
         * @param target Event dispatcher target
         */
        function TargetedEventDispatcher(target) {
            var _this = _super.call(this) || this;
            /**
             * A target object which is originating events using this dispatcher.
             */
            Object.defineProperty(_this, "target", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            _this.target = target;
            return _this;
        }
        /**
         * Copies all dispatcher parameters, including listeners, from another event
         * dispatcher.
         *
         * @param source Source event dispatcher
         * @ignore
         */
        Object.defineProperty(TargetedEventDispatcher.prototype, "copyFrom", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (source) {
                var _this = this;
                if (this._disposed) {
                    throw new Error("EventDispatcher is disposed");
                }
                if (source === this) {
                    throw new Error("Cannot copyFrom the same TargetedEventDispatcher");
                }
                var disposers = [];
                each$1(source._listeners, function (x) {
                    // TODO very hacky
                    if (x.context === source.target) {
                        return;
                    }
                    // TODO is this correct ?
                    if (!x.killed && x.shouldClone) {
                        if (x.type === null) {
                            disposers.push(_this.onAll(x.callback, x.context));
                        }
                        else if (x.once) {
                            disposers.push(_this.once(x.type, x.callback, x.context));
                        }
                        else {
                            disposers.push(_this.on(x.type, x.callback, x.context));
                        }
                    }
                });
                return new MultiDisposer(disposers);
            }
        });
        return TargetedEventDispatcher;
    })(EventDispatcher));

    /**
     * Checks if specific index fits into length.
     *
     * @param index  Index
     * @param len    Length
     * @ignore
     */
    function checkBounds(index, len) {
        if (!(index >= 0 && index < len)) {
            throw new Error("Index out of bounds: " + index);
        }
    }
    /**
     * A List class is used to hold a number of indexed items of the same type.
     */
    var List = /** @class */ (function () {
        /**
         * Constructor
         *
         * @param initial  Inital list of values to add to list
         */
        function List(initial) {
            if (initial === void 0) { initial = []; }
            /**
             * List values.
             */
            Object.defineProperty(this, "_values", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "events", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new EventDispatcher()
            });
            this._values = initial;
        }
        Object.defineProperty(List.prototype, "values", {
            /**
             * An array of values in the list.
             *
             * Do not use this property to add values. Rather use dedicated methods, like
             * `push()`, `removeIndex()`, etc.
             *
             * @readonly
             * @return List values
             */
            get: function () {
                return this._values;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Checks if list contains specific item reference.
         *
         * @param item  Item to search for
         * @return `true` if found, `false` if not found
         */
        Object.defineProperty(List.prototype, "contains", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value) {
                return this._values.indexOf(value) !== -1;
            }
        });
        /**
         * Removes specific item from the list.
         *
         * @param item An item to remove
         */
        Object.defineProperty(List.prototype, "removeValue", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value) {
                var i = 0;
                var length = this._values.length;
                while (i < length) {
                    // TODO handle NaN
                    if (this._values[i] === value) {
                        this.removeIndex(i);
                        --length;
                    }
                    else {
                        ++i;
                    }
                }
            }
        });
        /**
         * Searches the list for specific item and returns its index.
         *
         * @param item  An item to search for
         * @return Index or -1 if not found
         */
        Object.defineProperty(List.prototype, "indexOf", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value) {
                return indexOf(this._values, value);
            }
        });
        Object.defineProperty(List.prototype, "length", {
            /**
             * Number of items in list.
             *
             * @readonly
             * @return Number of items
             */
            get: function () {
                return this._values.length;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Checks if there's a value at specific index.
         *
         * @param index  Index
         * @return Value exists?
         */
        Object.defineProperty(List.prototype, "hasIndex", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (index) {
                return index >= 0 && index < this._values.length;
            }
        });
        /**
         * Returns an item at specified index.
         *
         * @param index  Index
         * @return List item
         */
        Object.defineProperty(List.prototype, "getIndex", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (index) {
                return this._values[index];
            }
        });
        Object.defineProperty(List.prototype, "_onPush", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (newValue) {
                if (this.events.isEnabled("push")) {
                    this.events.dispatch("push", {
                        type: "push",
                        target: this,
                        newValue: newValue
                    });
                }
            }
        });
        Object.defineProperty(List.prototype, "_onInsertIndex", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (index, newValue) {
                if (this.events.isEnabled("insertIndex")) {
                    this.events.dispatch("insertIndex", {
                        type: "insertIndex",
                        target: this,
                        index: index,
                        newValue: newValue
                    });
                }
            }
        });
        Object.defineProperty(List.prototype, "_onSetIndex", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (index, oldValue, newValue) {
                if (this.events.isEnabled("setIndex")) {
                    this.events.dispatch("setIndex", {
                        type: "setIndex",
                        target: this,
                        index: index,
                        oldValue: oldValue,
                        newValue: newValue
                    });
                }
            }
        });
        Object.defineProperty(List.prototype, "_onRemoveIndex", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (index, oldValue) {
                if (this.events.isEnabled("removeIndex")) {
                    this.events.dispatch("removeIndex", {
                        type: "removeIndex",
                        target: this,
                        index: index,
                        oldValue: oldValue
                    });
                }
            }
        });
        Object.defineProperty(List.prototype, "_onMoveIndex", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (oldIndex, newIndex, value) {
                if (this.events.isEnabled("moveIndex")) {
                    this.events.dispatch("moveIndex", {
                        type: "moveIndex",
                        target: this,
                        oldIndex: oldIndex,
                        newIndex: newIndex,
                        value: value,
                    });
                }
            }
        });
        Object.defineProperty(List.prototype, "_onClear", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (oldValues) {
                if (this.events.isEnabled("clear")) {
                    this.events.dispatch("clear", {
                        type: "clear",
                        target: this,
                        oldValues: oldValues
                    });
                }
            }
        });
        /**
         * Sets value at specific index.
         *
         * If there's already a value at the index, it is overwritten.
         *
         * @param index  Index
         * @param value  New value
         * @return New value
         */
        Object.defineProperty(List.prototype, "setIndex", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (index, value) {
                checkBounds(index, this._values.length);
                var oldValue = this._values[index];
                // Do nothing if the old value and the new value are the same
                if (oldValue !== value) {
                    this._values[index] = value;
                    this._onSetIndex(index, oldValue, value);
                }
                return oldValue;
            }
        });
        /**
         * Adds an item to the list at a specific index, which pushes all the other
         * items further down the list.
         *
         * @param index Index
         * @param item  An item to add
         */
        Object.defineProperty(List.prototype, "insertIndex", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (index, value) {
                checkBounds(index, this._values.length + 1);
                insertIndex(this._values, index, value);
                this._onInsertIndex(index, value);
                return value;
            }
        });
        /**
         * Swaps indexes of two items in the list.
         *
         * @param a  Item 1
         * @param b  Item 2
         */
        Object.defineProperty(List.prototype, "swap", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (a, b) {
                var len = this._values.length;
                checkBounds(a, len);
                checkBounds(b, len);
                if (a !== b) {
                    var value_a = this._values[a];
                    var value_b = this._values[b];
                    this._values[a] = value_b;
                    this._onSetIndex(a, value_a, value_b);
                    this._values[b] = value_a;
                    this._onSetIndex(b, value_b, value_a);
                }
            }
        });
        /**
         * Removes a value at specific index.
         *
         * @param index  Index of value to remove
         * @return Removed value
         */
        Object.defineProperty(List.prototype, "removeIndex", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (index) {
                checkBounds(index, this._values.length);
                var oldValue = this._values[index];
                removeIndex(this._values, index);
                this._onRemoveIndex(index, oldValue);
                return oldValue;
            }
        });
        /**
         * Moves an item to a specific index within the list.
         *
         * If the index is not specified it will move the item to the end of the
         * list.
         *
         * @param value  Item to move
         * @param index  Index to place item at
         */
        Object.defineProperty(List.prototype, "moveValue", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value, toIndex) {
                // TODO don't do anything if the desired index is the same as the current index
                var index = this.indexOf(value);
                // TODO remove all old values rather than only the first ?
                if (index !== -1) {
                    removeIndex(this._values, index);
                    if (toIndex == null) {
                        var toIndex_1 = this._values.length;
                        this._values.push(value);
                        this._onMoveIndex(index, toIndex_1, value);
                    }
                    else {
                        insertIndex(this._values, toIndex, value);
                        this._onMoveIndex(index, toIndex, value);
                    }
                }
                else if (toIndex == null) {
                    this._values.push(value);
                    this._onPush(value);
                }
                else {
                    insertIndex(this._values, toIndex, value);
                    this._onInsertIndex(toIndex, value);
                }
                return value;
            }
        });
        /**
         * Adds an item to the end of the list.
         *
         * @param item  An item to add
         */
        Object.defineProperty(List.prototype, "push", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value) {
                this._values.push(value);
                this._onPush(value);
                return value;
            }
        });
        /**
         * Adds an item as a first item in the list.
         *
         * @param item  An item to add
         */
        Object.defineProperty(List.prototype, "unshift", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value) {
                this.insertIndex(0, value);
                return value;
            }
        });
        /**
         * Adds multiple items to the list.
         *
         * @param items  An Array of items to add
         */
        Object.defineProperty(List.prototype, "pushAll", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (values) {
                var _this = this;
                each$1(values, function (value) {
                    _this.push(value);
                });
            }
        });
        /**
         * Copies and adds items from abother list.
         *
         * @param source  A list top copy items from
         */
        Object.defineProperty(List.prototype, "copyFrom", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (source) {
                this.pushAll(source._values);
            }
        });
        /**
         * Returns the last item from the list, and removes it.
         *
         * @return Item
         */
        Object.defineProperty(List.prototype, "pop", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var index = this._values.length - 1;
                return index < 0 ? undefined : this.removeIndex(this._values.length - 1);
            }
        });
        /**
         * Returns the first item from the list, and removes it.
         *
         * @return Item
         */
        Object.defineProperty(List.prototype, "shift", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this._values.length ? this.removeIndex(0) : undefined;
            }
        });
        /**
         * Sets multiple items to the list.
         *
         * All current items are removed.
         *
         * @param newArray  New items
         */
        Object.defineProperty(List.prototype, "setAll", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (newArray) {
                var _this = this;
                var old = this._values;
                this._values = [];
                this._onClear(old);
                each$1(newArray, function (value) {
                    _this._values.push(value);
                    _this._onPush(value);
                });
            }
        });
        /**
         * Removes all items from the list.
         */
        Object.defineProperty(List.prototype, "clear", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.setAll([]);
            }
        });
        /**
         * Returns an ES6 iterator for the list.
         */
        Object.defineProperty(List.prototype, Symbol.iterator, {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var length, i;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            length = this._values.length;
                            i = 0;
                            _a.label = 1;
                        case 1:
                            if (!(i < length)) return [3 /*break*/, 4];
                            return [4 /*yield*/, this._values[i]];
                        case 2:
                            _a.sent();
                            _a.label = 3;
                        case 3:
                            ++i;
                            return [3 /*break*/, 1];
                        case 4: return [2 /*return*/];
                    }
                });
            }
        });
        /**
         * Calls `f` for each element in the list.
         *
         * `f` should have at least one parameter defined which will get a current
         * item, with optional second argument - index.
         */
        Object.defineProperty(List.prototype, "each", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (f) {
                each$1(this._values, f);
            }
        });
        /**
         * Calls `f` for each element in the list, from right to left.
         *
         * `f` should have at least one parameter defined which will get a current
         * item, with optional second argument - index.
         */
        Object.defineProperty(List.prototype, "eachReverse", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (f) {
                eachReverse(this._values, f);
            }
        });
        return List;
    }());
    /**
     * A version of a [[List]] where the elements are disposed automatically when
     * removed from the list, unless `autoDispose` is set to `false`.
     */
    var ListAutoDispose = /** @class */ (function (_super) {
        __extends(ListAutoDispose, _super);
        function ListAutoDispose() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            /**
             * Automatically disposes elements that are removed from the list.
             *
             * @default true
             */
            Object.defineProperty(_this, "autoDispose", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: true
            });
            Object.defineProperty(_this, "_disposed", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            return _this;
        }
        Object.defineProperty(ListAutoDispose.prototype, "_onSetIndex", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (index, oldValue, newValue) {
                if (this.autoDispose) {
                    oldValue.dispose();
                }
                _super.prototype._onSetIndex.call(this, index, oldValue, newValue);
            }
        });
        Object.defineProperty(ListAutoDispose.prototype, "_onRemoveIndex", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (index, oldValue) {
                if (this.autoDispose) {
                    oldValue.dispose();
                }
                _super.prototype._onRemoveIndex.call(this, index, oldValue);
            }
        });
        Object.defineProperty(ListAutoDispose.prototype, "_onClear", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (oldValues) {
                if (this.autoDispose) {
                    each$1(oldValues, function (x) {
                        x.dispose();
                    });
                }
                _super.prototype._onClear.call(this, oldValues);
            }
        });
        Object.defineProperty(ListAutoDispose.prototype, "isDisposed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this._disposed;
            }
        });
        Object.defineProperty(ListAutoDispose.prototype, "dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (!this._disposed) {
                    this._disposed = true;
                    if (this.autoDispose) {
                        each$1(this._values, function (x) {
                            x.dispose();
                        });
                    }
                }
            }
        });
        return ListAutoDispose;
    }(List));
    /**
     * A version of a [[List]] that is able to create new elements as well as
     * apply additional settings to newly created items.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/list-templates/} for more info
     */
    var ListTemplate = /** @class */ (function (_super) {
        __extends(ListTemplate, _super);
        function ListTemplate(template, make) {
            var _this = _super.call(this) || this;
            Object.defineProperty(_this, "template", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "make", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            _this.template = template;
            _this.make = make;
            return _this;
        }
        return ListTemplate;
    }(ListAutoDispose));

    /**
     * A version of [[List]] to hold children of the [[Container]].
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/containers/} for more info
     */
    var Children = /** @class */ (function (_super) {
        __extends(Children, _super);
        function Children(container) {
            var _this = _super.call(this) || this;
            Object.defineProperty(_this, "_disposed", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_container", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_events", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            _this._container = container;
            _this._events = _this.events.onAll(function (change) {
                if (change.type === "clear") {
                    each$1(change.oldValues, function (x) {
                        _this._onRemoved(x);
                    });
                }
                else if (change.type === "push") {
                    _this._onInserted(change.newValue);
                }
                else if (change.type === "setIndex") {
                    _this._onRemoved(change.oldValue);
                    _this._onInserted(change.newValue, change.index);
                }
                else if (change.type === "insertIndex") {
                    _this._onInserted(change.newValue, change.index);
                }
                else if (change.type === "removeIndex") {
                    _this._onRemoved(change.oldValue);
                }
                else if (change.type === "moveIndex") {
                    _this._onRemoved(change.value);
                    _this._onInserted(change.value, change.newIndex);
                }
                else {
                    throw new Error("Unknown IListEvent type");
                }
            });
            return _this;
        }
        Object.defineProperty(Children.prototype, "_onInserted", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (child, index) {
                child._setParent(this._container, true);
                var childrenDisplay = this._container._childrenDisplay;
                if (index === undefined) {
                    childrenDisplay.addChild(child._display);
                }
                else {
                    childrenDisplay.addChildAt(child._display, index);
                }
            }
        });
        Object.defineProperty(Children.prototype, "_onRemoved", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (child) {
                this._container._childrenDisplay.removeChild(child._display);
                this._container.markDirtyBounds();
                this._container.markDirty();
            }
        });
        /**
         * Returns `true` if obejct is disposed.
         */
        Object.defineProperty(Children.prototype, "isDisposed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this._disposed;
            }
        });
        /**
         * Permanently dispose this object.
         */
        Object.defineProperty(Children.prototype, "dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (!this._disposed) {
                    this._disposed = true;
                    this._events.dispose();
                    each$1(this.values, function (child) {
                        child.dispose();
                    });
                }
            }
        });
        return Children;
    }(List));

    /**
     * ============================================================================
     * MAIN CLASS
     * ============================================================================
     * @hidden
     */
    /**
     * Represents a relative value (percent).
     *
     * The Percent object, can be instantiated using two ways:
     *
     * * Via `new Percent(X)`.
     * * Via `am5.percent(X)`.
     *
     * You can also use shortcut functions for `0%`, `50%`, and `100%`:
     * * `am5.p0`
     * * `am5.p50`
     * * `am5.p1000`
     */
    var Percent = /** @class */ (function () {
        /**
         * Constructor.
         *
         * @param percent  Percent value
         */
        function Percent(percent) {
            /**
             * Value in percent.
             */
            Object.defineProperty(this, "_value", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            this._value = percent;
        }
        Object.defineProperty(Percent.prototype, "value", {
            /**
             * Relative value.
             *
             * E.g. 100% is 1, 50% is 0.5, etc.
             *
             * This is useful to apply transformations to other values. E.g.:
             *
             * ```TypeScript
             * let value = 256;
             * let percent = new am5.p50;
             * console.log(value * percent.value); // outputs 128
             * ```
             * ```JavaScript
             * var value = 256;
             * var percent = new am5.p50;
             * console.log(value * percent.value); // outputs 128
             * ```
             *
             * Alternatively, you can use `am5.percent()` helper function:
             *
             * ```TypeScript
             * let value = 256;
             * let percent = am5.p50;
             * console.log(value * percent.value); // outputs 128
             * ```
             * ```JavaScript
             * var value = 256;
             * var percent = am5.p50;
             * console.log(value * percent.value); // outputs 128
             * ```
             *
             * @readonly
             * @return Relative value
             */
            get: function () {
                return this._value / 100;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Percent.prototype, "percent", {
            /**
             * Value in percent.
             *
             * @return Percent
             */
            get: function () {
                return this._value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Percent.prototype, "toString", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return "" + this._value + "%";
            }
        });
        Object.defineProperty(Percent.prototype, "interpolate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (min, max) {
                return min + (this.value * (max - min));
            }
        });
        Object.defineProperty(Percent, "normalize", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (percent, min, max) {
                if (percent instanceof Percent) {
                    return percent;
                }
                else {
                    if (min === max) {
                        return new Percent(0);
                    }
                    else {
                        return new Percent(Math.min(Math.max((percent - min) * (1 / (max - min)), 0), 1) * 100);
                    }
                }
            }
        });
        return Percent;
    }());
    /**
     * Converts numeric percent value to a proper [[Percent]] object.
     *
     * ```TypeScript
     * pieSeries.set("radius", am5.percent(80));
     * ```
     * ```JavaScript
     * pieSeries.set("radius", am5.percent(80));
     * ```
     *
     * @param value  Percent
     * @return Percent object
     */
    function percent(value) {
        return new Percent(value);
    }
    /**
     * A shortcut function to `am5.percent(0)`.
     */
    var p0 = percent(0);
    /**
     * A shortcut function to `am5.percent(100)`.
     */
    var p100 = percent(100);
    /**
     * A shortcut function to `am5.percent(50)`.
     */
    var p50 = percent(50);

    function keys(object) {
        return Object.keys(object);
    }
    /**
     * Returns an array of object's property names ordered using specific ordering
     * function.
     *
     * @param object  Source object
     * @param order   Ordering function
     * @returns Object property names
     */
    function keysOrdered(object, order) {
        return keys(object).sort(order);
    }
    function copy$1(object) {
        return Object.assign({}, object);
    }
    function each(object, f) {
        keys(object).forEach(function (key) {
            f(key, object[key]);
        });
    }
    /**
     * Iterates through all properties of the object calling `fn` for each of them.
     *
     * If return value of the function evaluates to `false` further iteration is
     * cancelled.
     *
     * @param object  Source object
     * @param fn      Callback function
     */
    function eachContinue(object, fn) {
        for (var key in object) {
            if (hasKey(object, key)) {
                if (!fn(key, object[key])) {
                    break;
                }
            }
        }
    }
    /**
     * Orders object properties using custom `ord` function and iterates through
     * them calling `fn` for each of them.
     *
     * @param object  Source object
     * @param fn      Callback function
     * @param order   Ordering function
     */
    function eachOrdered(object, fn, ord) {
        each$1(keysOrdered(object, ord), function (key) {
            fn(key, object[key]);
        });
    }
    /**
     * Checks if `object` has a specific `key`.
     *
     * @param object  Source object
     * @param key     Property name
     * @returns Has key?
     */
    function hasKey(object, key) {
        return {}.hasOwnProperty.call(object, key);
    }
    /**
     * Copies all properties of one object to the other, omitting undefined, but only if property in target object doesn't have a value set.
     *
     * @param fromObject  Source object
     * @param toObject    Target object
     * @return Updated target object
     * @todo Maybe consolidate with utils.copy?
     */
    function softCopyProperties(source, target) {
        each(source, function (key, value) {
            // only if value is set
            //if ($type.hasValue(value) && !($type.hasValue((<any>target)[key]))) {
            if (value != null && target[key] == null) {
                target[key] = value;
            }
        });
        return target;
    }

    var Object$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        keys: keys,
        keysOrdered: keysOrdered,
        copy: copy$1,
        each: each,
        eachContinue: eachContinue,
        eachOrdered: eachOrdered,
        hasKey: hasKey,
        softCopyProperties: softCopyProperties
    });

    /**
     * ============================================================================
     * DOM FUNCTIONS
     * ============================================================================
     * @hidden
     */
    /**
     * Execute a function when DOM is ready.
     *
     * @since 5.0.2
     * @param  f  Callback
     */
    function ready(f) {
        if (document.readyState !== "loading") {
            f();
        }
        else {
            var listener_1 = function () {
                if (document.readyState !== "loading") {
                    document.removeEventListener("readystatechange", listener_1);
                    f();
                }
            };
            document.addEventListener("readystatechange", listener_1);
        }
    }
    /**
     * Removes a DOM element.
     * @param  el  Target element
     */
    function removeElement(el) {
        if (el.parentNode) {
            el.parentNode.removeChild(el);
        }
    }
    /**
     * Function that adds a disposable event listener directly to a DOM element.
     *
     * @ignore Exclude from docs
     * @param dom       A DOM element to add event to
     * @param type      Event type
     * @param listener  Event listener
     * @returns Disposable event
     */
    function addEventListener(dom, type, listener, options) {
        //@todo proper type check for options: EventListenerOptions | boolean (TS for some reason gives error on passive parameter)
        //console.log(type, dom);
        dom.addEventListener(type, listener, options || false);
        return new Disposer(function () {
            dom.removeEventListener(type, listener, options || false);
        });
    }
    /**
     * @ignore
     */
    function supports(cap) {
        switch (cap) {
            case "touchevents":
                //return "ontouchstart" in document.documentElement;
                return window.hasOwnProperty("TouchEvent");
            case "pointerevents":
                return window.hasOwnProperty("PointerEvent");
            case "mouseevents":
                return window.hasOwnProperty("MouseEvent");
            case "wheelevents":
                return window.hasOwnProperty("WheelEvent");
            case "keyboardevents":
                return window.hasOwnProperty("KeyboardEvent");
        }
        return false;
    }
    /**
     * @ignore
     */
    function getPointerId(event) {
        var id = event.pointerId || 0;
        //console.log(event);
        return id;
    }
    /**
     * Removes focus from any element by shifting focus to body.
     *
     * @ignore
     */
    function blur() {
        if (document.activeElement && document.activeElement != document.body) {
            if (document.activeElement.blur) {
                document.activeElement.blur();
            }
            else {
                var input = document.createElement("button");
                input.style.position = "fixed";
                input.style.top = "0px";
                input.style.left = "-10000px";
                document.body.appendChild(input);
                input.focus();
                input.blur();
                document.body.removeChild(input);
            }
        }
    }
    /**
     * Focuses element.
     *
     * @ignore
     */
    function focus(el) {
        if (el) {
            el.focus();
        }
    }
    /**
     * @ignore
     */
    function getRendererEvent(key) {
        if (supports("pointerevents")) {
            return key;
        }
        else if (supports("touchevents")) {
            switch (key) {
                case "pointerover": return "touchstart";
                case "pointerout": return "touchend";
                case "pointerdown": return "touchstart";
                case "pointermove": return "touchmove";
                case "pointerup": return "touchend";
                case "click": return "click";
                case "dblclick": return "dblclick";
            }
        }
        else if (supports("mouseevents")) {
            switch (key) {
                case "pointerover": return "mouseover";
                case "pointerout": return "mouseout";
                case "pointerdown": return "mousedown";
                case "pointermove": return "mousemove";
                case "pointerup": return "mouseup";
                case "click": return "click";
                case "dblclick": return "dblclick";
            }
        }
        return key;
    }
    /**
     * Determines if pointer event originated from a touch pointer or mouse.
     *
     * @param ev  Original event
     * @return Touch pointer?
     */
    function isTouchEvent(ev) {
        if (typeof Touch !== "undefined" && ev instanceof Touch) {
            return true;
        }
        else if (typeof PointerEvent !== "undefined" && ev instanceof PointerEvent && ev.pointerType != null) {
            switch (ev.pointerType) {
                case "touch":
                case "pen":
                case 2:
                    return true;
                case "mouse":
                case 4:
                    return false;
                default:
                    return !(ev instanceof MouseEvent);
            }
        }
        else if (ev.type != null) {
            if (ev.type.match(/^mouse/)) {
                return false;
            }
        }
        return true;
    }
    /**
     * Sets style property on DOM element.
     *
     * @ignore Exclude from docs
     */
    function setStyle(dom, property, value) {
        dom.style[property] = value;
    }
    function getStyle(dom, property) {
        return dom.style[property];
    }
    /**
     * Checks of element `a` contains element `b`.
     *
     * @param a  Aleged ascendant
     * @param b  Aleged descendant
     * @return Contains?
     */
    function contains(a, b) {
        var cursor = b;
        while (true) {
            if (a === cursor) {
                return true;
            }
            else if (cursor.parentNode === null) {
                // TODO better ShadowRoot detection
                if (cursor.host == null) {
                    return false;
                }
                else {
                    cursor = cursor.host;
                }
            }
            else {
                cursor = cursor.parentNode;
            }
        }
    }
    /**
     * Returns `true` if pointer event originated on an element within Root.
     *
     * @since 5.2.8
     * @param  event   Event
     * @param  target  Target element
     */
    function isLocalEvent(event, target) {
        return event.target && contains(target.root.dom, event.target);
    }
    /**
     * Disables or enables interactivity of a DOM element.
     *
     * @param  target       Target element
     * @param  interactive  Interactive?
     */
    function setInteractive(target, interactive) {
        if (interactive) {
            target.style.pointerEvents = "";
        }
        else {
            target.style.pointerEvents = "none";
        }
    }
    /**
     * Returns the shadow root of the element or null
     *
     * @param a  Node
     * @return Root
     */
    function getShadowRoot(a) {
        var cursor = a;
        while (true) {
            if (cursor.parentNode === null) {
                // TODO better ShadowRoot detection
                if (cursor.host != null) {
                    return cursor;
                }
                else {
                    return null;
                }
            }
            else {
                cursor = cursor.parentNode;
            }
        }
    }
    /**
     * [rootStylesheet description]
     *
     * @ignore Exclude from docs
     * @todo Description
     */
    var rootStylesheet;
    /**
     * @ignore Exclude from docs
     */
    function createStylesheet(element, text, nonce) {
        if (nonce === void 0) { nonce = ""; }
        // TODO use createElementNS ?
        var e = document.createElement("style");
        e.type = "text/css";
        if (nonce != "") {
            e.setAttribute("nonce", nonce);
        }
        e.textContent = text;
        if (element === null) {
            document.head.appendChild(e);
        }
        else {
            element.appendChild(e);
        }
        return e;
    }
    /**
     * [getStylesheet description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @return [description]
     */
    function getStylesheet(element, nonce) {
        if (nonce === void 0) { nonce = ""; }
        if (element === null) {
            if (rootStylesheet == null) {
                // TODO use createElementNS ?
                var e = document.createElement("style");
                e.type = "text/css";
                if (nonce != "") {
                    e.setAttribute("nonce", nonce);
                }
                document.head.appendChild(e);
                rootStylesheet = e.sheet;
            }
            return rootStylesheet;
        }
        else {
            // TODO use createElementNS ?
            var e = document.createElement("style");
            e.type = "text/css";
            if (nonce != "") {
                e.setAttribute("nonce", nonce);
            }
            element.appendChild(e);
            return e.sheet;
        }
    }
    /**
     * [makeStylesheet description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param selector  [description]
     * @return [description]
     */
    function appendStylesheet(root, selector) {
        var index = root.cssRules.length;
        root.insertRule(selector + "{}", index);
        return root.cssRules[index];
    }
    /**
     * Defines a class for a CSS rule.
     *
     * Can be used to dynamically add CSS to the document.
     */
    var StyleRule = /** @class */ (function (_super) {
        __extends(StyleRule, _super);
        /**
         * Constructor.
         *
         * @param selector  CSS selector
         * @param styles    An object of style attribute - value pairs
         */
        function StyleRule(element, selector, styles, nonce) {
            if (nonce === void 0) { nonce = ""; }
            var _this = _super.call(this) || this;
            Object.defineProperty(_this, "_root", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            /**
             * CSS rule.
             */
            Object.defineProperty(_this, "_rule", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            _this._root = getStylesheet(element, nonce);
            _this._rule = appendStylesheet(_this._root, selector);
            each(styles, function (key, value) {
                _this.setStyle(key, value);
            });
            return _this;
        }
        Object.defineProperty(StyleRule.prototype, "selector", {
            /**
             * @return CSS selector
             */
            get: function () {
                return this._rule.selectorText;
            },
            /**
             * A CSS selector text.
             *
             * E.g.: `.myClass p`
             *
             * @param selector  CSS selector
             */
            set: function (selector) {
                this._rule.selectorText = selector;
            },
            enumerable: false,
            configurable: true
        });
        // TODO test this
        Object.defineProperty(StyleRule.prototype, "_dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                // TODO a bit hacky
                var index = indexOf(this._root.cssRules, this._rule);
                if (index === -1) {
                    throw new Error("Could not dispose StyleRule");
                }
                else {
                    // TODO if it's empty remove it from the DOM ?
                    this._root.deleteRule(index);
                }
            }
        });
        /**
         * Sets the same style properties with browser-specific prefixes.
         *
         * @param name   Attribute name
         * @param value  Attribute value
         */
        Object.defineProperty(StyleRule.prototype, "_setVendorPrefixName", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (name, value) {
                var style = this._rule.style;
                style.setProperty("-webkit-" + name, value, "");
                style.setProperty("-moz-" + name, value, "");
                style.setProperty("-ms-" + name, value, "");
                style.setProperty("-o-" + name, value, "");
                style.setProperty(name, value, "");
            }
        });
        /**
         * Sets a value for specific style attribute.
         *
         * @param name   Attribute
         * @param value  Value
         */
        Object.defineProperty(StyleRule.prototype, "setStyle", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (name, value) {
                if (name === "transition") {
                    this._setVendorPrefixName(name, value);
                }
                else {
                    this._rule.style.setProperty(name, value, "");
                }
            }
        });
        return StyleRule;
    }(DisposerClass));
    /**
     * Defines a class for an entire CSS style sheet.
     *
     * Can be used to dynamically add CSS to the document.
     */
    var StyleSheet = /** @class */ (function (_super) {
        __extends(StyleSheet, _super);
        /**
         * Constructor.
         *
         * @param text  CSS stylesheet
         */
        function StyleSheet(element, text, nonce) {
            if (nonce === void 0) { nonce = ""; }
            var _this = _super.call(this) || this;
            Object.defineProperty(_this, "_element", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            _this._element = createStylesheet(element, text, nonce);
            return _this;
        }
        Object.defineProperty(StyleSheet.prototype, "_dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (this._element.parentNode) {
                    this._element.parentNode.removeChild(this._element);
                }
            }
        });
        return StyleSheet;
    }(DisposerClass));
    /**
     * Adds a class name to an HTML or SVG element.
     *
     * @ignore Exclude from docs
     * @param element    Element
     * @param className  Class name to add
     */
    function addClass(element, className) {
        if (!element) {
            return;
        }
        if (element.classList) {
            var classes = className.split(" ");
            each$1(classes, function (name) {
                element.classList.add(name);
            });
        }
        else {
            var currentClassName = element.getAttribute("class");
            if (currentClassName) {
                element.setAttribute("class", currentClassName.split(" ").filter(function (item) {
                    return item !== className;
                }).join(" ") + " " + className);
            }
            else {
                element.setAttribute("class", className);
            }
        }
    }
    /**
     * Removes a class name from an HTML or SVG element.
     *
     * @ignore Exclude from docs
     * @param element    Element
     * @param className  Class name to add
     */
    function removeClass(element, className) {
        if (!element) {
            return;
        }
        if (element.classList) {
            element.classList.remove(className);
        }
        else {
            var currentClassName = element.getAttribute("class");
            if (currentClassName) {
                element.setAttribute("class", currentClassName.split(" ").filter(function (item) {
                    return item !== className;
                }).join(" "));
            }
        }
    }
    // /**
    //  * Applies a set of styles to an element. Stores the original styles so they
    //  * can be restored later.
    //  *
    //  * @ignore
    //  * @param io      Element
    //   */
    // export function prepElementForDrag(dom: HTMLElement): void {
    // 	// @todo: save current values
    // 	// Define possible props
    // 	let props = [
    // 		"touchAction", "webkitTouchAction", "MozTouchAction", "MSTouchAction", "msTouchAction", "oTouchAction",
    // 		"userSelect", "webkitUserSelect", "MozUserSelect", "MSUserSelect", "msUserSelect", "oUserSelect",
    // 		"touchSelect", "webkitTouchSelect", "MozTouchSelect", "MSTouchSelect", "msTouchSelect", "oTouchSelect",
    // 		"touchCallout", "webkitTouchCallout", "MozTouchCallout", "MSTouchCallout", "msTouchCallout", "oTouchCallout",
    // 		"contentZooming", "webkitContentZooming", "MozContentZooming", "MSContentZooming", "msContentZooming", "oContentZooming",
    // 		"userDrag", "webkitUserDrag", "MozUserDrag", "MSUserDrag", "msUserDrag", "oUserDrag"
    // 	];
    // 	for (let i = 0; i < props.length; i++) {
    // 		if (props[i] in dom.style) {
    // 			setStyle(dom, props[i], "none");
    // 		}
    // 	}
    // 	// Remove iOS-specific selection;
    // 	setStyle(dom, "tapHighlightColor", "rgba(0, 0, 0, 0)");
    // }
    // /**
    //  * Restores replaced styles
    //  *
    //  * @ignore
    //  * @param  io  Element
    //  */
    // export function unprepElementForDrag(dom: HTMLElement): void {
    // 	// Define possible props
    // 	let props = [
    // 		"touchAction", "webkitTouchAction", "MozTouchAction", "MSTouchAction", "msTouchAction", "oTouchAction",
    // 		"userSelect", "webkitUserSelect", "MozUserSelect", "MSUserSelect", "msUserSelect", "oUserSelect",
    // 		"touchSelect", "webkitTouchSelect", "MozTouchSelect", "MSTouchSelect", "msTouchSelect", "oTouchSelect",
    // 		"touchCallout", "webkitTouchCallout", "MozTouchCallout", "MSTouchCallout", "msTouchCallout", "oTouchCallout",
    // 		"contentZooming", "webkitContentZooming", "MozContentZooming", "MSContentZooming", "msContentZooming", "oContentZooming",
    // 		"userDrag", "webkitUserDrag", "MozUserDrag", "MSUserDrag", "msUserDrag", "oUserDrag"
    // 	];
    // 	for (let i = 0; i < props.length; i++) {
    // 		if (props[i] in dom.style) {
    // 			setStyle(dom, props[i], "");
    // 		}
    // 	}
    // 	// Remove iOS-specific selection;
    // 	setStyle(dom, "tapHighlightColor", "");
    // }
    function iOS() {
        return /apple/i.test(navigator.vendor) && "ontouchend" in document;
    }
    function getSafeResolution() {
        return iOS() ? 1 : undefined;
    }
    function relativeToValue(percent, full) {
        if (isNumber(percent)) {
            return percent;
        }
        else if (percent != null && isNumber(percent.value) && isNumber(full)) {
            return full * percent.value;
        }
        else {
            return 0;
        }
    }
    /**
     * Returns number of decimals
     *
     * @ignore Exclude from docs
     * @param number  Input number
     * @return Number of decimals
     */
    function decimalPlaces(number) {
        var match = ('' + number).match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);
        if (!match) {
            return 0;
        }
        return Math.max(0, (match[1] ? match[1].length : 0) - (match[2] ? +match[2] : 0));
    }
    /**
     * ============================================================================
     * STRING FORMATTING FUNCTIONS
     * ============================================================================
     * @hidden
     */
    /**
     * Pads a string with additional characters to certain length.
     *
     * @param value  A numeric value
     * @param len    Result string length in characters
     * @param char   A character to use for padding
     * @return Padded value as string
     */
    function padString(value, len, char) {
        if (len === void 0) { len = 0; }
        if (char === void 0) { char = "0"; }
        if (typeof value !== "string") {
            value = value.toString();
        }
        return len > value.length ? Array(len - value.length + 1).join(char) + value : value;
    }
    function trimLeft(text) {
        return text.replace(/^[\s]*/, "");
    }
    function trimRight(text) {
        return text.replace(/[\s]*$/, "");
    }
    function trim(text) {
        return trimLeft(trimRight(text));
    }
    /**
     * Tries to determine format type.
     *
     * @ignore Exclude from docs
     * @param format  Format string
     * @return Format type ("string" | "number" | "date" | "duration")
     */
    function getFormat(format) {
        // Undefined?
        if (typeof format === "undefined") {
            return "string";
        }
        // Cleanup and lowercase format
        format = format.toLowerCase().replace(/^\[[^\]]*\]/, "");
        // Remove style tags
        format = format.replace(/\[[^\]]+\]/, "");
        // Trim
        format = format.trim();
        // Check for any explicit format hints (i.e. /Date)
        var hints = format.match(/\/(date|number|duration)$/);
        if (hints) {
            return hints[1];
        }
        // Check for explicit hints
        if (format === "number") {
            return "number";
        }
        if (format === "date") {
            return "date";
        }
        if (format === "duration") {
            return "duration";
        }
        // Detect number formatting symbols
        if (format.match(/[#0]/)) {
            return "number";
        }
        // Detect date formatting symbols
        if (format.match(/[ymwdhnsqaxkzgtei]/)) {
            return "date";
        }
        // Nothing? Let's display as string
        return "string";
    }
    /**
     * Cleans up format:
     * * Strips out formatter hints
     *
     * @ignore Exclude from docs
     * @param format  Format
     * @return Cleaned format
     */
    function cleanFormat(format) {
        return format.replace(/\/(date|number|duration)$/i, "");
    }
    /**
     * Strips all tags from the string.
     *
     * @param text  Source string
     * @return String without tags
     */
    function stripTags(text) {
        return text ? text.replace(/<[^>]*>/g, "") : text;
    }
    /**
     * Removes new lines and tags from a string.
     *
     * @param text  String to conver
     * @return Converted string
     */
    function plainText(text) {
        return text ? stripTags(("" + text).replace(/[\n\r]+/g, ". ")) : text;
    }
    /**
     * Escapes string so it can safely be used in a Regex.
     *
     * @param value  Unsescaped string
     * @return Escaped string
     */
    function escapeForRgex(value) {
        return value.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
    }
    /**
     * ============================================================================
     * DATE-RELATED FUNCTIONS
     * ============================================================================
     * @hidden
     */
    /**
     * Returns a year day.
     *
     * @param date  Date
     * @param utc   Assume UTC dates?
     * @return Year day
     * @todo Account for UTC
     */
    function getYearDay(date, utc) {
        var start = new Date(date.getFullYear(), 0, 0);
        var diff = (date.getTime() - start.getTime()) + ((start.getTimezoneOffset() - date.getTimezoneOffset()) * 60 * 1000);
        var oneDay = 1000 * 60 * 60 * 24;
        return Math.floor(diff / oneDay);
    }
    /**
     * Returns week number for a given date.
     *
     * @param date  Date
     * @param utc   Assume UTC dates?
     * @return Week number
     * @todo Account for UTC
     */
    function getWeek(date, _utc) {
        var d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));
        var day = d.getUTCDay() || 7;
        d.setUTCDate(d.getUTCDate() + 4 - day);
        var firstDay = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));
        return Math.ceil((((d.getTime() - firstDay.getTime()) / 86400000) + 1) / 7);
    }
    /**
     * Returns a week number in the month.
     *
     * @param date  Source Date
     * @param utc   Assume UTC dates?
     * @return Week number in month
     */
    function getMonthWeek(date, utc) {
        var firstWeek = getWeek(new Date(date.getFullYear(), date.getMonth(), 1));
        var currentWeek = getWeek(date);
        if (currentWeek == 1) {
            currentWeek = 53;
        }
        return currentWeek - firstWeek + 1;
    }
    /**
     * Returns a year day out of the given week number.
     *
     * @param week     Week
     * @param year     Year
     * @param weekday  Weekday
     * @param utc      Assume UTC dates
     * @return Day in a year
     */
    function getDayFromWeek(week, year, weekday, utc) {
        if (weekday === void 0) { weekday = 1; }
        if (utc === void 0) { utc = false; }
        var date = new Date(year, 0, 4, 0, 0, 0, 0);
        if (utc) {
            date.setUTCFullYear(year);
        }
        var day = week * 7 + weekday - ((date.getDay() || 7) + 3);
        return day;
    }
    /**
     * Returns 12-hour representation out of the 24-hour hours.
     *
     * @param hours  24-hour number
     * @return 12-hour number
     */
    function get12Hours(hours, base) {
        if (hours > 12) {
            hours -= 12;
        }
        else if (hours === 0) {
            hours = 12;
        }
        return base != null ? hours + (base - 1) : hours;
    }
    /**
     * Returns a string name of the time zone.
     *
     * @param date     Date object
     * @param long     Should return long ("Pacific Standard Time") or short abbreviation ("PST")
     * @param savings  Include information if it's in daylight savings mode
     * @param utc      Assume UTC dates
     * @return Time zone name
     */
    function getTimeZone(date, long, savings, utc) {
        if (long === void 0) { long = false; }
        if (savings === void 0) { savings = false; }
        if (utc === void 0) { utc = false; }
        if (utc) {
            return long ? "Coordinated Universal Time" : "UTC";
        }
        var wotz = date.toLocaleString("UTC");
        var wtz = date.toLocaleString("UTC", { timeZoneName: long ? "long" : "short" }).substr(wotz.length);
        //wtz = wtz.replace(/[+-]+[0-9]+$/, "");
        if (savings === false) {
            wtz = wtz.replace(/ (standard|daylight|summer|winter) /i, " ");
        }
        return wtz;
    }
    function capitalizeFirst(text) {
        return text.charAt(0).toUpperCase() + text.slice(1);
    }
    /**
     * The functions below are taken and adapted from Garry Tan's blog post:
     * http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c
     *
     * The further attributions go mjijackson.com, which now seems to be defunct.
     */
    /**
     * Converts an HSL color value to RGB. Conversion formula
     * adapted from http://en.wikipedia.org/wiki/HSL_color_space.
     * Assumes h, s, and l are contained in the set [0, 1] and
     * returns r, g, and b in the set [0, 255].
     *
     * Function adapted from:
     * http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c
     *
     * @ignore Exclude from docs
     * @param h       The hue
     * @param s       The saturation
     * @param l       The lightness
     * @return The RGB representation
     */
    function hslToRgb(color) {
        var r, g, b;
        var h = color.h;
        var s = color.s;
        var l = color.l;
        if (s == 0) {
            r = g = b = l; // achromatic
        }
        else {
            var hue2rgb = function hue2rgb(p, q, t) {
                if (t < 0) {
                    t += 1;
                }
                if (t > 1) {
                    t -= 1;
                }
                if (t < 1 / 6) {
                    return p + (q - p) * 6 * t;
                }
                if (t < 1 / 2) {
                    return q;
                }
                if (t < 2 / 3) {
                    return p + (q - p) * (2 / 3 - t) * 6;
                }
                return p;
            };
            var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
            var p = 2 * l - q;
            r = hue2rgb(p, q, h + 1 / 3);
            g = hue2rgb(p, q, h);
            b = hue2rgb(p, q, h - 1 / 3);
        }
        return {
            r: Math.round(r * 255),
            g: Math.round(g * 255),
            b: Math.round(b * 255)
        };
    }
    /**
     * Converts an RGB color value to HSL. Conversion formula
     * adapted from http://en.wikipedia.org/wiki/HSL_color_space.
     * Assumes r, g, and b are contained in the set [0, 255] and
     * returns h, s, and l in the set [0, 1].
     *
     * Function adapted from:
     * http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c
     *
     * @ignore Exclude from docs
     * @param r       The red color value
     * @param g       The green color value
     * @param b       The blue color value
     * @return The HSL representation
     */
    function rgbToHsl(color) {
        var r = color.r / 255;
        var g = color.g / 255;
        var b = color.b / 255;
        var max = Math.max(r, g, b);
        var min = Math.min(r, g, b);
        var h = 0;
        var s = 0;
        var l = (max + min) / 2;
        if (max === min) {
            h = s = 0; // achromatic
        }
        else {
            var d = max - min;
            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
            switch (max) {
                case r:
                    h = (g - b) / d + (g < b ? 6 : 0);
                    break;
                case g:
                    h = (b - r) / d + 2;
                    break;
                case b:
                    h = (r - g) / d + 4;
                    break;
            }
            h /= 6;
        }
        return {
            h: h,
            s: s,
            l: l
        };
    }
    /**
     * Returns a color that is `percent` brighter than the reference color.
     *
     * @ignore Exclude from docs
     * @param color    Reference color
     * @param percent  Brightness percent
     * @return Hex code of the new color
     */
    function lighten(rgb, percent) {
        if (rgb) {
            return {
                r: Math.max(0, Math.min(255, rgb.r + getLightnessStep(rgb.r, percent))),
                g: Math.max(0, Math.min(255, rgb.g + getLightnessStep(rgb.g, percent))),
                b: Math.max(0, Math.min(255, rgb.b + getLightnessStep(rgb.b, percent))),
                a: rgb.a
            };
        }
        else {
            // TODO is this correct ?
            return rgb;
        }
    }
    /**
     * Gets lightness step.
     *
     * @ignore Exclude from docs
     * @param value    Value
     * @param percent  Percent
     * @return Step
     */
    function getLightnessStep(value, percent) {
        var base = percent > 0 ? 255 - value : value;
        return Math.round(base * percent);
    }
    /**
     * Returns a color that is `percent` brighter than the source `color`.
     *
     * @ignore Exclude from docs
     * @param color    Source color
     * @param percent  Brightness percent
     * @return New color
     */
    function brighten(rgb, percent) {
        if (rgb) {
            var base = Math.min(Math.max(rgb.r, rgb.g, rgb.b), 230);
            //let base = Math.max(rgb.r, rgb.g, rgb.b);
            var step = getLightnessStep(base, percent);
            return {
                r: Math.max(0, Math.min(255, Math.round(rgb.r + step))),
                g: Math.max(0, Math.min(255, Math.round(rgb.g + step))),
                b: Math.max(0, Math.min(255, Math.round(rgb.b + step))),
                a: rgb.a
            };
        }
        else {
            // TODO is this correct ?
            return rgb;
        }
    }
    /**
     * Returns brightness step.
     *
     * @ignore Exclude from docs
     * @param value    Value
     * @param percent  Percent
     * @return Step
     */
    function getBrightnessStep(_value, percent) {
        var base = 255; //percent > 0 ? 255 - value : value;
        return Math.round(base * percent);
    }
    /**
     * Returns `true` if color is "light". Useful indetermining which contrasting
     * color to use for elements over this color. E.g.: you would want to use
     * black text over light background, and vice versa.
     *
     * @ignore Exclude from docs
     * @param color  Source color
     * @return Light?
     */
    function isLight(color) {
        return ((color.r * 299) + (color.g * 587) + (color.b * 114)) / 1000 >= 128;
    }
    /**
     * Returns a new [[iRGB]] object based on `rgb` parameter with specific
     * saturation applied.
     *
     * `saturation` can be in the range of 0 (fully desaturated) to 1 (fully
     * saturated).
     *
     * @ignore Exclude from docs
     * @param color       Base color
     * @param saturation  Saturation (0-1)
     * @return New color
     */
    function saturate(rgb, saturation) {
        if (rgb === undefined || saturation == 1) {
            return rgb;
        }
        var hsl = rgbToHsl(rgb);
        hsl.s = saturation;
        return hslToRgb(hsl);
    }
    function alternativeColor(color, lightAlternative, darkAlternative) {
        if (lightAlternative === void 0) { lightAlternative = { r: 255, g: 255, b: 255 }; }
        if (darkAlternative === void 0) { darkAlternative = { r: 255, g: 255, b: 255 }; }
        var light = lightAlternative;
        var dark = darkAlternative;
        if (isLight(darkAlternative)) {
            light = darkAlternative;
            dark = lightAlternative;
        }
        return isLight(color) ? dark : light;
    }
    /**
     * @ignore
     * @deprecated
     */
    // export function unshiftThemeClass(settings: any, themeClass: string) {
    // 	let themeClasses = settings.themeClasses;
    // 	if (!themeClasses) {
    // 		themeClasses = [];
    // 	}
    // 	themeClasses.unshift(themeClass);
    // 	settings.themeClasses = themeClasses;
    // }
    /**
     * @ignore
     * @deprecated
     */
    // export function pushThemeClass(settings: any, themeClass: string) {
    // 	let themeClasses = settings.themeClasses;
    // 	if (!themeClasses) {
    // 		themeClasses = [];
    // 	}
    // 	themeClasses.push(themeClass);
    // 	settings.themeClasses = themeClasses;
    // }
    /**
     * @ignore
     */
    function mergeTags(tags1, tags2) {
        if (!tags1) {
            tags1 = [];
        }
        return __spreadArray(__spreadArray([], __read(tags1), false), __read(tags2), false).filter(function (value, index, self) {
            return self.indexOf(value) === index;
        });
    }
    /**
     * @ignore
     */
    function sameBounds(a, b) {
        if (!b) {
            return false;
        }
        if (a.left != b.left) {
            return false;
        }
        if (a.right != b.right) {
            return false;
        }
        if (a.top != b.top) {
            return false;
        }
        if (a.bottom != b.bottom) {
            return false;
        }
        return true;
    }

    var Utils = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ready: ready,
        removeElement: removeElement,
        addEventListener: addEventListener,
        supports: supports,
        getPointerId: getPointerId,
        blur: blur,
        focus: focus,
        getRendererEvent: getRendererEvent,
        isTouchEvent: isTouchEvent,
        setStyle: setStyle,
        getStyle: getStyle,
        contains: contains,
        isLocalEvent: isLocalEvent,
        setInteractive: setInteractive,
        getShadowRoot: getShadowRoot,
        StyleRule: StyleRule,
        StyleSheet: StyleSheet,
        addClass: addClass,
        removeClass: removeClass,
        iOS: iOS,
        getSafeResolution: getSafeResolution,
        relativeToValue: relativeToValue,
        decimalPlaces: decimalPlaces,
        padString: padString,
        trimLeft: trimLeft,
        trimRight: trimRight,
        trim: trim,
        getFormat: getFormat,
        cleanFormat: cleanFormat,
        stripTags: stripTags,
        plainText: plainText,
        escapeForRgex: escapeForRgex,
        getYearDay: getYearDay,
        getWeek: getWeek,
        getMonthWeek: getMonthWeek,
        getDayFromWeek: getDayFromWeek,
        get12Hours: get12Hours,
        getTimeZone: getTimeZone,
        capitalizeFirst: capitalizeFirst,
        hslToRgb: hslToRgb,
        rgbToHsl: rgbToHsl,
        lighten: lighten,
        getLightnessStep: getLightnessStep,
        brighten: brighten,
        getBrightnessStep: getBrightnessStep,
        isLight: isLight,
        saturate: saturate,
        alternativeColor: alternativeColor,
        mergeTags: mergeTags,
        sameBounds: sameBounds
    });

    /**
     * @ignore
     */
    function string2hex(string) {
        //string = cssColorNames[string.toLowerCase()] || string;
        if (string[0] === "#") {
            string = string.substr(1);
        }
        if (string.length == 3) {
            string = string[0].repeat(2) + string[1].repeat(2) + string[2].repeat(2);
        }
        return parseInt(string, 16);
    }
    /**
     * @ignore
     */
    function rgba2hex(color) {
        color = color.replace(/[ ]/g, "");
        // Init
        var matches = color.match(/^rgb\(([0-9]*),([0-9]*),([0-9]*)\)/i);
        // Try rgb() format
        if (matches) {
            matches.push("1");
        }
        else {
            matches = color.match(/^rgba\(([0-9]*),([0-9]*),([0-9]*),([.0-9]*)\)/i);
            if (!matches) {
                return 0x000000;
            }
        }
        var hex = "";
        for (var i = 1; i <= 3; i++) {
            var val = parseInt(matches[i]).toString(16);
            if (val.length == 1) {
                val = "0" + val;
            }
            hex += val;
        }
        return string2hex(hex);
    }
    /**
     * Returns a new [[Color]] object base on input.
     *
     * Accepts parameters in CSS hex or rgb/rtba strings, or hex numbers.
     *
     * * `"#f00"`
     * * `"#ff0000"`
     * * `"rgb(255, 0, 0)"`
     * * `"rgba(255, 0, 0, 1)"`
     * * `0xff0000`
     *
     * @param   input  Input color
     * @return         Color
     */
    function color(input) {
        return Color.fromAny(input);
    }
    /**
     * Wherever color needs to be specified in amCharts 5, `Color` object needs to
     * be used.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/} for more info
     * @important
     */
    var Color = /** @class */ (function () {
        function Color(hex) {
            Object.defineProperty(this, "_hex", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            this._hex = hex | 0;
        }
        Object.defineProperty(Color.prototype, "hex", {
            /**
             * Color numeric value.
             */
            get: function () {
                return this._hex;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Color.prototype, "r", {
            /**
             * Value of color's R channel.
             * @return R value
             */
            get: function () {
                return this._hex >>> 16;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Color.prototype, "g", {
            /**
             * Value of color's G channel.
             * @return G value
             */
            get: function () {
                return (this._hex >> 8) & 0xFF;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Color.prototype, "b", {
            /**
             * Value of color's B channel.
             * @return B value
             */
            get: function () {
                return this._hex & 0xFF;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Returns color CSS representation in form of `rgba(r, g, b, a)` string.
         *
         * @param   alpha  Opacity
         * @return         CSS string
         */
        Object.defineProperty(Color.prototype, "toCSS", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (alpha) {
                if (alpha === void 0) { alpha = 1; }
                return "rgba(" + this.r + ", " + this.g + ", " + this.b + ", " + alpha + ")";
            }
        });
        /**
         * Returns color CSS representation in form of `#rgb` string.
         *
         * @return         CSS string
         */
        Object.defineProperty(Color.prototype, "toCSSHex", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return "#" + padString(this.r.toString(16), 2) + padString(this.g.toString(16), 2) + padString(this.b.toString(16), 2);
            }
        });
        /**
         * Returns color's HSL info.
         * @param   alpha Opacity
         * @return        HSL info
         */
        Object.defineProperty(Color.prototype, "toHSL", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (alpha) {
                if (alpha === void 0) { alpha = 1; }
                return rgbToHsl({
                    r: this.r,
                    g: this.g,
                    b: this.b,
                    a: alpha
                });
            }
        });
        /**
         * Converts HSL values into a new [[Color]] object.
         *
         * @param   h H value
         * @param   s S value
         * @param   l L value
         * @return    Color object
         */
        Object.defineProperty(Color, "fromHSL", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (h, s, l) {
                var rgb = hslToRgb({
                    h: h,
                    s: s,
                    l: l
                });
                return this.fromRGB(rgb.r, rgb.g, rgb.b);
            }
        });
        Object.defineProperty(Color.prototype, "toString", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this.toCSSHex();
            }
        });
        /**
         * Converts hex number into a new [[Color]] object.
         *
         * ```TypeScript
         * Color.fromHex(0xff0000) // red
         * ```
         * ```JavaScript
         * Color.fromHex(0xff0000) // red
         * ```
         *
         * @param   hex  Hex color
         * @return       Color
         */
        Object.defineProperty(Color, "fromHex", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (hex) {
                return new Color(hex);
            }
        });
        /**
         * Converts RGB values to a new [[Color]] object.
         *
         * @param   r  R value
         * @param   g  G value
         * @param   b  B value
         * @return     Color
         */
        Object.defineProperty(Color, "fromRGB", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (r, g, b) {
                return new Color((b | 0) + (g << 8) + (r << 16));
            }
        });
        /**
         * Converts RGB string to a new [[Color]] object.
         *
         * ```TypeScript
         * Color.fromString("#ff0000") // red
         * ```
         * ```JavaScript
         * Color.fromString("#ff0000") // red
         * ```
         *
         * @param   s  RGB string
         * @return     Color
         */
        Object.defineProperty(Color, "fromString", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (s) {
                return new Color(string2hex(s));
            }
        });
        /**
         * Converts CSS rgba() syntax to a new [[Color]] object.
         *
         * ```TypeScript
         * Color.fromCSS("rgba(255, 0, 0, 1)") // red
         * ```
         * ```JavaScript
         * Color.fromCSS("rgba(255, 0, 0, 1)") // red
         * ```
         *
         * @param  {string} s [description]
         * @return {Color}    [description]
         */
        Object.defineProperty(Color, "fromCSS", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (s) {
                return new Color(rgba2hex(s));
            }
        });
        /**
         * Convert to color from virtually anything.
         *
         * Will throw an exception if unable to resolve the color.
         *
         * @param   s  Source
         * @return     Color
         */
        Object.defineProperty(Color, "fromAny", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (s) {
                if (isString(s)) {
                    if (s[0] == "#") {
                        return Color.fromString(s);
                    }
                    else if (s.substr(0, 3) == "rgb") {
                        return Color.fromCSS(s);
                    }
                }
                else if (isNumber(s)) {
                    return Color.fromHex(s);
                }
                else if (s instanceof Color) {
                    return Color.fromHex(s.hex);
                }
                throw new Error("Unknown color syntax: " + s);
            }
        });
        /**
         * Returns a new [[Color]] object based on either `lightAlternative` or
         * `darkAlternative` depending on which one is more contrasting with
         * the `color`.
         *
         * @param   color             Reference color
         * @param   lightAlternative  Light color
         * @param   darkAlternative   Dark color
         * @return                    Alternative color
         */
        Object.defineProperty(Color, "alternative", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (color, lightAlternative, darkAlternative) {
                var rgb = alternativeColor({ r: color.r, g: color.g, b: color.b }, lightAlternative ? { r: lightAlternative.r, g: lightAlternative.g, b: lightAlternative.b } : undefined, darkAlternative ? { r: darkAlternative.r, g: darkAlternative.g, b: darkAlternative.b } : undefined);
                return this.fromRGB(rgb.r, rgb.g, rgb.b);
            }
        });
        /**
         * Returns an intermediate Color between two reference colors depending on
         * the progress (`diff`) between the two.
         *
         * @param   diff  Progress
         * @param   from  Source color
         * @param   to    Target color
         * @param   mode  Interpolation mode
         * @return        Color
         */
        Object.defineProperty(Color, "interpolate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (diff, from, to, mode) {
                if (mode === void 0) { mode = "rgb"; }
                if (mode == "hsl") {
                    var fromHSL = from.toHSL();
                    var toHSL = to.toHSL();
                    return Color.fromHSL(range(diff, fromHSL.h, toHSL.h), range(diff, fromHSL.s, toHSL.s), range(diff, fromHSL.l, toHSL.l));
                }
                else {
                    return Color.fromRGB(range(diff, from.r, to.r), range(diff, from.g, to.g), range(diff, from.b, to.b));
                }
            }
        });
        /**
         * Returns a new [[Color]] lightened by `percent` value.
         *
         * Use negative value to darken the color.
         *
         * @param   color    Source color
         * @param   percent  Percent
         * @return           New color
         */
        Object.defineProperty(Color, "lighten", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (color, percent) {
                var rgb = lighten({ r: color.r, g: color.g, b: color.b }, percent);
                return Color.fromRGB(rgb.r, rgb.g, rgb.b);
            }
        });
        /**
         * Returns a new [[Color]] brightened by `percent` value.
         *
         * Use negative value to dim the color.
         *
         * @param   color    Source color
         * @param   percent  Percent
         * @return           New color
         */
        Object.defineProperty(Color, "brighten", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (color, percent) {
                var rgb = brighten({ r: color.r, g: color.g, b: color.b }, percent);
                return Color.fromRGB(rgb.r, rgb.g, rgb.b);
            }
        });
        /**
         * Returns a new [[Color]] saturated by `percent` value.
         *
         * Use negative value to desaturate the color.
         *
         * @param   color    Source color
         * @param   percent  Percent
         * @return           New color
         */
        Object.defineProperty(Color, "saturate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (color, percent) {
                var rgb = saturate({ r: color.r, g: color.g, b: color.b }, percent);
                return Color.fromRGB(rgb.r, rgb.g, rgb.b);
            }
        });
        return Color;
    }());

    /**
     * @ignore
     */
    function waitForAnimations(animations) {
        return __awaiter(this, void 0, void 0, function () {
            var promises_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(animations !== undefined)) return [3 /*break*/, 2];
                        promises_1 = [];
                        each(animations, function (_, animation) {
                            promises_1.push(animation.waitForStop());
                        });
                        return [4 /*yield*/, Promise.all(promises_1)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    }
    /**
     * @ignore
     */
    function range(diff, from, to) {
        return from + (diff * (to - from));
    }
    /**
     * @ignore
     */
    function defaultInterpolate(diff, from, to) {
        if (diff >= 1) {
            return to;
        }
        else {
            return from;
        }
    }
    /**
     * @ignore
     */
    function percentInterpolate(diff, from, to) {
        return new Percent(range(diff, from.percent, to.percent));
    }
    /**
     * @ignore
     */
    function colorInterpolate(diff, from, to) {
        return Color.interpolate(diff, from, to);
    }
    /**
     * @ignore
     */
    function getInterpolate(from, to) {
        if (typeof from === "number" && typeof to === "number") {
            return range;
        }
        if (from instanceof Percent && to instanceof Percent) {
            return percentInterpolate;
        }
        if (from instanceof Color && to instanceof Color) {
            return colorInterpolate;
        }
        return defaultInterpolate;
    }
    /*export class AnimationValue extends AnimationTime {
        public _min: number;
        public _max: number;

        constructor(entity: Entity, duration: number, min: number, max: number) {
            super(entity, duration);
            this._min = min;
            this._max = max;
        }

        public get min(): number {
            return this._min;
        }

        public set min(value: number) {
            if (this._min !== value) {
                this._min = value;
                this._entity.markDirty();
            }
        }

        public get max(): number {
            return this._max;
        }

        public set max(value: number) {
            if (this._max !== value) {
                this._max = value;
                this._entity.markDirty();
            }
        }

        public currentValue(): number {
            return range(super.currentTime(), this._min, this._max);
        }

        public jumpToValue(value: number) {
            super.jumpToTime(normalize(value, this._min, this._max));
        }

        public tweenToValue(value: number) {
            super.tweenToTime(normalize(value, this._min, this._max));
        }
    }
    */

    /**
     * ============================================================================
     * CONSTANTS
     * ============================================================================
     * @hidden
     */
    var PI = Math.PI;
    var HALFPI = PI / 2;
    var RADIANS = PI / 180;
    var DEGREES = 180 / PI;
    /**
     * Rounds the numeric value to whole number or specific precision of set.
     *
     * @param value      Value
     * @param precision  Precision (number of decimal points)
     * @param floor  In case value ends with 0.5 and precision is 0, we might need to floor the value instead of ceiling it.
     * @return Rounded value
     */
    function round$1(value, precision, floor) {
        if (!isNumber(precision) || precision <= 0) {
            var rounded = Math.round(value);
            if (floor) {
                if (rounded - value == 0.5) {
                    rounded--;
                }
            }
            return rounded;
        }
        else {
            var d = Math.pow(10, precision);
            return Math.round(value * d) / d;
        }
    }
    /**
     * Ceils the numeric value to whole number or specific precision of set.
     *
     * @param value      Value
     * @param precision  Precision (number of decimal points)
     * @return Rounded value
     */
    function ceil(value, precision) {
        if (!isNumber(precision) || precision <= 0) {
            return Math.ceil(value);
        }
        else {
            var d = Math.pow(10, precision);
            return Math.ceil(value * d) / d;
        }
    }
    /**
     * [getCubicControlPointA description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param p0        [description]
     * @param p1        [description]
     * @param p2        [description]
     * @param p3        [description]
     * @param tensionX  [description]
     * @param tensionY  [description]
     * @return [description]
     */
    function getCubicControlPointA(p0, p1, p2, tensionX, tensionY) {
        return { x: ((-p0.x + p1.x / tensionX + p2.x) * tensionX), y: ((-p0.y + p1.y / tensionY + p2.y) * tensionY) };
    }
    /**
     * [getCubicControlPointB description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param p0        [description]
     * @param p1        [description]
     * @param p2        [description]
     * @param p3        [description]
     * @param tensionX  [description]
     * @param tensionY  [description]
     * @return [description]
     */
    function getCubicControlPointB(p1, p2, p3, tensionX, tensionY) {
        return { x: ((p1.x + p2.x / tensionX - p3.x) * tensionX), y: ((p1.y + p2.y / tensionY - p3.y) * tensionY) };
    }
    function fitToRange(value, min, max) {
        return Math.min(Math.max(value, min), max);
    }
    /**
     * Returns sine of an angle specified in degrees.
     *
     * @param value  Value
     * @return Sine
     */
    function sin$1(angle) {
        return Math.sin(RADIANS * angle);
    }
    /**
     * Returns tan of an angle specified in degrees.
     *
     * @param value  Value
     * @return Sine
     */
    function tan(angle) {
        return Math.tan(RADIANS * angle);
    }
    /**
     * Returns cosine of an angle specified in degrees.
     *
     * @param value  Value
     * @return Cosine
     */
    function cos$1(angle) {
        return Math.cos(RADIANS * angle);
    }
    // 0 to 360
    function normalizeAngle(value) {
        value = value % 360;
        if (value < 0) {
            value += 360;
        }
        return value;
    }
    // TODO this doesn't work properly for skewing, and it's probably broken for rotation too
    function getArcBounds(cx, cy, startAngle, endAngle, radius) {
        var minX = Number.MAX_VALUE;
        var minY = Number.MAX_VALUE;
        var maxX = -Number.MAX_VALUE;
        var maxY = -Number.MAX_VALUE;
        var bpoints = [];
        bpoints.push(getArcPoint(radius, startAngle));
        bpoints.push(getArcPoint(radius, endAngle));
        var fromAngle = Math.min(Math.floor(startAngle / 90) * 90, Math.floor(endAngle / 90) * 90);
        var toAngle = Math.max(Math.ceil(startAngle / 90) * 90, Math.ceil(endAngle / 90) * 90);
        for (var angle = fromAngle; angle <= toAngle; angle += 90) {
            if (angle >= startAngle && angle <= endAngle) {
                bpoints.push(getArcPoint(radius, angle));
            }
        }
        for (var i = 0; i < bpoints.length; i++) {
            var pt = bpoints[i];
            if (pt.x < minX) {
                minX = pt.x;
            }
            if (pt.y < minY) {
                minY = pt.y;
            }
            if (pt.x > maxX) {
                maxX = pt.x;
            }
            if (pt.y > maxY) {
                maxY = pt.y;
            }
        }
        return ({ left: cx + minX, top: cy + minY, right: cx + maxX, bottom: cy + maxY });
    }
    /**
     * Returns point on arc
     *
     * @param center point
     * @param radius
     * @param arc
     * @return {boolean}
     */
    function getArcPoint(radius, arc) {
        return ({ x: radius * cos$1(arc), y: radius * sin$1(arc) });
    }
    function mergeBounds(bounds) {
        var len = bounds.length;
        if (len > 0) {
            var bound = bounds[0];
            var left = bound.left;
            var top_1 = bound.top;
            var right = bound.right;
            var bottom = bound.bottom;
            if (len > 1) {
                for (var i = 1; i < len; i++) {
                    bound = bounds[i];
                    left = Math.min(bound.left, left);
                    right = Math.max(bound.right, right);
                    top_1 = Math.min(bound.top, top_1);
                    bottom = Math.max(bound.bottom, bottom);
                }
            }
            return { left: left, right: right, top: top_1, bottom: bottom };
        }
        return { left: 0, right: 0, top: 0, bottom: 0 };
    }
    function fitAngleToRange(value, startAngle, endAngle) {
        if (startAngle > endAngle) {
            var temp = startAngle;
            startAngle = endAngle;
            endAngle = temp;
        }
        value = normalizeAngle(value);
        var count = (startAngle - normalizeAngle(startAngle)) / 360;
        if (value < startAngle) {
            value += 360 * (count + 1);
        }
        var maxEnd = startAngle + (endAngle - startAngle) / 2 + 180;
        var maxStart = startAngle + (endAngle - startAngle) / 2 - 180;
        if (value > endAngle) {
            if (value - 360 > startAngle) {
                value -= 360;
            }
            else {
                if (value < maxEnd) {
                    value = endAngle;
                }
                else {
                    value = startAngle;
                }
            }
        }
        if (value < startAngle) {
            if (value > maxStart) {
                value = startAngle;
            }
            else {
                value = endAngle;
            }
        }
        return value;
    }
    function inBounds(point, bounds) {
        if (point.x >= bounds.left && point.y >= bounds.top && point.x <= bounds.right && point.y <= bounds.bottom) {
            return true;
        }
        return false;
    }
    function getAngle(point1, point2) {
        if (!point2) {
            point2 = { x: point1.x * 2, y: point1.y * 2 };
        }
        var diffX = point2.x - point1.x;
        var diffY = point2.y - point1.y;
        var angle = Math.atan2(diffY, diffX) * DEGREES;
        if (angle < 0) {
            angle += 360;
        }
        return normalizeAngle(angle);
    }
    /**
     * [getPointOnQuadraticCurve description]
     *
     * @ignore Exclude from docs
     * @todo Description
     * @param pointA        [description]
     * @param pointB        [description]
     * @param controlPoint  [description]
     * @param position      [description]
     * @return [description]
     */
    function getPointOnQuadraticCurve(pointA, pointB, controlPoint, position) {
        var x = (1 - position) * (1 - position) * pointA.x + 2 * (1 - position) * position * controlPoint.x + position * position * pointB.x;
        var y = (1 - position) * (1 - position) * pointA.y + 2 * (1 - position) * position * controlPoint.y + position * position * pointB.y;
        return { x: x, y: y };
    }
    function getPointOnLine(pointA, pointB, position) {
        return { x: pointA.x + (pointB.x - pointA.x) * position, y: pointA.y + (pointB.y - pointA.y) * position };
    }
    /**
     * Returns the closest value from the array of values to the reference value.
     *
     * @param values  Array of values
     * @param value   Reference value
     * @return Closes value from the array
     */
    function closest(values, referenceValue) {
        return values.reduce(function (prev, curr) {
            return (Math.abs(curr - referenceValue) < Math.abs(prev - referenceValue) ? curr : prev);
        });
    }
    function boundsOverlap(bounds1, bounds2) {
        return !(bounds1.bottom < bounds2.top || bounds2.bottom < bounds1.top || bounds1.right < bounds2.left || bounds2.right < bounds1.left);
    }

    var Math$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        PI: PI,
        HALFPI: HALFPI,
        RADIANS: RADIANS,
        DEGREES: DEGREES,
        round: round$1,
        ceil: ceil,
        getCubicControlPointA: getCubicControlPointA,
        getCubicControlPointB: getCubicControlPointB,
        fitToRange: fitToRange,
        sin: sin$1,
        tan: tan,
        cos: cos$1,
        normalizeAngle: normalizeAngle,
        getArcBounds: getArcBounds,
        getArcPoint: getArcPoint,
        mergeBounds: mergeBounds,
        fitAngleToRange: fitAngleToRange,
        inBounds: inBounds,
        getAngle: getAngle,
        getPointOnQuadraticCurve: getPointOnQuadraticCurve,
        getPointOnLine: getPointOnLine,
        closest: closest,
        boundsOverlap: boundsOverlap
    });

    /**
     * A collection of easing functions
     *
     * Parts of this collection are taken from D3.js library (https://d3js.org/)
     */
    /**
     * The functions below are from D3.js library (https://d3js.org/)
     *
     * ----------------------------------------------------------------------------
     * Copyright 2017 Mike Bostock
     *
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are met:
     *
     * 1. Redistributions of source code must retain the above copyright notice,
     *	this list of conditions and the following disclaimer.
     *
     * 2. Redistributions in binary form must reproduce the above copyright notice,
     *	this list of conditions and the following disclaimer in the documentation
     *	and/or other materials provided with the distribution.
     *
     * 3. Neither the name of the copyright holder nor the names of its
     *	contributors may be used to endorse or promote products derived from this
     *	software without specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
     * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
     * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
     * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
     * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
     * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
     * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     * POSSIBILITY OF SUCH DAMAGE.
     * ----------------------------------------------------------------------------
     * @hidden
     */
    /**
     */
    function linear(t) {
        return t;
    }
    function quad(t) {
        return t * t;
    }
    function cubic(t) {
        return t * t * t;
    }
    function pow(t, e) {
        return Math.pow(t, e);
    }
    function exp(t) {
        return Math.pow(2, 10 * t - 10);
    }
    function sine(t) {
        return 1 - Math.cos(t * HALFPI);
    }
    function circle(t) {
        return 1 - Math.sqrt(1 - t * t);
    }
    /**
     * ============================================================================
     * TRANSFORMERS
     * ============================================================================
     * @hidden
     */
    /**
     */
    function yoyo(ease) {
        return function (t) {
            if (t < 0.5) {
                return ease(t * 2.0);
            }
            else {
                return ease((1.0 - t) * 2.0);
            }
        };
    }
    function out(ease) {
        return function (t) {
            return 1.0 - ease(1.0 - t);
        };
    }
    function inOut(ease) {
        return function (t) {
            if (t <= 0.5) {
                return ease(t * 2.0) / 2.0;
            }
            else {
                return 1.0 - (ease((1.0 - t) * 2.0) / 2.0);
            }
        };
    }
    /**
     * ============================================================================
     * BOUNCE
     * ============================================================================
     * @hidden
     */
    var b1 = 4 / 11, b2 = 6 / 11, b3 = 8 / 11, b4 = 3 / 4, b5 = 9 / 11, b6 = 10 / 11, b7 = 15 / 16, b8 = 21 / 22, b9 = 63 / 64, b0 = 1 / b1 / b1;
    function bounce(t) {
        return 1 - bounceOut(1 - t);
    }
    /**
     * @ignore
     */
    function bounceOut(t) {
        t = t;
        if (t < b1) {
            return b0 * t * t;
        }
        else if (t < b3) {
            return b0 * (t -= b2) * t + b4;
        }
        else if (t < b6) {
            return b0 * (t -= b5) * t + b7;
        }
        else {
            return b0 * (t -= b8) * t + b9;
        }
    }
    /**
     * ============================================================================
     * ELASTIC
     * ============================================================================
     * @hidden
     */
    /**
     * @ignore
     */
    var tau$2 = 2 * Math.PI;
    /**
     * @ignore
     */
    var amplitude = 1;
    /**
     * @ignore
     */
    var period = 0.3 / tau$2;
    /**
     * @ignore
     */
    var s = Math.asin(1 / amplitude) * period;
    function elastic(t) {
        var v = t;
        return amplitude * Math.pow(2, 10 * --v) * Math.sin((s - v) / period);
    }

    var Ease = /*#__PURE__*/Object.freeze({
        __proto__: null,
        linear: linear,
        quad: quad,
        cubic: cubic,
        pow: pow,
        exp: exp,
        sine: sine,
        circle: circle,
        yoyo: yoyo,
        out: out,
        inOut: inOut,
        bounce: bounce,
        elastic: elastic
    });

    /**
     * An object representing a collection of setting values to apply as required.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/states/} for more info
     */
    var State = /** @class */ (function () {
        function State(entity, settings) {
            Object.defineProperty(this, "_entity", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_settings", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_userSettings", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            this._entity = entity;
            this._settings = settings;
        }
        Object.defineProperty(State.prototype, "get", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, fallback) {
                var value = this._settings[key];
                if (value !== undefined) {
                    return value;
                }
                else {
                    return fallback;
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(State.prototype, "setRaw", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, value) {
                this._settings[key] = value;
            }
        });
        /**
         * Sets a setting `value` for the specified `key` to be set when the state
         * is applied.
         *
         * @param   key       Setting key
         * @param   value     Setting value
         * @return            Setting value
         */
        Object.defineProperty(State.prototype, "set", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, value) {
                this._userSettings[key] = true;
                this.setRaw(key, value);
            }
        });
        /**
         * Removes a setting value for the specified `key`.
         *
         * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info
         * @param   key       Setting key
         */
        Object.defineProperty(State.prototype, "remove", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key) {
                delete this._userSettings[key];
                delete this._settings[key];
            }
        });
        /**
         * Sets multiple settings at once.
         *
         * `settings` must be an object with key: value pairs.
         *
         * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info
         * @param settings Settings
         */
        Object.defineProperty(State.prototype, "setAll", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (settings) {
                var _this = this;
                keys(settings).forEach(function (key) {
                    _this.set(key, settings[key]);
                });
            }
        });
        Object.defineProperty(State.prototype, "_eachSetting", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (f) {
                each(this._settings, f);
            }
        });
        /**
         * Applies the state to the target element.
         *
         * All setting values are set immediately.
         */
        Object.defineProperty(State.prototype, "apply", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                var seen = {};
                seen["stateAnimationEasing"] = true;
                seen["stateAnimationDuration"] = true;
                var defaultState = this._entity.states.lookup("default");
                this._eachSetting(function (key, value) {
                    if (!seen[key]) {
                        seen[key] = true;
                        // save values to default state
                        if (_this !== defaultState) {
                            if (!(key in defaultState._settings)) {
                                defaultState._settings[key] = _this._entity.get(key);
                            }
                        }
                        _this._entity.set(key, value);
                    }
                });
            }
        });
        /**
         * Applies the state to the target element.
         *
         * Returns an object representing all [[Animation]] objects created for
         * each setting key transition.
         *
         * @return           Animations
         */
        Object.defineProperty(State.prototype, "applyAnimate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (duration) {
                var _this = this;
                if (duration == null) {
                    duration = this._settings.stateAnimationDuration;
                }
                if (duration == null) {
                    duration = this.get("stateAnimationDuration", this._entity.get("stateAnimationDuration", 0));
                }
                var easing = this._settings.stateAnimationEasing;
                if (easing == null) {
                    easing = this.get("stateAnimationEasing", this._entity.get("stateAnimationEasing", cubic));
                }
                var defaultState = this._entity.states.lookup("default");
                var seen = {};
                seen["stateAnimationEasing"] = true;
                seen["stateAnimationDuration"] = true;
                var animations = {};
                this._eachSetting(function (key, value) {
                    if (!seen[key]) {
                        seen[key] = true;
                        // save values to default state
                        if (_this != defaultState) {
                            if (!(key in defaultState._settings)) {
                                defaultState._settings[key] = _this._entity.get(key);
                            }
                        }
                        var animation = _this._entity.animate({
                            key: key,
                            to: value,
                            duration: duration,
                            easing: easing
                        });
                        if (animation) {
                            animations[key] = animation;
                        }
                    }
                });
                return animations;
            }
        });
        return State;
    }());
    /**
     * Collection of [[State]] objects for an element.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/states/} for more info
     */
    var States = /** @class */ (function () {
        function States(entity) {
            Object.defineProperty(this, "_states", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(this, "_entity", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            this._entity = entity;
        }
        /**
         * Checks if a state by `name` exists. Returns it there is one.
         *
         * @param  name  State name
         * @return       State
         */
        Object.defineProperty(States.prototype, "lookup", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (name) {
                return this._states[name];
            }
        });
        /**
         * Sets supplied `settings` on a state by the `name`.
         *
         * If such state does not yet exists, it is created.
         *
         * @param   name      State name
         * @param   settings  Settings
         * @return            New State
         */
        Object.defineProperty(States.prototype, "create", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (name, settings) {
                var state = this._states[name];
                if (state) {
                    state.setAll(settings);
                    return state;
                }
                else {
                    var state_1 = new State(this._entity, settings);
                    this._states[name] = state_1;
                    return state_1;
                }
            }
        });
        /**
         * Removes the state called `name`.
         *
         * @param   name      State name
         */
        Object.defineProperty(States.prototype, "remove", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (name) {
                delete this._states[name];
            }
        });
        /**
         * Applies a named state to the target element.
         *
         * @param  newState  State name
         */
        Object.defineProperty(States.prototype, "apply", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (newState) {
                var state = this._states[newState];
                if (state) {
                    state.apply();
                }
                this._entity._applyState(newState);
            }
        });
        /**
         * Applies a named state to the element.
         *
         * Returns an object representing all [[Animation]] objects created for
         * each setting key transition.
         *
         * @param   newState  State name
         * @return            Animations
         */
        Object.defineProperty(States.prototype, "applyAnimate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (newState, duration) {
                var animations;
                var state = this._states[newState];
                if (state) {
                    animations = state.applyAnimate(duration);
                }
                this._entity._applyStateAnimated(newState, duration);
                return animations;
            }
        });
        return States;
    }());

    /**
     * @ignore
     */
    var Registry = /** @class */ (function () {
        function Registry() {
            /**
             * List of applied licenses.
             * @ignore
             */
            Object.defineProperty(this, "licenses", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            /**
             * Entities that have their `id` setting set.
             */
            Object.defineProperty(this, "entitiesById", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            /**
             * All created [[Root]] elements.
             */
            Object.defineProperty(this, "rootElements", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
        }
        return Registry;
    }());
    /**
        * @ignore
     */
    var registry = new Registry();
    /**
     * Adds a license, e.g.:
     *
     * ```TypeScript
     * am5.addLicense("xxxxxxxx");
     * ```
     * ```JavaScript
     * am5.addLicense("xxxxxxxx");
     * ```
     *
     * Multiple licenses can be added to cover for multiple products.
     *
     * @param  license  License key
     */
    function addLicense(license) {
        registry.licenses.push(license);
    }
    /**
     * Disposes all [[Root]] elements.
     */
    function disposeAllRootElements() {
        var root;
        while (root = registry.rootElements.pop()) {
            root.dispose();
        }
    }

    /**
     * @ignore
     */
    function compare(left, right) {
        if (left === right) {
            return 0;
        }
        else if (left < right) {
            return -1;
        }
        else {
            return 1;
        }
    }
    /**
     * @ignore
     */
    function compareArray(left, right, f) {
        var leftLength = left.length;
        var rightLength = right.length;
        var length = Math.min(leftLength, rightLength);
        for (var i = 0; i < length; ++i) {
            var order = f(left[i], right[i]);
            if (order !== 0) {
                return order;
            }
        }
        return compare(leftLength, rightLength);
    }
    /**
     * @ignore
     */
    function compareNumber(a, b) {
        if (a === b) {
            return 0;
        }
        else if (a < b) {
            return -1;
        }
        else {
            return 1;
        }
    }

    /**
     * Allows to dynamically modify setting value of its target element.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/adapters/} for more info
     */
    var Adapters = /** @class */ (function () {
        function Adapters(entity) {
            Object.defineProperty(this, "_entity", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_callbacks", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(this, "_disabled", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            this._entity = entity;
        }
        /**
         * Add a function (`callback`) that will modify value for setting `key`.
         *
         * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/adapters/} for more info
         */
        Object.defineProperty(Adapters.prototype, "add", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, callback) {
                var _this = this;
                var callbacks = this._callbacks[key];
                if (callbacks === undefined) {
                    callbacks = this._callbacks[key] = [];
                }
                callbacks.push(callback);
                this._entity._markDirtyKey(key);
                return new Disposer(function () {
                    if (removeFirst(callbacks, callback)) {
                        _this._entity._markDirtyKey(key);
                    }
                });
            }
        });
        /**
         * Removes all adapters for the specific key.
         *
         * @since 5.1.0
         */
        Object.defineProperty(Adapters.prototype, "remove", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key) {
                var callbacks = this._callbacks[key];
                if (callbacks !== undefined) {
                    delete this._callbacks[key];
                    if (callbacks.length !== 0) {
                        this._entity._markDirtyKey(key);
                    }
                }
            }
        });
        /**
         * Enables (previously disabled) adapters for specific key.
         *
         * @since 5.1.0
         */
        Object.defineProperty(Adapters.prototype, "enable", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key) {
                if (this._disabled[key]) {
                    delete this._disabled[key];
                    this._entity._markDirtyKey(key);
                }
            }
        });
        /**
         * Disables all adapters for specific key.
         *
         * @since 5.1.0
         */
        Object.defineProperty(Adapters.prototype, "disable", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key) {
                if (!this._disabled[key]) {
                    this._disabled[key] = true;
                    this._entity._markDirtyKey(key);
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Adapters.prototype, "fold", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, value) {
                if (!this._disabled[key]) {
                    var callbacks = this._callbacks[key];
                    if (callbacks !== undefined) {
                        for (var i = 0, len = callbacks.length; i < len; ++i) {
                            value = callbacks[i](value, this._entity, key);
                        }
                    }
                }
                return value;
            }
        });
        return Adapters;
    }());
    /**
     * Animation object.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/animations/} for more info
     */
    var Animation = /** @class */ (function () {
        function Animation(from, to, duration, easing, loops, startingTime) {
            Object.defineProperty(this, "_from", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_to", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_duration", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_easing", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_loops", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_interpolate", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_oldTime", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_time", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(this, "_stopped", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(this, "_playing", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: true
            });
            Object.defineProperty(this, "events", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new EventDispatcher()
            });
            this._from = from;
            this._to = to;
            this._duration = duration;
            this._easing = easing;
            this._loops = loops;
            this._interpolate = getInterpolate(from, to);
            this._oldTime = startingTime;
        }
        Object.defineProperty(Animation.prototype, "to", {
            get: function () {
                return this._to;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Animation.prototype, "from", {
            get: function () {
                return this._from;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Animation.prototype, "playing", {
            get: function () {
                return this._playing;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Animation.prototype, "stopped", {
            get: function () {
                return this._stopped;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Animation.prototype, "stop", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (!this._stopped) {
                    this._stopped = true;
                    this._playing = false;
                    if (this.events.isEnabled("stopped")) {
                        this.events.dispatch("stopped", {
                            type: "stopped",
                            target: this,
                        });
                    }
                }
            }
        });
        Object.defineProperty(Animation.prototype, "pause", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._playing = false;
                this._oldTime = null;
            }
        });
        Object.defineProperty(Animation.prototype, "play", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (!this._stopped) {
                    this._playing = true;
                }
            }
        });
        Object.defineProperty(Animation.prototype, "percentage", {
            get: function () {
                return this._time / this._duration;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Animation.prototype, "waitForStop", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                return new Promise(function (resolve, _reject) {
                    if (_this._stopped) {
                        resolve();
                    }
                    else {
                        var listener = function () {
                            stopped_1.dispose();
                            resolve();
                        };
                        var stopped_1 = _this.events.on("stopped", listener);
                    }
                });
            }
        });
        Object.defineProperty(Animation.prototype, "_checkEnded", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (this._loops > 1) {
                    --this._loops;
                    return false;
                }
                else {
                    return true;
                }
            }
        });
        Object.defineProperty(Animation.prototype, "_run", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (currentTime) {
                if (this._oldTime !== null) {
                    this._time += currentTime - this._oldTime;
                    if (this._time > this._duration) {
                        this._time = this._duration;
                    }
                }
                this._oldTime = currentTime;
            }
        });
        Object.defineProperty(Animation.prototype, "_reset", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (currentTime) {
                this._oldTime = currentTime;
                this._time = 0;
            }
        });
        Object.defineProperty(Animation.prototype, "_value", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (diff) {
                return this._interpolate(this._easing(diff), this._from, this._to);
            }
        });
        return Animation;
    }());
    /**
     * @ignore
     */
    var counter = 0;
    /**
     * Base class for [[Entity]] objects that support Settings.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info
     */
    var Settings = /** @class */ (function () {
        function Settings(settings) {
            /**
             * Unique ID.
             */
            Object.defineProperty(this, "uid", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: ++counter
            });
            Object.defineProperty(this, "_settings", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_privateSettings", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(this, "_settingEvents", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(this, "_privateSettingEvents", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(this, "_prevSettings", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(this, "_prevPrivateSettings", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(this, "_animatingSettings", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(this, "_animatingPrivateSettings", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(this, "_animatingCount", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(this, "_disposed", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            // TODO move this into Entity
            Object.defineProperty(this, "_userProperties", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            this._settings = settings;
        }
        Object.defineProperty(Settings.prototype, "_checkDirty", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                keys(this._settings).forEach(function (key) {
                    _this._userProperties[key] = true;
                    _this._markDirtyKey(key);
                });
            }
        });
        Object.defineProperty(Settings.prototype, "_runAnimation", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (currentTime) {
                var _this = this;
                if (!this.isDisposed()) {
                    each(this._animatingSettings, function (key, animation) {
                        if (animation._stopped) {
                            _this._stopAnimation(key);
                        }
                        else if (animation._playing) {
                            animation._run(currentTime);
                            var diff = animation.percentage;
                            if (diff >= 1) {
                                if (animation._checkEnded()) {
                                    _this.set(key, animation._value(1));
                                }
                                else {
                                    animation._reset(currentTime);
                                    _this._set(key, animation._value(1));
                                }
                            }
                            else {
                                _this._set(key, animation._value(diff));
                            }
                        }
                    });
                    each(this._animatingPrivateSettings, function (key, animation) {
                        if (animation._stopped) {
                            _this._stopAnimationPrivate(key);
                        }
                        else if (animation._playing) {
                            animation._run(currentTime);
                            var diff = animation.percentage;
                            if (diff >= 1) {
                                if (animation._checkEnded()) {
                                    _this.setPrivate(key, animation._value(1));
                                }
                                else {
                                    animation._reset(currentTime);
                                    _this._setPrivate(key, animation._value(1));
                                }
                            }
                            else {
                                _this._setPrivate(key, animation._value(diff));
                            }
                        }
                    });
                    if (this._animatingCount < 0) {
                        throw new Error("Invalid animation count");
                    }
                    return this._animatingCount === 0;
                }
                else {
                    return true;
                }
            }
        });
        Object.defineProperty(Settings.prototype, "_markDirtyKey", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_key) {
                this.markDirty();
            }
        });
        Object.defineProperty(Settings.prototype, "_markDirtyPrivateKey", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_key) {
                this.markDirty();
            }
        });
        /**
         * Sets a callback function to invoke when specific key of settings changes
         * or is set.
         *
         * @see {@link https://www.amcharts.com/docs/v5/concepts/events/#Settings_value_change} for more info
         * @param   key       Settings key
         * @param   callback  Callback
         * @return            Disposer for event
         */
        Object.defineProperty(Settings.prototype, "on", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, callback) {
                var _this = this;
                var events = this._settingEvents[key];
                if (events === undefined) {
                    events = this._settingEvents[key] = [];
                }
                events.push(callback);
                return new Disposer(function () {
                    removeFirst(events, callback);
                    if (events.length === 0) {
                        delete _this._settingEvents[key];
                    }
                });
            }
        });
        /**
         * Sets a callback function to invoke when specific key of private settings
         * changes or is set.
         *
         * @see {@link https://www.amcharts.com/docs/v5/concepts/events/#Settings_value_change} for more info
         * @ignore
         * @param   key       Private settings key
         * @param   callback  Callback
         * @return            Disposer for event
         */
        Object.defineProperty(Settings.prototype, "onPrivate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, callback) {
                var _this = this;
                var events = this._privateSettingEvents[key];
                if (events === undefined) {
                    events = this._privateSettingEvents[key] = [];
                }
                events.push(callback);
                return new Disposer(function () {
                    removeFirst(events, callback);
                    if (events.length === 0) {
                        delete _this._privateSettingEvents[key];
                    }
                });
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Settings.prototype, "getRaw", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, fallback) {
                var value = this._settings[key];
                if (value !== undefined) {
                    return value;
                }
                else {
                    return fallback;
                }
            }
        });
        Object.defineProperty(Settings.prototype, "get", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, fallback) {
                return this.getRaw(key, fallback);
            }
        });
        Object.defineProperty(Settings.prototype, "_sendKeyEvent", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, value) {
                var _this = this;
                var events = this._settingEvents[key];
                if (events !== undefined) {
                    each$1(events, function (callback) {
                        callback(value, _this, key);
                    });
                }
            }
        });
        Object.defineProperty(Settings.prototype, "_sendPrivateKeyEvent", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, value) {
                var _this = this;
                var events = this._privateSettingEvents[key];
                if (events !== undefined) {
                    each$1(events, function (callback) {
                        callback(value, _this, key);
                    });
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Settings.prototype, "_setRaw", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, old, value) {
                this._prevSettings[key] = old;
                this._sendKeyEvent(key, value);
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Settings.prototype, "setRaw", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, value) {
                var old = this._settings[key];
                this._settings[key] = value;
                if (old !== value) {
                    this._setRaw(key, old, value);
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Settings.prototype, "_set", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, value) {
                var old = this._settings[key];
                this._settings[key] = value;
                if (old !== value) {
                    this._setRaw(key, old, value);
                    this._markDirtyKey(key);
                }
            }
        });
        Object.defineProperty(Settings.prototype, "_stopAnimation", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key) {
                var animation = this._animatingSettings[key];
                if (animation) {
                    delete this._animatingSettings[key];
                    --this._animatingCount;
                    animation.stop();
                }
            }
        });
        /**
         * Sets a setting `value` for the specified `key`, and returns the same `value`.
         *
         * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info
         * @param   key       Setting key
         * @param   value     Setting value
         * @return            Setting value
         */
        Object.defineProperty(Settings.prototype, "set", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, value) {
                this._set(key, value);
                this._stopAnimation(key);
                return value;
            }
        });
        /**
         * Removes a setting value for the specified `key`;
         *
         * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info
         * @param   key       Setting key
         */
        Object.defineProperty(Settings.prototype, "remove", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key) {
                if (key in this._settings) {
                    this._prevSettings[key] = this._settings[key];
                    delete this._settings[key];
                    this._sendKeyEvent(key, undefined);
                    this._markDirtyKey(key);
                }
                this._stopAnimation(key);
            }
        });
        /**
         * Removes all keys;
         *
         * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info
         */
        Object.defineProperty(Settings.prototype, "removeAll", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                each$1(keys(this._settings), function (key) {
                    _this.remove(key);
                });
            }
        });
        /**
         * Returns a value of a private setting.
         *
         * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/#Private_settings} for more info
         */
        Object.defineProperty(Settings.prototype, "getPrivate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, fallback) {
                var value = this._privateSettings[key];
                if (value !== undefined) {
                    return value;
                }
                else {
                    return fallback;
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Settings.prototype, "_setPrivateRaw", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, old, value) {
                this._prevPrivateSettings[key] = old;
                this._sendPrivateKeyEvent(key, value);
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Settings.prototype, "setPrivateRaw", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, value) {
                var old = this._privateSettings[key];
                this._privateSettings[key] = value;
                if (old !== value) {
                    this._setPrivateRaw(key, old, value);
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Settings.prototype, "_setPrivate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, value) {
                var old = this._privateSettings[key];
                this._privateSettings[key] = value;
                if (old !== value) {
                    this._setPrivateRaw(key, old, value);
                    this._markDirtyPrivateKey(key);
                }
            }
        });
        Object.defineProperty(Settings.prototype, "_stopAnimationPrivate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key) {
                var animation = this._animatingPrivateSettings[key];
                if (animation) {
                    animation.stop();
                    delete this._animatingPrivateSettings[key];
                    --this._animatingCount;
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Settings.prototype, "setPrivate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, value) {
                this._setPrivate(key, value);
                this._stopAnimationPrivate(key);
                return value;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Settings.prototype, "removePrivate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key) {
                if (key in this._privateSettings) {
                    this._prevPrivateSettings[key] = this._privateSettings[key];
                    delete this._privateSettings[key];
                    this._markDirtyPrivateKey(key);
                }
                this._stopAnimationPrivate(key);
            }
        });
        /**
         * Sets multiple settings at once.
         *
         * `settings` must be an object with key: value pairs.
         *
         * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info
         * @param settings Settings
         */
        Object.defineProperty(Settings.prototype, "setAll", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (settings) {
                var _this = this;
                each(settings, function (key, value) {
                    _this.set(key, value);
                });
            }
        });
        /**
         * Animates setting values from current/start values to new ones.
         *
         * @see {@link https://www.amcharts.com/docs/v5/concepts/animations/#Animating_settings} for more info
         * @param   options  Animation options
         * @return           Animation object
         */
        Object.defineProperty(Settings.prototype, "animate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (options) {
                var key = options.key;
                var to = options.to;
                var duration = options.duration || 0;
                var loops = options.loops || 1;
                var from = (options.from === undefined ? this.get(key) : options.from);
                var easing = (options.easing === undefined ? linear : options.easing);
                if (duration === 0) {
                    this.set(key, to);
                }
                else {
                    if (from === undefined || from === to) {
                        this.set(key, to);
                    }
                    else {
                        ++this._animatingCount;
                        this.set(key, from);
                        var animation_1 = this._animatingSettings[key] = new Animation(from, to, duration, easing, loops, this._animationTime());
                        this._startAnimation();
                        return animation_1;
                    }
                }
                var animation = new Animation(from, to, duration, easing, loops, null);
                animation.stop();
                return animation;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Settings.prototype, "animatePrivate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (options) {
                var key = options.key;
                var to = options.to;
                var duration = options.duration || 0;
                var loops = options.loops || 1;
                var from = (options.from === undefined ? this.getPrivate(key) : options.from);
                var easing = (options.easing === undefined ? linear : options.easing);
                if (duration === 0) {
                    this.setPrivate(key, to);
                }
                else {
                    if (from === undefined || from === to) {
                        this.setPrivate(key, to);
                    }
                    else {
                        ++this._animatingCount;
                        this.setPrivate(key, from);
                        var animation_2 = this._animatingPrivateSettings[key] = new Animation(from, to, duration, easing, loops, this._animationTime());
                        this._startAnimation();
                        return animation_2;
                    }
                }
                var animation = new Animation(from, to, duration, easing, loops, null);
                animation.stop();
                return animation;
            }
        });
        Object.defineProperty(Settings.prototype, "_dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () { }
        });
        /**
         * Returns `true` if this element is disposed.
         *
         * @return Disposed
         */
        Object.defineProperty(Settings.prototype, "isDisposed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this._disposed;
            }
        });
        /**
         * Disposes this object.
         */
        Object.defineProperty(Settings.prototype, "dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (!this._disposed) {
                    this._disposed = true;
                    this._dispose();
                }
            }
        });
        return Settings;
    }());
    /**
     * Base class.
     *
     * @important
     */
    var Entity = /** @class */ (function (_super) {
        __extends(Entity, _super);
        /**
         * IMPORTANT! Do not instantiate this class via `new Class()` syntax.
         *
         * Use static method `Class.new()` instead.
         *
         * @see {@link https://www.amcharts.com/docs/v5/getting-started/#New_element_syntax} for more info
         * @ignore
         */
        function Entity(root, settings, isReal, templates) {
            if (templates === void 0) { templates = []; }
            var _this = _super.call(this, settings) || this;
            Object.defineProperty(_this, "_root", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_user_id", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            }); // for testing purposes
            Object.defineProperty(_this, "states", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new States(_this)
            });
            Object.defineProperty(_this, "adapters", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new Adapters(_this)
            });
            Object.defineProperty(_this, "events", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this._createEvents()
            });
            Object.defineProperty(_this, "_userPrivateProperties", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(_this, "_dirty", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(_this, "_dirtyPrivate", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(_this, "_template", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            // Templates for the themes
            Object.defineProperty(_this, "_templates", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            // Internal templates which can be overridden by the user's templates
            Object.defineProperty(_this, "_internalTemplates", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            // Default themes which can be overridden by the user's themes
            Object.defineProperty(_this, "_defaultThemes", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            // Disposers for all of the templates
            Object.defineProperty(_this, "_templateDisposers", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            Object.defineProperty(_this, "_disposers", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            // Whether the template setup function should be run
            Object.defineProperty(_this, "_runSetup", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: true
            });
            Object.defineProperty(_this, "_disposerProperties", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            if (!isReal) {
                throw new Error("You cannot use `new Class()`, instead use `Class.new()`");
            }
            _this._root = root;
            _this._internalTemplates = templates;
            return _this;
        }
        /**
         * Use this method to create an instance of this class.
         *
         * @see {@link https://www.amcharts.com/docs/v5/getting-started/#New_element_syntax} for more info
         * @param   root      Root element
         * @param   settings  Settings
         * @param   template  Template
         * @return            Instantiated object
         */
        Object.defineProperty(Entity, "new", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (root, settings, template) {
                var x = (new this(root, settings, true));
                x._template = template;
                x._afterNew();
                return x;
            }
        });
        Object.defineProperty(Entity, "_new", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (root, settings, templates) {
                if (templates === void 0) { templates = []; }
                var x = (new this(root, settings, true, templates));
                x._afterNew();
                return x;
            }
        });
        Object.defineProperty(Entity.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                this._checkDirty();
                var shouldApply = false;
                var template = this._template;
                if (template) {
                    shouldApply = true;
                    template._setObjectTemplate(this);
                }
                each$1(this._internalTemplates, function (template) {
                    shouldApply = true;
                    template._setObjectTemplate(_this);
                });
                if (shouldApply) {
                    this._applyTemplates(false);
                }
                this.states.create("default", {});
                this._setDefaults();
            }
        });
        // This is the same as _afterNew, except it also applies the themes.
        // This should only be used for classes which don't have a parent (because they extend from Entity and not Sprite).
        Object.defineProperty(Entity.prototype, "_afterNewApplyThemes", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                this._checkDirty();
                var template = this._template;
                if (template) {
                    template._setObjectTemplate(this);
                }
                each$1(this._internalTemplates, function (template) {
                    template._setObjectTemplate(_this);
                });
                this.states.create("default", {});
                this._setDefaults();
                this._applyThemes();
            }
        });
        Object.defineProperty(Entity.prototype, "_createEvents", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return new EventDispatcher();
            }
        });
        Object.defineProperty(Entity.prototype, "classNames", {
            /**
             * @ignore
             */
            get: function () {
                return this.constructor.classNames;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Entity.prototype, "className", {
            /**
             * @ignore
             */
            get: function () {
                return this.constructor.className;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Entity.prototype, "_setDefaults", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
            }
        });
        Object.defineProperty(Entity.prototype, "_setDefault", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, value) {
                if (!(key in this._settings)) {
                    _super.prototype.set.call(this, key, value);
                }
            }
        });
        Object.defineProperty(Entity.prototype, "_setRawDefault", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, value) {
                if (!(key in this._settings)) {
                    _super.prototype.setRaw.call(this, key, value);
                }
            }
        });
        Object.defineProperty(Entity.prototype, "_clearDirty", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                keys(this._dirty).forEach(function (key) {
                    _this._dirty[key] = false;
                });
                keys(this._dirtyPrivate).forEach(function (key) {
                    _this._dirtyPrivate[key] = false;
                });
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Entity.prototype, "isDirty", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key) {
                return !!this._dirty[key];
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Entity.prototype, "isPrivateDirty", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key) {
                return !!this._dirtyPrivate[key];
            }
        });
        Object.defineProperty(Entity.prototype, "_markDirtyKey", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key) {
                this._dirty[key] = true;
                _super.prototype._markDirtyKey.call(this, key);
            }
        });
        Object.defineProperty(Entity.prototype, "_markDirtyPrivateKey", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key) {
                this._dirtyPrivate[key] = true;
                _super.prototype._markDirtyKey.call(this, key);
            }
        });
        /**
         * Checks if element is of certain class (or inherits one).
         *
         * @param   type  Class name to check
         * @return {boolean} Is of class?
         */
        Object.defineProperty(Entity.prototype, "isType", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (type) {
                return this.classNames.indexOf(type) !== -1;
            }
        });
        Object.defineProperty(Entity.prototype, "_pushPropertyDisposer", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, disposer) {
                var disposers = this._disposerProperties[key];
                if (disposers === undefined) {
                    disposers = this._disposerProperties[key] = [];
                }
                disposers.push(disposer);
                return disposer;
            }
        });
        Object.defineProperty(Entity.prototype, "_disposeProperty", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key) {
                var disposers = this._disposerProperties[key];
                if (disposers !== undefined) {
                    each$1(disposers, function (disposer) {
                        disposer.dispose();
                    });
                    delete this._disposerProperties[key];
                }
            }
        });
        Object.defineProperty(Entity.prototype, "template", {
            get: function () {
                return this._template;
            },
            /**
             * @todo needs description
             * @param  value  Template
             */
            set: function (value) {
                var template = this._template;
                if (template !== value) {
                    this._template = value;
                    if (template) {
                        template._removeObjectTemplate(this);
                    }
                    if (value) {
                        value._setObjectTemplate(this);
                    }
                    this._applyTemplates();
                }
            },
            enumerable: false,
            configurable: true
        });
        /**
         * @ignore
         */
        Object.defineProperty(Entity.prototype, "markDirty", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._root._addDirtyEntity(this);
            }
        });
        Object.defineProperty(Entity.prototype, "_startAnimation", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._root._addAnimation(this);
            }
        });
        Object.defineProperty(Entity.prototype, "_animationTime", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this._root.animationTime;
            }
        });
        Object.defineProperty(Entity.prototype, "_applyState", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_name) { }
        });
        Object.defineProperty(Entity.prototype, "_applyStateAnimated", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_name, _duration) { }
        });
        Object.defineProperty(Entity.prototype, "get", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, fallback) {
                var value = this.adapters.fold(key, this._settings[key]);
                if (value !== undefined) {
                    return value;
                }
                else {
                    return fallback;
                }
            }
        });
        /**
         * Sets a setting `value` for the specified `key`, and returns the same `value`.
         *
         * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info
         * @param   key       Setting key
         * @param   value     Setting value
         * @return            Setting value
         */
        Object.defineProperty(Entity.prototype, "set", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, value) {
                this._userProperties[key] = true;
                return _super.prototype.set.call(this, key, value);
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Entity.prototype, "setRaw", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, value) {
                this._userProperties[key] = true;
                _super.prototype.setRaw.call(this, key, value);
            }
        });
        /**
         * Sets a setting `value` for the specified `key` only if the value for this key was not set previously using set method, and returns the same `value`.
         *
         * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info
         * @param   key       Setting key
         * @param   value     Setting value
         * @return            Setting value
         */
        Object.defineProperty(Entity.prototype, "_setSoft", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, value) {
                if (!this._userProperties[key]) {
                    return _super.prototype.set.call(this, key, value);
                }
                return value;
            }
        });
        /**
         * Removes a setting value for the specified `key`.
         *
         * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info
         * @param   key       Setting key
         */
        Object.defineProperty(Entity.prototype, "remove", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key) {
                delete this._userProperties[key];
                this._removeTemplateProperty(key);
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Entity.prototype, "setPrivate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, value) {
                this._userPrivateProperties[key] = true;
                return _super.prototype.setPrivate.call(this, key, value);
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Entity.prototype, "setPrivateRaw", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, value) {
                this._userPrivateProperties[key] = true;
                _super.prototype.setPrivateRaw.call(this, key, value);
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Entity.prototype, "removePrivate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key) {
                delete this._userPrivateProperties[key];
                this._removeTemplatePrivateProperty(key);
            }
        });
        Object.defineProperty(Entity.prototype, "_setTemplateProperty", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (template, key, value) {
                if (!this._userProperties[key]) {
                    var match = this._findTemplateByKey(key);
                    if (template === match) {
                        _super.prototype.set.call(this, key, value);
                    }
                }
            }
        });
        Object.defineProperty(Entity.prototype, "_setTemplatePrivateProperty", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (template, key, value) {
                if (!this._userPrivateProperties[key]) {
                    var match = this._findTemplateByPrivateKey(key);
                    if (template === match) {
                        _super.prototype.setPrivate.call(this, key, value);
                    }
                }
            }
        });
        Object.defineProperty(Entity.prototype, "_removeTemplateProperty", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key) {
                if (!this._userProperties[key]) {
                    var match = this._findTemplateByKey(key);
                    if (match) {
                        // TODO don't stop the animation if the property didn't change
                        _super.prototype.set.call(this, key, match._settings[key]);
                    }
                    else {
                        _super.prototype.remove.call(this, key);
                    }
                }
            }
        });
        Object.defineProperty(Entity.prototype, "_removeTemplatePrivateProperty", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key) {
                if (!this._userPrivateProperties[key]) {
                    var match = this._findTemplateByPrivateKey(key);
                    if (match) {
                        // TODO don't stop the animation if the property didn't change
                        _super.prototype.setPrivate.call(this, key, match._privateSettings[key]);
                    }
                    else {
                        _super.prototype.removePrivate.call(this, key);
                    }
                }
            }
        });
        Object.defineProperty(Entity.prototype, "_walkParents", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (f) {
                f(this._root._rootContainer);
                f(this);
            }
        });
        // TODO faster version of this method which is specialized to just 1 key
        Object.defineProperty(Entity.prototype, "_applyStateByKey", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (name) {
                var other = this.states.create(name, {});
                var seen = {};
                this._eachTemplate(function (template) {
                    var state = template.states.lookup(name);
                    if (state) {
                        state._apply(other, seen);
                    }
                });
                each(other._settings, function (key) {
                    if (!seen[key] && !other._userSettings[key]) {
                        other.remove(key);
                    }
                });
            }
        });
        Object.defineProperty(Entity.prototype, "_applyTemplate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (template, state) {
                var _this = this;
                this._templateDisposers.push(template._apply(this, state));
                each(template._settings, function (key, value) {
                    if (!state.settings[key] && !_this._userProperties[key]) {
                        state.settings[key] = true;
                        _super.prototype.set.call(_this, key, value);
                    }
                });
                each(template._privateSettings, function (key, value) {
                    if (!state.privateSettings[key] && !_this._userPrivateProperties[key]) {
                        state.privateSettings[key] = true;
                        _super.prototype.setPrivate.call(_this, key, value);
                    }
                });
                if (this._runSetup && template.setup) {
                    this._runSetup = false;
                    template.setup(this);
                }
            }
        });
        /**
         * Calls the closure with each template and returns the first template which is true
         */
        Object.defineProperty(Entity.prototype, "_findStaticTemplate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (f) {
                if (this._template) {
                    if (f(this._template)) {
                        return this._template;
                    }
                }
            }
        });
        Object.defineProperty(Entity.prototype, "_eachTemplate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (f) {
                this._findStaticTemplate(function (template) {
                    f(template);
                    return false;
                });
                // _internalTemplates is sorted with most specific to the right
                eachReverse(this._internalTemplates, f);
                // _templates is sorted with most specific to the left
                each$1(this._templates, f);
            }
        });
        Object.defineProperty(Entity.prototype, "_applyTemplates", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (remove) {
                var _this = this;
                if (remove === void 0) { remove = true; }
                if (remove) {
                    this._disposeTemplates();
                }
                var state = {
                    settings: {},
                    privateSettings: {},
                    states: {},
                };
                this._eachTemplate(function (template) {
                    _this._applyTemplate(template, state);
                });
                if (remove) {
                    each(this._settings, function (key) {
                        if (!_this._userProperties[key] && !state.settings[key]) {
                            _super.prototype.remove.call(_this, key);
                        }
                    });
                    each(this._privateSettings, function (key) {
                        if (!_this._userPrivateProperties[key] && !state.privateSettings[key]) {
                            _super.prototype.removePrivate.call(_this, key);
                        }
                    });
                }
            }
        });
        Object.defineProperty(Entity.prototype, "_findTemplate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (f) {
                var value = this._findStaticTemplate(f);
                if (value === undefined) {
                    // _internalTemplates is sorted with most specific to the right
                    var value_1 = findReverse(this._internalTemplates, f);
                    if (value_1 === undefined) {
                        // _templates is sorted with most specific to the left
                        return find(this._templates, f);
                    }
                    else {
                        return value_1;
                    }
                }
                else {
                    return value;
                }
            }
        });
        Object.defineProperty(Entity.prototype, "_findTemplateByKey", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key) {
                return this._findTemplate(function (template) {
                    return key in template._settings;
                });
            }
        });
        Object.defineProperty(Entity.prototype, "_findTemplateByPrivateKey", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key) {
                return this._findTemplate(function (template) {
                    return key in template._privateSettings;
                });
            }
        });
        Object.defineProperty(Entity.prototype, "_disposeTemplates", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                each$1(this._templateDisposers, function (disposer) {
                    disposer.dispose();
                });
                this._templateDisposers.length = 0;
            }
        });
        Object.defineProperty(Entity.prototype, "_removeTemplates", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                each$1(this._templates, function (template) {
                    template._removeObjectTemplate(_this);
                });
                this._templates.length = 0;
            }
        });
        Object.defineProperty(Entity.prototype, "_applyThemes", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                var isConnected = false;
                var defaults = [];
                var themes = [];
                var themeTags = new Set();
                var tags = this.get("themeTagsSelf");
                if (tags) {
                    each$1(tags, function (tag) {
                        themeTags.add(tag);
                    });
                }
                this._walkParents(function (entity) {
                    if (entity === _this._root._rootContainer) {
                        isConnected = true;
                    }
                    if (entity._defaultThemes.length > 0) {
                        defaults.push(entity._defaultThemes);
                    }
                    var theme = entity.get("themes");
                    if (theme) {
                        themes.push(theme);
                    }
                    var tags = entity.get("themeTags");
                    if (tags) {
                        each$1(tags, function (tag) {
                            themeTags.add(tag);
                        });
                    }
                });
                themes = defaults.concat(themes);
                this._removeTemplates();
                if (isConnected) {
                    eachReverse(this.classNames, function (name) {
                        var allRules = [];
                        each$1(themes, function (themes) {
                            each$1(themes, function (theme) {
                                var rules = theme._lookupRules(name);
                                if (rules) {
                                    eachReverse(rules, function (rule) {
                                        var matches = rule.tags.every(function (tag) {
                                            return themeTags.has(tag);
                                        });
                                        if (matches) {
                                            var result = getFirstSortedIndex(allRules, function (x) {
                                                var order = compare(rule.tags.length, x.tags.length);
                                                if (order === 0) {
                                                    return compareArray(rule.tags, x.tags, compare);
                                                }
                                                else {
                                                    return order;
                                                }
                                            });
                                            allRules.splice(result.index, 0, rule);
                                        }
                                    });
                                }
                            });
                        });
                        each$1(allRules, function (rule) {
                            _this._templates.push(rule.template);
                            rule.template._setObjectTemplate(_this);
                        });
                    });
                }
                this._applyTemplates();
                if (isConnected) {
                    // This causes it to only run the setup function the first time that the themes are applied
                    this._runSetup = false;
                }
                return isConnected;
            }
        });
        Object.defineProperty(Entity.prototype, "_changed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () { }
        });
        Object.defineProperty(Entity.prototype, "_beforeChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (this.isDirty("id")) {
                    var id = this.get("id");
                    if (id) {
                        if (registry.entitiesById[id]) {
                            throw new Error("An entity with id \"" + id + "\" already exists.");
                        }
                        registry.entitiesById[id] = this;
                    }
                    var prevId = this._prevSettings.id;
                    if (prevId) {
                        delete registry.entitiesById[prevId];
                    }
                }
            }
        });
        Object.defineProperty(Entity.prototype, "_afterChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () { }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Entity.prototype, "addDisposer", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (disposer) {
                this._disposers.push(disposer);
                return disposer;
            }
        });
        Object.defineProperty(Entity.prototype, "_dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                _super.prototype._dispose.call(this);
                var template = this._template;
                if (template) {
                    template._removeObjectTemplate(this);
                }
                each$1(this._internalTemplates, function (template) {
                    template._removeObjectTemplate(_this);
                });
                this._removeTemplates();
                this._disposeTemplates();
                this.events.dispose();
                this._disposers.forEach(function (x) {
                    x.dispose();
                });
                each(this._disposerProperties, function (_, disposers) {
                    each$1(disposers, function (disposer) {
                        disposer.dispose();
                    });
                });
                var id = this.get("id");
                if (id) {
                    delete registry.entitiesById[id];
                }
            }
        });
        /**
         * Creates and returns a "disposable" timeout.
         *
         * @param   fn     Callback
         * @param   delay  Delay in milliseconds
         * @return         Timeout disposer
         */
        Object.defineProperty(Entity.prototype, "setTimeout", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (fn, delay) {
                var _this = this;
                var id = setTimeout(function () {
                    _this.removeDispose(disposer);
                    fn();
                }, delay);
                var disposer = new Disposer(function () {
                    clearTimeout(id);
                });
                this._disposers.push(disposer);
                return disposer;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Entity.prototype, "removeDispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (target) {
                if (!this.isDisposed()) {
                    var index = indexOf(this._disposers, target);
                    if (index > -1) {
                        this._disposers.splice(index, 1);
                    }
                }
                target.dispose();
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Entity.prototype, "hasTag", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (tag) {
                return indexOf(this.get("themeTags", []), tag) !== -1;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Entity.prototype, "addTag", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (tag) {
                if (!this.hasTag(tag)) {
                    var tags = this.get("themeTags", []);
                    tags.push(tag);
                    this.set("themeTags", tags);
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Entity.prototype, "removeTag", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (tag) {
                if (this.hasTag(tag)) {
                    var tags = this.get("themeTags", []);
                    remove(tags, tag);
                    this.set("themeTags", tags);
                }
            }
        });
        Object.defineProperty(Entity.prototype, "_t", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (text, locale) {
                var _a;
                var rest = [];
                for (var _i = 2; _i < arguments.length; _i++) {
                    rest[_i - 2] = arguments[_i];
                }
                return (_a = this._root.language).translate.apply(_a, __spreadArray([text, locale], __read(rest), false));
            }
        });
        Object.defineProperty(Entity.prototype, "root", {
            /**
             * An instance of [[Root]] object.
             *
             * @readonly
             * @since 5.0.6
             * @return Root object
             */
            get: function () {
                return this._root;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Entity, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Entity"
        });
        Object.defineProperty(Entity, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ["Entity"]
        });
        return Entity;
    }(Settings));

    var TemplateState = /** @class */ (function () {
        function TemplateState(name, template, settings) {
            Object.defineProperty(this, "_settings", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_name", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_template", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            this._name = name;
            this._template = template;
            this._settings = settings;
        }
        Object.defineProperty(TemplateState.prototype, "get", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, fallback) {
                var value = this._settings[key];
                if (value !== undefined) {
                    return value;
                }
                else {
                    return fallback;
                }
            }
        });
        Object.defineProperty(TemplateState.prototype, "set", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, value) {
                this._settings[key] = value;
                // TODO maybe only do this if the value changed ?
                this._template._stateChanged(this._name);
            }
        });
        Object.defineProperty(TemplateState.prototype, "remove", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key) {
                delete this._settings[key];
                // TODO maybe only do this if the value changed ?
                this._template._stateChanged(this._name);
            }
        });
        Object.defineProperty(TemplateState.prototype, "setAll", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (settings) {
                var _this = this;
                keys(settings).forEach(function (key) {
                    _this._settings[key] = settings[key];
                });
                this._template._stateChanged(this._name);
            }
        });
        Object.defineProperty(TemplateState.prototype, "_apply", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (other, seen) {
                each(this._settings, function (key, value) {
                    if (!seen[key] && !other._userSettings[key]) {
                        seen[key] = true;
                        other.setRaw(key, value);
                    }
                });
            }
        });
        return TemplateState;
    }());
    var TemplateStates = /** @class */ (function () {
        function TemplateStates(template) {
            Object.defineProperty(this, "_template", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_states", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            this._template = template;
        }
        Object.defineProperty(TemplateStates.prototype, "lookup", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (name) {
                return this._states[name];
            }
        });
        Object.defineProperty(TemplateStates.prototype, "create", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (name, settings) {
                var state = this._states[name];
                if (state) {
                    state.setAll(settings);
                    return state;
                }
                else {
                    var state_1 = new TemplateState(name, this._template, settings);
                    this._states[name] = state_1;
                    this._template._stateChanged(name);
                    return state_1;
                }
            }
        });
        Object.defineProperty(TemplateStates.prototype, "remove", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (name) {
                delete this._states[name];
                this._template._stateChanged(name);
            }
        });
        Object.defineProperty(TemplateStates.prototype, "_apply", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (entity, state) {
                each(this._states, function (key, value) {
                    var seen = state.states[key];
                    if (seen == null) {
                        seen = state.states[key] = {};
                    }
                    var other = entity.states.create(key, {});
                    value._apply(other, seen);
                });
            }
        });
        return TemplateStates;
    }());
    var TemplateAdapters = /** @class */ (function () {
        function TemplateAdapters() {
            Object.defineProperty(this, "_callbacks", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
        }
        Object.defineProperty(TemplateAdapters.prototype, "add", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, callback) {
                var _this = this;
                var callbacks = this._callbacks[key];
                if (callbacks === undefined) {
                    callbacks = this._callbacks[key] = [];
                }
                callbacks.push(callback);
                return new Disposer(function () {
                    removeFirst(callbacks, callback);
                    if (callbacks.length === 0) {
                        delete _this._callbacks[key];
                    }
                });
            }
        });
        Object.defineProperty(TemplateAdapters.prototype, "remove", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key) {
                var callbacks = this._callbacks[key];
                if (callbacks !== undefined) {
                    delete this._callbacks[key];
                }
            }
        });
        Object.defineProperty(TemplateAdapters.prototype, "_apply", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (entity) {
                var disposers = [];
                each(this._callbacks, function (key, callbacks) {
                    each$1(callbacks, function (callback) {
                        disposers.push(entity.adapters.add(key, callback));
                    });
                });
                return new MultiDisposer(disposers);
            }
        });
        return TemplateAdapters;
    }());
    // TODO maybe extend from Properties ?
    var Template = /** @class */ (function () {
        function Template(settings, isReal) {
            Object.defineProperty(this, "_settings", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_privateSettings", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            // TODO code duplication with Properties
            Object.defineProperty(this, "_settingEvents", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(this, "_privateSettingEvents", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(this, "_entities", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            Object.defineProperty(this, "states", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new TemplateStates(this)
            });
            Object.defineProperty(this, "adapters", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new TemplateAdapters()
            });
            Object.defineProperty(this, "events", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new EventDispatcher()
            });
            Object.defineProperty(this, "setup", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            if (!isReal) {
                throw new Error("You cannot use `new Class()`, instead use `Class.new()`");
            }
            this._settings = settings;
        }
        /**
         * Use this method to create an instance of this class.
         *
         * @see {@link https://www.amcharts.com/docs/v5/getting-started/#New_element_syntax} for more info
         * @param   root      Root element
         * @param   settings  Settings
         * @param   template  Template
         * @return            Instantiated object
         */
        Object.defineProperty(Template, "new", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (settings) {
                return new Template(settings, true);
            }
        });
        Object.defineProperty(Template.prototype, "get", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, fallback) {
                var value = this._settings[key];
                if (value !== undefined) {
                    return value;
                }
                else {
                    return fallback;
                }
            }
        });
        Object.defineProperty(Template.prototype, "setRaw", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, value) {
                this._settings[key] = value;
            }
        });
        Object.defineProperty(Template.prototype, "set", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, value) {
                var _this = this;
                if (this._settings[key] !== value) {
                    this.setRaw(key, value);
                    this._entities.forEach(function (entity) {
                        entity._setTemplateProperty(_this, key, value);
                    });
                }
            }
        });
        Object.defineProperty(Template.prototype, "remove", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key) {
                if (key in this._settings) {
                    delete this._settings[key];
                    this._entities.forEach(function (entity) {
                        entity._removeTemplateProperty(key);
                    });
                }
            }
        });
        Object.defineProperty(Template.prototype, "removeAll", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                each(this._settings, function (key, _value) {
                    _this.remove(key);
                });
            }
        });
        Object.defineProperty(Template.prototype, "getPrivate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, fallback) {
                var value = this._privateSettings[key];
                if (value !== undefined) {
                    return value;
                }
                else {
                    return fallback;
                }
            }
        });
        Object.defineProperty(Template.prototype, "setPrivateRaw", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, value) {
                this._privateSettings[key] = value;
                return value;
            }
        });
        Object.defineProperty(Template.prototype, "setPrivate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, value) {
                var _this = this;
                if (this._privateSettings[key] !== value) {
                    this.setPrivateRaw(key, value);
                    this._entities.forEach(function (entity) {
                        entity._setTemplatePrivateProperty(_this, key, value);
                    });
                }
                return value;
            }
        });
        Object.defineProperty(Template.prototype, "removePrivate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key) {
                if (key in this._privateSettings) {
                    delete this._privateSettings[key];
                    this._entities.forEach(function (entity) {
                        entity._removeTemplatePrivateProperty(key);
                    });
                }
            }
        });
        Object.defineProperty(Template.prototype, "setAll", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value) {
                var _this = this;
                each(value, function (key, value) {
                    _this.set(key, value);
                });
            }
        });
        // TODO code duplication with Properties
        Object.defineProperty(Template.prototype, "on", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, callback) {
                var _this = this;
                var events = this._settingEvents[key];
                if (events === undefined) {
                    events = this._settingEvents[key] = [];
                }
                events.push(callback);
                return new Disposer(function () {
                    removeFirst(events, callback);
                    if (events.length === 0) {
                        delete _this._settingEvents[key];
                    }
                });
            }
        });
        // TODO code duplication with Properties
        Object.defineProperty(Template.prototype, "onPrivate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, callback) {
                var _this = this;
                var events = this._privateSettingEvents[key];
                if (events === undefined) {
                    events = this._privateSettingEvents[key] = [];
                }
                events.push(callback);
                return new Disposer(function () {
                    removeFirst(events, callback);
                    if (events.length === 0) {
                        delete _this._privateSettingEvents[key];
                    }
                });
            }
        });
        Object.defineProperty(Template.prototype, "_apply", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (entity, state) {
                var disposers = [];
                each(this._settingEvents, function (key, events) {
                    each$1(events, function (event) {
                        disposers.push(entity.on(key, event));
                    });
                });
                each(this._privateSettingEvents, function (key, events) {
                    each$1(events, function (event) {
                        disposers.push(entity.onPrivate(key, event));
                    });
                });
                this.states._apply(entity, state);
                disposers.push(this.adapters._apply(entity));
                disposers.push(entity.events.copyFrom(this.events));
                return new MultiDisposer(disposers);
            }
        });
        Object.defineProperty(Template.prototype, "_setObjectTemplate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (entity) {
                this._entities.push(entity);
            }
        });
        Object.defineProperty(Template.prototype, "_removeObjectTemplate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (entity) {
                remove(this._entities, entity);
            }
        });
        Object.defineProperty(Template.prototype, "_stateChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (name) {
                this._entities.forEach(function (entity) {
                    entity._applyStateByKey(name);
                });
            }
        });
        return Template;
    }());

    //import { populateString } from "../util/PopulateString";
    /**
     * An [[EventDispatcher]] for [[Sprite]].
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/events/} for more info
     */
    var SpriteEventDispatcher = /** @class */ (function (_super) {
        __extends(SpriteEventDispatcher, _super);
        function SpriteEventDispatcher(sprite) {
            var _this = _super.call(this) || this;
            Object.defineProperty(_this, "_sprite", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_rendererDisposers", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(_this, "_dispatchParents", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: true
            });
            _this._sprite = sprite;
            return _this;
        }
        Object.defineProperty(SpriteEventDispatcher.prototype, "_makePointerEvent", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, event) {
                return {
                    type: key,
                    originalEvent: event.event,
                    point: event.point,
                    simulated: event.simulated,
                    native: event.native,
                    target: this._sprite
                };
            }
        });
        Object.defineProperty(SpriteEventDispatcher.prototype, "_onRenderer", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, dispatch) {
                var _this = this;
                // TODO: is this OK? it'd be good not to require to set this on each individual element
                this._sprite.set("interactive", true);
                this._sprite._display.interactive = true;
                var events = this._rendererDisposers[key];
                if (events === undefined) {
                    var disposer_1 = this._sprite._display.on(key, function (e) {
                        dispatch.call(_this, e);
                    });
                    events = this._rendererDisposers[key] = new CounterDisposer(function () {
                        delete _this._rendererDisposers[key];
                        disposer_1.dispose();
                    });
                }
                return events.increment();
            }
        });
        Object.defineProperty(SpriteEventDispatcher.prototype, "_on", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (once, type, callback, context, shouldClone, dispatch) {
                var info = _super.prototype._on.call(this, once, type, callback, context, shouldClone, dispatch);
                var rendererEvent = SpriteEventDispatcher.RENDERER_EVENTS[type];
                if (rendererEvent !== undefined) {
                    info.disposer = new MultiDisposer([
                        info.disposer,
                        this._onRenderer(type, rendererEvent),
                    ]);
                }
                return info;
            }
        });
        /**
         * Will stop any bubbling up of the event to element's parents.
         *
         * Should be called in an event handler, e.g.:
         *
         * ```TypeScript
         * element.events.on("pointerdown", function(ev) {
         *   // Do something here and prevent from "pointerdown" bubbling up
         *   // ...
         *   ev.target.events.stopParentDispatch();
         * });
         * ```
         * ```JavaScript
         * element.events.on("pointerdown", function(ev) {
         *   // Do something here and prevent from "pointerdown" bubbling up
         *   // ...
         *   ev.target.events.stopParentDispatch();
         * });
         * ```
         */
        Object.defineProperty(SpriteEventDispatcher.prototype, "stopParentDispatch", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._dispatchParents = false;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(SpriteEventDispatcher.prototype, "dispatchParents", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (type, event) {
                var old = this._dispatchParents;
                this._dispatchParents = true;
                try {
                    this.dispatch(type, event);
                    if (this._dispatchParents && this._sprite.parent) {
                        this._sprite.parent.events.dispatchParents(type, event);
                    }
                }
                finally {
                    this._dispatchParents = old;
                }
            }
        });
        Object.defineProperty(SpriteEventDispatcher, "RENDERER_EVENTS", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {
                "click": function (event) {
                    if (this.isEnabled("click") && !this._sprite.isDragging() && this._sprite._hasDown() && !this._sprite._hasMoved(this._makePointerEvent("click", event))) {
                        this.dispatch("click", this._makePointerEvent("click", event));
                    }
                },
                "rightclick": function (event) {
                    if (this.isEnabled("rightclick")) {
                        this.dispatch("rightclick", this._makePointerEvent("rightclick", event));
                    }
                },
                "middleclick": function (event) {
                    if (this.isEnabled("middleclick")) {
                        this.dispatch("middleclick", this._makePointerEvent("middleclick", event));
                    }
                },
                "dblclick": function (event) {
                    this.dispatchParents("dblclick", this._makePointerEvent("dblclick", event));
                },
                "pointerover": function (event) {
                    if (this.isEnabled("pointerover")) {
                        this.dispatch("pointerover", this._makePointerEvent("pointerover", event));
                    }
                },
                "pointerout": function (event) {
                    if (this.isEnabled("pointerout")) {
                        this.dispatch("pointerout", this._makePointerEvent("pointerout", event));
                    }
                },
                "pointerdown": function (event) {
                    this.dispatchParents("pointerdown", this._makePointerEvent("pointerdown", event));
                },
                "pointerup": function (event) {
                    if (this.isEnabled("pointerup")) {
                        this.dispatch("pointerup", this._makePointerEvent("pointerup", event));
                    }
                },
                "globalpointerup": function (event) {
                    if (this.isEnabled("globalpointerup")) {
                        this.dispatch("globalpointerup", this._makePointerEvent("globalpointerup", event));
                    }
                },
                "globalpointermove": function (event) {
                    if (this.isEnabled("globalpointermove")) {
                        this.dispatch("globalpointermove", this._makePointerEvent("globalpointermove", event));
                    }
                },
                "wheel": function (event) {
                    this.dispatchParents("wheel", {
                        type: "wheel",
                        target: this._sprite,
                        originalEvent: event.event,
                        point: event.point,
                    });
                },
            }
        });
        return SpriteEventDispatcher;
    }(EventDispatcher));
    /**
     * A base class for all visual elements.
     *
     * @important
     */
    var Sprite = /** @class */ (function (_super) {
        __extends(Sprite, _super);
        function Sprite() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_adjustedLocalBounds", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: { left: 0, right: 0, top: 0, bottom: 0 }
            });
            Object.defineProperty(_this, "_localBounds", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: { left: 0, right: 0, top: 0, bottom: 0 }
            });
            Object.defineProperty(_this, "_parent", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_dataItem", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_templateField", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_sizeDirty", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            // Will be true only when dragging
            Object.defineProperty(_this, "_isDragging", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            // The event when the dragging starts
            Object.defineProperty(_this, "_dragEvent", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            // The position when dragging starts
            Object.defineProperty(_this, "_dragPoint", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_isHidden", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_isShowing", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_isHiding", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_isDown", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_downPoint", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_downPoints", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(_this, "_toggleDp", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_dragDp", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_tooltipDp", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_hoverDp", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_focusDp", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_tooltipMoveDp", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_tooltipPointerDp", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_statesHandled", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            return _this;
        }
        Object.defineProperty(Sprite.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.setPrivateRaw("visible", true);
                _super.prototype._afterNew.call(this);
            }
        });
        Object.defineProperty(Sprite.prototype, "_markDirtyKey", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key) {
                _super.prototype._markDirtyKey.call(this, key);
                if (key == "x" || key == "y" || key == "dx" || key == "dy") {
                    this.markDirtyBounds();
                    this._addPercentagePositionChildren();
                    this.markDirtyPosition();
                }
            }
        });
        Object.defineProperty(Sprite.prototype, "_markDirtyPrivateKey", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key) {
                _super.prototype._markDirtyPrivateKey.call(this, key);
                if (key == "x" || key == "y") {
                    this.markDirtyPosition();
                }
            }
        });
        Object.defineProperty(Sprite.prototype, "_removeTemplateField", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (this._templateField) {
                    this._templateField._removeObjectTemplate(this);
                }
            }
        });
        Object.defineProperty(Sprite.prototype, "_createEvents", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return new SpriteEventDispatcher(this);
            }
        });
        Object.defineProperty(Sprite.prototype, "_processTemplateField", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var template;
                var field = this.get("templateField");
                if (field) {
                    var dataItem = this.dataItem;
                    if (dataItem) {
                        var context = dataItem.dataContext;
                        if (context) {
                            template = context[field];
                            if (!(template instanceof Template) && template) {
                                template = Template.new(template);
                            }
                        }
                    }
                }
                if (this._templateField !== template) {
                    this._removeTemplateField();
                    this._templateField = template;
                    if (template) {
                        template._setObjectTemplate(this);
                    }
                    this._applyTemplates();
                }
            }
        });
        // TODO change this to run before the element is added to the parent, so that way
        //      it doesn't need to apply the themes twice
        Object.defineProperty(Sprite.prototype, "_setDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem) {
                var oldDataItem = this._dataItem;
                this._dataItem = dataItem;
                this._processTemplateField();
                var eventType = "dataitemchanged";
                if (this.events.isEnabled(eventType)) {
                    this.events.dispatch(eventType, {
                        type: eventType,
                        target: this,
                        oldDataItem: oldDataItem,
                        newDataItem: dataItem
                    });
                }
            }
        });
        Object.defineProperty(Sprite.prototype, "dataItem", {
            /**
             * @return DataItem
             */
            get: function () {
                if (this._dataItem) {
                    return this._dataItem;
                }
                else {
                    var parent_1 = this._parent;
                    while (parent_1) {
                        if (parent_1._dataItem) {
                            return parent_1._dataItem;
                        }
                        else {
                            parent_1 = parent_1._parent;
                        }
                    }
                }
            },
            /**
             * A [[DataItem]] used for this element.
             *
             * NOTE: data item is being assigned automatically in most cases where it
             * matters. Use this accessor to set data item only if you know what you're
             * doing.
             *
             * @param  value  Data item
             */
            set: function (value) {
                this._setDataItem(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Sprite.prototype, "_addPercentageSizeChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var parent = this.parent;
                if (parent) {
                    if (this.get("width") instanceof Percent || this.get("height") instanceof Percent) {
                        pushOne(parent._percentageSizeChildren, this);
                    }
                    else {
                        removeFirst(parent._percentageSizeChildren, this);
                    }
                }
            }
        });
        Object.defineProperty(Sprite.prototype, "_addPercentagePositionChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var parent = this.parent;
                if (parent) {
                    if (this.get("x") instanceof Percent || this.get("y") instanceof Percent) {
                        pushOne(parent._percentagePositionChildren, this);
                    }
                    else {
                        removeFirst(parent._percentagePositionChildren, this);
                    }
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Sprite.prototype, "markDirtyPosition", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._root._addDirtyPosition(this);
            }
        });
        Object.defineProperty(Sprite.prototype, "updatePivotPoint", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var bounds = this._localBounds;
                if (bounds) {
                    var centerX = this.get("centerX");
                    if (centerX != null) {
                        this._display.pivot.x = bounds.left + relativeToValue(centerX, bounds.right - bounds.left);
                    }
                    var centerY = this.get("centerY");
                    if (centerY != null) {
                        this._display.pivot.y = bounds.top + relativeToValue(centerY, bounds.bottom - bounds.top);
                    }
                }
            }
        });
        Object.defineProperty(Sprite.prototype, "_beforeChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                _super.prototype._beforeChanged.call(this);
                // handling states in beforeChanged, otherwise states is not applied without animated theme
                this._handleStates();
                if (this.isDirty("tooltip")) {
                    var previous = this._prevSettings.tooltip;
                    if (previous) {
                        previous.dispose();
                    }
                }
                if (this.isDirty("layer")) {
                    this._display.setLayer(this.get("layer"));
                    this.markDirtyLayer();
                }
                if (this.isDirty("tooltipPosition")) {
                    var tooltipMoveDp = this._tooltipMoveDp;
                    if (tooltipMoveDp) {
                        tooltipMoveDp.dispose();
                        this._tooltipMoveDp = undefined;
                    }
                    var tooltipPointerDp = this._tooltipPointerDp;
                    if (tooltipPointerDp) {
                        tooltipPointerDp.dispose();
                        this._tooltipPointerDp = undefined;
                    }
                    if (this.get("tooltipPosition") == "pointer") {
                        this._tooltipPointerDp = new MultiDisposer([
                            this.events.on("pointerover", function () {
                                _this._tooltipMoveDp = _this.events.on("globalpointermove", function (e) {
                                    _this.showTooltip(e.point);
                                });
                            }),
                            this.events.on("pointerout", function () {
                                var tooltipMoveDp = _this._tooltipMoveDp;
                                if (tooltipMoveDp) {
                                    tooltipMoveDp.dispose();
                                    _this._tooltipMoveDp = undefined;
                                }
                            })
                        ]);
                    }
                }
            }
        });
        Object.defineProperty(Sprite.prototype, "_handleStates", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (!this._statesHandled) {
                    if (this.isDirty("active")) {
                        if (this.get("active")) {
                            this.states.applyAnimate("active");
                            this.set("ariaChecked", true);
                        }
                        else {
                            if (!this.isHidden()) {
                                this.states.applyAnimate("default");
                            }
                            this.set("ariaChecked", false);
                        }
                        this.markDirtyAccessibility();
                    }
                    if (this.isDirty("disabled")) {
                        if (this.get("disabled")) {
                            this.states.applyAnimate("disabled");
                            this.set("ariaChecked", false);
                        }
                        else {
                            if (!this.isHidden()) {
                                this.states.applyAnimate("default");
                            }
                            this.set("ariaChecked", true);
                        }
                        this.markDirtyAccessibility();
                    }
                    this._statesHandled = true;
                }
            }
        });
        Object.defineProperty(Sprite.prototype, "_changed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                _super.prototype._changed.call(this);
                var display = this._display;
                var events = this.events;
                if (this.isDirty("draggable")) {
                    var draggable = this.get("draggable");
                    if (draggable) {
                        this.set("interactive", true);
                        this._dragDp = new MultiDisposer([
                            events.on("pointerdown", function (ev) {
                                _this.dragStart(ev);
                            }),
                            events.on("globalpointermove", function (ev) {
                                _this.dragMove(ev);
                            }),
                            events.on("globalpointerup", function (ev) {
                                _this.dragStop(ev);
                            })
                        ]);
                    }
                    else {
                        if (this._dragDp) {
                            this._dragDp.dispose();
                            this._dragDp = undefined;
                        }
                    }
                    display.cancelTouch = draggable ? true : false;
                }
                if (this.isDirty("tooltipText")) {
                    var tooltipText = this.get("tooltipText");
                    if (tooltipText) {
                        this._tooltipDp = new MultiDisposer([
                            events.on("pointerover", function () {
                                _this.showTooltip();
                            }),
                            events.on("pointerout", function () {
                                if (_this.get("showTooltipOn") != "always") {
                                    _this.hideTooltip();
                                }
                            })
                        ]);
                    }
                    else {
                        if (this._tooltipDp) {
                            this._tooltipDp.dispose();
                            this._tooltipDp = undefined;
                        }
                    }
                }
                if (this.isDirty("toggleKey")) {
                    var toggleKey_1 = this.get("toggleKey");
                    if (toggleKey_1 && toggleKey_1 != "none") {
                        this._toggleDp = events.on("click", function () {
                            if (!_this._isDragging) {
                                _this.set(toggleKey_1, !_this.get(toggleKey_1));
                            }
                        });
                    }
                    else {
                        if (this._toggleDp) {
                            this._toggleDp.dispose();
                            this._toggleDp = undefined;
                        }
                    }
                }
                if (this.isDirty("opacity")) {
                    display.alpha = Math.max(0, this.get("opacity", 1));
                }
                if (this.isDirty("rotation")) {
                    this.markDirtyBounds();
                    display.angle = this.get("rotation", 0);
                }
                if (this.isDirty("scale")) {
                    this.markDirtyBounds();
                    display.scale = this.get("scale", 0);
                }
                if (this.isDirty("centerX") || this.isDirty("centerY")) {
                    this.markDirtyBounds();
                    this.updatePivotPoint();
                }
                if (this.isDirty("visible") || this.isPrivateDirty("visible") || this.isDirty("forceHidden")) {
                    if (!this.get("visible") || !this.getPrivate("visible") || this.get("forceHidden")) {
                        display.visible = false;
                        this.hideTooltip();
                    }
                    else {
                        display.visible = true;
                    }
                    this.markDirtyBounds();
                    if (this.get("focusable")) {
                        this.markDirtyAccessibility();
                    }
                }
                if (this.isDirty("width") || this.isDirty("height")) {
                    this.markDirtyBounds();
                    this._addPercentageSizeChildren();
                    var parent_2 = this.parent;
                    if (parent_2) {
                        if ((this.isDirty("width") && this.get("width") instanceof Percent) || (this.isDirty("height") && this.get("height") instanceof Percent)) {
                            parent_2.markDirty();
                            parent_2._prevWidth = 0;
                        }
                    }
                    this._sizeDirty = true;
                }
                if (this.isDirty("maxWidth") || this.isDirty("maxHeight") || this.isPrivateDirty("width") || this.isPrivateDirty("height") || this.isDirty("minWidth") || this.isDirty("minHeight") || this.isPrivateDirty("maxWidth") || this.isPrivateDirty("maxHeight")) {
                    this.markDirtyBounds();
                    this._sizeDirty = true;
                }
                if (this._sizeDirty) {
                    this._updateSize();
                }
                if (this.isDirty("wheelable")) {
                    var wheelable = this.get("wheelable");
                    if (wheelable) {
                        this.set("interactive", true);
                    }
                    display.wheelable = wheelable ? true : false;
                }
                // Accessibility
                if (this.isDirty("tabindexOrder") || this.isDirty("focusableGroup")) {
                    if (this.get("focusable")) {
                        this._root._registerTabindexOrder(this);
                    }
                    else {
                        this._root._unregisterTabindexOrder(this);
                    }
                }
                if (this.isDirty("filter")) {
                    //this.markDirtyBounds();
                    display.filter = this.get("filter");
                }
                if (this.isDirty("cursorOverStyle")) {
                    display.cursorOverStyle = this.get("cursorOverStyle");
                }
                if (this.isDirty("hoverOnFocus")) {
                    if (this.get("hoverOnFocus")) {
                        this._focusDp = new MultiDisposer([
                            events.on("focus", function () {
                                // TODO: proper hover, not just tooltip
                                _this.showTooltip();
                            }),
                            events.on("blur", function () {
                                // TODO: proper hover, not just tooltip
                                _this.hideTooltip();
                            })
                        ]);
                    }
                    else {
                        if (this._focusDp) {
                            this._focusDp.dispose();
                            this._focusDp = undefined;
                        }
                    }
                }
                if (this.isDirty("focusable")) {
                    if (this.get("focusable")) {
                        this._root._registerTabindexOrder(this);
                    }
                    else {
                        this._root._unregisterTabindexOrder(this);
                    }
                    this.markDirtyAccessibility();
                }
                if (this.isDirty("role") || this.isDirty("ariaLive") || this.isDirty("ariaChecked") || this.isDirty("ariaHidden") || this.isDirty("ariaOrientation") || this.isDirty("ariaValueNow") || this.isDirty("ariaValueMin") || this.isDirty("ariaValueMax") || this.isDirty("ariaValueText") || this.isDirty("ariaLabel") || this.isDirty("ariaControls")) {
                    // display.accessibility.ariaLabel = populateString(this, this.get("ariaLabel", ""));
                    // @todo make sure ariaLabel gets populated in Root
                    this.markDirtyAccessibility();
                }
                if (this.isDirty("exportable")) {
                    display.exportable = this.get("exportable");
                }
                if (this.isDirty("interactive")) {
                    var events_1 = this.events;
                    if (this.get("interactive")) {
                        this._hoverDp = new MultiDisposer([
                            events_1.on("click", function (ev) {
                                if (isTouchEvent(ev.originalEvent)) {
                                    if (!_this.getPrivate("touchHovering")) {
                                        _this.setTimeout(function () {
                                            _this._handleOver();
                                            if (_this.get("tooltipText")) {
                                                _this.showTooltip();
                                            }
                                            _this.setPrivateRaw("touchHovering", true);
                                            _this.events.dispatch("pointerover", {
                                                type: "pointerover",
                                                target: ev.target,
                                                originalEvent: ev.originalEvent,
                                                point: ev.point,
                                                simulated: ev.simulated
                                            });
                                        }, 10);
                                    }
                                }
                            }),
                            events_1.on("globalpointerup", function (ev) {
                                if (isTouchEvent(ev.originalEvent)) {
                                    if (_this.getPrivate("touchHovering")) {
                                        _this._handleOut();
                                        if (_this.get("tooltipText")) {
                                            _this.hideTooltip();
                                        }
                                    }
                                    _this.setPrivateRaw("touchHovering", false);
                                    _this.events.dispatch("pointerout", {
                                        type: "pointerout",
                                        target: ev.target,
                                        originalEvent: ev.originalEvent,
                                        point: ev.point,
                                        simulated: ev.simulated
                                    });
                                }
                                if (_this._isDown) {
                                    _this._handleUp(ev);
                                }
                                //this._isDown = false;
                            }),
                            events_1.on("pointerover", function () {
                                _this._handleOver();
                            }),
                            events_1.on("pointerout", function () {
                                _this._handleOut();
                            }),
                            events_1.on("pointerdown", function (e) {
                                _this._handleDown(e);
                            })
                        ]);
                    }
                    else {
                        this._display.interactive = false;
                        if (this._hoverDp) {
                            this._hoverDp.dispose();
                            this._hoverDp = undefined;
                        }
                    }
                }
                if (this.isDirty("forceInactive")) {
                    this._display.inactive = this.get("forceInactive", false);
                }
                if (this.get("showTooltipOn") == "always" && this._display.visible) {
                    this.showTooltip();
                }
            }
        });
        /**
         * @ignore
         * @todo should this be user-accessible?
         */
        Object.defineProperty(Sprite.prototype, "dragStart", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (e) {
                this._dragEvent = e;
                this.events.stopParentDispatch();
            }
        });
        /**
         * @ignore
         * @todo should this be user-accessible?
         */
        Object.defineProperty(Sprite.prototype, "dragStop", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (e) {
                this._dragEvent = undefined;
                this._dragPoint = undefined;
                this.events.stopParentDispatch();
                if (this._isDragging) {
                    this._isDragging = false;
                    var type = "dragstop";
                    if (this.events.isEnabled(type)) {
                        this.events.dispatch(type, {
                            type: type,
                            target: this,
                            originalEvent: e.originalEvent,
                            point: e.point,
                            simulated: e.simulated,
                        });
                    }
                }
            }
        });
        Object.defineProperty(Sprite.prototype, "_handleOver", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (!this.isHidden()) {
                    if (this.get("active") && this.states.lookup("hoverActive")) {
                        this.states.applyAnimate("hoverActive");
                    }
                    else if (this.get("disabled") && this.states.lookup("hoverDisabled")) {
                        this.states.applyAnimate("hoverDisabled");
                    }
                    else {
                        this.states.applyAnimate("hover");
                    }
                }
            }
        });
        Object.defineProperty(Sprite.prototype, "_handleOut", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (!this.isHidden()) {
                    if (this.get("active") && this.states.lookup("active")) {
                        this.states.applyAnimate("active");
                    }
                    else if (this.get("disabled") && this.states.lookup("disabled")) {
                        this.states.applyAnimate("disabled");
                    }
                    else {
                        if (this.states.lookup("hover") || this.states.lookup("hoverActive")) {
                            this.states.applyAnimate("default");
                        }
                    }
                }
            }
        });
        Object.defineProperty(Sprite.prototype, "_handleUp", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (e) {
                if (!this.isHidden()) {
                    if (this.get("active") && this.states.lookup("active")) {
                        this.states.applyAnimate("active");
                    }
                    else if (this.get("disabled") && this.states.lookup("disabled")) {
                        this.states.applyAnimate("disabled");
                    }
                    else if (this.states.lookup("down")) {
                        if (this.isHover()) {
                            this.states.applyAnimate("hover");
                        }
                        else {
                            this.states.applyAnimate("default");
                        }
                    }
                    // @todo remove this once migrated to _downPoints
                    this._downPoint = undefined;
                    var pointerId = getPointerId(e.originalEvent);
                    delete this._downPoints[pointerId];
                    if (keys(this._downPoints).length == 0) {
                        this._isDown = false;
                    }
                }
            }
        });
        Object.defineProperty(Sprite.prototype, "_hasMoved", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (e) {
                // @todo remove this once migrated to _downPoints
                // if (this._downPoint) {
                // 	const x = Math.abs(this._downPoint.x - e.point.x);
                // 	const y = Math.abs(this._downPoint.y - e.point.y);
                // 	return (x > 5) || (y > 5);
                // }
                var pointerId = getPointerId(e.originalEvent);
                var downPoint = this._downPoints[pointerId];
                if (downPoint) {
                    var x = Math.abs(downPoint.x - e.point.x);
                    var y = Math.abs(downPoint.y - e.point.y);
                    return (x > 5) || (y > 5);
                }
                return false;
            }
        });
        Object.defineProperty(Sprite.prototype, "_hasDown", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return keys(this._downPoints).length > 0;
            }
        });
        Object.defineProperty(Sprite.prototype, "_handleDown", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (e) {
                var parent = this.parent;
                if (parent && !this.get("draggable")) {
                    parent._handleDown(e);
                }
                if (this.get("interactive") && !this.isHidden()) {
                    if (this.states.lookup("down")) {
                        this.states.applyAnimate("down");
                    }
                    this._downPoint = {
                        x: e.point.x,
                        y: e.point.y
                    };
                    // @todo remove this once migrated to _downPoints
                    this._isDown = true;
                    var pointerId = getPointerId(e.originalEvent);
                    this._downPoints[pointerId] = {
                        x: e.point.x,
                        y: e.point.y
                    };
                }
            }
        });
        /**
         * @ignore
         * @todo should this be user-accessible?
         */
        Object.defineProperty(Sprite.prototype, "dragMove", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (e) {
                var dragEvent = this._dragEvent;
                if (dragEvent) {
                    var angle = 0;
                    var parent_3 = this.parent;
                    while (parent_3 != null) {
                        angle += parent_3.get("rotation", 0);
                        parent_3 = parent_3.parent;
                    }
                    var x = e.point.x - dragEvent.point.x;
                    var y = e.point.y - dragEvent.point.y;
                    var events = this.events;
                    if (dragEvent.simulated && !this._isDragging) {
                        this._isDragging = true;
                        this._dragEvent = e;
                        this._dragPoint = {
                            x: this.x(),
                            y: this.y()
                        };
                        var type = "dragstart";
                        if (events.isEnabled(type)) {
                            events.dispatch(type, {
                                type: type,
                                target: this,
                                originalEvent: e.originalEvent,
                                point: e.point,
                                simulated: e.simulated,
                            });
                        }
                    }
                    if (this._isDragging) {
                        var dragPoint = this._dragPoint;
                        this.set("x", dragPoint.x + x * cos$1(angle) + y * sin$1(angle));
                        this.set("y", dragPoint.y + y * cos$1(angle) - x * sin$1(angle));
                        var type = "dragged";
                        if (events.isEnabled(type)) {
                            events.dispatch(type, {
                                type: type,
                                target: this,
                                originalEvent: e.originalEvent,
                                point: e.point,
                                simulated: e.simulated,
                            });
                        }
                    }
                    else {
                        if (Math.hypot(x, y) > 5) {
                            this._isDragging = true;
                            this._dragEvent = e;
                            this._dragPoint = {
                                x: this.x(),
                                y: this.y()
                            };
                            var type = "dragstart";
                            if (events.isEnabled(type)) {
                                events.dispatch(type, {
                                    type: type,
                                    target: this,
                                    originalEvent: e.originalEvent,
                                    point: e.point,
                                    simulated: e.simulated
                                });
                            }
                        }
                    }
                }
            }
        });
        Object.defineProperty(Sprite.prototype, "_updateSize", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
            }
        });
        Object.defineProperty(Sprite.prototype, "_getBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._localBounds = this._display.getLocalBounds();
            }
        });
        /**
         * Returns depth (how deep in the hierachy of the content tree) of this
         * element.
         *
         * @return Depth
         */
        Object.defineProperty(Sprite.prototype, "depth", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var self = this.parent;
                var depth = 0;
                while (true) {
                    if (self) {
                        ++depth;
                        self = self.parent;
                    }
                    else {
                        return depth;
                    }
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Sprite.prototype, "markDirtySize", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._sizeDirty = true;
                this.markDirty();
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Sprite.prototype, "markDirtyBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var display = this._display;
                if (this.get("isMeasured")) {
                    this._root._addDirtyBounds(this);
                    display.isMeasured = true;
                    display.invalidateBounds();
                    var parent_4 = this.parent;
                    if (parent_4 && this.get("position") != "absolute") {
                        if (parent_4.get("width") == null || parent_4.get("height") == null || parent_4.get("layout")) {
                            parent_4.markDirtyBounds();
                        }
                    }
                    if (this.get("focusable") && this.isFocus()) {
                        this.markDirtyAccessibility();
                    }
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Sprite.prototype, "markDirtyAccessibility", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                //if (this._root.focused(this)) {
                this._root._invalidateAccessibility(this);
                //}
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Sprite.prototype, "markDirtyLayer", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                //this._display.markDirtyLayer(this.isDirty("opacity") || this.isDirty("visible")); https://codepen.io/team/amcharts/pen/gOWZPmP <- problems
                this._display.markDirtyLayer(true);
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Sprite.prototype, "markDirty", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype.markDirty.call(this);
                this.markDirtyLayer();
            }
        });
        Object.defineProperty(Sprite.prototype, "_updateBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var oldBounds = this._adjustedLocalBounds;
                var newBounds;
                // if display.visible == false, it still returns bounds
                if (!this.get("visible") || !this.getPrivate("visible") || this.get("forceHidden")) {
                    newBounds = {
                        left: 0,
                        right: 0,
                        top: 0,
                        bottom: 0
                    };
                    this._localBounds = newBounds;
                    this._adjustedLocalBounds = newBounds;
                }
                else {
                    this._getBounds();
                    this._fixMinBounds(this._localBounds);
                    this.updatePivotPoint();
                    this._adjustedLocalBounds = this._display.getAdjustedBounds(this._localBounds);
                    newBounds = this._adjustedLocalBounds;
                }
                if (!oldBounds || (oldBounds.left !== newBounds.left || oldBounds.top !== newBounds.top || oldBounds.right !== newBounds.right || oldBounds.bottom !== newBounds.bottom)) {
                    var eventType = "boundschanged";
                    if (this.events.isEnabled(eventType)) {
                        this.events.dispatch(eventType, { type: eventType, target: this });
                    }
                    if (this.parent) {
                        this.parent.markDirty();
                        this.parent.markDirtyBounds();
                    }
                }
            }
        });
        Object.defineProperty(Sprite.prototype, "_fixMinBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (bounds) {
                var minWidth = this.get("minWidth");
                var minHeight = this.get("minHeight");
                if (isNumber(minWidth)) {
                    if (bounds.right - bounds.left < minWidth) {
                        bounds.right = bounds.left + minWidth;
                    }
                }
                if (isNumber(minHeight)) {
                    if (bounds.bottom - bounds.top < minHeight) {
                        bounds.bottom = bounds.top + minHeight;
                    }
                }
                var privateWidth = this.getPrivate("width");
                var privateHeight = this.getPrivate("height");
                if (isNumber(privateWidth)) {
                    bounds.right = bounds.left + privateWidth;
                }
                if (isNumber(privateHeight)) {
                    bounds.bottom = bounds.top + privateHeight;
                }
            }
        });
        Object.defineProperty(Sprite.prototype, "_removeParent", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (parent) {
                if (parent) {
                    parent.children.removeValue(this);
                    removeFirst(parent._percentageSizeChildren, this);
                    removeFirst(parent._percentagePositionChildren, this);
                }
            }
        });
        Object.defineProperty(Sprite.prototype, "_clearDirty", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._clearDirty.call(this);
                this._sizeDirty = false;
                this._statesHandled = false;
            }
        });
        /**
         * Simulate hover over element.
         */
        Object.defineProperty(Sprite.prototype, "hover", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.showTooltip();
                this._handleOver();
            }
        });
        /**
         * Simulate unhover over element.
         */
        Object.defineProperty(Sprite.prototype, "unhover", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.hideTooltip();
                this._handleOut();
            }
        });
        /**
         * Shows element's [[Tooltip]].
         */
        Object.defineProperty(Sprite.prototype, "showTooltip", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (point) {
                var tooltip = this.getTooltip();
                var tooltipText = this.get("tooltipText");
                if (tooltipText && tooltip) {
                    var tooltipPosition = this.get("tooltipPosition");
                    var tooltipTarget = this.getPrivate("tooltipTarget", this);
                    if (tooltipPosition == "fixed" || !point) {
                        this._display._setMatrix();
                        point = this.toGlobal(tooltipTarget._getTooltipPoint());
                    }
                    tooltip.set("pointTo", point);
                    tooltip.set("tooltipTarget", tooltipTarget);
                    if (!tooltip.get("x")) {
                        tooltip.set("x", point.x);
                    }
                    if (!tooltip.get("y")) {
                        tooltip.set("y", point.y);
                    }
                    tooltip.label.set("text", tooltipText);
                    var dataItem = this.dataItem;
                    if (dataItem) {
                        tooltip.label._setDataItem(dataItem);
                    }
                    if (this.get("showTooltipOn") == "always" && (point.x < 0 || point.x > this._root.width() || point.y < 0 || point.y > this._root.height())) {
                        this.hideTooltip();
                        return;
                    }
                    tooltip.label.text.markDirtyText();
                    var promise = tooltip.show();
                    this.setPrivateRaw("showingTooltip", true);
                    return promise;
                }
            }
        });
        /**
         * Hides element's [[Tooltip]].
         */
        Object.defineProperty(Sprite.prototype, "hideTooltip", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var tooltip = this.getTooltip();
                if (tooltip) {
                    var promise = tooltip.hide();
                    this.setPrivateRaw("showingTooltip", false);
                    return promise;
                }
            }
        });
        Object.defineProperty(Sprite.prototype, "_getTooltipPoint", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var bounds = this._localBounds;
                if (bounds) {
                    var x = 0;
                    var y = 0;
                    if (!this.get("isMeasured")) {
                        x = relativeToValue(this.get("tooltipX", 0), this.width());
                        y = relativeToValue(this.get("tooltipY", 0), this.height());
                    }
                    else {
                        x = bounds.left + relativeToValue(this.get("tooltipX", 0), bounds.right - bounds.left);
                        y = bounds.top + relativeToValue(this.get("tooltipY", 0), bounds.bottom - bounds.top);
                    }
                    return { x: x, y: y };
                }
                return { x: 0, y: 0 };
            }
        });
        /**
         * Returns [[Tooltip]] used for this element.
         *
         * @return Tooltip
         */
        Object.defineProperty(Sprite.prototype, "getTooltip", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var tooltip = this.get("tooltip");
                if (!tooltip) {
                    var parent_5 = this.parent;
                    if (parent_5) {
                        return parent_5.getTooltip();
                    }
                }
                else {
                    return tooltip;
                }
            }
        });
        Object.defineProperty(Sprite.prototype, "_updatePosition", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var parent = this.parent;
                var dx = this.get("dx", 0);
                var dy = this.get("dy", 0);
                var x = this.get("x");
                var _x = this.getPrivate("x");
                var xx = 0;
                var yy = 0;
                var position = this.get("position");
                if (x instanceof Percent) {
                    if (parent) {
                        x = parent.innerWidth() * x.value + parent.get("paddingLeft", 0);
                    }
                    else {
                        x = 0;
                    }
                }
                if (isNumber(x)) {
                    xx = x + dx;
                }
                else {
                    if (_x != null) {
                        xx = _x;
                    }
                    else if (parent) {
                        if (position == "relative") {
                            xx = parent.get("paddingLeft", 0) + dx;
                        }
                    }
                }
                var y = this.get("y");
                var _y = this.getPrivate("y");
                if (y instanceof Percent) {
                    if (parent) {
                        y = parent.innerHeight() * y.value + parent.get("paddingTop", 0);
                    }
                    else {
                        y = 0;
                    }
                }
                if (isNumber(y)) {
                    yy = y + dy;
                }
                else {
                    if (_y != null) {
                        yy = _y;
                    }
                    else if (parent) {
                        if (position == "relative") {
                            yy = parent.get("paddingTop", 0) + dy;
                        }
                    }
                }
                var display = this._display;
                if (display.x != xx || display.y != yy) {
                    display.invalidateBounds();
                    display.x = xx;
                    display.y = yy;
                    var eventType = "positionchanged";
                    if (this.events.isEnabled(eventType)) {
                        this.events.dispatch(eventType, { type: eventType, target: this });
                    }
                }
                // Update tooltip position together with the Sprite
                if (this.getPrivate("showingTooltip")) {
                    this.showTooltip();
                }
            }
        });
        /**
         * Returns element's actual X position in pixels.
         *
         * @return X (px)
         */
        Object.defineProperty(Sprite.prototype, "x", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var x = this.get("x");
                var _x = this.getPrivate("x");
                var parent = this.parent;
                if (parent) {
                    if (x instanceof Percent) {
                        return relativeToValue(x, parent.innerWidth()) + parent.get("paddingLeft", 0);
                    }
                    else {
                        if (!isNumber(x)) {
                            if (_x != null) {
                                return _x;
                            }
                            else {
                                return parent.get("paddingLeft", this._display.x);
                            }
                        }
                        else {
                            return x;
                        }
                    }
                }
                return this._display.x;
            }
        });
        /**
         * Returns element's actual Y position in pixels.
         *
         * @return Y (px)
         */
        Object.defineProperty(Sprite.prototype, "y", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _y = this.getPrivate("y");
                if (_y != null) {
                    return _y;
                }
                var y = this.get("y");
                var parent = this.parent;
                if (parent) {
                    if (y instanceof Percent) {
                        return relativeToValue(y, parent.innerHeight()) + parent.get("paddingTop", 0);
                    }
                    else {
                        if (!isNumber(y)) {
                            if (_y != null) {
                                return _y;
                            }
                            else {
                                return parent.get("paddingTop", this._display.y);
                            }
                        }
                        else {
                            return y;
                        }
                    }
                }
                return this._display.y;
            }
        });
        Object.defineProperty(Sprite.prototype, "_dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._dispose.call(this);
                this._display.dispose();
                this._removeTemplateField();
                this._removeParent(this.parent);
                this._root._removeFocusElement(this);
                var tooltip = this.get("tooltip");
                if (tooltip) {
                    tooltip.dispose();
                }
                this.markDirty();
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Sprite.prototype, "adjustedLocalBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._fixMinBounds(this._adjustedLocalBounds);
                return this._adjustedLocalBounds;
            }
        });
        /**
         * Returns local coordinates of the element's bounds.
         *
         * @ignore
         * @return Global bounds
         */
        Object.defineProperty(Sprite.prototype, "localBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this._localBounds;
            }
        });
        /**
         * Returns adjusted local coordinates of the element's bounds.
         *
         * @ignore
         * @return Global bounds
         */
        Object.defineProperty(Sprite.prototype, "bounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var bounds = this._adjustedLocalBounds;
                var x = this.x();
                var y = this.y();
                return { left: bounds.left + x, right: bounds.right + x, top: bounds.top + y, bottom: bounds.bottom + y };
            }
        });
        /**
         * Returns global coordinates of the element's bounds.
         *
         * @ignore
         * @return Global bounds
         */
        Object.defineProperty(Sprite.prototype, "globalBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var bounds = this.localBounds();
                var p0 = this.toGlobal({ x: bounds.left, y: bounds.top });
                var p1 = this.toGlobal({ x: bounds.right, y: bounds.top });
                var p2 = this.toGlobal({ x: bounds.right, y: bounds.bottom });
                var p3 = this.toGlobal({ x: bounds.left, y: bounds.bottom });
                return {
                    left: Math.min(p0.x, p1.x, p2.x, p3.x),
                    top: Math.min(p0.y, p1.y, p2.y, p3.y),
                    right: Math.max(p0.x, p1.x, p2.x, p3.x),
                    bottom: Math.max(p0.y, p1.y, p2.y, p3.y)
                };
            }
        });
        Object.defineProperty(Sprite.prototype, "_onShow", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_duration) {
            }
        });
        Object.defineProperty(Sprite.prototype, "_onHide", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_duration) {
            }
        });
        /**
         * Plays initial reveal animation regardless if element is currently hidden
         * or visible.
         *
         * @param   duration  Duration of the animation in milliseconds
         * @param   delay     Delay showing of the element by X milliseconds
         * @return            Promise
         */
        Object.defineProperty(Sprite.prototype, "appear", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (duration, delay) {
                return __awaiter(this, void 0, void 0, function () {
                    var _this = this;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, this.hide(0)];
                            case 1:
                                _a.sent();
                                if (delay) {
                                    return [2 /*return*/, new Promise(function (success, _error) {
                                            _this.setTimeout(function () {
                                                success(_this.show(duration));
                                            }, delay);
                                        })];
                                }
                                else {
                                    return [2 /*return*/, this.show(duration)];
                                }
                        }
                    });
                });
            }
        });
        /**
         * Shows currently hidden element and returns a `Promise` which completes
         * when all showing animations are finished.
         *
         * ```TypeScript
         * series.show().then(function(ev) {
         *   console.log("Series is now fully visible");
         * })
         * ```
         * ```JavaScript
         * series.show().then(function(ev) {
         *   console.log("Series is now fully visible");
         * })
         * ```
         *
         * @return Promise
         */
        Object.defineProperty(Sprite.prototype, "show", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (duration) {
                return __awaiter(this, void 0, void 0, function () {
                    var animations;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (!!this._isShowing) return [3 /*break*/, 2];
                                this._isHidden = false;
                                this._isShowing = true;
                                this._isHiding = false;
                                if (this.states.lookup("default").get("visible")) {
                                    this.set("visible", true);
                                }
                                this._onShow(duration);
                                animations = this.states.applyAnimate("default", duration);
                                return [4 /*yield*/, waitForAnimations(animations)];
                            case 1:
                                _a.sent();
                                this._isShowing = false;
                                _a.label = 2;
                            case 2: return [2 /*return*/];
                        }
                    });
                });
            }
        });
        /**
         * Hides the element and returns a `Promise` which completes when all hiding
         * animations are finished.
         *
         * ```TypeScript
         * series.hide().then(function(ev) {
         *   console.log("Series finished hiding");
         * })
         * ```
         * ```JavaScript
         * series.hide().then(function(ev) {
         *   console.log("Series finished hiding");
         * })
         * ```
         *
         * @return Promise
         */
        Object.defineProperty(Sprite.prototype, "hide", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (duration) {
                return __awaiter(this, void 0, void 0, function () {
                    var state, animations;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (!(!this._isHiding && !this._isHidden)) return [3 /*break*/, 2];
                                this._isHiding = true;
                                this._isShowing = false;
                                state = this.states.lookup("hidden");
                                if (!state) {
                                    state = this.states.create("hidden", {
                                        "opacity": 0,
                                        "visible": false
                                    });
                                }
                                this._isHidden = true;
                                this._onHide(duration);
                                animations = this.states.applyAnimate("hidden", duration);
                                return [4 /*yield*/, waitForAnimations(animations)];
                            case 1:
                                _a.sent();
                                this._isHiding = false;
                                _a.label = 2;
                            case 2: return [2 /*return*/];
                        }
                    });
                });
            }
        });
        /**
         * Returns `true` if this element is currently hidden.
         *
         * @return Is hidden?
         */
        Object.defineProperty(Sprite.prototype, "isHidden", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this._isHidden;
            }
        });
        /**
         * Returns `true` if this element is currently animating to a default state.
         *
         * @return Is showing?
         */
        Object.defineProperty(Sprite.prototype, "isShowing", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this._isShowing;
            }
        });
        /**
         * Returns `true` if this element is currently animating to a hidden state.
         *
         * @return Is hiding?
         */
        Object.defineProperty(Sprite.prototype, "isHiding", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this._isHiding;
            }
        });
        /**
         * Returns `true` if this element is currently hovered by a pointer.
         *
         * @return Is hovered?
         */
        Object.defineProperty(Sprite.prototype, "isHover", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this._display.hovering();
            }
        });
        /**
         * Returns `true` if this element does currently have focus.
         *
         * @return Is focused?
         */
        Object.defineProperty(Sprite.prototype, "isFocus", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this._root.focused(this);
            }
        });
        /**
         * Returns `true` if this element is currently being dragged.
         *
         * @return Is dragged?
         */
        Object.defineProperty(Sprite.prototype, "isDragging", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this._isDragging;
            }
        });
        /**
         * Returns `false` if if either public or private setting `visible` is set
         * to `false`, or `forceHidden` is set to `true`.
         *
         * @return Visible?
         */
        Object.defineProperty(Sprite.prototype, "isVisible", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (this.get("visible") && this.getPrivate("visible") && !this.get("forceHidden")) {
                    return true;
                }
                return false;
            }
        });
        /**
         * Same as `isVisible()`, except it checks all ascendants, too.
         *
         * @since 5.2.7
         * @return Visible?
         */
        Object.defineProperty(Sprite.prototype, "isVisibleDeep", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this._parent ? (this._parent.isVisibleDeep() && this.isVisible()) : this.isVisible();
            }
        });
        /**
         * Returns width of this element in pixels.
         *
         * @return Width (px)
         */
        Object.defineProperty(Sprite.prototype, "width", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var width = this.get("width");
                var maxWidth = this.get("maxWidth", this.getPrivate("maxWidth"));
                var minWidth = this.get("minWidth");
                var privateWidth = this.getPrivate("width");
                var w = 0;
                if (isNumber(privateWidth)) {
                    w = privateWidth;
                }
                else {
                    if (width == null) {
                        if (this._adjustedLocalBounds) {
                            w = this._adjustedLocalBounds.right - this._adjustedLocalBounds.left;
                        }
                    }
                    else {
                        if (width instanceof Percent) {
                            var parent_6 = this.parent;
                            if (parent_6) {
                                w = parent_6.innerWidth() * width.value;
                            }
                            else {
                                w = this._root.width() * width.value;
                            }
                        }
                        else if (isNumber(width)) {
                            w = width;
                        }
                    }
                }
                if (isNumber(minWidth)) {
                    w = Math.max(minWidth, w);
                }
                if (isNumber(maxWidth)) {
                    w = Math.min(maxWidth, w);
                }
                return w;
            }
        });
        /**
         * Returns maximum allowed width of this element in pixels.
         *
         * @return Maximum width (px)
         */
        Object.defineProperty(Sprite.prototype, "maxWidth", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var maxWidth = this.get("maxWidth", this.getPrivate("maxWidth"));
                if (isNumber(maxWidth)) {
                    return maxWidth;
                }
                else {
                    var width = this.get("width");
                    if (isNumber(width)) {
                        return width;
                    }
                }
                var parent = this.parent;
                if (parent) {
                    return parent.innerWidth();
                }
                return this._root.width();
            }
        });
        /**
         * Returns maximum allowed height of this element in pixels.
         *
         * @return Maximum height (px)
         */
        Object.defineProperty(Sprite.prototype, "maxHeight", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var maxHeight = this.get("maxHeight", this.getPrivate("maxHeight"));
                if (isNumber(maxHeight)) {
                    return maxHeight;
                }
                else {
                    var height = this.get("height");
                    if (isNumber(height)) {
                        return height;
                    }
                }
                var parent = this.parent;
                if (parent) {
                    return parent.innerHeight();
                }
                return this._root.height();
            }
        });
        /**
         * Returns height of this element in pixels.
         *
         * @return Height (px)
         */
        Object.defineProperty(Sprite.prototype, "height", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var height = this.get("height");
                var maxHeight = this.get("maxHeight", this.getPrivate("maxHeight"));
                var minHeight = this.get("minHeight");
                var privateHeight = this.getPrivate("height");
                var h = 0;
                if (isNumber(privateHeight)) {
                    h = privateHeight;
                }
                else {
                    if (height == null) {
                        if (this._adjustedLocalBounds) {
                            h = this._adjustedLocalBounds.bottom - this._adjustedLocalBounds.top;
                        }
                    }
                    else {
                        if (height instanceof Percent) {
                            var parent_7 = this.parent;
                            if (parent_7) {
                                h = parent_7.innerHeight() * height.value;
                            }
                            else {
                                h = this._root.height() * height.value;
                            }
                        }
                        else if (isNumber(height)) {
                            h = height;
                        }
                    }
                }
                if (isNumber(minHeight)) {
                    h = Math.max(minHeight, h);
                }
                if (isNumber(maxHeight)) {
                    h = Math.min(maxHeight, h);
                }
                return h;
            }
        });
        Object.defineProperty(Sprite.prototype, "_findStaticTemplate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (f) {
                // templateField overrides template
                if (this._templateField && f(this._templateField)) {
                    return this._templateField;
                }
                return _super.prototype._findStaticTemplate.call(this, f);
            }
        });
        Object.defineProperty(Sprite.prototype, "_walkParents", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (f) {
                if (this._parent) {
                    this._walkParent(f);
                }
            }
        });
        Object.defineProperty(Sprite.prototype, "_walkParent", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (f) {
                if (this._parent) {
                    this._parent._walkParent(f);
                }
                f(this);
            }
        });
        Object.defineProperty(Sprite.prototype, "parent", {
            /**
             * Parent [[Container]] of this element.
             *
             * @return Parent container
             */
            get: function () {
                return this._parent;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Sprite.prototype, "_setParent", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (parent, updateChildren) {
                if (updateChildren === void 0) { updateChildren = false; }
                var prevParent = this._parent;
                if (parent !== prevParent) {
                    this.markDirtyBounds();
                    parent.markDirty();
                    this._parent = parent;
                    if (updateChildren) {
                        this._removeParent(prevParent);
                        if (parent) {
                            this._addPercentageSizeChildren();
                            this._addPercentagePositionChildren();
                        }
                    }
                    this.markDirtyPosition();
                    this._applyThemes();
                }
            }
        });
        /**
         * Returns an instance of [[NumberFormatter]] used in this element.
         *
         * If this element does not have it set, global one form [[Root]] is used.
         *
         * @see {@link https://www.amcharts.com/docs/v5/concepts/using-formatters/} for more info
         * @return NumberFormatter instace
         */
        Object.defineProperty(Sprite.prototype, "getNumberFormatter", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this.get("numberFormatter", this._root.numberFormatter);
            }
        });
        /**
         * Returns an instance of [[DateFormatter]] used in this element.
         *
         * If this element does not have it set, global one form [[Root]] is used.
         *
         * @see {@link https://www.amcharts.com/docs/v5/concepts/using-formatters/} for more info
         * @return DateFormatter instace
         */
        Object.defineProperty(Sprite.prototype, "getDateFormatter", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this.get("dateFormatter", this._root.dateFormatter);
            }
        });
        /**
         * Returns an instance of [[DurationFormatter]] used in this element.
         *
         * If this element does not have it set, global one form [[Root]] is used.
         *
         * @see {@link https://www.amcharts.com/docs/v5/concepts/using-formatters/} for more info
         * @return DurationFormatter instace
         */
        Object.defineProperty(Sprite.prototype, "getDurationFormatter", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this.get("durationFormatter", this._root.durationFormatter);
            }
        });
        /**
         * Converts X/Y coordinate within this element to a global coordinate.
         *
         * @param  point  Local coordinate
         * @return        Global coordinate
         */
        Object.defineProperty(Sprite.prototype, "toGlobal", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (point) {
                return this._display.toGlobal(point);
            }
        });
        /**
         * Converts global X/Y coordinate to a coordinate within this element.
         *
         * @param  point  Global coordinate
         * @return        Local coordinate
         */
        Object.defineProperty(Sprite.prototype, "toLocal", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (point) {
                return this._display.toLocal(point);
            }
        });
        Object.defineProperty(Sprite.prototype, "_getDownPoint", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var id = this._getDownPointId();
                if (id) {
                    return this._downPoints[id];
                }
            }
        });
        Object.defineProperty(Sprite.prototype, "_getDownPointId", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (this._downPoints) {
                    return keysOrdered(this._downPoints, function (a, b) {
                        if (a > b) {
                            return 1;
                        }
                        if (a < b) {
                            return -1;
                        }
                        return 0;
                    })[0];
                }
            }
        });
        /**
         * Moves sprite to the end of the parent's children array.
         *
         * Depending on `layout` setting of the parten container, it may effect the
         * positioning or overlapping order of the elements.
         */
        Object.defineProperty(Sprite.prototype, "toFront", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var parent = this.parent;
                if (parent) {
                    parent.children.moveValue(this, parent.children.length - 1);
                }
            }
        });
        /**
         * Moves sprite to the beginning of the parent's children array.
         *
         * Depending on `layout` setting of the parten container, it may effect the
         * positioning or overlapping order of the elements.
         */
        Object.defineProperty(Sprite.prototype, "toBack", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var parent = this.parent;
                if (parent) {
                    parent.children.moveValue(this, 0);
                }
            }
        });
        Object.defineProperty(Sprite, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Sprite"
        });
        Object.defineProperty(Sprite, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Entity.classNames.concat([Sprite.className])
        });
        return Sprite;
    }(Entity));

    /**
     * From https://github.com/pixijs/pixi.js/blob/3dd0ff9a935f0bc13a09aefff9eb2872f02c51b9/packages/canvas/canvas-renderer/src/utils/mapCanvasBlendModesToPixi.ts#L13
     */
    var BlendMode;
    (function (BlendMode) {
        BlendMode["ADD"] = "lighter";
        BlendMode["COLOR"] = "color";
        BlendMode["COLOR_BURN"] = "color-burn";
        BlendMode["COLOR_DODGE"] = "color-dodge";
        BlendMode["DARKEN"] = "darken";
        BlendMode["DIFFERENCE"] = "difference";
        BlendMode["DST_OVER"] = "destination-over";
        BlendMode["EXCLUSION"] = "exclusion";
        BlendMode["HARD_LIGHT"] = "hard-light";
        BlendMode["HUE"] = "hue";
        BlendMode["LIGHTEN"] = "lighten";
        BlendMode["LUMINOSITY"] = "luminosity";
        BlendMode["MULTIPLY"] = "multiply";
        BlendMode["NORMAL"] = "source-over";
        BlendMode["OVERLAY"] = "overlay";
        BlendMode["SATURATION"] = "saturation";
        BlendMode["SCREEN"] = "screen";
        BlendMode["SOFT_LIGHT"] = "soft-light";
        BlendMode["SRC_ATOP"] = "source-atop";
        BlendMode["XOR"] = "xor";
    })(BlendMode || (BlendMode = {}));

    var visualSettings = ["fill", "fillOpacity", "stroke", "strokeWidth", "strokeOpacity", "fillPattern", "strokePattern", "fillGradient", "strokeGradient", "strokeDasharray", "strokeDashoffset"];
    /**
     * Base class used for drawing shapes.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info
     * @important
     */
    var Graphics = /** @class */ (function (_super) {
        __extends(Graphics, _super);
        function Graphics() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_display", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this._root._renderer.makeGraphics()
            });
            Object.defineProperty(_this, "_clear", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            return _this;
        }
        Object.defineProperty(Graphics.prototype, "_beforeChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                _super.prototype._beforeChanged.call(this);
                if (this.isDirty("draw") || this.isDirty("svgPath")) {
                    this.markDirtyBounds();
                }
                if (this.isDirty("fill") || this.isDirty("stroke") || this.isDirty("visible") || this.isDirty("forceHidden") || this.isDirty("fillGradient") || this.isDirty("strokeGradient") || this.isDirty("fillPattern") || this.isDirty("strokePattern") || this.isDirty("fillOpacity") || this.isDirty("strokeOpacity") || this.isDirty("strokeWidth") || this.isDirty("draw") || this.isDirty("blendMode") || this.isDirty("strokeDasharray") || this.isDirty("strokeDashoffset") || this.isDirty("svgPath") || this.isDirty("lineJoin") || this.isDirty("shadowColor") || this.isDirty("shadowBlur") || this.isDirty("shadowOffsetX") || this.isDirty("shadowOffsetY")) {
                    this._clear = true;
                }
                if (this.isDirty("fillGradient")) {
                    var gradient = this.get("fillGradient");
                    if (gradient) {
                        this._display.isMeasured = true;
                        var gradientTarget = gradient.get("target");
                        if (gradientTarget) {
                            this._disposers.push(gradientTarget.events.on("boundschanged", function () {
                                _this._markDirtyKey("fill");
                            }));
                            this._disposers.push(gradientTarget.events.on("positionchanged", function () {
                                _this._markDirtyKey("fill");
                            }));
                        }
                    }
                }
                if (this.isDirty("strokeGradient")) {
                    var gradient = this.get("strokeGradient");
                    if (gradient) {
                        this._display.isMeasured = true;
                        var gradientTarget = gradient.get("target");
                        if (gradientTarget) {
                            this._disposers.push(gradientTarget.events.on("boundschanged", function () {
                                _this._markDirtyKey("stroke");
                            }));
                            this._disposers.push(gradientTarget.events.on("positionchanged", function () {
                                _this._markDirtyKey("stroke");
                            }));
                        }
                    }
                }
            }
        });
        Object.defineProperty(Graphics.prototype, "_changed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._changed.call(this);
                if (this._clear) {
                    this.markDirtyLayer();
                    this._display.clear();
                    var strokeDasharray = this.get("strokeDasharray");
                    if (isNumber(strokeDasharray)) {
                        if (strokeDasharray < 0.5) {
                            strokeDasharray = [0];
                        }
                        else {
                            strokeDasharray = [strokeDasharray];
                        }
                    }
                    this._display.setLineDash(strokeDasharray);
                    var strokeDashoffset = this.get("strokeDashoffset");
                    if (strokeDashoffset) {
                        this._display.setLineDashOffset(strokeDashoffset);
                    }
                    var blendMode = this.get("blendMode", BlendMode.NORMAL);
                    this._display.blendMode = blendMode;
                    var draw = this.get("draw");
                    if (draw) {
                        draw(this._display, this);
                    }
                    var svgPath = this.get("svgPath");
                    if (svgPath != null) {
                        this._display.svgPath(svgPath);
                    }
                }
            }
        });
        Object.defineProperty(Graphics.prototype, "_afterChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._afterChanged.call(this);
                if (this._clear) {
                    var fill_1 = this.get("fill");
                    var fillGradient = this.get("fillGradient");
                    var fillPattern = this.get("fillPattern");
                    var fillOpacity_1 = this.get("fillOpacity");
                    var stroke_1 = this.get("stroke");
                    var strokeGradient = this.get("strokeGradient");
                    var strokePattern = this.get("strokePattern");
                    var shadowColor = this.get("shadowColor");
                    var shadowBlur = this.get("shadowBlur");
                    var shadowOffsetX = this.get("shadowOffsetX");
                    var shadowOffsetY = this.get("shadowOffsetY");
                    var shadowOpacity = this.get("shadowOpacity");
                    //const bounds = this._display.getLocalBounds();
                    if (shadowColor && (shadowBlur || shadowOffsetX || shadowOffsetY)) {
                        this._display.shadow(shadowColor, shadowBlur, shadowOffsetX, shadowOffsetY, shadowOpacity);
                    }
                    if (fillPattern) {
                        var changed = false;
                        if (fill_1 && (!fillPattern.get("fill") || fillPattern.get("fillInherited"))) {
                            fillPattern.set("fill", fill_1);
                            fillPattern.set("fillInherited", true);
                            changed = true;
                        }
                        if (stroke_1 && (!fillPattern.get("color") || fillPattern.get("colorInherited"))) {
                            fillPattern.set("color", stroke_1);
                            fillPattern.set("colorInherited", true);
                            changed = true;
                        }
                        if (changed) {
                            // @todo: is this OK?
                            fillPattern._changed();
                        }
                        var pattern = fillPattern.pattern;
                        if (pattern) {
                            this._display.beginFill(pattern, fillOpacity_1);
                            this._display.endFill();
                        }
                    }
                    else if (fillGradient) {
                        if (fill_1) {
                            var stops = fillGradient.get("stops", []);
                            if (stops.length) {
                                each$1(stops, function (stop) {
                                    if ((!stop.color || stop.colorInherited) && fill_1) {
                                        stop.color = fill_1;
                                        stop.colorInherited = true;
                                    }
                                    if (stop.opacity == null || stop.opacityInherited) {
                                        stop.opacity = fillOpacity_1;
                                        stop.opacityInherited = true;
                                    }
                                });
                            }
                        }
                        var gradient = fillGradient.getFill(this);
                        if (gradient) {
                            this._display.beginFill(gradient, fillOpacity_1);
                            this._display.endFill();
                        }
                    }
                    else if (fill_1) {
                        this._display.beginFill(fill_1, fillOpacity_1);
                        this._display.endFill();
                    }
                    if (stroke_1 || strokeGradient || strokePattern) {
                        var strokeOpacity_1 = this.get("strokeOpacity");
                        var strokeWidth = this.get("strokeWidth", 1);
                        var lineJoin = this.get("lineJoin");
                        if (strokePattern) {
                            var changed = false;
                            if (stroke_1 && (!strokePattern.get("color") || strokePattern.get("colorInherited"))) {
                                strokePattern.set("color", stroke_1);
                                strokePattern.set("colorInherited", true);
                                changed = true;
                            }
                            if (changed) {
                                // @todo: is this OK?
                                strokePattern._changed();
                            }
                            var pattern = strokePattern.pattern;
                            if (pattern) {
                                this._display.lineStyle(strokeWidth, pattern, strokeOpacity_1, lineJoin);
                                this._display.endStroke();
                            }
                        }
                        else if (strokeGradient) {
                            var stops = strokeGradient.get("stops", []);
                            if (stops.length) {
                                each$1(stops, function (stop) {
                                    if ((!stop.color || stop.colorInherited) && stroke_1) {
                                        stop.color = stroke_1;
                                        stop.colorInherited = true;
                                    }
                                    if (stop.opacity == null || stop.opacityInherited) {
                                        stop.opacity = strokeOpacity_1;
                                        stop.opacityInherited = true;
                                    }
                                });
                            }
                            var gradient = strokeGradient.getFill(this);
                            if (gradient) {
                                this._display.lineStyle(strokeWidth, gradient, strokeOpacity_1, lineJoin);
                                this._display.endStroke();
                            }
                        }
                        else if (stroke_1) {
                            this._display.lineStyle(strokeWidth, stroke_1, strokeOpacity_1, lineJoin);
                            this._display.endStroke();
                        }
                    }
                }
                this._clear = false;
            }
        });
        Object.defineProperty(Graphics, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Graphics"
        });
        Object.defineProperty(Graphics, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Sprite.classNames.concat([Graphics.className])
        });
        return Graphics;
    }(Sprite));

    /**
     * Draws a rectangle.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info
     * @important
     */
    var Rectangle = /** @class */ (function (_super) {
        __extends(Rectangle, _super);
        function Rectangle() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Rectangle.prototype, "_beforeChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._beforeChanged.call(this);
                if (this.isDirty("width") || this.isDirty("height") || this.isPrivateDirty("width") || this.isPrivateDirty("height")) {
                    this._clear = true;
                }
            }
        });
        Object.defineProperty(Rectangle.prototype, "_changed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._changed.call(this);
                if (this._clear && !this.get("draw")) {
                    this._draw();
                }
            }
        });
        Object.defineProperty(Rectangle.prototype, "_draw", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._display.drawRect(0, 0, this.width(), this.height());
            }
        });
        Object.defineProperty(Rectangle.prototype, "_updateSize", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.markDirty();
                this._clear = true;
            }
        });
        Object.defineProperty(Rectangle, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Rectangle"
        });
        Object.defineProperty(Rectangle, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Graphics.classNames.concat([Rectangle.className])
        });
        return Rectangle;
    }(Graphics));

    function eachChildren(container, f) {
        if (container.get("reverseChildren", false)) {
            container.children.eachReverse(f);
        }
        else {
            container.children.each(f);
        }
    }
    /**
     * Base class for [[Container]] layouts.
     */
    var Layout = /** @class */ (function (_super) {
        __extends(Layout, _super);
        function Layout() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Layout, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Layout"
        });
        Object.defineProperty(Layout, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Entity.classNames.concat([Layout.className])
        });
        return Layout;
    }(Entity));

    /**
     * A horizontal children layout for [[Container]].
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/containers/#Layout} for more info
     */
    var HorizontalLayout = /** @class */ (function (_super) {
        __extends(HorizontalLayout, _super);
        function HorizontalLayout() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @ignore
         */
        Object.defineProperty(HorizontalLayout.prototype, "updateContainer", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (container) {
                var paddingLeft = container.get("paddingLeft", 0);
                var availableWidth = container.innerWidth();
                var totalPercent = 0;
                eachChildren(container, function (child) {
                    if (child.isVisible()) {
                        if (child.get("position") == "relative") {
                            var childWidth = child.get("width");
                            if (childWidth instanceof Percent) {
                                totalPercent += childWidth.value;
                                var w = availableWidth * childWidth.value;
                                var minWidth = child.get("minWidth", -Infinity);
                                if (minWidth > w) {
                                    availableWidth -= minWidth;
                                    totalPercent -= childWidth.value;
                                }
                                var maxWidth = child.get("maxWidth", child.getPrivate("maxWidth", Infinity));
                                if (w > maxWidth) {
                                    availableWidth -= maxWidth;
                                    totalPercent -= childWidth.value;
                                }
                            }
                            else {
                                if (!isNumber(childWidth)) {
                                    childWidth = child.width();
                                }
                                availableWidth -= childWidth + child.get("marginLeft", 0) + child.get("marginRight", 0);
                            }
                        }
                    }
                });
                if (availableWidth > 0) {
                    eachChildren(container, function (child) {
                        if (child.isVisible()) {
                            if (child.get("position") == "relative") {
                                var childWidth = child.get("width");
                                if (childWidth instanceof Percent) {
                                    var privateWidth = availableWidth * childWidth.value / totalPercent - child.get("marginLeft", 0) - child.get("marginRight", 0);
                                    var minWidth = child.get("minWidth", -Infinity);
                                    var maxWidth = child.get("maxWidth", child.getPrivate("maxWidth", Infinity));
                                    privateWidth = Math.min(Math.max(minWidth, privateWidth), maxWidth);
                                    child.setPrivate("width", privateWidth);
                                }
                            }
                        }
                    });
                }
                var prevX = paddingLeft;
                eachChildren(container, function (child) {
                    if (child.get("position") == "relative") {
                        if (child.isVisible()) {
                            var bounds = child.adjustedLocalBounds();
                            var marginLeft = child.get("marginLeft", 0);
                            var marginRight = child.get("marginRight", 0);
                            var x = prevX + marginLeft - bounds.left;
                            child.setPrivate("x", x);
                            prevX = x + bounds.right + marginRight;
                        }
                        else {
                            child.setPrivate("x", undefined);
                        }
                    }
                });
            }
        });
        Object.defineProperty(HorizontalLayout, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "HorizontalLayout"
        });
        Object.defineProperty(HorizontalLayout, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Layout.classNames.concat([HorizontalLayout.className])
        });
        return HorizontalLayout;
    }(Layout));

    /**
     * A vertical children layout for [[Container]].
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/containers/#Layout} for more info
     */
    var VerticalLayout = /** @class */ (function (_super) {
        __extends(VerticalLayout, _super);
        function VerticalLayout() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @ignore
         */
        Object.defineProperty(VerticalLayout.prototype, "updateContainer", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (container) {
                var paddingTop = container.get("paddingTop", 0);
                var availableHeight = container.innerHeight();
                var totalPercent = 0;
                eachChildren(container, function (child) {
                    if (child.isVisible()) {
                        if (child.get("position") == "relative") {
                            var childHeight = child.get("height");
                            if (childHeight instanceof Percent) {
                                totalPercent += childHeight.value;
                                var h = availableHeight * childHeight.value;
                                var minHeight = child.get("minHeight", -Infinity);
                                if (minHeight > h) {
                                    availableHeight -= minHeight;
                                    totalPercent -= childHeight.value;
                                }
                                var maxHeight = child.get("maxHeight", child.getPrivate("maxHeight", Infinity));
                                if (h > maxHeight) {
                                    availableHeight -= maxHeight;
                                    totalPercent -= childHeight.value;
                                }
                            }
                            else {
                                if (!isNumber(childHeight)) {
                                    childHeight = child.height();
                                }
                                availableHeight -= childHeight + child.get("marginTop", 0) + child.get("marginBottom", 0);
                            }
                        }
                    }
                });
                if (availableHeight > 0) {
                    eachChildren(container, function (child) {
                        if (child.isVisible()) {
                            if (child.get("position") == "relative") {
                                var childHeight = child.get("height");
                                if (childHeight instanceof Percent) {
                                    var privateHeight = availableHeight * childHeight.value / totalPercent - child.get("marginTop", 0) - child.get("marginBottom", 0);
                                    var minHeight = child.get("minHeight", -Infinity);
                                    var maxHeight = child.get("maxHeight", child.getPrivate("maxHeight", Infinity));
                                    privateHeight = Math.min(Math.max(minHeight, privateHeight), maxHeight);
                                    child.setPrivate("height", privateHeight);
                                }
                            }
                        }
                    });
                }
                var prevY = paddingTop;
                eachChildren(container, function (child) {
                    if (child.get("position") == "relative") {
                        if (child.isVisible()) {
                            var bounds = child.adjustedLocalBounds();
                            var marginTop = child.get("marginTop", 0);
                            var marginBottom = child.get("marginBottom", 0);
                            var y = prevY + marginTop - bounds.top;
                            child.setPrivate("y", y);
                            prevY = y + bounds.bottom + marginBottom;
                        }
                        else {
                            child.setPrivate("y", undefined);
                        }
                    }
                });
            }
        });
        Object.defineProperty(VerticalLayout, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "VerticalLayout"
        });
        Object.defineProperty(VerticalLayout, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Layout.classNames.concat([VerticalLayout.className])
        });
        return VerticalLayout;
    }(Layout));

    /**
     * A grid children layout for [[Container]].
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/containers/#Layout} for more info
     */
    var GridLayout = /** @class */ (function (_super) {
        __extends(GridLayout, _super);
        function GridLayout() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(GridLayout.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._setRawDefault("maxColumns", Number.MAX_VALUE);
                _super.prototype._afterNew.call(this);
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(GridLayout.prototype, "updateContainer", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (container) {
                var paddingLeft = container.get("paddingLeft", 0);
                var paddingRight = container.get("paddingRight", 0);
                var paddingTop = container.get("paddingTop", 0);
                var availableWidth = container.maxWidth() - paddingLeft - paddingRight;
                var minCellWidth = availableWidth;
                var maxCellWidth = 1;
                eachChildren(container, function (child) {
                    if (child.get("visible") && child.getPrivate("visible") && !child.get("forceHidden")) {
                        if (child.get("position") != "absolute") {
                            var childWidth = child.width();
                            if (childWidth < minCellWidth) {
                                minCellWidth = childWidth;
                            }
                            if (childWidth > maxCellWidth) {
                                maxCellWidth = childWidth;
                            }
                        }
                    }
                });
                minCellWidth = fitToRange(minCellWidth, 1, availableWidth);
                maxCellWidth = fitToRange(maxCellWidth, 1, availableWidth);
                var columnCount = 1;
                if (this.get("fixedWidthGrid")) {
                    columnCount = availableWidth / maxCellWidth;
                }
                else {
                    columnCount = availableWidth / minCellWidth;
                }
                columnCount = Math.max(1, Math.floor(columnCount));
                columnCount = Math.min(this.get("maxColumns", Number.MAX_VALUE), columnCount);
                var columnWidths = this.getColumnWidths(container, columnCount, maxCellWidth, availableWidth);
                var prevY = paddingTop;
                var column = 0;
                var maxColumnHeight = 0;
                columnCount = columnWidths.length;
                var prevX = paddingLeft;
                eachChildren(container, function (child) {
                    if (child.get("position") == "relative" && child.isVisible()) {
                        var marginTop = child.get("marginTop", 0);
                        var marginBottom = child.get("marginBottom", 0);
                        var bounds = child.adjustedLocalBounds();
                        var marginLeft = child.get("marginLeft", 0);
                        var marginRight = child.get("marginRight", 0);
                        var x = prevX + marginLeft - bounds.left;
                        var y = prevY + marginTop - bounds.top;
                        child.setPrivate("x", x);
                        child.setPrivate("y", y);
                        prevX += columnWidths[column] + marginRight;
                        maxColumnHeight = Math.max(maxColumnHeight, child.height() + marginTop + marginBottom);
                        column++;
                        if (column >= columnCount) {
                            column = 0;
                            prevX = paddingLeft;
                            prevY += maxColumnHeight;
                        }
                    }
                });
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(GridLayout.prototype, "getColumnWidths", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (container, columnCount, maxCellWidth, availableWidth) {
                var _this = this;
                var totalWidth = 0;
                var columnWidths = [];
                var column = 0;
                eachChildren(container, function (child) {
                    var bounds = child.adjustedLocalBounds();
                    if (child.get("position") != "absolute" && child.isVisible()) {
                        if (_this.get("fixedWidthGrid")) {
                            columnWidths[column] = maxCellWidth;
                        }
                        else {
                            columnWidths[column] = Math.max(columnWidths[column] | 0, bounds.right - bounds.left + child.get("marginLeft", 0) + child.get("marginRight", 0));
                        }
                        if (column < container.children.length - 1) {
                            column++;
                            if (column == columnCount) {
                                column = 0;
                            }
                        }
                    }
                });
                each$1(columnWidths, function (w) {
                    totalWidth += w;
                });
                if (totalWidth > availableWidth) {
                    if (columnCount > 2) {
                        columnCount -= 1;
                        return this.getColumnWidths(container, columnCount, maxCellWidth, availableWidth);
                    }
                    else {
                        return [availableWidth];
                    }
                }
                return columnWidths;
            }
        });
        Object.defineProperty(GridLayout, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "GridLayout"
        });
        Object.defineProperty(GridLayout, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Layout.classNames.concat([GridLayout.className])
        });
        return GridLayout;
    }(Layout));

    /**
     * A basic element that can have child elements, maintain their layout, and
     * have a background.
     *
     * It can have any [[Sprite]] element as a child, from very basic shapes, to
     * full-fledged charts.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/containers/} for more info
     * @important
     */
    var Container = /** @class */ (function (_super) {
        __extends(Container, _super);
        function Container() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_display", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this._root._renderer.makeContainer()
            });
            Object.defineProperty(_this, "_childrenDisplay", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this._root._renderer.makeContainer()
            });
            /**
             * List of Container's child elements.
             */
            Object.defineProperty(_this, "children", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new Children(_this)
            });
            Object.defineProperty(_this, "_percentageSizeChildren", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            Object.defineProperty(_this, "_percentagePositionChildren", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            Object.defineProperty(_this, "_prevWidth", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(_this, "_prevHeight", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(_this, "_contentWidth", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(_this, "_contentHeight", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(_this, "_contentMask", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            return _this;
        }
        Object.defineProperty(Container.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._afterNew.call(this);
                this._display.addChild(this._childrenDisplay);
            }
        });
        Object.defineProperty(Container.prototype, "_dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                eachReverse(this.allChildren(), function (child) {
                    child.dispose();
                });
                _super.prototype._dispose.call(this);
            }
        });
        Object.defineProperty(Container.prototype, "_changed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._changed.call(this);
                if (this.isDirty("interactiveChildren")) {
                    this._display.interactiveChildren = this.get("interactiveChildren", false);
                }
                if (this.isDirty("layout")) {
                    this._prevWidth = 0;
                    this._prevHeight = 0;
                    this.markDirtyBounds();
                    if (this._prevSettings.layout) {
                        this.children.each(function (child) {
                            child.removePrivate("x");
                            child.removePrivate("y");
                        });
                    }
                }
                if (this.isDirty("paddingTop") || this.isDirty("paddingBottom") || this.isDirty("paddingLeft") || this.isDirty("paddingRight")) {
                    this.children.each(function (child) {
                        child.markDirtyPosition();
                    });
                }
                if (this.isDirty("maskContent")) {
                    var childrenDisplay = this._childrenDisplay;
                    var contentMask = this._contentMask;
                    if (this.get("maskContent")) {
                        if (!contentMask) {
                            contentMask = Rectangle.new(this._root, {
                                width: this.width(),
                                height: this.height()
                            });
                            this._contentMask = contentMask;
                            childrenDisplay.addChildAt(contentMask._display, 0);
                            childrenDisplay.mask = contentMask._display;
                        }
                    }
                    else {
                        if (contentMask) {
                            childrenDisplay.removeChild(contentMask._display);
                            childrenDisplay.mask = null;
                            contentMask.dispose();
                        }
                    }
                }
            }
        });
        Object.defineProperty(Container.prototype, "_updateSize", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._updateSize.call(this);
                each$1(this._percentageSizeChildren, function (child) {
                    child._updateSize();
                });
                each$1(this._percentagePositionChildren, function (child) {
                    child.markDirtyPosition();
                    child._updateSize();
                });
                this.updateBackground();
            }
        });
        Object.defineProperty(Container.prototype, "updateBackground", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var background = this.get("background");
                var bounds = this._localBounds;
                if (bounds && !this.isHidden()) {
                    var x = bounds.left;
                    var y = bounds.top;
                    var w = bounds.right - x;
                    var h = bounds.bottom - y;
                    var width = this.width();
                    var height = this.height();
                    if (background) {
                        background.setAll({ width: w, height: h, x: x, y: y });
                        if (this._display.interactive) {
                            background._display.interactive = true;
                        }
                    }
                    var contentMask = this._contentMask;
                    if (contentMask) {
                        contentMask.setAll({ width: width, height: height });
                    }
                    var verticalScrollbar = this.get("verticalScrollbar");
                    if (verticalScrollbar) {
                        verticalScrollbar.set("height", height);
                        verticalScrollbar.set("x", width - verticalScrollbar.width() - verticalScrollbar.get("marginRight", 0));
                        verticalScrollbar.set("end", verticalScrollbar.get("start", 0) + height / this._contentHeight);
                        var bg = verticalScrollbar.get("background");
                        if (bg) {
                            bg.setAll({ width: verticalScrollbar.width(), height: height });
                        }
                        var visible = true;
                        if (this._contentHeight <= height) {
                            visible = false;
                        }
                        verticalScrollbar.setPrivate("visible", visible);
                    }
                }
            }
        });
        Object.defineProperty(Container.prototype, "_applyThemes", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (_super.prototype._applyThemes.call(this)) {
                    this.eachChildren(function (child) {
                        child._applyThemes();
                    });
                    return true;
                }
                else {
                    return false;
                }
            }
        });
        Object.defineProperty(Container.prototype, "_applyState", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (name) {
                _super.prototype._applyState.call(this, name);
                if (this.get("setStateOnChildren")) {
                    this.eachChildren(function (child) {
                        child.states.apply(name);
                    });
                }
            }
        });
        Object.defineProperty(Container.prototype, "_applyStateAnimated", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (name, duration) {
                _super.prototype._applyStateAnimated.call(this, name, duration);
                if (this.get("setStateOnChildren")) {
                    this.eachChildren(function (child) {
                        child.states.applyAnimate(name, duration);
                    });
                }
            }
        });
        /**
         * Returns container's inner width (width without padding) in pixels.
         *
         * @return Inner width (px)
         */
        Object.defineProperty(Container.prototype, "innerWidth", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this.width() - this.get("paddingRight", 0) - this.get("paddingLeft", 0);
            }
        });
        /**
         * Returns container's inner height (height without padding) in pixels.
         *
         * @return Inner height (px)
         */
        Object.defineProperty(Container.prototype, "innerHeight", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this.height() - this.get("paddingTop", 0) - this.get("paddingBottom", 0);
            }
        });
        Object.defineProperty(Container.prototype, "_getBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var width = this.get("width");
                var height = this.get("height");
                var pWidth = this.getPrivate("width");
                var pHeight = this.getPrivate("height");
                var bounds = {
                    left: 0,
                    top: 0,
                    right: this.width(),
                    bottom: this.height(),
                };
                var layout = this.get("layout");
                var horizontal = false;
                var vertical = false;
                if (layout instanceof HorizontalLayout || layout instanceof GridLayout) {
                    horizontal = true;
                }
                if (layout instanceof VerticalLayout) {
                    vertical = true;
                }
                if ((width != null || pWidth != null) && (height != null || pHeight != null) && !this.get("verticalScrollbar")) ;
                else {
                    var m = Number.MAX_VALUE;
                    var l_1 = m;
                    var r_1 = -m;
                    var t_1 = m;
                    var b_1 = -m;
                    var paddingLeft = this.get("paddingLeft", 0);
                    var paddingTop = this.get("paddingTop", 0);
                    var paddingRight = this.get("paddingRight", 0);
                    var paddingBottom = this.get("paddingBottom", 0);
                    this.children.each(function (child) {
                        if (child.get("position") != "absolute" && child.get("isMeasured")) {
                            var childBounds = child.adjustedLocalBounds();
                            var childX = child.x();
                            var childY = child.y();
                            var cl = childX + childBounds.left;
                            var cr = childX + childBounds.right;
                            var ct = childY + childBounds.top;
                            var cb = childY + childBounds.bottom;
                            if (horizontal) {
                                cl -= child.get("marginLeft", 0);
                                cr += child.get("marginRight", 0);
                            }
                            if (vertical) {
                                ct -= child.get("marginTop", 0);
                                cb += child.get("marginBottom", 0);
                            }
                            if (cl < l_1) {
                                l_1 = cl;
                            }
                            if (cr > r_1) {
                                r_1 = cr;
                            }
                            if (ct < t_1) {
                                t_1 = ct;
                            }
                            if (cb > b_1) {
                                b_1 = cb;
                            }
                        }
                    });
                    if (l_1 == m) {
                        l_1 = 0;
                    }
                    if (r_1 == -m) {
                        r_1 = 0;
                    }
                    if (t_1 == m) {
                        t_1 = 0;
                    }
                    if (b_1 == -m) {
                        b_1 = 0;
                    }
                    bounds.left = l_1 - paddingLeft;
                    bounds.top = t_1 - paddingTop;
                    bounds.right = r_1 + paddingRight;
                    bounds.bottom = b_1 + paddingBottom;
                }
                this._contentWidth = bounds.right - bounds.left;
                this._contentHeight = bounds.bottom - bounds.top;
                if (isNumber(width)) {
                    bounds.left = 0;
                    bounds.right = width;
                }
                if (isNumber(pWidth)) {
                    bounds.left = 0;
                    bounds.right = pWidth;
                }
                if (isNumber(height)) {
                    bounds.top = 0;
                    bounds.bottom = height;
                }
                if (isNumber(pHeight)) {
                    bounds.top = 0;
                    bounds.bottom = pHeight;
                }
                this._localBounds = bounds;
            }
        });
        Object.defineProperty(Container.prototype, "_updateBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var layout = this.get("layout");
                if (layout) {
                    layout.updateContainer(this);
                }
                _super.prototype._updateBounds.call(this);
                this.updateBackground();
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Container.prototype, "markDirty", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype.markDirty.call(this);
                this._root._addDirtyParent(this);
            }
        });
        Object.defineProperty(Container.prototype, "_prepareChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var innerWidth = this.innerWidth();
                var innerHeight = this.innerHeight();
                if (innerWidth != this._prevWidth || innerHeight != this._prevHeight) {
                    var layout = this.get("layout");
                    var horizontal_1 = false;
                    var vertical_1 = false;
                    if (layout) {
                        if (layout instanceof HorizontalLayout || layout instanceof GridLayout) {
                            horizontal_1 = true;
                        }
                        if (layout instanceof VerticalLayout) {
                            vertical_1 = true;
                        }
                    }
                    each$1(this._percentageSizeChildren, function (child) {
                        if (!horizontal_1) {
                            var width = child.get("width");
                            if (width instanceof Percent) {
                                child.setPrivate("width", width.value * innerWidth);
                            }
                        }
                        if (!vertical_1) {
                            var height = child.get("height");
                            if (height instanceof Percent) {
                                child.setPrivate("height", height.value * innerHeight);
                            }
                        }
                    });
                    each$1(this._percentagePositionChildren, function (child) {
                        child.markDirtyPosition();
                        child.markDirtyBounds();
                    });
                    this._prevWidth = innerWidth;
                    this._prevHeight = innerHeight;
                    this._sizeDirty = true;
                    this.updateBackground();
                }
                this._handleStates();
            }
        });
        Object.defineProperty(Container.prototype, "_updateChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                if (this.isDirty("verticalScrollbar")) {
                    var verticalScrollbar_1 = this.get("verticalScrollbar");
                    if (verticalScrollbar_1) {
                        verticalScrollbar_1._setParent(this);
                        verticalScrollbar_1.children.removeValue(verticalScrollbar_1.startGrip);
                        verticalScrollbar_1.children.removeValue(verticalScrollbar_1.endGrip);
                        this.set("maskContent", true);
                        this.set("paddingRight", verticalScrollbar_1.width() + verticalScrollbar_1.get("marginRight", 0) + verticalScrollbar_1.get("marginLeft", 0));
                        var background = this.get("background");
                        if (!background) {
                            background = this.set("background", Rectangle.new(this._root, {
                                themeTags: ["background"],
                                fillOpacity: 0,
                                fill: this._root.interfaceColors.get("alternativeBackground")
                            }));
                        }
                        this._disposers.push(this.events.on("wheel", function (event) {
                            var wheelEvent = event.originalEvent;
                            // Ignore wheel event if it is happening on a non-chart element, e.g. if
                            // some page element is over the chart.
                            if (isLocalEvent(wheelEvent, _this)) {
                                wheelEvent.preventDefault();
                            }
                            else {
                                return;
                            }
                            var shiftY = wheelEvent.deltaY / 5000;
                            var start = verticalScrollbar_1.get("start", 0);
                            var end = verticalScrollbar_1.get("end", 1);
                            if (start + shiftY > 0 && end + shiftY < 1) {
                                verticalScrollbar_1.set("start", start + shiftY);
                                verticalScrollbar_1.set("end", end + shiftY);
                            }
                        }));
                        this._disposers.push(verticalScrollbar_1.events.on("rangechanged", function () {
                            var h = _this._contentHeight;
                            var childrenDisplay = _this._childrenDisplay;
                            var contentMask = _this._contentMask;
                            childrenDisplay.y = -verticalScrollbar_1.get("start") * h;
                            childrenDisplay.markDirtyLayer();
                            if (contentMask) {
                                contentMask._display.y = -childrenDisplay.y;
                                childrenDisplay.mask = contentMask._display;
                            }
                        }));
                        this._display.addChild(verticalScrollbar_1._display);
                    }
                }
                if (this.isDirty("background")) {
                    // TODO maybe this should dispose ?
                    var previous = this._prevSettings["background"];
                    if (previous) {
                        this._display.removeChild(previous._display);
                    }
                    var background = this.get("background");
                    if (background instanceof Sprite) {
                        background.set("isMeasured", false);
                        background._setParent(this);
                        this._display.addChildAt(background._display, 0);
                    }
                }
                if (this.isDirty("mask")) {
                    var mask = this.get("mask");
                    var previous = this._prevSettings["mask"];
                    if (previous) {
                        this._display.removeChild(previous._display);
                        if (previous != mask) {
                            previous.dispose();
                        }
                    }
                    if (mask) {
                        var parent = mask.parent;
                        if (parent) {
                            parent.children.removeValue(mask);
                        }
                        mask._setParent(this);
                        this._display.addChildAt(mask._display, 0);
                        this._childrenDisplay.mask = mask._display;
                    }
                }
            }
        });
        Object.defineProperty(Container.prototype, "_processTemplateField", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._processTemplateField.call(this);
                this.children.each(function (child) {
                    child._processTemplateField();
                });
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Container.prototype, "walkChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (f) {
                this.children.each(function (child) {
                    if (child instanceof Container) {
                        child.walkChildren(f);
                    }
                    f(child);
                });
            }
        });
        Object.defineProperty(Container.prototype, "eachChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (f) {
                var background = this.get("background");
                if (background) {
                    f(background);
                }
                var verticalScrollbar = this.get("verticalScrollbar");
                if (verticalScrollbar) {
                    f(verticalScrollbar);
                }
                var mask = this.get("mask");
                if (mask) {
                    f(mask);
                }
                this.children.values.forEach(function (child) {
                    f(child);
                });
            }
        });
        Object.defineProperty(Container.prototype, "allChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var output = [];
                this.eachChildren(function (x) {
                    output.push(x);
                });
                return output;
            }
        });
        Object.defineProperty(Container, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Container"
        });
        Object.defineProperty(Container, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Sprite.classNames.concat([Container.className])
        });
        return Container;
    }(Sprite));

    var TextFormatter = /** @class */ (function () {
        function TextFormatter() {
        }
        /**
         * Replaces brackets with temporary placeholders.
         *
         * @ignore Exclude from docs
         * @param text  Input text
         * @return Escaped text
         */
        Object.defineProperty(TextFormatter, "escape", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (text) {
                return text.
                    replace(/\[\[/g, this.prefix + "1").
                    replace(/([^\/\]]{1})\]\]/g, "$1" + this.prefix + "2").
                    replace(/\]\]/g, this.prefix + "2").
                    replace(/\{\{/g, this.prefix + "3").
                    replace(/\}\}/g, this.prefix + "4").
                    replace(/\'\'/g, this.prefix + "5");
            }
        });
        /**
         * Replaces placeholders back to brackets.
         *
         * @ignore Exclude from docs
         * @param text  Escaped text
         * @return Unescaped text
         */
        Object.defineProperty(TextFormatter, "unescape", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (text) {
                return text.
                    replace(new RegExp(this.prefix + "1", "g"), "[[").
                    replace(new RegExp(this.prefix + "2", "g"), "]]").
                    replace(new RegExp(this.prefix + "3", "g"), "{{").
                    replace(new RegExp(this.prefix + "4", "g"), "}}").
                    replace(new RegExp(this.prefix + "5", "g"), "''");
            }
        });
        /**
         * Cleans up the text text for leftover double square brackets.
         *
         * @ignore Exclude from docs
         * @param text  Input text
         * @return Cleaned up text
         */
        Object.defineProperty(TextFormatter, "cleanUp", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (text) {
                return text.
                    replace(/\[\[/g, "[").
                    replace(/\]\]/g, "]").
                    replace(/\{\{/g, "{").
                    replace(/\}\}/g, "}").
                    replace(/\'\'/g, "'");
            }
        });
        /**
         * Splits string into chunks. (style blocks, quoted blocks, regular blocks)
         *
         * If the second parameter `quotedBlocks` is set to `true` this method will
         * also single out text blocks enclosed within single quotes that no
         * formatting should be applied to, and they should be displayed as is.
         *
         * Default for the above is `false`, so that you can use single quote in text
         * without escaping it.
         *
         * If enabled, single quotes can be escaped by doubling it - adding two
         * single quotes, which will be replaced by a one single quote in the final
         * output.
         *
         * @ignore Exclude from docs
         * @param text          Text to chunk
         * @param quotedBlocks  Use quoted blocks
         * @param noFormatting  Formatting blocks will be treated as regular text
         * @return Array of string chunks
         */
        Object.defineProperty(TextFormatter, "chunk", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (text, quotedBlocks, noFormatting) {
                if (quotedBlocks === void 0) { quotedBlocks = false; }
                if (noFormatting === void 0) { noFormatting = false; }
                // Init result
                var res = [];
                // Replace double (escaped) square spaces and quotes with temporary codes
                text = this.escape(text);
                // Deal with style blocks
                var chunks = quotedBlocks ? text.split("'") : [text];
                for (var i = 0; i < chunks.length; i++) {
                    var chunk = chunks[i];
                    // Empty?
                    if (chunk === "") {
                        continue;
                    }
                    if ((i % 2) === 0) {
                        // Text outside quotes
                        // Parse for style blocks which are "text" chunks, the rest chunks are
                        // "value"
                        chunk = chunk.replace(/\]\[/g, "]" + PLACEHOLDER + "[");
                        chunk = chunk.replace(/\[\]/g, "[ ]");
                        var chunks2 = chunk.split(/[\[\]]+/);
                        for (var i2 = 0; i2 < chunks2.length; i2++) {
                            var chunk2 = this.cleanUp(this.unescape(chunks2[i2]));
                            // Placeholder?
                            if (chunk2 === PLACEHOLDER) {
                                continue;
                            }
                            // Empty?
                            if (chunk2 === "") {
                                continue;
                            }
                            // Block or value
                            if ((i2 % 2) === 0) {
                                res.push({
                                    "type": "value",
                                    "text": chunk2
                                });
                            }
                            else {
                                res.push({
                                    "type": noFormatting ? "value" : "format",
                                    "text": "[" + chunk2 + "]"
                                });
                            }
                        }
                    }
                    else {
                        // A text within doublequotes
                        // All chunks are "text"
                        var chunks2 = chunk.split(/[\[\]]+/);
                        for (var i2 = 0; i2 < chunks2.length; i2++) {
                            var chunk2 = this.cleanUp(this.unescape(chunks2[i2]));
                            // Empty?
                            if (chunk2 === "") {
                                continue;
                            }
                            // Block or text
                            if ((i2 % 2) === 0) {
                                res.push({
                                    "type": "text",
                                    "text": chunk2
                                });
                            }
                            else if (this.isImage(chunk2)) {
                                res.push({
                                    "type": "image",
                                    "text": "[" + chunk2 + "]"
                                });
                            }
                            else {
                                res.push({
                                    "type": "format",
                                    "text": "[" + chunk2 + "]"
                                });
                            }
                        }
                    }
                }
                return res;
            }
        });
        /**
         * Checks if supplied format contains image information and should be
         * formatted as such.
         * I.e.: `[img: myImage.png]`
         *
         * @ignore
         * @param  text  Format
         * @return true if it is an image
         */
        Object.defineProperty(TextFormatter, "isImage", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (text) {
                return text.match(/img[ ]?:/) ? true : false;
            }
        });
        Object.defineProperty(TextFormatter, "getTextStyle", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (style) {
                // let textStyle: string[] = [];
                // let textFill: string | undefined;
                var format = {};
                if (style == "" || style == "[ ]") {
                    return {};
                }
                // Pre-process quoted text
                var q = style.match(/('[^']*')|("[^"]*")/gi);
                if (q) {
                    for (var i = 0; i < q.length; i++) {
                        style = style.replace(q[i], q[i].replace(/['"]*/g, "").replace(/[ ]+/g, "+"));
                    }
                }
                // Get style parts
                var b = style.match(/([\w\-]*:[\s]?[^;\s\]]*)|(\#[\w]{1,6})|([\w\-]+)|(\/)/gi);
                // Empty?
                if (!b) {
                    return {};
                }
                // Check each part
                for (var i = 0; i < b.length; i++) {
                    if (b[i].match(/^(normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900)$/i)) {
                        format.fontWeight = b[i];
                    }
                    else if (b[i].match(/^(underline|line-through)$/i)) {
                        format.textDecoration = b[i];
                    }
                    else if (b[i] == "/") ;
                    else if (!b[i].match(/:/)) {
                        // Color
                        format.fill = Color.fromString(b[i]);
                    }
                    else {
                        var p = b[i].replace("+", " ").split(/:[ ]*/);
                        format[p[0]] = p[1];
                        //textStyle.push(b[i].replace(/^[a-zA-Z]:[ ]*/, ""));
                        //b[i] = b[i].replace(/\+/g, " ");
                    }
                }
                return format;
            }
        });
        Object.defineProperty(TextFormatter, "prefix", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "__amcharts__"
        });
        return TextFormatter;
    }());

    /** @ignore */ /** */
    /**
     * @ignore
     */
    function populateString(target, string) {
        if (string != null) {
            string = "" + string;
            string = TextFormatter.escape(string);
            var tags = string.match(/\{([^}]+)\}/g);
            var i = void 0;
            if (tags) {
                for (i = 0; i < tags.length; i++) {
                    var tag = tags[i].replace(/\{([^}]+)\}/, "$1");
                    var value = getTagValue(target, tag);
                    if (value == null) {
                        value = "";
                    }
                    string = string.split(tags[i]).join(value);
                }
            }
            string = TextFormatter.unescape(string);
        }
        else {
            string = "";
        }
        // TODO: apply adapter?
        return string;
    }
    /**
     * @ignore
     */
    function getTagValue(target, tagName, format) {
        var value;
        var dataItem = target.dataItem;
        // Parse parts
        var parts = [];
        var reg = /([^.]+)\(([^)]*)\)|([^.]+)/g;
        var matches;
        while (true) {
            matches = reg.exec(tagName);
            if (matches === null) {
                break;
            }
            if (matches[3]) {
                // Simple property
                parts.push({
                    prop: matches[3]
                });
                // Check if maybe we should force a formatter on this value
                var dateFields = target.getDateFormatter().get("dateFields", []);
                var numericFields = target.getNumberFormatter().get("numericFields", []);
                var durationFields = target.getDurationFormatter().get("durationFields", []);
                if (dateFields.indexOf(matches[3]) !== -1) {
                    parts.push({
                        method: "formatDate",
                        params: []
                    });
                }
                else if (numericFields.indexOf(matches[3]) !== -1) {
                    parts.push({
                        method: "formatNumber",
                        params: []
                    });
                }
                else if (durationFields.indexOf(matches[3]) !== -1) {
                    parts.push({
                        method: "formatDuration",
                        params: []
                    });
                }
            }
            else {
                // Method
                // Parse parameters
                var params = [];
                if (trim(matches[2]) != "") {
                    var reg2 = /'([^']*)'|"([^"]*)"|([0-9\-]+)/g;
                    var matches2 = void 0;
                    while (true) {
                        matches2 = reg2.exec(matches[2]);
                        if (matches2 === null) {
                            break;
                        }
                        params.push(matches2[1] || matches2[2] || matches2[3]);
                    }
                }
                parts.push({
                    method: matches[1],
                    params: params
                });
            }
        }
        // Check if we can retrieve the value from data item
        if (dataItem) {
            // Check values
            value = getTagValueFromObject(target, parts, dataItem._settings);
            // Check properties
            if (value == null || isObject(value)) { // isObject helps to solve problem with date axis, as for example dateX will get dateX from values object and won't get to the dateX date.
                value = getTagValueFromObject(target, parts, dataItem);
            }
            // Check data context
            var dataContext = dataItem.dataContext;
            if (value == null && dataContext) {
                value = getTagValueFromObject(target, parts, dataContext);
                // Maybe it's a literal dot-separated name of the key in dataContext?
                if (value == null) {
                    value = getTagValueFromObject(target, [{
                            prop: tagName
                        }], dataContext);
                }
                // scond data context level sometimes exist (tree map)
                if (value == null && dataContext.dataContext) {
                    value = getTagValueFromObject(target, parts, dataContext.dataContext);
                }
            }
            // Check component's data item
            if (value == null && dataItem.component && dataItem.component.dataItem !== dataItem) {
                value = getTagValue(dataItem.component, tagName);
            }
        }
        // Check sprite's properties
        if (value == null) {
            value = getTagValueFromObject(target, parts, target);
        }
        // Finally, check the parent
        if (value == null && target.parent) {
            value = getTagValue(target.parent, tagName);
        }
        return value;
    }
    /**
     * @ignore
     */
    function getCustomDataValue(target, prop) {
        var customData = target.getPrivate("customData");
        if (isObject(customData)) {
            return customData[prop];
        }
    }
    /**
     * @ignore
     */
    function getTagValueFromObject(target, parts, object, format) {
        var current = object;
        var formatApplied = false;
        for (var i = 0, len = parts.length; i < len; i++) {
            var part = parts[i];
            if (part.prop) {
                // Regular property
                if (current instanceof Sprite) {
                    var tmp = current.get(part.prop);
                    if (tmp == null)
                        tmp = current.getPrivate(part.prop);
                    if (tmp == null)
                        tmp = current[part.prop];
                    if (tmp == null)
                        tmp = getCustomDataValue(current, part.prop);
                    current = tmp;
                }
                else if (current.get) {
                    var tmp = current.get(part.prop);
                    if (tmp == null)
                        tmp = current[part.prop];
                    current = tmp;
                }
                else {
                    current = current[part.prop];
                }
                if (current == null) {
                    // Not set, return undefined
                    return;
                }
            }
            else {
                // Method
                switch (part.method) {
                    case "formatNumber":
                        var numberValue = toNumber(current);
                        if (numberValue != null) {
                            current = target.getNumberFormatter().format(numberValue, format || part.params[0] || undefined);
                            formatApplied = true;
                        }
                        break;
                    case "formatDate":
                        var dateValue = toDate(current);
                        if (!isDate(dateValue) || isNaN$1(dateValue.getTime())) {
                            // Was not able to get date out of value, quitting and letting
                            // calling method try another value
                            return;
                        }
                        if (dateValue != null) {
                            current = target.getDateFormatter().format(dateValue, format || part.params[0] || undefined);
                            formatApplied = true;
                        }
                        break;
                    case "formatDuration":
                        var durationValue = toNumber(current);
                        if (durationValue != null) {
                            current = target.getDurationFormatter().format(durationValue, format || part.params[0] || undefined, part.params[1] || undefined);
                            formatApplied = true;
                        }
                        break;
                    case "urlEncode":
                    case "encodeURIComponent":
                        current = encodeURIComponent(current);
                        break;
                    default:
                        if (current[part.method]) {
                            current[part.method].apply(object, part.params);
                        }
                        break;
                }
            }
        }
        // Apply default format if it wasn't applied explicitly
        if (!formatApplied) {
            var formatParts = [{
                    method: "",
                    params: format
                }];
            if (format == null) {
                // Format is not set
                // Determine from the type of the value
                if (isNumber(current)) {
                    formatParts[0].method = "formatNumber";
                    formatParts[0].params = "";
                }
                else if (isDate(current)) {
                    formatParts[0].method = "formatDate";
                    formatParts[0].params = "";
                }
            }
            else {
                // Format set
                // Try to determine formatter based on the format
                var formatterType = getFormat(format);
                // format
                if (formatterType === "number") {
                    formatParts[0].method = "formatNumber";
                }
                else if (formatterType === "date") {
                    formatParts[0].method = "formatDate";
                }
                else if (formatterType === "duration") {
                    formatParts[0].method = "formatDuration";
                }
            }
            // Apply format
            if (formatParts[0].method) {
                current = getTagValueFromObject(target, formatParts, current);
            }
        }
        return current;
    }

    /**
     * @ignore Text is an internal class. Use Label instead.
     */
    var Text = /** @class */ (function (_super) {
        __extends(Text, _super);
        function Text() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "textStyle", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this._root._renderer.makeTextStyle()
            });
            Object.defineProperty(_this, "_display", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this._root._renderer.makeText("", _this.textStyle)
            });
            Object.defineProperty(_this, "_textStyles", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: [
                    "textAlign",
                    "fontFamily",
                    "fontSize",
                    "fontStyle",
                    "fontWeight",
                    "fontStyle",
                    "fontVariant",
                    "textDecoration",
                    "shadowColor",
                    "shadowBlur",
                    "shadowOffsetX",
                    "shadowOffsetY",
                    "shadowOpacity",
                    // "leading",
                    // "letterSpacing",
                    "lineHeight",
                    "baselineRatio",
                    //"padding",
                    // "stroke",
                    // "strokeThickness",
                    // "trim",
                    // "wordWrap",
                    "direction",
                    "textBaseline",
                    "oversizedBehavior",
                    "breakWords",
                    "ellipsis",
                    "minScale"
                ]
            });
            Object.defineProperty(_this, "_originalScale", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            return _this;
        }
        Object.defineProperty(Text.prototype, "_updateBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (!this.get("text")) {
                    var newBounds = {
                        left: 0,
                        right: 0,
                        top: 0,
                        bottom: 0,
                    };
                    this._adjustedLocalBounds = newBounds;
                }
                else {
                    _super.prototype._updateBounds.call(this);
                }
            }
        });
        Object.defineProperty(Text.prototype, "_changed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                _super.prototype._changed.call(this);
                this._display.clear();
                var textStyle = this.textStyle;
                if (this.isDirty("opacity")) {
                    var opacity = this.get("opacity", 1);
                    this._display.alpha = opacity;
                }
                if (this.isDirty("text") || this.isDirty("populateText")) {
                    this._display.text = this._getText();
                    this.markDirtyBounds();
                    if (this.get("role") == "tooltip") {
                        this._root.updateTooltip(this);
                    }
                }
                if (this.isDirty("width")) {
                    textStyle.wordWrapWidth = this.width();
                    this.markDirtyBounds();
                }
                if (this.isDirty("oversizedBehavior")) {
                    textStyle.oversizedBehavior = this.get("oversizedBehavior", "none");
                    this.markDirtyBounds();
                }
                if (this.isDirty("breakWords")) {
                    textStyle.breakWords = this.get("breakWords", false);
                    this.markDirtyBounds();
                }
                if (this.isDirty("ellipsis")) {
                    textStyle.ellipsis = this.get("ellipsis");
                    this.markDirtyBounds();
                }
                if (this.isDirty("ignoreFormatting")) {
                    textStyle.ignoreFormatting = this.get("ignoreFormatting", false);
                    this.markDirtyBounds();
                }
                if (this.isDirty("minScale")) {
                    textStyle.minScale = this.get("minScale", 0);
                    this.markDirtyBounds();
                }
                if (this.isDirty("fill")) {
                    var fill = this.get("fill");
                    if (fill) {
                        textStyle.fill = fill;
                    }
                }
                if (this.isDirty("maxWidth") || this.isPrivateDirty("maxWidth")) {
                    textStyle.maxWidth = this.get("maxWidth", this.getPrivate("maxWidth"));
                    this.markDirtyBounds();
                }
                if (this.isDirty("maxHeight") || this.isPrivateDirty("maxHeight")) {
                    textStyle.maxHeight = this.get("maxHeight", this.getPrivate("maxHeight"));
                    this.markDirtyBounds();
                }
                each$1(this._textStyles, function (styleName) {
                    if (_this._dirty[styleName]) {
                        textStyle[styleName] = _this.get(styleName);
                        _this.markDirtyBounds();
                    }
                });
                textStyle["fontSize"] = this.get("fontSize");
                textStyle["fontFamily"] = this.get("fontFamily");
                this._display.style = textStyle;
                if (this.isDirty("role") && this.get("role") == "tooltip") {
                    this._root.updateTooltip(this);
                }
            }
        });
        Object.defineProperty(Text.prototype, "_getText", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var text = this.get("text", "");
                return this.get("populateText") ? populateString(this, text) : text;
            }
        });
        Object.defineProperty(Text.prototype, "markDirtyText", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._display.text = this._getText();
                if (this.get("role") == "tooltip") {
                    this._root.updateTooltip(this);
                }
                this.markDirtyBounds();
                this.markDirty();
            }
        });
        Object.defineProperty(Text.prototype, "_setDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem) {
                _super.prototype._setDataItem.call(this, dataItem);
                if (this.get("populateText")) {
                    this.markDirtyText();
                }
            }
        });
        Object.defineProperty(Text, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Text"
        });
        Object.defineProperty(Text, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Sprite.classNames.concat([Text.className])
        });
        return Text;
    }(Sprite));

    /** @ignore */ /** */
    /**
     * @ignore
     */
    var Native = /** @class */ (function () {
        function Native() {
            var _this = this;
            Object.defineProperty(this, "_observer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_targets", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            this._observer = new ResizeObserver(function (entries) {
                each$1(entries, function (entry) {
                    each$1(_this._targets, function (x) {
                        if (x.target === entry.target) {
                            x.callback();
                        }
                    });
                });
            });
        }
        Object.defineProperty(Native.prototype, "addTarget", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (target, callback) {
                this._observer.observe(target, { box: "border-box" });
                this._targets.push({ target: target, callback: callback });
            }
        });
        Object.defineProperty(Native.prototype, "removeTarget", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (target) {
                this._observer.unobserve(target);
                keepIf(this._targets, function (x) {
                    return x.target !== target;
                });
            }
        });
        return Native;
    }());
    /**
     * @ignore
     */
    var Raf = /** @class */ (function () {
        function Raf() {
            Object.defineProperty(this, "_timer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: null
            });
            Object.defineProperty(this, "_targets", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
        }
        Object.defineProperty(Raf.prototype, "addTarget", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (target, callback) {
                var _this = this;
                if (this._timer === null) {
                    var lastTime_1 = null;
                    var loop_1 = function () {
                        var currentTime = Date.now();
                        if (lastTime_1 === null || currentTime > (lastTime_1 + Raf.delay)) {
                            lastTime_1 = currentTime;
                            each$1(_this._targets, function (x) {
                                var newSize = x.target.getBoundingClientRect();
                                if (newSize.width !== x.size.width || newSize.height !== x.size.height) {
                                    x.size = newSize;
                                    x.callback();
                                }
                            });
                        }
                        if (_this._targets.length === 0) {
                            _this._timer = null;
                        }
                        else {
                            _this._timer = requestAnimationFrame(loop_1);
                        }
                    };
                    this._timer = requestAnimationFrame(loop_1);
                }
                // We start off with fake bounds so that sensor always kicks in
                var size = { width: 0, height: 0, left: 0, right: 0, top: 0, bottom: 0, x: 0, y: 0 };
                this._targets.push({ target: target, callback: callback, size: size });
            }
        });
        Object.defineProperty(Raf.prototype, "removeTarget", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (target) {
                keepIf(this._targets, function (x) {
                    return x.target !== target;
                });
                if (this._targets.length === 0) {
                    if (this._timer !== null) {
                        cancelAnimationFrame(this._timer);
                        this._timer = null;
                    }
                }
            }
        });
        Object.defineProperty(Raf, "delay", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 200
        });
        return Raf;
    }());
    /**
     * @ignore
     */
    var observer = null;
    /**
     * @ignore
     */
    function makeSensor() {
        if (observer === null) {
            if (typeof ResizeObserver !== "undefined") {
                observer = new Native();
            }
            else {
                observer = new Raf();
            }
        }
        return observer;
    }
    /**
     * @ignore
     */
    var ResizeSensor = /** @class */ (function () {
        function ResizeSensor(element, callback) {
            Object.defineProperty(this, "_sensor", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_element", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_disposed", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            this._sensor = makeSensor();
            this._element = element;
            this._sensor.addTarget(element, callback);
        }
        Object.defineProperty(ResizeSensor.prototype, "isDisposed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this._disposed;
            }
        });
        Object.defineProperty(ResizeSensor.prototype, "dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (!this._disposed) {
                    this._disposed = true;
                    this._sensor.removeTarget(this._element);
                }
            }
        });
        Object.defineProperty(ResizeSensor.prototype, "sensor", {
            get: function () {
                return this._sensor;
            },
            enumerable: false,
            configurable: true
        });
        return ResizeSensor;
    }());

    /**
     * Presets for common UI elements.
     */
    var InterfaceColors = /** @class */ (function (_super) {
        __extends(InterfaceColors, _super);
        function InterfaceColors() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(InterfaceColors, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "InterfaceColors"
        });
        Object.defineProperty(InterfaceColors, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Entity.classNames.concat([InterfaceColors.className])
        });
        return InterfaceColors;
    }(Entity));

    /**
     * Creates a label with support for in-line styling and data bindings.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/labels/} for more info
     */
    var Label = /** @class */ (function (_super) {
        __extends(Label, _super);
        function Label() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_text", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_textKeys", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: [
                    "text",
                    "fill",
                    "textAlign",
                    "fontFamily",
                    "fontSize",
                    "fontStyle",
                    "fontWeight",
                    "fontStyle",
                    "fontVariant",
                    "textDecoration",
                    "shadowColor",
                    "shadowBlur",
                    "shadowOffsetX",
                    "shadowOffsetY",
                    "shadowOpacity",
                    // "leading",
                    // "letterSpacing",
                    "lineHeight",
                    "baselineRatio",
                    //"padding",
                    // "stroke",
                    // "strokeThickness",
                    // "trim",
                    // "wordWrap",
                    "direction",
                    "textBaseline",
                    "oversizedBehavior",
                    "breakWords",
                    "ellipsis",
                    "minScale",
                    "populateText",
                    "role",
                    "ignoreFormatting"
                ]
            });
            return _this;
        }
        Object.defineProperty(Label.prototype, "text", {
            /**
             * @ignore Text is not to be used directly
             */
            get: function () {
                return this._text;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Label.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                _super.prototype._afterNew.call(this);
                this._makeText();
                each$1(this._textKeys, function (property) {
                    var propValue = _this.get(property);
                    if (propValue != undefined) {
                        _this._text.set(property, propValue);
                    }
                });
            }
        });
        Object.defineProperty(Label.prototype, "_makeText", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._text = this.children.push(Text.new(this._root, {}));
            }
        });
        Object.defineProperty(Label.prototype, "_updateChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                _super.prototype._updateChildren.call(this);
                each$1(this._textKeys, function (property) {
                    _this._text.set(property, _this.get(property));
                });
                if (this.isDirty("maxWidth") || this.isPrivateDirty("maxWidth")) {
                    this._setMaxDimentions();
                }
                if (this.isDirty("maxHeight") || this.isPrivateDirty("maxHeight")) {
                    this._setMaxDimentions();
                }
                if (this.isDirty("rotation")) {
                    this._setMaxDimentions();
                }
                if (this.isDirty("textAlign") || this.isDirty("width")) {
                    var textAlign = this.get("textAlign");
                    var x = void 0;
                    if (this.get("width") != null) {
                        if (textAlign == "right") {
                            x = p100;
                        }
                        else if (textAlign == "center") {
                            x = p50;
                        }
                        else {
                            x = 0;
                        }
                    }
                    else {
                        if (textAlign == "left" || textAlign == "start") {
                            x = this.get("paddingLeft");
                        }
                        else if (textAlign == "right" || textAlign == "end") {
                            x = -this.get("paddingRight");
                        }
                    }
                    this.text.set("x", x);
                }
            }
        });
        Object.defineProperty(Label.prototype, "_setMaxDimentions", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var rotation = this.get("rotation");
                var vertical = rotation == 90 || rotation == 270;
                var maxWidth = this.get("maxWidth", this.getPrivate("maxWidth", Infinity));
                if (isNumber(maxWidth)) {
                    this.text.set(vertical ? "maxHeight" : "maxWidth", maxWidth - this.get("paddingLeft", 0) - this.get("paddingRight", 0));
                }
                else {
                    this.text.set(vertical ? "maxHeight" : "maxWidth", undefined);
                }
                var maxHeight = this.get("maxHeight", this.getPrivate("maxHeight", Infinity));
                if (isNumber(maxHeight)) {
                    this.text.set(vertical ? "maxWidth" : "maxHeight", maxHeight - this.get("paddingTop", 0) - this.get("paddingBottom", 0));
                }
                else {
                    this.text.set(vertical ? "maxWidth" : "maxHeight", undefined);
                }
            }
        });
        Object.defineProperty(Label.prototype, "_setDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem) {
                _super.prototype._setDataItem.call(this, dataItem);
                this._markDirtyKey("text");
                if (this.text.get("populateText")) {
                    this.text.markDirtyText();
                }
            }
        });
        /**
         * Returns text with populated placeholders and formatting if `populateText` is
         * set to `true`.
         *
         * @return Populated text
         */
        Object.defineProperty(Label.prototype, "getText", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this._text._getText();
            }
        });
        Object.defineProperty(Label, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Label"
        });
        Object.defineProperty(Label, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Container.classNames.concat([Label.className])
        });
        return Label;
    }(Container));

    /**
     * Draws a rectangle with a pointer.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info
     * @important
     */
    var PointedRectangle = /** @class */ (function (_super) {
        __extends(PointedRectangle, _super);
        function PointedRectangle() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(PointedRectangle.prototype, "_beforeChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._beforeChanged.call(this);
                if (this.isDirty("pointerBaseWidth") || this.isDirty("cornerRadius") || this.isDirty("pointerLength") || this.isDirty("pointerX") || this.isDirty("pointerY") || this.isDirty("width") || this.isDirty("height")) {
                    this._clear = true;
                }
            }
        });
        Object.defineProperty(PointedRectangle.prototype, "_changed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._changed.call(this);
                if (this._clear) {
                    this.markDirtyBounds();
                    var w = this.width();
                    var h = this.height();
                    if (w > 0 && h > 0) {
                        var cr = this.get("cornerRadius", 8);
                        cr = fitToRange(cr, 0, Math.min(w / 2, h / 2));
                        var x = this.get("pointerX", 0);
                        var y = this.get("pointerY", 0);
                        var bwh = this.get("pointerBaseWidth", 15) / 2;
                        // corner coordinates
                        // top left
                        var xtl = 0;
                        var ytl = 0;
                        // top right
                        var xtr = w;
                        var ytr = 0;
                        // bottom right
                        var xbr = w;
                        var ybr = h;
                        // bottom left
                        var xbl = 0;
                        var ybl = h;
                        // find stem base side: http://$math.stackexchange.com/questions/274712/calculate-on-which-side-of-straign-line-is-dot-located
                        // d=(x−x1)(y2−y1)−(y−y1)(x2−x1)
                        var d1 = (x - xtl) * (ybr - ytl) - (y - ytl) * (xbr - xtl);
                        var d2 = (x - xbl) * (ytr - ybl) - (y - ybl) * (xtr - xbl);
                        var display = this._display;
                        // top
                        display.moveTo(cr, 0);
                        if (d1 > 0 && d2 > 0) {
                            var stemX = Math.round(fitToRange(x, cr + bwh, w - bwh - cr));
                            y = fitToRange(y, -Infinity, 0);
                            display.lineTo(stemX - bwh, 0);
                            display.lineTo(x, y);
                            display.lineTo(stemX + bwh, 0);
                        }
                        display.lineTo(w - cr, 0);
                        display.arcTo(w, 0, w, cr, cr);
                        // right
                        if (d1 > 0 && d2 < 0) {
                            var stemY = Math.round(fitToRange(y, cr + bwh, h - bwh - cr));
                            x = fitToRange(x, w, Infinity);
                            display.lineTo(w, cr);
                            display.lineTo(w, stemY - bwh);
                            display.lineTo(x, y);
                            display.lineTo(w, stemY + bwh);
                        }
                        display.lineTo(w, h - cr);
                        display.arcTo(w, h, w - cr, h, cr);
                        // bottom
                        if (d1 < 0 && d2 < 0) {
                            var stemX = Math.round(fitToRange(x, cr + bwh, w - bwh - cr));
                            y = fitToRange(y, h, Infinity);
                            display.lineTo(w - cr, h);
                            display.lineTo(stemX + bwh, h);
                            display.lineTo(x, y);
                            display.lineTo(stemX - bwh, h);
                        }
                        display.lineTo(cr, h);
                        display.arcTo(0, h, 0, h - cr, cr);
                        // left
                        if (d1 < 0 && d2 > 0) {
                            var stemY = Math.round(fitToRange(y, cr + bwh, h - cr - bwh));
                            x = fitToRange(x, -Infinity, 0);
                            display.lineTo(0, h - cr);
                            display.lineTo(0, stemY + bwh);
                            display.lineTo(x, y);
                            display.lineTo(0, stemY - bwh);
                        }
                        display.lineTo(0, cr);
                        display.arcTo(0, 0, cr, 0, cr);
                    }
                }
            }
        });
        Object.defineProperty(PointedRectangle, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "PointedRectangle"
        });
        Object.defineProperty(PointedRectangle, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Graphics.classNames.concat([PointedRectangle.className])
        });
        return PointedRectangle;
    }(Graphics));

    /**
     * Creates a tooltip.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/tooltips/} for more info
     * @important
     */
    var Tooltip = /** @class */ (function (_super) {
        __extends(Tooltip, _super);
        function Tooltip() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_arrangeDisposer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_fx", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(_this, "_fy", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(_this, "_label", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_fillDp", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_strokeDp", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_labelDp", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_w", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(_this, "_h", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            return _this;
        }
        Object.defineProperty(Tooltip.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                this._settings.themeTags = mergeTags(this._settings.themeTags, ["tooltip"]);
                _super.prototype._afterNew.call(this);
                this.set("background", PointedRectangle.new(this._root, {
                    themeTags: ["tooltip", "background"]
                }));
                this._label = this.children.push(Label.new(this._root, {}));
                this._disposers.push(this._label.events.on("boundschanged", function () {
                    _this._updateBackground();
                }));
                this.on("bounds", function () {
                    _this._updateBackground();
                });
                this._updateTextColor();
                this._root.tooltipContainer.children.push(this);
                this.hide(0);
                this._root._tooltips.push(this);
            }
        });
        Object.defineProperty(Tooltip.prototype, "label", {
            /**
             * A [[Label]] element for the tooltip.
             *
             * @readonly
             * @return Label
             */
            get: function () {
                return this._label;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Permanently disposes the tooltip.
         */
        Object.defineProperty(Tooltip.prototype, "dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype.dispose.call(this);
                remove(this._root._tooltips, this);
            }
        });
        Object.defineProperty(Tooltip.prototype, "_updateChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._updateChildren.call(this);
                var labelText = this.get("labelText");
                if (labelText != null) {
                    this.label.set("text", this.get("labelText"));
                }
            }
        });
        Object.defineProperty(Tooltip.prototype, "_changed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._changed.call(this);
                if (this.isDirty("pointTo")) {
                    // can't compare to previous, as sometimes pointTo is set twice (when pointer moves, so the position won't be udpated)
                    this._updateBackground();
                }
                if (this.isDirty("tooltipTarget")) {
                    this.updateBackgroundColor();
                }
            }
        });
        Object.defineProperty(Tooltip.prototype, "_onShow", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._onShow.call(this);
                this.updateBackgroundColor();
            }
        });
        Object.defineProperty(Tooltip.prototype, "updateBackgroundColor", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                var tooltipTarget = this.get("tooltipTarget");
                var background = this.get("background");
                var fill;
                var stroke;
                if (tooltipTarget && background) {
                    fill = tooltipTarget.get("fill");
                    stroke = tooltipTarget.get("stroke");
                    if (fill == null) {
                        fill = stroke;
                    }
                    if (this.get("getFillFromSprite")) {
                        if (this._fillDp) {
                            this._fillDp.dispose();
                        }
                        if (fill != null) {
                            background.set("fill", fill);
                        }
                        this._fillDp = tooltipTarget.on("fill", function (fill) {
                            if (fill != null) {
                                background.set("fill", fill);
                                _this._updateTextColor(fill);
                            }
                        });
                    }
                    if (this.get("getStrokeFromSprite")) {
                        if (this._strokeDp) {
                            this._strokeDp.dispose();
                        }
                        if (fill != null) {
                            background.set("stroke", fill);
                        }
                        this._strokeDp = tooltipTarget.on("fill", function (fill) {
                            if (fill != null) {
                                background.set("stroke", fill);
                            }
                        });
                    }
                    if (this.get("getLabelFillFromSprite")) {
                        if (this._labelDp) {
                            this._labelDp.dispose();
                        }
                        if (fill != null) {
                            this.label.set("fill", fill);
                        }
                        this._labelDp = tooltipTarget.on("fill", function (fill) {
                            if (fill != null) {
                                _this.label.set("fill", fill);
                            }
                        });
                    }
                }
                this._updateTextColor(fill);
            }
        });
        Object.defineProperty(Tooltip.prototype, "_updateTextColor", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (fill) {
                if (this.get("autoTextColor")) {
                    if (fill == null) {
                        fill = this.get("background").get("fill");
                    }
                    if (fill == null) {
                        fill = this._root.interfaceColors.get("background");
                    }
                    if (fill instanceof Color) {
                        this.label.set("fill", Color.alternative(fill, this._root.interfaceColors.get("alternativeText"), this._root.interfaceColors.get("text")));
                    }
                }
            }
        });
        Object.defineProperty(Tooltip.prototype, "_setDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem) {
                _super.prototype._setDataItem.call(this, dataItem);
                this.label._setDataItem(dataItem);
            }
        });
        Object.defineProperty(Tooltip.prototype, "_updateBackground", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype.updateBackground.call(this);
                var parent = this._root.container;
                if (parent) {
                    var cw = 0.5;
                    var ch = 0.5;
                    var centerX = this.get("centerX");
                    if (centerX instanceof Percent) {
                        cw = centerX.value;
                    }
                    var centerY = this.get("centerY");
                    if (centerY instanceof Percent) {
                        ch = centerY.value;
                    }
                    var parentW = parent.width();
                    var parentH = parent.height();
                    var bounds = this.get("bounds", { left: 0, top: 0, right: parentW, bottom: parentH });
                    this._updateBounds();
                    var w = this.width();
                    var h = this.height();
                    // use old w and h,as when tooltip is hidden, these are 0 and unneeded animation happens
                    if (w === 0) {
                        w = this._w;
                    }
                    if (h === 0) {
                        h = this._h;
                    }
                    var pointTo = this.get("pointTo", { x: parentW / 2, y: parentH / 2 });
                    var x = pointTo.x;
                    var y = pointTo.y;
                    var pointerOrientation = this.get("pointerOrientation");
                    var background = this.get("background");
                    var pointerLength = 0;
                    var bgStrokeSizeY = 0;
                    var bgStrokeSizeX = 0;
                    if (background instanceof PointedRectangle) {
                        pointerLength = background.get("pointerLength", 0);
                        bgStrokeSizeY = background.get("strokeWidth", 0) / 2;
                        bgStrokeSizeX = bgStrokeSizeY;
                    }
                    var pointerX = 0;
                    var pointerY = 0;
                    var boundsW = bounds.right - bounds.left;
                    var boundsH = bounds.bottom - bounds.top;
                    // horizontal
                    if (pointerOrientation == "horizontal" || pointerOrientation == "left" || pointerOrientation == "right") {
                        bgStrokeSizeY = 0;
                        if (pointerOrientation == "horizontal") {
                            if (x > bounds.left + boundsW / 2) {
                                x -= (w * (1 - cw) + pointerLength);
                                bgStrokeSizeX *= -1;
                            }
                            else {
                                x += (w * cw + pointerLength);
                            }
                        }
                        else if (pointerOrientation == "left") {
                            x += (w * (1 - cw) + pointerLength);
                        }
                        else {
                            x -= (w * cw + pointerLength);
                            bgStrokeSizeX *= -1;
                        }
                    }
                    // vertical pointer
                    else {
                        bgStrokeSizeX = 0;
                        if (pointerOrientation == "vertical") {
                            if (y > bounds.top + h / 2 + pointerLength) {
                                y -= (h * (1 - ch) + pointerLength);
                            }
                            else {
                                y += (h * ch + pointerLength);
                                bgStrokeSizeY *= -1;
                            }
                        }
                        else if (pointerOrientation == "down") {
                            y -= (h * (1 - ch) + pointerLength);
                        }
                        else {
                            y += (h * ch + pointerLength);
                            bgStrokeSizeY *= -1;
                        }
                    }
                    x = fitToRange(x, bounds.left + w * cw, bounds.left + boundsW - w * (1 - cw)) + bgStrokeSizeX;
                    y = fitToRange(y, bounds.top + h * ch, bounds.top + boundsH - h * (1 - ch)) - bgStrokeSizeY;
                    pointerX = pointTo.x - x + w * cw + bgStrokeSizeX;
                    pointerY = pointTo.y - y + h * ch - bgStrokeSizeY;
                    this._fx = x;
                    this._fy = y;
                    var animationDuration = this.get("animationDuration", 0);
                    if (animationDuration > 0 && this.get("visible") && this.get("opacity") > 0.1) {
                        var animationEasing = this.get("animationEasing");
                        this.animate({ key: "x", to: x, duration: animationDuration, easing: animationEasing });
                        this.animate({ key: "y", to: y, duration: animationDuration, easing: animationEasing });
                    }
                    else {
                        this.set("x", x);
                        this.set("y", y);
                    }
                    if (background instanceof PointedRectangle) {
                        background.set("pointerX", pointerX);
                        background.set("pointerY", pointerY);
                    }
                    if (w > 0) {
                        this._w = w;
                    }
                    if (h > 0) {
                        this._h = h;
                    }
                }
            }
        });
        Object.defineProperty(Tooltip, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Tooltip"
        });
        Object.defineProperty(Tooltip, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Container.classNames.concat([Tooltip.className])
        });
        return Tooltip;
    }(Container));

    /**
     * Number formatter
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/formatters/formatting-numbers/} for more info
     * @important
     */
    var NumberFormatter = /** @class */ (function (_super) {
        __extends(NumberFormatter, _super);
        function NumberFormatter() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(NumberFormatter.prototype, "_setDefaults", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                // Defaults
                this._setDefault("negativeBase", 0);
                this._setDefault("numberFormat", "#,###.#####");
                this._setDefault("smallNumberThreshold", 1.00);
                var bns = "_big_number_suffix_";
                var sns = "_small_number_suffix_";
                var bs = "_byte_suffix_";
                this._setDefault("bigNumberPrefixes", [
                    { "number": 1e+3, "suffix": this._t(bns + "3") },
                    { "number": 1e+6, "suffix": this._t(bns + "6") },
                    { "number": 1e+9, "suffix": this._t(bns + "9") },
                    { "number": 1e+12, "suffix": this._t(bns + "12") },
                    { "number": 1e+15, "suffix": this._t(bns + "15") },
                    { "number": 1e+18, "suffix": this._t(bns + "18") },
                    { "number": 1e+21, "suffix": this._t(bns + "21") },
                    { "number": 1e+24, "suffix": this._t(bns + "24") }
                ]);
                this._setDefault("smallNumberPrefixes", [
                    { "number": 1e-24, "suffix": this._t(sns + "24") },
                    { "number": 1e-21, "suffix": this._t(sns + "21") },
                    { "number": 1e-18, "suffix": this._t(sns + "18") },
                    { "number": 1e-15, "suffix": this._t(sns + "15") },
                    { "number": 1e-12, "suffix": this._t(sns + "12") },
                    { "number": 1e-9, "suffix": this._t(sns + "9") },
                    { "number": 1e-6, "suffix": this._t(sns + "6") },
                    { "number": 1e-3, "suffix": this._t(sns + "3") }
                ]);
                this._setDefault("bytePrefixes", [
                    { "number": 1, suffix: this._t(bs + "B") },
                    { "number": 1024, suffix: this._t(bs + "KB") },
                    { "number": 1048576, suffix: this._t(bs + "MB") },
                    { "number": 1073741824, suffix: this._t(bs + "GB") },
                    { "number": 1099511627776, suffix: this._t(bs + "TB") },
                    { "number": 1125899906842624, suffix: this._t(bs + "PB") }
                ]);
                _super.prototype._setDefaults.call(this);
            }
        });
        Object.defineProperty(NumberFormatter.prototype, "_beforeChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._beforeChanged.call(this);
            }
        });
        /**
         * Formats the number according to specific format.
         *
         * @param value   Value to format
         * @param format  Format to apply
         * @return Formatted number
         */
        Object.defineProperty(NumberFormatter.prototype, "format", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value, format, precision) {
                // no format passed in or "Number"
                if (format == null || (isString(format) && format.toLowerCase() === "number")) {
                    format = this.get("numberFormat", "");
                }
                // Init return value
                var formatted;
                // Cast to number just in case
                // TODO: maybe use better casting
                var source = Number(value);
                // Is it a built-in format or Intl.NumberFormatOptions
                if (isObject(format)) {
                    try {
                        if (this.get("intlLocales")) {
                            return new Intl.NumberFormat(this.get("intlLocales"), format).format(source);
                        }
                        else {
                            return new Intl.NumberFormat(undefined, format).format(source);
                        }
                    }
                    catch (e) {
                        return "Invalid";
                    }
                }
                else {
                    // Clean format
                    format = cleanFormat(format);
                    // Get format info (it will also deal with parser caching)
                    var info = this.parseFormat(format, this._root.language);
                    // format and replace the number
                    var details = void 0;
                    if (source > this.get("negativeBase")) {
                        details = info.positive;
                    }
                    else if (source < this.get("negativeBase")) {
                        details = info.negative;
                    }
                    else {
                        details = info.zero;
                    }
                    // Adjust precision
                    if (precision != null && !details.mod) {
                        details = copy$1(details);
                        details.decimals.active = source == 0 ? 0 : precision;
                    }
                    // Format
                    formatted = details.template.split(PLACEHOLDER).join(this.applyFormat(source, details));
                }
                return formatted;
            }
        });
        /**
         * Parses supplied format into structured object which can be used to format
         * the number.
         *
         * @param format Format string, i.e. "#,###.00"
         * @param language Language
         * @ignore
         */
        Object.defineProperty(NumberFormatter.prototype, "parseFormat", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (format, language) {
                // Check cache
                // TODO
                // let cached = this.getCache(format);
                // if (cached != null) {
                // 	return cached;
                // }
                var _this = this;
                var thousandSeparator = language.translateEmpty("_thousandSeparator");
                var decimalSeparator = language.translateEmpty("_decimalSeparator");
                // init format parse info holder
                var info = {
                    "positive": {
                        "thousands": {
                            "active": -1,
                            "passive": -1,
                            "interval": -1,
                            "separator": thousandSeparator
                        },
                        "decimals": {
                            "active": -1,
                            "passive": -1,
                            "separator": decimalSeparator
                        },
                        "template": "",
                        "source": "",
                        "parsed": false
                    },
                    "negative": {
                        "thousands": {
                            "active": -1,
                            "passive": -1,
                            "interval": -1,
                            "separator": thousandSeparator
                        },
                        "decimals": {
                            "active": -1,
                            "passive": -1,
                            "separator": decimalSeparator
                        },
                        "template": "",
                        "source": "",
                        "parsed": false
                    },
                    "zero": {
                        "thousands": {
                            "active": -1,
                            "passive": -1,
                            "interval": -1,
                            "separator": thousandSeparator
                        },
                        "decimals": {
                            "active": -1,
                            "passive": -1,
                            "separator": decimalSeparator
                        },
                        "template": "",
                        "source": "",
                        "parsed": false
                    }
                };
                // Escape double vertical bars (that mean display one vertical bar)
                format = format.replace("||", PLACEHOLDER2);
                // Split it up and deal with different formats
                var parts = format.split("|");
                info.positive.source = parts[0];
                if (typeof parts[2] === "undefined") {
                    info.zero = info.positive;
                }
                else {
                    info.zero.source = parts[2];
                }
                if (typeof parts[1] === "undefined") {
                    info.negative = info.positive;
                }
                else {
                    info.negative.source = parts[1];
                }
                // Parse each
                each(info, function (_part, item) {
                    // Already parsed
                    if (item.parsed) {
                        return;
                    }
                    // Check cached
                    // TODO
                    // if (typeof this.getCache(item.source) !== "undefined") {
                    // 	info[part] = this.getCache(item.source);
                    // 	return;
                    // }
                    // Begin parsing
                    var partFormat = item.source;
                    // Just "Number"?
                    if (partFormat.toLowerCase() === "number") {
                        partFormat = _this.get("numberFormat", "#,###.#####");
                    }
                    // Let TextFormatter split into chunks
                    var chunks = TextFormatter.chunk(partFormat, true);
                    for (var i = 0; i < chunks.length; i++) {
                        var chunk = chunks[i];
                        // replace back double vertical bar
                        chunk.text = chunk.text.replace(PLACEHOLDER2, "|");
                        if (chunk.type === "value") {
                            // Parse format
                            // Look for codes
                            var matches = chunk.text.match(/[#0.,]+[ ]?[abesABES%!]?[abesABES‰!]?/);
                            if (matches) {
                                if (matches === null || matches[0] === "") {
                                    // no codes here - assume string
                                    // nothing to do here
                                    item.template += chunk.text;
                                }
                                else {
                                    // look for the format modifiers at the end
                                    var mods = matches[0].match(/[abesABES%‰!]{2}|[abesABES%‰]{1}$/);
                                    if (mods) {
                                        item.mod = mods[0].toLowerCase();
                                        item.modSpacing = matches[0].match(/[ ]{1}[abesABES%‰!]{1}$/) ? true : false;
                                    }
                                    // break the format up
                                    var a = matches[0].split(".");
                                    // Deal with thousands
                                    if (a[0] === "") ;
                                    else {
                                        // Counts
                                        item.thousands.active = (a[0].match(/0/g) || []).length;
                                        item.thousands.passive = (a[0].match(/\#/g) || []).length + item.thousands.active;
                                        // Separator interval
                                        var b = a[0].split(",");
                                        if (b.length === 1) ;
                                        else {
                                            // Use length fo the last chunk as thousands length
                                            item.thousands.interval = (b.pop() || "").length;
                                            if (item.thousands.interval === 0) {
                                                item.thousands.interval = -1;
                                            }
                                        }
                                    }
                                    // Deal with decimals
                                    if (typeof (a[1]) === "undefined") ;
                                    else {
                                        // Counts
                                        item.decimals.active = (a[1].match(/0/g) || []).length;
                                        item.decimals.passive = (a[1].match(/\#/g) || []).length + item.decimals.active;
                                    }
                                    // Add special code to template
                                    item.template += chunk.text.split(matches[0]).join(PLACEHOLDER);
                                }
                            }
                        }
                        else {
                            // Quoted string - take it as it is
                            item.template += chunk.text;
                        }
                    }
                    // Apply style formatting
                    //item.template = getTextFormatter().format(item.template, this.outputFormat);
                    // Save cache
                    // TODO
                    //this.setCache(item.source, item);
                    // Mark this as parsed
                    item.parsed = true;
                });
                // Save cache (the whole thing)
                // TODO
                //this.setCache(format, info);
                return info;
            }
        });
        /**
         * Applies parsed format to a numeric value.
         *
         * @param value    Value
         * @param details  Parsed format as returned by parseFormat()
         * @return Formatted number
         * @ignore
         */
        Object.defineProperty(NumberFormatter.prototype, "applyFormat", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value, details) {
                // Use absolute values
                var negative = value < 0;
                value = Math.abs(value);
                // Recalculate according to modifier
                var prefix = "", suffix = "";
                var mods = details.mod ? details.mod.split("") : [];
                if (mods.indexOf("b") !== -1) {
                    var a_1 = this.applyPrefix(value, this.get("bytePrefixes"), mods.indexOf("!") !== -1);
                    value = a_1[0];
                    prefix = a_1[1];
                    suffix = a_1[2];
                    if (details.modSpacing) {
                        suffix = " " + suffix;
                    }
                }
                else if (mods.indexOf("a") !== -1) {
                    var a_2 = this.applyPrefix(value, value < this.get("smallNumberThreshold") ? this.get("smallNumberPrefixes") : this.get("bigNumberPrefixes"), mods.indexOf("!") !== -1);
                    value = a_2[0];
                    prefix = a_2[1];
                    suffix = a_2[2];
                    if (details.modSpacing) {
                        suffix = " " + suffix;
                    }
                }
                else if (mods.indexOf("%") !== -1) {
                    var ol = Math.min(value.toString().length + 2, 21);
                    value *= 100;
                    value = parseFloat(value.toPrecision(ol));
                    suffix = "%";
                }
                else if (mods.indexOf("‰") !== -1) {
                    var ol = Math.min(value.toString().length + 3, 21);
                    value *= 1000;
                    value = parseFloat(value.toPrecision(ol));
                    suffix = "‰";
                }
                // Round to passive
                if (mods.indexOf("e") !== -1) {
                    // convert the value to exponential
                    var exp = void 0;
                    if (details.decimals.passive >= 0) {
                        exp = value.toExponential(details.decimals.passive).split("e");
                    }
                    else {
                        exp = value.toExponential().split("e");
                    }
                    value = Number(exp[0]);
                    suffix = "e" + exp[1];
                    if (details.modSpacing) {
                        suffix = " " + suffix;
                    }
                }
                else if (details.decimals.passive === 0) {
                    value = Math.round(value);
                }
                else if (details.decimals.passive > 0) {
                    var d = Math.pow(10, details.decimals.passive);
                    value = Math.round(value * d) / d;
                }
                // Init return value
                var res = "";
                // Calc integer and decimal parts
                var a = numberToString(value).split(".");
                // Format integers
                var ints = a[0];
                // Pad integers to active length
                if (ints.length < details.thousands.active) {
                    ints = Array(details.thousands.active - ints.length + 1).join("0") + ints;
                }
                // Insert thousands separators
                if (details.thousands.interval > 0) {
                    var ip = [];
                    var intsr = ints.split("").reverse().join("");
                    for (var i = 0, len = ints.length; i <= len; i += details.thousands.interval) {
                        var c = intsr.substr(i, details.thousands.interval).split("").reverse().join("");
                        if (c !== "") {
                            ip.unshift(c);
                        }
                    }
                    ints = ip.join(details.thousands.separator);
                }
                // Add integers
                res += ints;
                // Add decimals
                if (a.length === 1) {
                    a.push("");
                }
                var decs = a[1];
                // Fill zeros?
                if (decs.length < details.decimals.active) {
                    decs += Array(details.decimals.active - decs.length + 1).join("0");
                }
                if (decs !== "") {
                    res += details.decimals.separator + decs;
                }
                // Can't have empty return value
                if (res === "") {
                    res = "0";
                }
                // Add minus sign back
                if (value !== 0 && negative && (mods.indexOf("s") === -1)) {
                    res = "-" + res;
                }
                // Add suffixes/prefixes
                if (prefix) {
                    res = prefix + res;
                }
                if (suffix) {
                    res += suffix;
                }
                return res;
            }
        });
        Object.defineProperty(NumberFormatter.prototype, "applyPrefix", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value, prefixes, force) {
                if (force === void 0) { force = false; }
                var newvalue = value;
                var prefix = "";
                var suffix = "";
                var applied = false;
                var k = 1;
                for (var i = 0, len = prefixes.length; i < len; i++) {
                    if (prefixes[i].number <= value) {
                        if (prefixes[i].number === 0) {
                            newvalue = 0;
                        }
                        else {
                            newvalue = value / prefixes[i].number;
                            k = prefixes[i].number;
                        }
                        prefix = prefixes[i].prefix;
                        suffix = prefixes[i].suffix;
                        applied = true;
                    }
                }
                if (!applied && force && prefixes.length && value != 0) {
                    // Prefix was not applied. Use the first prefix.
                    newvalue = value / prefixes[0].number;
                    prefix = prefixes[0].prefix;
                    suffix = prefixes[0].suffix;
                    applied = true;
                }
                if (applied) {
                    newvalue = parseFloat(newvalue.toPrecision(Math.min(k.toString().length + Math.floor(newvalue).toString().replace(/[^0-9]*/g, "").length, 21)));
                }
                return [newvalue, prefix, suffix];
            }
        });
        /**
         * Replaces brackets with temporary placeholders.
         *
         * @ignore Exclude from docs
         * @param text  Input text
         * @return Escaped text
         */
        Object.defineProperty(NumberFormatter.prototype, "escape", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (text) {
                return text.replace("||", PLACEHOLDER2);
            }
        });
        /**
         * Replaces placeholders back to brackets.
         *
         * @ignore Exclude from docs
         * @param text  Escaped text
         * @return Unescaped text
         */
        Object.defineProperty(NumberFormatter.prototype, "unescape", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (text) {
                return text.replace(PLACEHOLDER2, "|");
            }
        });
        return NumberFormatter;
    }(Entity));

    var DateFormatter = /** @class */ (function (_super) {
        __extends(DateFormatter, _super);
        function DateFormatter() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(DateFormatter.prototype, "_setDefaults", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                // Defaults
                this._setDefault("capitalize", true);
                this._setDefault("dateFormat", "yyyy-MM-dd");
                _super.prototype._setDefaults.call(this);
            }
        });
        Object.defineProperty(DateFormatter.prototype, "_beforeChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._beforeChanged.call(this);
            }
        });
        Object.defineProperty(DateFormatter.prototype, "format", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (source, format) {
                // Locale?
                // TODO
                // No format passed in or it's empty
                if (typeof format === "undefined" || format === "") {
                    format = this.get("dateFormat", "yyyy-MM-dd");
                }
                // Init return value
                var formatted;
                // Cast?
                // TODO: decide if we need to cast
                var date = source;
                // Is it a built-in format or Intl.DateTimeFormat
                if (isObject(format)) {
                    try {
                        var locales = this.get("intlLocales");
                        if (locales) {
                            return new Intl.DateTimeFormat(locales, format).format(date);
                        }
                        else {
                            return new Intl.DateTimeFormat(undefined, format).format(date);
                        }
                    }
                    catch (e) {
                        return "Invalid";
                    }
                }
                // get format info (it will also deal with parser caching)
                var info = this.parseFormat(format);
                // Should we apply custom time zone?
                var timezone = this._root.timezone;
                if (timezone && !this._root.utc) {
                    date = timezone.convertLocal(date);
                }
                // Check if it's a valid date
                if (!isNumber(date.getTime())) {
                    // TODO translation
                    //return this._t("Invalid date");
                    return "Invalid date";
                }
                // Apply format
                formatted = this.applyFormat(date, info);
                // Capitalize
                if (this.get("capitalize")) {
                    formatted = formatted.replace(/^.{1}/, formatted.substr(0, 1).toUpperCase());
                }
                // We're done
                return formatted;
            }
        });
        /**
         * Applies format to Date.
         *
         * @param date      Date object
         * @param info      Parsed format information
         * @return Formatted date string
         */
        Object.defineProperty(DateFormatter.prototype, "applyFormat", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (date, info) {
                // Init return value
                var res = info.template;
                // Get values
                var fullYear, month, weekday, day, hours, minutes, seconds, milliseconds, offset = date.getTimezoneOffset(), timestamp = date.getTime();
                if (this._root.utc) {
                    fullYear = date.getUTCFullYear();
                    month = date.getUTCMonth();
                    weekday = date.getUTCDay();
                    day = date.getUTCDate();
                    hours = date.getUTCHours();
                    minutes = date.getUTCMinutes();
                    seconds = date.getUTCSeconds();
                    milliseconds = date.getUTCMilliseconds();
                }
                else {
                    fullYear = date.getFullYear();
                    month = date.getMonth();
                    weekday = date.getDay();
                    day = date.getDate();
                    hours = date.getHours();
                    minutes = date.getMinutes();
                    seconds = date.getSeconds();
                    milliseconds = date.getMilliseconds();
                }
                // Go through each part and format/replace it in template
                for (var i = 0, len = info.parts.length; i < len; i++) {
                    var value = "";
                    switch (info.parts[i]) {
                        case "G":
                            value = this._t(fullYear < 0
                                ? "_era_bc"
                                : "_era_ad");
                            break;
                        case "yyyy":
                            value = Math.abs(fullYear).toString();
                            if (fullYear < 0) {
                                value += this._t("_era_bc");
                            }
                            break;
                        case "yyy":
                        case "yy":
                        case "y":
                            value = Math.abs(fullYear).toString().substr(-info.parts[i].length);
                            if (fullYear < 0) {
                                value += this._t("_era_bc");
                            }
                            break;
                        case "YYYY":
                        case "YYY":
                        case "YY":
                        case "Y":
                            var week = getWeek(date);
                            var year = fullYear;
                            if (week == 1 && (weekday > 4)) {
                                year--;
                            }
                            if (info.parts[i] == "YYYY") {
                                value = Math.abs(year).toString();
                            }
                            else {
                                value = Math.abs(year).toString().substr(-info.parts[i].length);
                            }
                            if (year < 0) {
                                value += this._t("_era_bc");
                            }
                            break;
                        case "u":
                            // @todo
                            break;
                        case "q":
                            value = "" + Math.ceil((date.getMonth() + 1) / 3);
                            break;
                        case "MMMMM":
                            value = this._t(this._getMonth(month)).substr(0, 1);
                            break;
                        case "MMMM":
                            value = this._t(this._getMonth(month));
                            break;
                        case "MMM":
                            value = this._t(this._getShortMonth(month));
                            break;
                        case "MM":
                            value = padString(month + 1, 2, "0");
                            break;
                        case "M":
                            value = (month + 1).toString();
                            break;
                        case "ww":
                            value = padString(getWeek(date, this._root.utc), 2, "0");
                            break;
                        case "w":
                            value = getWeek(date, this._root.utc).toString();
                            break;
                        case "W":
                            value = getMonthWeek(date, this._root.utc).toString();
                            break;
                        case "dd":
                            value = padString(day, 2, "0");
                            break;
                        case "d":
                            value = day.toString();
                            break;
                        case "DD":
                        case "DDD":
                            value = padString(getYearDay(date, this._root.utc).toString(), info.parts[i].length, "0");
                            break;
                        case "D":
                            value = getYearDay(date, this._root.utc).toString();
                            break;
                        case "F":
                            // @todo
                            break;
                        case "g":
                            // @todo
                            break;
                        case "t":
                            value = this._root.language.translateFunc("_dateOrd").call(this, day);
                            break;
                        case "E":
                            value = (weekday || 7).toString();
                            break;
                        case "EE":
                            value = padString((weekday || 7).toString(), 2, "0");
                            break;
                        case "EEE":
                        case "eee":
                            value = this._t(this._getShortWeekday(weekday));
                            break;
                        case "EEEE":
                        case "eeee":
                            value = this._t(this._getShortWeekday(weekday));
                            break;
                        case "EEEEE":
                        case "eeeee":
                            value = this._t(this._getShortWeekday(weekday)).substr(0, 1);
                            break;
                        case "e":
                        case "ee":
                            value = (weekday - (this._root.locale.firstDayOfWeek || 1) + 1).toString();
                            if (info.parts[i] == "ee") {
                                value = padString(value, 2, "0");
                            }
                            break;
                        case "a":
                            if (hours >= 12) {
                                value = this._t("PM");
                            }
                            else {
                                value = this._t("AM");
                            }
                            break;
                        case "aa":
                            if (hours >= 12) {
                                value = this._t("P.M.");
                            }
                            else {
                                value = this._t("A.M.");
                            }
                            break;
                        case "aaa":
                            if (hours >= 12) {
                                value = this._t("P");
                            }
                            else {
                                value = this._t("A");
                            }
                            break;
                        case "h":
                            value = get12Hours(hours).toString();
                            break;
                        case "hh":
                            value = padString(get12Hours(hours), 2, "0");
                            break;
                        case "H":
                            value = hours.toString();
                            break;
                        case "HH":
                            value = padString(hours, 2, "0");
                            break;
                        case "K":
                            value = get12Hours(hours, 0).toString();
                            break;
                        case "KK":
                            value = padString(get12Hours(hours, 0), 2, "0");
                            break;
                        case "k":
                            value = (hours + 1).toString();
                            break;
                        case "kk":
                            value = padString(hours + 1, 2, "0");
                            break;
                        case "m":
                            value = minutes.toString();
                            break;
                        case "mm":
                            value = padString(minutes, 2, "0");
                            break;
                        case "s":
                            value = seconds.toString();
                            break;
                        case "ss":
                            value = padString(seconds, 2, "0");
                            break;
                        case "S":
                        case "SS":
                        case "SSS":
                            value = Math.round((milliseconds / 1000) * Math.pow(10, info.parts[i].length)).toString();
                            break;
                        case "x":
                            value = timestamp.toString();
                            break;
                        case "n":
                        case "nn":
                        case "nnn":
                            value = padString(milliseconds, info.parts[i].length, "0");
                            break;
                        case "z":
                            value = getTimeZone(date, false, false, this._root.utc);
                            break;
                        case "zz":
                            value = getTimeZone(date, true, false, this._root.utc);
                            break;
                        case "zzz":
                            value = getTimeZone(date, false, true, this._root.utc);
                            break;
                        case "zzzz":
                            value = getTimeZone(date, true, true, this._root.utc);
                            break;
                        case "Z":
                        case "ZZ":
                            var tz = Math.abs(offset) / 60;
                            var tzh = Math.floor(tz);
                            var tzm = tz * 60 - tzh * 60;
                            if (this._root.utc) {
                                tzh = 0;
                                tzm = 0;
                            }
                            if (info.parts[i] == "Z") {
                                value = "GMT";
                                value += offset > 0 ? "-" : "+";
                                value += padString(tzh, 2) + ":" + padString(tzm, 2);
                            }
                            else {
                                value = offset > 0 ? "-" : "+";
                                value += padString(tzh, 2) + padString(tzm, 2);
                            }
                            break;
                        case "i":
                            value = date.toISOString();
                            break;
                        case "I":
                            value = date.toUTCString();
                            break;
                    }
                    res = res.replace(PLACEHOLDER, value);
                }
                return res;
            }
        });
        /**
         * Parses format into structured infromation.
         *
         * @param format Format template
         */
        Object.defineProperty(DateFormatter.prototype, "parseFormat", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (format) {
                // Check cache
                // TODO: implement caching of the parsed format
                // Init format parse info holder
                var info = {
                    "template": "",
                    "parts": []
                };
                // Let TextFormatter split into chunks
                var chunks = TextFormatter.chunk(format, true);
                for (var i = 0; i < chunks.length; i++) {
                    var chunk = chunks[i];
                    if (chunk.type === "value") {
                        // Just "Date"?
                        if (chunk.text.match(/^date$/i)) {
                            var dateFormat = this.get("dateFormat", "yyyy-MM-dd");
                            if (!isString(dateFormat)) {
                                dateFormat = "yyyy-MM-dd";
                            }
                            chunk.text = dateFormat;
                        }
                        // Find all possible parts
                        var matches = chunk.text.match(/G|yyyy|yyy|yy|y|YYYY|YYY|YY|Y|u|q|MMMMM|MMMM|MMM|MM|M|ww|w|W|dd|d|DDD|DD|D|F|g|EEEEE|EEEE|EEE|EE|E|eeeee|eeee|eee|ee|e|aaa|aa|a|hh|h|HH|H|KK|K|kk|k|mm|m|ss|s|SSS|SS|S|A|zzzz|zzz|zz|z|ZZ|Z|t|x|nnn|nn|n|i|I/g);
                        // Found?
                        if (matches) {
                            // Populate template
                            for (var x = 0; x < matches.length; x++) {
                                info.parts.push(matches[x]);
                                chunk.text = chunk.text.replace(matches[x], PLACEHOLDER);
                            }
                        }
                    }
                    // Apply to template
                    info.template += chunk.text;
                }
                // Save cache
                // TODO
                return info;
            }
        });
        Object.defineProperty(DateFormatter.prototype, "_months", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
            }
        });
        Object.defineProperty(DateFormatter.prototype, "_getMonth", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (index) {
                return this._months()[index];
            }
        });
        Object.defineProperty(DateFormatter.prototype, "_shortMonths", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return ["Jan", "Feb", "Mar", "Apr", "May(short)", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
            }
        });
        Object.defineProperty(DateFormatter.prototype, "_getShortMonth", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (index) {
                return this._shortMonths()[index];
            }
        });
        Object.defineProperty(DateFormatter.prototype, "_weekdays", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
            }
        });
        Object.defineProperty(DateFormatter.prototype, "_getWeekday", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (index) {
                return this._weekdays()[index];
            }
        });
        Object.defineProperty(DateFormatter.prototype, "_shortWeekdays", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
            }
        });
        Object.defineProperty(DateFormatter.prototype, "_getShortWeekday", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (index) {
                return this._shortWeekdays()[index];
            }
        });
        Object.defineProperty(DateFormatter.prototype, "parse", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (source, format) {
                // Is it already a Date
                if (source instanceof Date) {
                    return source;
                }
                // Is it a numeric timestamp
                if (isNumber(source)) {
                    return new Date(source);
                }
                // No? Let's check if it's string, and try converting to it if nec
                if (!isString(source)) {
                    source = source.toString();
                }
                // Init return value
                var res;
                // Init RegEx for parsing
                var reg = "";
                // Clean format
                format = cleanFormat(format);
                // Clip format to length of the source string
                format = format.substr(0, source.length);
                // Parse format
                var info = this.parseFormat(format);
                // Init parsed items holder
                var parsedIndexes = {
                    "year": -1,
                    "year3": -1,
                    "year2": -1,
                    "year1": -1,
                    "month": -1,
                    "monthShort": -1,
                    "monthLong": -1,
                    "weekdayShort": -1,
                    "weekdayLong": -1,
                    "day": -1,
                    "yearDay": -1,
                    "week": -1,
                    "hourBase0": -1,
                    "hour12Base0": -1,
                    "hourBase1": -1,
                    "hour12Base1": -1,
                    "minute": -1,
                    "second": -1,
                    "millisecond": -1,
                    "millisecondDigits": -1,
                    "am": -1,
                    "zone": -1,
                    "timestamp": -1,
                    "iso": -1
                };
                // Init values
                var resValues = {
                    "year": 1970,
                    "month": 0,
                    "day": 1,
                    "hour": 0,
                    "minute": 0,
                    "second": 0,
                    "millisecond": 0,
                    "timestamp": null,
                    "offset": 0,
                    "utc": this._root.utc
                };
                // Index adjuster
                var indexAdjust = 0;
                var index = 0;
                // Iterate through all of the parts
                for (var i = 0; i < info.parts.length; i++) {
                    // Set current match index
                    index = i + indexAdjust + 1;
                    switch (info.parts[i]) {
                        case "yyyy":
                        case "YYYY":
                            reg += "([0-9]{4})";
                            parsedIndexes.year = index;
                            break;
                        case "yyy":
                        case "YYY":
                            reg += "([0-9]{3})";
                            parsedIndexes.year3 = index;
                            break;
                        case "yy":
                        case "YY":
                            reg += "([0-9]{2})";
                            parsedIndexes.year2 = index;
                            break;
                        case "y":
                        case "Y":
                            reg += "([0-9]{1})";
                            parsedIndexes.year1 = index;
                            break;
                        case "MMMM":
                            reg += "(" + this.getStringList(this._months()).join("|") + ")";
                            parsedIndexes.monthLong = index;
                            break;
                        case "MMM":
                            reg += "(" + this.getStringList(this._shortMonths()).join("|") + ")";
                            parsedIndexes.monthShort = index;
                            break;
                        case "MM":
                        case "M":
                            reg += "([0-9]{2}|[0-9]{1})";
                            parsedIndexes.month = index;
                            break;
                        case "ww":
                        case "w":
                            reg += "([0-9]{2}|[0-9]{1})";
                            parsedIndexes.week = index;
                            break;
                        case "dd":
                        case "d":
                            reg += "([0-9]{2}|[0-9]{1})";
                            parsedIndexes.day = index;
                            break;
                        case "DDD":
                        case "DD":
                        case "D":
                            reg += "([0-9]{3}|[0-9]{2}|[0-9]{1})";
                            parsedIndexes.yearDay = index;
                            break;
                        case "dddd":
                            reg += "(" + this.getStringList(this._weekdays()).join("|") + ")";
                            parsedIndexes.weekdayLong = index;
                            break;
                        case "ddd":
                            reg += "(" + this.getStringList(this._shortWeekdays()).join("|") + ")";
                            parsedIndexes.weekdayShort = index;
                            break;
                        case "aaa":
                        case "aa":
                        case "a":
                            // TODO: fix (escape regex)
                            reg += "(" + this.getStringList(["AM", "PM", "A\.M\.", "P\.M\.", "A", "P"]).join("|") + ")";
                            parsedIndexes.am = index;
                            break;
                        case "hh":
                        case "h":
                            reg += "([0-9]{2}|[0-9]{1})";
                            parsedIndexes.hour12Base1 = index;
                            break;
                        case "HH":
                        case "H":
                            reg += "([0-9]{2}|[0-9]{1})";
                            parsedIndexes.hourBase0 = index;
                            break;
                        case "KK":
                        case "K":
                            reg += "([0-9]{2}|[0-9]{1})";
                            parsedIndexes.hour12Base0 = index;
                            break;
                        case "kk":
                        case "k":
                            reg += "([0-9]{2}|[0-9]{1})";
                            parsedIndexes.hourBase1 = index;
                            break;
                        case "mm":
                        case "m":
                            reg += "([0-9]{2}|[0-9]{1})";
                            parsedIndexes.minute = index;
                            break;
                        case "ss":
                        case "s":
                            reg += "([0-9]{2}|[0-9]{1})";
                            parsedIndexes.second = index;
                            break;
                        case "SSS":
                        case "SS":
                        case "S":
                            reg += "([0-9]{3}|[0-9]{2}|[0-9]{1})";
                            parsedIndexes.millisecond = index;
                            parsedIndexes.millisecondDigits = info.parts[i].length;
                            break;
                        case "nnn":
                        case "nn":
                        case "n":
                            reg += "([0-9]{3}|[0-9]{2}|[0-9]{1})";
                            parsedIndexes.millisecond = index;
                            break;
                        case "x":
                            reg += "([0-9]{1,})";
                            parsedIndexes.timestamp = index;
                            break;
                        case "Z":
                            reg += "GMT([-+]+[0-9]{2}:[0-9]{2})";
                            parsedIndexes.zone = index;
                            break;
                        case "ZZ":
                            reg += "([\\-+]+[0-9]{2}[0-9]{2})";
                            parsedIndexes.zone = index;
                            break;
                        case "i":
                            reg += "([0-9]{4})-?([0-9]{2})-?([0-9]{2})T?([0-9]{2}):?([0-9]{2}):?([0-9]{2})\\.?([0-9]{0,3})([zZ]|[+\\-][0-9]{2}:?[0-9]{2}|$)";
                            parsedIndexes.iso = index;
                            indexAdjust += 7;
                            break;
                        case "G":
                        case "YYYY":
                        case "YYY":
                        case "YY":
                        case "Y":
                        case "MMMMM":
                        case "W":
                        case "EEEEE":
                        case "EEEE":
                        case "EEE":
                        case "EE":
                        case "E":
                        case "eeeee":
                        case "eeee":
                        case "eee":
                        case "ee":
                        case "e":
                        case "zzzz":
                        case "zzz":
                        case "zz":
                        case "z":
                        case "t":
                            // Ignore
                            indexAdjust--;
                            break;
                    }
                    reg += "[^0-9]*";
                }
                // Try matching
                var regex = new RegExp(reg);
                var matches = source.match(regex);
                if (matches) {
                    // Populate the date object
                    // Full year
                    if (parsedIndexes.year > -1) {
                        resValues.year = parseInt(matches[parsedIndexes.year]);
                    }
                    // 3-digit year
                    if (parsedIndexes.year3 > -1) {
                        var val = parseInt(matches[parsedIndexes.year3]);
                        val += 1000;
                        resValues.year = val;
                    }
                    // 2-digit year
                    if (parsedIndexes.year2 > -1) {
                        var val = parseInt(matches[parsedIndexes.year2]);
                        if (val > 50) {
                            val += 1000;
                        }
                        else {
                            val += 2000;
                        }
                        resValues.year = val;
                    }
                    // 1-digit year
                    if (parsedIndexes.year1 > -1) {
                        var val = parseInt(matches[parsedIndexes.year1]);
                        val = Math.floor((new Date().getFullYear()) / 10) * 10 + val;
                        resValues.year = val;
                    }
                    // Full month
                    if (parsedIndexes.monthLong > -1) {
                        resValues.month = this.resolveMonth(matches[parsedIndexes.monthLong]);
                    }
                    // Short month
                    if (parsedIndexes.monthShort > -1) {
                        resValues.month = this.resolveShortMonth(matches[parsedIndexes.monthShort]);
                    }
                    // Numeric month
                    if (parsedIndexes.month > -1) {
                        resValues.month = parseInt(matches[parsedIndexes.month]) - 1;
                    }
                    // Weekday
                    // @todo
                    // Week
                    if ((parsedIndexes.week > -1) && (parsedIndexes.day === -1)) {
                        // We parse weeks ONLY if day is not explicitly set
                        // TODO: this needs work
                        // (but maybe later - I can hardly imagine anyone passing their dates in weeks)
                        resValues.month = 0;
                        resValues.day = getDayFromWeek(parseInt(matches[parsedIndexes.week]), resValues.year, 1, this._root.utc);
                    }
                    // Day
                    if (parsedIndexes.day > -1) {
                        resValues.day = parseInt(matches[parsedIndexes.day]);
                    }
                    // Year day
                    if (parsedIndexes.yearDay > -1) {
                        resValues.month = 0;
                        resValues.day = parseInt(matches[parsedIndexes.yearDay]);
                    }
                    // 24 Hour (0-23)
                    if (parsedIndexes.hourBase0 > -1) {
                        resValues.hour = parseInt(matches[parsedIndexes.hourBase0]);
                    }
                    // 24 Hour (1-24)
                    if (parsedIndexes.hourBase1 > -1) {
                        resValues.hour = parseInt(matches[parsedIndexes.hourBase1]) - 1;
                    }
                    // 12 Hour (0-11)
                    if (parsedIndexes.hour12Base0 > -1) {
                        var val = parseInt(matches[parsedIndexes.hour12Base0]);
                        if (val == 11) {
                            val = 0;
                        }
                        if ((parsedIndexes.am > -1) && !this.isAm(matches[parsedIndexes.am])) {
                            val += 12;
                        }
                        resValues.hour = val;
                    }
                    // 12 Hour (1-12)
                    if (parsedIndexes.hour12Base1 > -1) {
                        var val = parseInt(matches[parsedIndexes.hour12Base1]);
                        if (val == 12) {
                            val = 0;
                        }
                        if ((parsedIndexes.am > -1) && !this.isAm(matches[parsedIndexes.am])) {
                            val += 12;
                        }
                        resValues.hour = val;
                    }
                    // Minute
                    if (parsedIndexes.minute > -1) {
                        resValues.minute = parseInt(matches[parsedIndexes.minute]);
                    }
                    // Second
                    if (parsedIndexes.second > -1) {
                        resValues.second = parseInt(matches[parsedIndexes.second]);
                    }
                    // Millisecond
                    if (parsedIndexes.millisecond > -1) {
                        var val = parseInt(matches[parsedIndexes.millisecond]);
                        if (parsedIndexes.millisecondDigits == 2) {
                            val *= 10;
                        }
                        else if (parsedIndexes.millisecondDigits == 1) {
                            val *= 100;
                        }
                        resValues.millisecond = val;
                    }
                    // Timestamp
                    if (parsedIndexes.timestamp > -1) {
                        resValues.timestamp = parseInt(matches[parsedIndexes.timestamp]);
                        var ts = new Date(resValues.timestamp);
                        resValues.year = ts.getUTCFullYear();
                        resValues.month = ts.getUTCMonth();
                        resValues.day = ts.getUTCDate();
                        resValues.hour = ts.getUTCHours();
                        resValues.minute = ts.getUTCMinutes();
                        resValues.second = ts.getUTCSeconds();
                        resValues.millisecond = ts.getUTCMilliseconds();
                    }
                    // Adjust time zone
                    if (parsedIndexes.zone > -1) {
                        resValues.offset = this.resolveTimezoneOffset(new Date(resValues.year, resValues.month, resValues.day), matches[parsedIndexes.zone]);
                    }
                    // ISO
                    if (parsedIndexes.iso > -1) {
                        resValues.year = toNumber(matches[parsedIndexes.iso + 0]);
                        resValues.month = toNumber(matches[parsedIndexes.iso + 1]) - 1;
                        resValues.day = toNumber(matches[parsedIndexes.iso + 2]);
                        resValues.hour = toNumber(matches[parsedIndexes.iso + 3]);
                        resValues.minute = toNumber(matches[parsedIndexes.iso + 4]);
                        resValues.second = toNumber(matches[parsedIndexes.iso + 5]);
                        resValues.millisecond = toNumber(matches[parsedIndexes.iso + 6]);
                        if (matches[parsedIndexes.iso + 7] == "Z" || matches[parsedIndexes.iso + 7] == "z") {
                            resValues.utc = true;
                        }
                        else if (matches[parsedIndexes.iso + 7] != "") {
                            resValues.offset = this.resolveTimezoneOffset(new Date(resValues.year, resValues.month, resValues.day), matches[parsedIndexes.iso + 7]);
                        }
                    }
                    // Create Date object
                    if (resValues.utc) {
                        res = new Date(Date.UTC(resValues.year, resValues.month, resValues.day, resValues.hour, resValues.minute, resValues.second, resValues.millisecond));
                    }
                    else {
                        res = new Date(resValues.year, resValues.month, resValues.day, resValues.hour, resValues.minute + resValues.offset, resValues.second, resValues.millisecond);
                    }
                }
                else {
                    // Didn't match anything
                    // Let's try dropping it into Date constructor and hope for the best
                    res = new Date(source);
                }
                return res;
            }
        });
        Object.defineProperty(DateFormatter.prototype, "resolveTimezoneOffset", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (date, zone) {
                var value = zone.match(/([+\-]?)([0-9]{2}):?([0-9]{2})/);
                if (value) {
                    var match = zone.match(/([+\-]?)([0-9]{2}):?([0-9]{2})/);
                    var dir = match[1];
                    var hour = match[2];
                    var minute = match[3];
                    var offset = parseInt(hour) * 60 + parseInt(minute);
                    // Adjust offset
                    // Making it negative does not seem to make sense, but it's right
                    // because of how JavaScript calculates GMT offsets
                    if (dir == "+") {
                        offset *= -1;
                    }
                    // Check the difference in offset
                    var originalOffset = (date || new Date()).getTimezoneOffset();
                    var diff = offset - originalOffset;
                    return diff;
                }
                return 0;
            }
        });
        /**
         * Resolves month name (i.e. "December") into a month number (11).
         *
         * @param value  Month name
         * @return Month number
         */
        Object.defineProperty(DateFormatter.prototype, "resolveMonth", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value) {
                // Let's try English first
                var month = this._months().indexOf(value);
                if (month > -1) {
                    return month;
                }
                // Try the translation
                if (!this._root.language.isDefault()) {
                    month = this._root.language.translateAll(this._months()).indexOf(value);
                    if (month > -1) {
                        return month;
                    }
                }
                return 0;
            }
        });
        /**
         * Resolves short month name (i.e. "Dec") into a month number.
         *
         * @param value  Short month name
         * @return Month number
         */
        Object.defineProperty(DateFormatter.prototype, "resolveShortMonth", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value) {
                // Let's try English first
                var month = this._shortMonths().indexOf(value);
                if (month > -1) {
                    return month;
                }
                // Maybe long month (workaround for May)
                month = this._months().indexOf(value);
                if (month > -1) {
                    return month;
                }
                // Try the translation
                if (this._root.language && !this._root.language.isDefault()) {
                    month = this._root.language.translateAll(this._shortMonths()).indexOf(value);
                    if (month > -1) {
                        return month;
                    }
                }
                return 0;
            }
        });
        /**
         * Checks if passed in string represents AM/PM notation in many of its
         * versions.
         *
         * @param value  Source string
         * @return Is it AM/PM?
         */
        Object.defineProperty(DateFormatter.prototype, "isAm", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value) {
                var list = this.getStringList(["AM", "A.M.", "A"]);
                return list.indexOf(value.toUpperCase()) > -1;
            }
        });
        /**
         * Translates list of strings.
         *
         * @param list  Source strings
         * @return Translated strings
         */
        Object.defineProperty(DateFormatter.prototype, "getStringList", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (list) {
                var res = [];
                for (var i = 0; i < list.length; i++) {
                    // translate?
                    if (this._root.language) {
                        res.push(escapeForRgex(this._t(list[i])));
                    }
                    else {
                        res.push(escapeForRgex(list[i]));
                    }
                }
                return res;
            }
        });
        return DateFormatter;
    }(Entity));

    /**
     * A class used to format numberic values as time duration.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/formatters/formatting-durations/} for more info
     */
    var DurationFormatter = /** @class */ (function (_super) {
        __extends(DurationFormatter, _super);
        function DurationFormatter() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            /**
             * Collection of aliases for units.
             */
            Object.defineProperty(_this, "_unitAliases", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {
                    "Y": "y",
                    "D": "d",
                    "H": "h",
                    "K": "h",
                    "k": "h",
                    "n": "S"
                }
            });
            return _this;
        }
        Object.defineProperty(DurationFormatter.prototype, "_setDefaults", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var dmillisecond = "_duration_millisecond";
                var dsecond = "_duration_second";
                var dminute = "_duration_minute";
                var dhour = "_duration_hour";
                var dday = "_duration_day";
                var dweek = "_duration_week";
                var dmonth = "_duration_month";
                var dyear = "_duration_year";
                var asecond = "_second";
                var aminute = "_minute";
                var ahour = "_hour";
                var aday = "_day";
                var aweek = "_week";
                var amonth = "_week";
                var ayear = "_year";
                // Defaults
                this._setDefault("negativeBase", 0);
                this._setDefault("baseUnit", "second");
                this._setDefault("durationFormats", {
                    "millisecond": {
                        "millisecond": this._t(dmillisecond),
                        "second": this._t((dmillisecond + asecond)),
                        "minute": this._t((dmillisecond + aminute)),
                        "hour": this._t((dmillisecond + ahour)),
                        "day": this._t((dmillisecond + aday)),
                        "week": this._t((dmillisecond + aweek)),
                        "month": this._t((dmillisecond + amonth)),
                        "year": this._t((dmillisecond + ayear))
                    },
                    "second": {
                        "second": this._t((dsecond)),
                        "minute": this._t((dsecond + aminute)),
                        "hour": this._t((dsecond + ahour)),
                        "day": this._t((dsecond + aday)),
                        "week": this._t((dsecond + aweek)),
                        "month": this._t((dsecond + amonth)),
                        "year": this._t((dsecond + ayear))
                    },
                    "minute": {
                        "minute": this._t((dminute)),
                        "hour": this._t((dminute + ahour)),
                        "day": this._t((dminute + aday)),
                        "week": this._t((dminute + aweek)),
                        "month": this._t((dminute + amonth)),
                        "year": this._t((dminute + ayear))
                    },
                    "hour": {
                        "hour": this._t((dhour)),
                        "day": this._t((dhour + aday)),
                        "week": this._t((dhour + aweek)),
                        "month": this._t((dhour + amonth)),
                        "year": this._t((dhour + ayear))
                    },
                    "day": {
                        "day": this._t((dday)),
                        "week": this._t((dday + aweek)),
                        "month": this._t((dday + amonth)),
                        "year": this._t((dday + ayear))
                    },
                    "week": {
                        "week": this._t((dweek)),
                        "month": this._t((dweek + amonth)),
                        "year": this._t((dweek + ayear))
                    },
                    "month": {
                        "month": this._t((dmonth)),
                        "year": this._t((dmonth + ayear))
                    },
                    "year": {
                        "year": this._t(dyear)
                    }
                });
                _super.prototype._setDefaults.call(this);
            }
        });
        Object.defineProperty(DurationFormatter.prototype, "_beforeChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._beforeChanged.call(this);
            }
        });
        /**
         * Formats the number as duration.
         *
         * For example `1000` (base unit seconds) would be converted to `16:40` as in
         * 16 minutes and 40 seconds.
         *
         * @param value   Value to format
         * @param format  Format to apply
         * @param base    Override base unit
         * @return Formatted number
         */
        Object.defineProperty(DurationFormatter.prototype, "format", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value, format, base) {
                // no base unit?
                var baseUnit = base || this.get("baseUnit");
                // no format passed in or empty
                if (typeof format === "undefined" || format === "") {
                    if (this.get("durationFormat") != null) {
                        format = this.get("durationFormat");
                    }
                    else {
                        format = this.getFormat(toNumber(value), undefined, baseUnit);
                    }
                }
                // Clean format
                format = cleanFormat(format);
                // get format info (it will also deal with parser caching)
                var info = this.parseFormat(format, baseUnit);
                // cast to number just in case
                // TODO: maybe use better casting
                var source = Number(value);
                // format and replace the number
                var details;
                if (source > this.get("negativeBase")) {
                    details = info.positive;
                }
                else if (source < this.get("negativeBase")) {
                    details = info.negative;
                }
                else {
                    details = info.zero;
                }
                // Format
                var formatted = this.applyFormat(source, details);
                // Apply color?
                if (details.color !== "") {
                    formatted = "[" + details.color + "]" + formatted + "[/]";
                }
                return formatted;
            }
        });
        /**
         * Parses supplied format into structured object which can be used to format
         * the number.
         *
         * @param format  Format string, i.e. "#,###.00"
         * @param base    Override base unit
         * @return Parsed information
         */
        Object.defineProperty(DurationFormatter.prototype, "parseFormat", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (format, base) {
                // Check cache
                // TODO
                // let cached = this.getCache(format);
                // if (cached != null) {
                // 	return cached;
                // }
                var _this = this;
                // no base unit?
                var baseUnit = base || this.get("baseUnit");
                // Initialize duration parsing info
                var info = {
                    "positive": {
                        "color": "",
                        "template": "",
                        "parts": [],
                        "source": "",
                        "baseUnit": baseUnit,
                        "parsed": false,
                        "absolute": false
                    },
                    "negative": {
                        "color": "",
                        "template": "",
                        "parts": [],
                        "source": "",
                        "baseUnit": baseUnit,
                        "parsed": false,
                        "absolute": false
                    },
                    "zero": {
                        "color": "",
                        "template": "",
                        "parts": [],
                        "source": "",
                        "baseUnit": baseUnit,
                        "parsed": false,
                        "absolute": false
                    }
                };
                // Escape double vertical bars (that mean display one vertical bar)
                format = format.replace("||", PLACEHOLDER2);
                // Split it up and deal with different formats
                var parts = format.split("|");
                info.positive.source = parts[0];
                if (typeof parts[2] === "undefined") {
                    info.zero = info.positive;
                }
                else {
                    info.zero.source = parts[2];
                }
                if (typeof parts[1] === "undefined") {
                    info.negative = info.positive;
                }
                else {
                    info.negative.source = parts[1];
                }
                // Parse each
                each(info, function (_part, item) {
                    // Already parsed
                    if (item.parsed) {
                        return;
                    }
                    // Check cached
                    // TODO
                    // if (typeof this.getCache(item.source) !== "undefined") {
                    // 	info[part] = this.getCache(item.source);
                    // 	return;
                    // }
                    // Begin parsing
                    var partFormat = item.source;
                    // Check for [] directives
                    var dirs = [];
                    dirs = item.source.match(/^\[([^\]]*)\]/);
                    if (dirs && dirs.length && dirs[0] !== "") {
                        partFormat = item.source.substr(dirs[0].length);
                        item.color = dirs[1];
                    }
                    // Let TextFormatter split into chunks
                    var chunks = TextFormatter.chunk(partFormat, true);
                    for (var i = 0; i < chunks.length; i++) {
                        var chunk = chunks[i];
                        // replace back double vertical bar
                        chunk.text = chunk.text.replace(PLACEHOLDER2, "|");
                        if (chunk.type === "value") {
                            // Just "Duration"?
                            // if (chunk.text.toLowerCase() === "duration") {
                            // 	chunk.text = durationFormat;
                            // }
                            // Check for "a" (absolute) modifier
                            if (chunk.text.match(/[yYMdDwhHKkmsSn]+a/)) {
                                item.absolute = true;
                                chunk.text = chunk.text.replace(/([yYMdDwhHKkmsSn]+)a/, "$1");
                            }
                            // Find all possible parts
                            var matches = chunk.text.match(/y+|Y+|M+|d+|D+|w+|h+|H+|K+|k+|m+|s+|S+|n+/g);
                            if (matches) {
                                // Populate template
                                for (var x = 0; x < matches.length; x++) {
                                    // Is it an alias?
                                    if (matches[x] == null) {
                                        matches[x] = _this._unitAliases[matches[x]];
                                    }
                                    item.parts.push(matches[x]);
                                    chunk.text = chunk.text.replace(matches[x], PLACEHOLDER);
                                }
                            }
                        }
                        // Apply to template
                        item.template += chunk.text;
                    }
                    // Apply style formatting
                    //item.template = TextFormatter.format(item.template, this.outputFormat);
                    // Save cache
                    // TODO
                    //this.setCache(item.source, item);
                    // Mark this as parsed
                    item.parsed = true;
                });
                // Save cache (the whole thing)
                // TODO
                //this.setCache(format, info);
                return info;
            }
        });
        /**
         * Applies parsed format to a numeric value.
         *
         * @param value    Value
         * @param details  Parsed format as returned by {parseFormat}
         * @return Formatted duration
         */
        Object.defineProperty(DurationFormatter.prototype, "applyFormat", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value, details) {
                // Use absolute values
                var negative = !details.absolute && (value < this.get("negativeBase"));
                value = Math.abs(value);
                // Recalculate to milliseconds
                var tstamp = this.toTimeStamp(value, details.baseUnit);
                // Init return value
                var res = details.template;
                // Iterate through duration parts
                for (var i = 0, len = details.parts.length; i < len; i++) {
                    // Gather the part
                    var part = details.parts[i];
                    var unit = this._toTimeUnit(part.substr(0, 1));
                    var digits = part.length;
                    // Calculate current unit value
                    var ints = Math.floor(tstamp / this._getUnitValue(unit));
                    res = res.replace(PLACEHOLDER, padString(ints, digits, "0"));
                    // Reduce timestamp
                    tstamp -= ints * this._getUnitValue(unit);
                }
                // Reapply negative sign
                if (negative) {
                    res = "-" + res;
                }
                return res;
            }
        });
        /**
         * Converts numeric value to timestamp in milliseconds.
         *
         * @param value     A source value
         * @param baseUnit  Base unit the source value is in: "q", "s", "i", "h", "d", "w", "m", "y"
         * @return Value representation as a timestamp in milliseconds
         */
        Object.defineProperty(DurationFormatter.prototype, "toTimeStamp", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value, baseUnit) {
                return value * this._getUnitValue(baseUnit);
            }
        });
        Object.defineProperty(DurationFormatter.prototype, "_toTimeUnit", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (code) {
                switch (code) {
                    case "S":
                        return "millisecond";
                    case "s":
                        return "second";
                    case "m":
                        return "minute";
                    case "h":
                        return "hour";
                    case "d":
                        return "day";
                    case "w":
                        return "week";
                    case "M":
                        return "month";
                    case "y":
                        return "year";
                }
            }
        });
        /**
         * Returns appropriate default format for the value.
         *
         * If `maxValue` is sepcified, it will use that value to determine the time
         * unit for the format.
         *
         * For example if your `baseUnit` is `"second"` and you pass in `10`, you
         * will get `"10"`.
         *
         * However, you might want it to be formatted in the context of bigger scale,
         * say 10 minutes (600 seconds). If you pass in `600` as `maxValue`, all
         * values, including small ones will use format with minutes, e.g.:
         * `00:10`, `00:50`, `12: 30`, etc.
         *
         * @param value     Value to format
         * @param maxValue  Maximum value to be used to determine format
         * @param baseUnit  Base unit of the value
         * @return Format
         */
        Object.defineProperty(DurationFormatter.prototype, "getFormat", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value, maxValue, baseUnit) {
                // Is format override set?
                if (this.get("durationFormat") != null) {
                    return this.get("durationFormat");
                }
                // Get base unit
                if (!baseUnit) {
                    baseUnit = this.get("baseUnit");
                }
                if (maxValue != null && value != maxValue) {
                    value = Math.abs(value);
                    maxValue = Math.abs(maxValue);
                    var maxUnit = this.getValueUnit(Math.max(value, maxValue), baseUnit);
                    //let diffUnit = this.getValueUnit(Math.abs(maxValue - value), baseUnit);
                    //console.log(maxUnit, diffUnit);
                    return this.get("durationFormats")[baseUnit][maxUnit];
                }
                else {
                    var unit = this.getValueUnit(value, baseUnit);
                    return this.get("durationFormats")[baseUnit][unit];
                }
            }
        });
        /**
         * Returns value's closest denominator time unit, e.g 100 seconds is
         * `"minute"`, while 59 seconds would still be `second`.
         *
         * @param value     Source duration value
         * @param baseUnit  Base unit
         * @return Denominator
         */
        Object.defineProperty(DurationFormatter.prototype, "getValueUnit", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value, baseUnit) {
                // Get base unit
                if (!baseUnit) {
                    baseUnit = this.get("baseUnit");
                }
                // Convert to milliseconds
                var currentUnit;
                var ms = this.getMilliseconds(value, baseUnit);
                eachContinue(this._getUnitValues(), function (key, val) {
                    if (key == baseUnit || currentUnit) {
                        var num = ms / val;
                        if (num <= 1) {
                            if (!currentUnit) {
                                currentUnit = key;
                            }
                            return false;
                        }
                        currentUnit = key;
                    }
                    return true;
                });
                return currentUnit;
            }
        });
        /**
         * Converts value to milliseconds according to `baseUnit`.
         *
         * @param value     Source duration value
         * @param baseUnit  Base unit
         * @return Value in milliseconds
         */
        Object.defineProperty(DurationFormatter.prototype, "getMilliseconds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value, baseUnit) {
                // Get base unit
                if (!baseUnit) {
                    baseUnit = this.get("baseUnit");
                }
                return value * this._getUnitValue(baseUnit);
            }
        });
        Object.defineProperty(DurationFormatter.prototype, "_getUnitValue", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (timeUnit) {
                return this._getUnitValues()[timeUnit];
            }
        });
        Object.defineProperty(DurationFormatter.prototype, "_getUnitValues", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return {
                    "millisecond": 1,
                    "second": 1000,
                    "minute": 60000,
                    "hour": 3600000,
                    "day": 86400000,
                    "week": 604800000,
                    "month": 2592000000,
                    "year": 31536000000,
                };
            }
        });
        return DurationFormatter;
    }(Entity));

    /**
     * amCharts 5 locale
     *
     * Locale: en
     * Language: International English
     * Author: Martynas Majeris
     *
     * Follow instructions in [on this page](https://www.amcharts.com/docs/v5/tutorials/creating-translations/) to make corrections or add new translations.
     *
     * ---
     * Edit but leave the header section above this line. You can remove any
     * subsequent comment sections.
     * ---
     *
     * Use this file as a template to create translations. Leave the key part in
     * English intact. Fill the value with a translation.
     *
     * Empty string means no translation, so default "International English"
     * will be used.
     *
     * If you need the translation to literally be an empty string, use `null`
     * instead.
     *
     * IMPORTANT:
     * When translating make good effort to keep the translation length
     * at least the same chartcount as the English, especially for short prompts.
     *
     * Having significantly longer prompts may distort the actual charts.
     *
     * NOTE:
     * Some prompts - like months or weekdays - come in two versions: full and
     * shortened.
     *
     * If there's no official shortened version of these in your language, and it
     * would not be possible to invent such short versions that don't seem weird
     * to native speakers of that language, fill those with the same as full
     * version.
     *
     * PLACEHOLDERS:
     * Some prompts have placeholders like "%1". Those will be replaced by actual
     * values during translation and should be retained in the translated prompts.
     *
     * Placeholder positions may be changed to better suit structure of the
     * sentence.
     *
     * For example "From %1 to %2", when actually used will replace "%1" with an
     * actual value representing range start, and "%2" will be replaced by end
     * value.
     *
     * E.g. in a Scrollbar for Value axis "From %1 to %2" will become
     * "From 100 to 200". You may translate "From" and "to", as well as re-arrange
     * the order of the prompt itself, but make sure the "%1" and "%2" remain, in
     * places where they will make sense.
     *
     * Save the file as language_LOCALE, i.e. `en_GB.ts`, `fr_FR.ts`, etc.
     */
    var en = {
        "firstDayOfWeek": 1,
        // Number formatting options.
        // 
        // Please check with the local standards which separator is accepted to be
        // used for separating decimals, and which for thousands.
        "_decimalSeparator": ".",
        "_thousandSeparator": ",",
        // Suffixes for numbers
        // When formatting numbers, big or small numers might be reformatted to
        // shorter version, by applying a suffix.
        // 
        // For example, 1000000 might become "1m".
        // Or 1024 might become "1KB" if we're formatting byte numbers.
        // 
        // This section defines such suffixes for all such cases.
        "_big_number_suffix_3": "k",
        "_big_number_suffix_6": "M",
        "_big_number_suffix_9": "G",
        "_big_number_suffix_12": "T",
        "_big_number_suffix_15": "P",
        "_big_number_suffix_18": "E",
        "_big_number_suffix_21": "Z",
        "_big_number_suffix_24": "Y",
        "_small_number_suffix_3": "m",
        "_small_number_suffix_6": "μ",
        "_small_number_suffix_9": "n",
        "_small_number_suffix_12": "p",
        "_small_number_suffix_15": "f",
        "_small_number_suffix_18": "a",
        "_small_number_suffix_21": "z",
        "_small_number_suffix_24": "y",
        "_byte_suffix_B": "B",
        "_byte_suffix_KB": "KB",
        "_byte_suffix_MB": "MB",
        "_byte_suffix_GB": "GB",
        "_byte_suffix_TB": "TB",
        "_byte_suffix_PB": "PB",
        // Default date formats for various periods.
        // 
        // This should reflect official or de facto formatting universally accepted
        // in the country translation is being made for
        // Available format codes here:
        // https://www.amcharts.com/docs/v5/concepts/formatters/formatting-dates/#Format_codes
        // 
        // This will be used when formatting date/time for particular granularity,
        // e.g. "_date_hour" will be shown whenever we need to show time as hours.
        // 
        // "date" is used as in default date format when showing standalone dates.
        "_date": "yyyy-MM-dd",
        "_date_millisecond": "mm:ss SSS",
        "_date_millisecond_full": "HH:mm:ss SSS",
        "_date_second": "HH:mm:ss",
        "_date_second_full": "HH:mm:ss",
        "_date_minute": "HH:mm",
        "_date_minute_full": "HH:mm - MMM dd, yyyy",
        "_date_hour": "HH:mm",
        "_date_hour_full": "HH:mm - MMM dd, yyyy",
        "_date_day": "MMM dd",
        "_date_day_full": "MMM dd, yyyy",
        "_date_week": "ww",
        "_date_week_full": "MMM dd, yyyy",
        "_date_month": "MMM",
        "_date_month_full": "MMM, yyyy",
        "_date_year": "yyyy",
        // Default duration formats for various base units.
        // 
        // This will be used by DurationFormatter to format numeric values into
        // duration.
        // 
        // Notice how each duration unit comes in several versions. This is to ensure
        // that each base unit is shown correctly.
        // 
        // For example, if we have baseUnit set to "second", meaning our duration is
        // in seconds.
        // 
        // If we pass in `50` to formatter, it will know that we have just 50 seconds
        // (less than a minute) so it will use format in `"_duration_second"` ("ss"),
        // and the formatted result will be in like `"50"`.
        // 
        // If we pass in `70`, which is more than a minute, the formatter will switch
        // to `"_duration_second_minute"` ("mm:ss"), resulting in "01:10" formatted
        // text.
        // 
        // Available codes here:
        // https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/#Available_Codes
        "_duration_millisecond": "SSS",
        "_duration_millisecond_second": "ss.SSS",
        "_duration_millisecond_minute": "mm:ss SSS",
        "_duration_millisecond_hour": "hh:mm:ss SSS",
        "_duration_millisecond_day": "d'd' mm:ss SSS",
        "_duration_millisecond_week": "d'd' mm:ss SSS",
        "_duration_millisecond_month": "M'm' dd'd' mm:ss SSS",
        "_duration_millisecond_year": "y'y' MM'm' dd'd' mm:ss SSS",
        "_duration_second": "ss",
        "_duration_second_minute": "mm:ss",
        "_duration_second_hour": "hh:mm:ss",
        "_duration_second_day": "d'd' hh:mm:ss",
        "_duration_second_week": "d'd' hh:mm:ss",
        "_duration_second_month": "M'm' dd'd' hh:mm:ss",
        "_duration_second_year": "y'y' MM'm' dd'd' hh:mm:ss",
        "_duration_minute": "mm",
        "_duration_minute_hour": "hh:mm",
        "_duration_minute_day": "d'd' hh:mm",
        "_duration_minute_week": "d'd' hh:mm",
        "_duration_minute_month": "M'm' dd'd' hh:mm",
        "_duration_minute_year": "y'y' MM'm' dd'd' hh:mm",
        "_duration_hour": "hh'h'",
        "_duration_hour_day": "d'd' hh'h'",
        "_duration_hour_week": "d'd' hh'h'",
        "_duration_hour_month": "M'm' dd'd' hh'h'",
        "_duration_hour_year": "y'y' MM'm' dd'd' hh'h'",
        "_duration_day": "d'd'",
        "_duration_day_week": "d'd'",
        "_duration_day_month": "M'm' dd'd'",
        "_duration_day_year": "y'y' MM'm' dd'd'",
        "_duration_week": "w'w'",
        "_duration_week_month": "w'w'",
        "_duration_week_year": "w'w'",
        "_duration_month": "M'm'",
        "_duration_month_year": "y'y' MM'm'",
        "_duration_year": "y'y'",
        // Era translations
        "_era_ad": "AD",
        "_era_bc": "BC",
        // Day part, used in 12-hour formats, e.g. 5 P.M.
        // Please note that these come in 3 variants:
        // * one letter (e.g. "A")
        // * two letters (e.g. "AM")
        // * two letters with dots (e.g. "A.M.")
        // 
        // All three need to to be translated even if they are all the same. Some
        // users might use one, some the other.
        "A": "",
        "P": "",
        "AM": "",
        "PM": "",
        "A.M.": "",
        "P.M.": "",
        // Date-related stuff.
        // 
        // When translating months, if there's a difference, use the form which is
        // best for a full date, e.g. as you would use it in "2018 January 1".
        // 
        // Note that May is listed twice. This is because in English May is the same
        // in both long and short forms, while in other languages it may not be the
        // case. Translate "May" to full word, while "May(short)" to shortened
        // version.
        // 
        // Should month names and weekdays be capitalized or not?
        // 
        // Rule of thumb is this: if the names should always be capitalized,
        // regardless of name position within date ("January", "21st January 2018",
        // etc.) use capitalized names. Otherwise enter all lowercase.
        // 
        // The date formatter will automatically capitalize names if they are the
        // first (or only) word in resulting date.
        "January": "",
        "February": "",
        "March": "",
        "April": "",
        "May": "",
        "June": "",
        "July": "",
        "August": "",
        "September": "",
        "October": "",
        "November": "",
        "December": "",
        "Jan": "",
        "Feb": "",
        "Mar": "",
        "Apr": "",
        "May(short)": "May",
        "Jun": "",
        "Jul": "",
        "Aug": "",
        "Sep": "",
        "Oct": "",
        "Nov": "",
        "Dec": "",
        // Weekdays.
        "Sunday": "",
        "Monday": "",
        "Tuesday": "",
        "Wednesday": "",
        "Thursday": "",
        "Friday": "",
        "Saturday": "",
        "Sun": "",
        "Mon": "",
        "Tue": "",
        "Wed": "",
        "Thu": "",
        "Fri": "",
        "Sat": "",
        // Date ordinal function.
        // 
        // This is used when adding number ordinal when formatting days in dates.
        // 
        // E.g. "January 1st", "February 2nd".
        // 
        // The function accepts day number, and returns a string to be added to the
        // day, like in default English translation, if we pass in 2, we will receive
        // "nd" back.
        "_dateOrd": function (day) {
            var res = "th";
            if ((day < 11) || (day > 13)) {
                switch (day % 10) {
                    case 1:
                        res = "st";
                        break;
                    case 2:
                        res = "nd";
                        break;
                    case 3:
                        res = "rd";
                        break;
                }
            }
            return res;
        },
        // Various chart controls.
        // Shown as a tooltip on zoom out button.
        "Zoom Out": "",
        // Timeline buttons
        "Play": "",
        "Stop": "",
        // Chart's Legend screen reader title.
        "Legend": "",
        // Legend's item screen reader indicator.
        "Press ENTER to toggle": "",
        // Shown when the chart is busy loading something.
        "Loading": "",
        // Shown as the first button in the breadcrumb navigation, e.g.:
        // Home > First level > ...
        "Home": "",
        // Chart types.
        // Those are used as default screen reader titles for the main chart element
        // unless developer has set some more descriptive title.
        "Chart": "",
        "Serial chart": "",
        "X/Y chart": "",
        "Pie chart": "",
        "Gauge chart": "",
        "Radar chart": "",
        "Sankey diagram": "",
        "Flow diagram": "",
        "Chord diagram": "",
        "TreeMap chart": "",
        "Force directed tree": "",
        "Sliced chart": "",
        // Series types.
        // Used to name series by type for screen readers if they do not have their
        // name set.
        "Series": "",
        "Candlestick Series": "",
        "OHLC Series": "",
        "Column Series": "",
        "Line Series": "",
        "Pie Slice Series": "",
        "Funnel Series": "",
        "Pyramid Series": "",
        "X/Y Series": "",
        // Map-related stuff.
        "Map": "",
        "Press ENTER to zoom in": "",
        "Press ENTER to zoom out": "",
        "Use arrow keys to zoom in and out": "",
        "Use plus and minus keys on your keyboard to zoom in and out": "",
        // Export-related stuff.
        // These prompts are used in Export menu labels.
        // 
        // "Export" is the top-level menu item.
        // 
        // "Image", "Data", "Print" as second-level indicating type of export
        // operation.
        // 
        // Leave actual format untranslated, unless you absolutely know that they
        // would convey more meaning in some other way.
        "Export": "",
        "Image": "",
        "Data": "",
        "Print": "",
        "Press ENTER or use arrow keys to navigate": "",
        "Press ENTER to open": "",
        "Press ENTER to print.": "",
        "Press ENTER to export as %1.": "",
        "(Press ESC to close this message)": "",
        "Image Export Complete": "",
        "Export operation took longer than expected. Something might have gone wrong.": "",
        "Saved from": "",
        "PNG": "",
        "JPG": "",
        "GIF": "",
        "SVG": "",
        "PDF": "",
        "JSON": "",
        "CSV": "",
        "XLSX": "",
        "HTML": "",
        // Scrollbar-related stuff.
        // 
        // Scrollbar is a control which can zoom and pan the axes on the chart.
        // 
        // Each scrollbar has two grips: left or right (for horizontal scrollbar) or
        // upper and lower (for vertical one).
        // 
        // Prompts change in relation to whether Scrollbar is vertical or horizontal.
        // 
        // The final section is used to indicate the current range of selection.
        "Use TAB to select grip buttons or left and right arrows to change selection": "",
        "Use left and right arrows to move selection": "",
        "Use left and right arrows to move left selection": "",
        "Use left and right arrows to move right selection": "",
        "Use TAB select grip buttons or up and down arrows to change selection": "",
        "Use up and down arrows to move selection": "",
        "Use up and down arrows to move lower selection": "",
        "Use up and down arrows to move upper selection": "",
        "From %1 to %2": "",
        "From %1": "",
        "To %1": "",
        // Data loader-related.
        "No parser available for file: %1": "",
        "Error parsing file: %1": "",
        "Unable to load file: %1": "",
        "Invalid date": "",
        // Common actions
        "Close": "",
        "Minimize": ""
    };

    var Language = /** @class */ (function (_super) {
        __extends(Language, _super);
        function Language() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Language.prototype, "_setDefaults", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.setPrivate("defaultLocale", en);
                _super.prototype._setDefaults.call(this);
            }
        });
        Object.defineProperty(Language.prototype, "translate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (prompt, locale) {
                var rest = [];
                for (var _i = 2; _i < arguments.length; _i++) {
                    rest[_i - 2] = arguments[_i];
                }
                // Get langauge
                if (!locale) {
                    locale = this._root.locale || this.getPrivate("defaultLocale");
                }
                // Init translation
                var translation = prompt;
                var value = locale[prompt];
                // Try to look for the translation
                if (value === null) {
                    translation = "";
                }
                else if (value != null) {
                    // It might be an empty string
                    if (value) {
                        translation = value;
                    }
                }
                else if (locale !== this.getPrivate("defaultLocale")) {
                    // Try to look in default language
                    return this.translate.apply(this, __spreadArray([prompt, this.getPrivate("defaultLocale")], __read(rest), false));
                }
                // Replace %1, %2, etc params
                if (rest.length) {
                    for (var len = rest.length, i = 0; i < len; ++i) {
                        translation = translation.split("%" + (i + 1)).join(rest[i]);
                    }
                }
                // Return the translation
                return translation;
            }
        });
        Object.defineProperty(Language.prototype, "translateAny", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (prompt, locale) {
                var rest = [];
                for (var _i = 2; _i < arguments.length; _i++) {
                    rest[_i - 2] = arguments[_i];
                }
                return this.translate.apply(this, __spreadArray([prompt, locale], __read(rest), false));
            }
        });
        Object.defineProperty(Language.prototype, "setTranslationAny", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (prompt, translation, locale) {
                var localeTarget = locale || this._root.locale;
                localeTarget[prompt] = translation;
            }
        });
        Object.defineProperty(Language.prototype, "translateEmpty", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (prompt, locale) {
                var rest = [];
                for (var _i = 2; _i < arguments.length; _i++) {
                    rest[_i - 2] = arguments[_i];
                }
                var translation = this.translate.apply(this, __spreadArray([prompt, locale], __read(rest), false));
                return translation == prompt ? "" : translation;
            }
        });
        Object.defineProperty(Language.prototype, "translateFunc", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (prompt, locale) {
                if (this._root.locale[prompt]) {
                    return this._root.locale[prompt];
                }
                // Try to look in default language
                if (locale !== this.getPrivate("defaultLocale")) {
                    return this.translateFunc(prompt, this.getPrivate("defaultLocale"));
                }
                // Fail - return empty function
                return function () {
                    return "";
                };
            }
        });
        Object.defineProperty(Language.prototype, "translateAll", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (list, locale) {
                var _this = this;
                // Translate all items in the list
                if (!this.isDefault()) {
                    return map(list, function (x) { return _this.translate(x, locale); });
                }
                else {
                    return list;
                }
            }
        });
        /**
         * Returns `true` if the currently selected locale is a default locale.
         *
         * @return `true` if locale is default; `false` if it is not.
         */
        Object.defineProperty(Language.prototype, "isDefault", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this.getPrivate("defaultLocale") === this._root.locale;
            }
        });
        return Language;
    }(Entity));

    /**
     * A base class for an amCharts theme.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/themes/} for more info
     * @important
     */
    var Theme = /** @class */ (function () {
        function Theme(root, isReal) {
            Object.defineProperty(this, "_root", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_rules", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            this._root = root;
            if (!isReal) {
                throw new Error("You cannot use `new Class()`, instead use `Class.new()`");
            }
        }
        /**
         * Use this method to create an instance of this class.
         *
         * @see {@link https://www.amcharts.com/docs/v5/getting-started/#New_element_syntax} for more info
         * @param   root      Root element
         * @param   settings  Settings
         * @param   template  Template
         * @return            Instantiated object
         */
        Object.defineProperty(Theme, "new", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (root) {
                var x = (new this(root, true));
                x.setupDefaultRules();
                return x;
            }
        });
        Object.defineProperty(Theme.prototype, "setupDefaultRules", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () { }
        });
        /**
         * Looks up the rules for a specific theme class.
         *
         * @see {@link https://www.amcharts.com/docs/v5/themes/} for more info
         * @param   themeClass Theme class
         * @return             Array<IRule<A>>
         */
        Object.defineProperty(Theme.prototype, "_lookupRules", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (themeClass) {
                return this._rules[themeClass];
            }
        });
        /**
         * Creates a [[Template]] for specific theme class and tags.
         *
         * NOTE: the difference from `rule()` is that `ruleRaw()` does not do any
         * type checks.
         *
         * @see {@link https://www.amcharts.com/docs/v5/themes/} for more info
         * @param   themeClass Theme class
         * @param   themeTags  Theme tags
         * @return             Template
         */
        Object.defineProperty(Theme.prototype, "ruleRaw", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (themeClass, themeTags) {
                if (themeTags === void 0) { themeTags = []; }
                var rules = this._rules[themeClass];
                if (!rules) {
                    rules = this._rules[themeClass] = [];
                }
                themeTags.sort(compare);
                var _a = getSortedIndex(rules, function (x) {
                    var order = compare(x.tags.length, themeTags.length);
                    if (order === 0) {
                        return compareArray(x.tags, themeTags, compare);
                    }
                    else {
                        return order;
                    }
                }), index = _a.index, found = _a.found;
                if (found) {
                    return rules[index].template;
                }
                else {
                    var template = Template.new({});
                    rules.splice(index, 0, {
                        tags: themeTags,
                        template: template,
                    });
                    return template;
                }
            }
        });
        /**
         * Creates a [[Template]] for specific theme class and tags.
         *
         * @see {@link https://www.amcharts.com/docs/v5/themes/} for more info
         * @param   themeClass Theme class
         * @param   themeTags  Theme tags
         * @return             Template
         */
        Object.defineProperty(Theme.prototype, "rule", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (themeClass, themeTags) {
                if (themeTags === void 0) { themeTags = []; }
                return this.ruleRaw(themeClass, themeTags);
            }
        });
        return Theme;
    }());

    /**
     * @ignore
     */
    function setColor(rule, key, ic, name) {
        // TODO this shouldn't use get, figure out a better way
        rule.set(key, ic.get(name));
        ic.on(name, function (value) {
            rule.set(key, value);
        });
    }
    /**
     * @ignore
     */
    var DefaultTheme = /** @class */ (function (_super) {
        __extends(DefaultTheme, _super);
        function DefaultTheme() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(DefaultTheme.prototype, "setupDefaultRules", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype.setupDefaultRules.call(this);
                var language = this._root.language;
                var ic = this._root.interfaceColors;
                var horizontalLayout = this._root.horizontalLayout;
                var verticalLayout = this._root.verticalLayout;
                var r = this.rule.bind(this);
                /**
                 * ========================================================================
                 * core
                 * ========================================================================
                 */
                r("InterfaceColors").setAll({
                    stroke: Color.fromHex(0xe5e5e5),
                    fill: Color.fromHex(0xf3f3f3),
                    primaryButton: Color.fromHex(0x6794dc),
                    primaryButtonHover: Color.fromHex(0x6771dc),
                    primaryButtonDown: Color.fromHex(0x68dc76),
                    primaryButtonActive: Color.fromHex(0x68dc76),
                    primaryButtonText: Color.fromHex(0xffffff),
                    primaryButtonStroke: Color.fromHex(0xffffff),
                    secondaryButton: Color.fromHex(0xd9d9d9),
                    secondaryButtonHover: Color.fromHex(0xa3a3a3),
                    secondaryButtonDown: Color.fromHex(0x8d8d8d),
                    secondaryButtonActive: Color.fromHex(0xe6e6e6),
                    secondaryButtonText: Color.fromHex(0x000000),
                    secondaryButtonStroke: Color.fromHex(0xffffff),
                    grid: Color.fromHex(0x000000),
                    background: Color.fromHex(0xffffff),
                    alternativeBackground: Color.fromHex(0x000000),
                    text: Color.fromHex(0x000000),
                    alternativeText: Color.fromHex(0xffffff),
                    disabled: Color.fromHex(0xadadad),
                    positive: Color.fromHex(0x50b300),
                    negative: Color.fromHex(0xb30000)
                });
                {
                    var rule = r("ColorSet");
                    rule.setAll({
                        passOptions: {
                            hue: 0.05,
                            saturation: 0,
                            lightness: 0
                        },
                        colors: [
                            Color.fromHex(0x67b7dc)
                        ],
                        step: 1,
                        //baseColor: Color.fromRGB(103, 183, 220),
                        //count: 20,
                        reuse: false,
                        startIndex: 0
                    });
                    rule.setPrivate("currentStep", 0);
                    rule.setPrivate("currentPass", 0);
                }
                r("Entity").setAll({
                    stateAnimationDuration: 0,
                    stateAnimationEasing: out(cubic)
                });
                r("Component").setAll({
                    interpolationDuration: 0,
                    interpolationEasing: out(cubic)
                });
                r("Sprite").setAll({
                    visible: true,
                    scale: 1,
                    opacity: 1,
                    rotation: 0,
                    position: "relative",
                    tooltipX: p50,
                    tooltipY: p50,
                    tooltipPosition: "fixed",
                    isMeasured: true
                });
                r("Sprite").states.create("default", { "visible": true, opacity: 1 });
                r("Container").setAll({
                    interactiveChildren: true,
                    setStateOnChildren: false
                });
                r("Graphics").setAll({
                    strokeWidth: 1
                });
                r("Chart").setAll({
                    width: p100,
                    height: p100,
                    interactiveChildren: false
                });
                /**
                 * ------------------------------------------------------------------------
                 * core: alignment
                 * ------------------------------------------------------------------------
                 */
                r("Sprite", ["horizontal", "center"]).setAll({
                    centerX: p50,
                    x: p50
                });
                r("Sprite", ["vertical", "center"]).setAll({
                    centerY: p50,
                    y: p50
                });
                r("Container", ["horizontal", "layout"]).setAll({
                    layout: horizontalLayout
                });
                r("Container", ["vertical", "layout"]).setAll({
                    layout: verticalLayout
                });
                /**
                 * ------------------------------------------------------------------------
                 * core: patterns
                 * ------------------------------------------------------------------------
                 */
                r("Pattern").setAll({
                    repetition: "repeat",
                    width: 50,
                    height: 50,
                    rotation: 0,
                    fillOpacity: 1
                });
                r("LinePattern").setAll({
                    gap: 6,
                    colorOpacity: 1,
                    width: 49,
                    height: 49
                });
                r("RectanglePattern").setAll({
                    gap: 6,
                    checkered: false,
                    centered: true,
                    maxWidth: 5,
                    maxHeight: 5,
                    width: 48,
                    height: 48,
                    strokeWidth: 0
                });
                r("CirclePattern").setAll({
                    gap: 5,
                    checkered: false,
                    centered: false,
                    radius: 3,
                    strokeWidth: 0,
                    width: 45,
                    height: 45
                });
                /**
                 * ------------------------------------------------------------------------
                 * core: gradients
                 * ------------------------------------------------------------------------
                 */
                r("LinearGradient").setAll({
                    rotation: 90
                });
                /**
                 * ------------------------------------------------------------------------
                 * core: Legend
                 * ------------------------------------------------------------------------
                 */
                r("Legend").setAll({
                    fillField: "fill",
                    strokeField: "stroke",
                    nameField: "name",
                    layout: GridLayout.new(this._root, {}),
                    layer: 30,
                    clickTarget: "itemContainer"
                });
                // Class: Container
                r("Container", ["legend", "item", "itemcontainer"]).setAll({
                    paddingLeft: 5,
                    paddingRight: 5,
                    paddingBottom: 5,
                    paddingTop: 5,
                    layout: horizontalLayout,
                    setStateOnChildren: true,
                    interactiveChildren: false,
                    ariaChecked: true,
                    focusable: true,
                    ariaLabel: language.translate("Press ENTER to toggle")
                });
                {
                    var rule = r("Rectangle", ["legend", "item", "background"]);
                    rule.setAll({
                        fillOpacity: 0,
                    });
                    setColor(rule, "fill", ic, "background");
                }
                r("Container", ["legend", "marker"]).setAll({
                    setStateOnChildren: true,
                    centerY: p50,
                    paddingLeft: 0,
                    paddingRight: 0,
                    paddingBottom: 0,
                    paddingTop: 0,
                    width: 18,
                    height: 18
                });
                r("RoundedRectangle", ["legend", "marker", "rectangle"]).setAll({
                    width: p100,
                    height: p100,
                    cornerRadiusBL: 3,
                    cornerRadiusTL: 3,
                    cornerRadiusBR: 3,
                    cornerRadiusTR: 3
                });
                {
                    var rule = r("RoundedRectangle", ["legend", "marker", "rectangle"]).states.create("disabled", {});
                    setColor(rule, "fill", ic, "disabled");
                    setColor(rule, "stroke", ic, "disabled");
                }
                r("Label", ["legend", "label"]).setAll({
                    centerY: p50,
                    marginLeft: 5,
                    paddingRight: 0,
                    paddingLeft: 0,
                    paddingTop: 0,
                    paddingBottom: 0,
                    populateText: true
                });
                {
                    var rule = r("Label", ["legend", "label"]).states.create("disabled", {});
                    setColor(rule, "fill", ic, "disabled");
                }
                r("Label", ["legend", "value", "label"]).setAll({
                    centerY: p50,
                    marginLeft: 5,
                    paddingRight: 0,
                    paddingLeft: 0,
                    paddingTop: 0,
                    paddingBottom: 0,
                    width: 50,
                    centerX: p100,
                    populateText: true
                });
                {
                    var rule = r("Label", ["legend", "value", "label"]).states.create("disabled", {});
                    setColor(rule, "fill", ic, "disabled");
                }
                /**
                 * ------------------------------------------------------------------------
                 * core: HeatLegend
                 * ------------------------------------------------------------------------
                 */
                r("HeatLegend").setAll({
                    stepCount: 1
                });
                r("RoundedRectangle", ["heatlegend", "marker"]).setAll({
                    cornerRadiusTR: 0,
                    cornerRadiusBR: 0,
                    cornerRadiusTL: 0,
                    cornerRadiusBL: 0
                });
                r("RoundedRectangle", ["vertical", "heatlegend", "marker"]).setAll({
                    height: p100,
                    width: 15
                });
                r("RoundedRectangle", ["horizontal", "heatlegend", "marker"]).setAll({
                    width: p100,
                    height: 15
                });
                r("HeatLegend", ["vertical"]).setAll({
                    height: p100
                });
                r("HeatLegend", ["horizontal"]).setAll({
                    width: p100
                });
                r("Label", ["heatlegend", "start"]).setAll({
                    paddingLeft: 5,
                    paddingRight: 5,
                    paddingTop: 5,
                    paddingBottom: 5
                });
                r("Label", ["heatlegend", "end"]).setAll({
                    paddingLeft: 5,
                    paddingRight: 5,
                    paddingTop: 5,
                    paddingBottom: 5
                });
                /**
                 * ------------------------------------------------------------------------
                 * core: Labels
                 * ------------------------------------------------------------------------
                 */
                {
                    var rule = r("Label");
                    rule.setAll({
                        paddingTop: 8,
                        paddingBottom: 8,
                        paddingLeft: 10,
                        paddingRight: 10,
                        fontFamily: "-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"",
                        fontSize: "1em",
                        populateText: false
                    });
                    setColor(rule, "fill", ic, "text");
                }
                r("RadialLabel").setAll({
                    textType: "regular",
                    centerY: p50,
                    centerX: p50,
                    inside: false,
                    radius: 0,
                    baseRadius: p100,
                    orientation: "auto",
                    textAlign: "center"
                });
                /**
                 * ------------------------------------------------------------------------
                 * core: Elements and shapes
                 * ------------------------------------------------------------------------
                 */
                r("RoundedRectangle").setAll({
                    cornerRadiusTL: 8,
                    cornerRadiusBL: 8,
                    cornerRadiusTR: 8,
                    cornerRadiusBR: 8
                });
                r("PointedRectangle").setAll({
                    pointerBaseWidth: 15,
                    pointerLength: 10,
                    cornerRadius: 8
                });
                r("Slice").setAll({
                    shiftRadius: 0,
                    dRadius: 0,
                    dInnerRadius: 0
                });
                {
                    var rule = r("Tick");
                    rule.setAll({
                        strokeOpacity: .15,
                        isMeasured: false,
                        length: 5,
                        position: "absolute"
                    });
                    setColor(rule, "stroke", ic, "grid");
                }
                r("Bullet").setAll({
                    locationX: 0.5,
                    locationY: 0.5
                });
                /**
                 * ------------------------------------------------------------------------
                 * core: Tooltip
                 * ------------------------------------------------------------------------
                 */
                r("Tooltip").setAll({
                    position: "absolute",
                    getFillFromSprite: true,
                    getStrokeFromSprite: false,
                    autoTextColor: true,
                    paddingTop: 9,
                    paddingBottom: 8,
                    paddingLeft: 10,
                    paddingRight: 10,
                    marginBottom: 5,
                    pointerOrientation: "vertical",
                    centerX: p50,
                    centerY: p50,
                    animationEasing: out(cubic),
                    exportable: false
                    //layer: 100
                });
                {
                    var rule = r("PointedRectangle", ["tooltip", "background"]);
                    rule.setAll({
                        strokeOpacity: 0.9,
                        cornerRadius: 4,
                        pointerLength: 4,
                        pointerBaseWidth: 8,
                        fillOpacity: 0.9,
                        stroke: Color.fromHex(0xffffff)
                    });
                }
                {
                    var rule = r("Label", ["tooltip"]);
                    rule.setAll({
                        role: "tooltip",
                        populateText: true,
                        paddingRight: 0,
                        paddingTop: 0,
                        paddingLeft: 0,
                        paddingBottom: 0
                    });
                    setColor(rule, "fill", ic, "alternativeText");
                }
                /**
                 * ------------------------------------------------------------------------
                 * core: Button
                 * ------------------------------------------------------------------------
                 */
                r("Button").setAll({
                    paddingTop: 8,
                    paddingBottom: 8,
                    paddingLeft: 10,
                    paddingRight: 10,
                    interactive: true,
                    layout: horizontalLayout,
                    interactiveChildren: false,
                    setStateOnChildren: true,
                    focusable: true
                });
                r("Button").states.create("hover", {});
                r("Button").states.create("down", { stateAnimationDuration: 0 });
                r("Button").states.create("active", {});
                {
                    var rule = r("RoundedRectangle", ["button", "background"]);
                    setColor(rule, "fill", ic, "primaryButton");
                    setColor(rule, "stroke", ic, "primaryButtonStroke");
                }
                {
                    var rule = r("RoundedRectangle", ["button", "background"]).states.create("hover", {});
                    setColor(rule, "fill", ic, "primaryButtonHover");
                }
                {
                    var rule = r("RoundedRectangle", ["button", "background"]).states.create("down", { stateAnimationDuration: 0 });
                    setColor(rule, "fill", ic, "primaryButtonDown");
                }
                {
                    var rule = r("RoundedRectangle", ["button", "background"]).states.create("active", {});
                    setColor(rule, "fill", ic, "primaryButtonActive");
                }
                {
                    var rule = r("Graphics", ["button", "icon"]);
                    setColor(rule, "stroke", ic, "primaryButtonText");
                }
                {
                    var rule = r("Label", ["button"]);
                    setColor(rule, "fill", ic, "primaryButtonText");
                }
                /**
                 * ------------------------------------------------------------------------
                 * charts/xy: ZoomOutButton
                 * ------------------------------------------------------------------------
                 */
                r("Button", ["zoom"]).setAll({
                    paddingTop: 18,
                    paddingBottom: 18,
                    paddingLeft: 12,
                    paddingRight: 12,
                    centerX: 46,
                    centerY: -10,
                    y: 0,
                    x: p100,
                    role: "button",
                    ariaLabel: language.translate("Zoom Out"),
                    layer: 30
                });
                {
                    var rule = r("RoundedRectangle", ["background", "button", "zoom"]);
                    rule.setAll({
                        cornerRadiusBL: 40,
                        cornerRadiusBR: 40,
                        cornerRadiusTL: 40,
                        cornerRadiusTR: 40
                    });
                    setColor(rule, "fill", ic, "primaryButton");
                }
                {
                    var rule = r("RoundedRectangle", ["background", "button", "zoom"]).states.create("hover", {});
                    setColor(rule, "fill", ic, "primaryButtonHover");
                }
                {
                    var rule = r("RoundedRectangle", ["background", "button", "zoom"]).states.create("down", { stateAnimationDuration: 0 });
                    setColor(rule, "fill", ic, "primaryButtonDown");
                }
                {
                    var rule = r("Graphics", ["icon", "button", "zoom"]);
                    rule.setAll({
                        strokeOpacity: 0.7,
                        draw: function (display) {
                            display.moveTo(0, 0);
                            display.lineTo(12, 0);
                        }
                    });
                    setColor(rule, "stroke", ic, "primaryButtonText");
                }
                /**
                 * ------------------------------------------------------------------------
                 * core: ResizeButton
                 * ------------------------------------------------------------------------
                 */
                r("Button", ["resize"]).setAll({
                    paddingTop: 9,
                    paddingBottom: 9,
                    paddingLeft: 13,
                    paddingRight: 13,
                    draggable: true,
                    centerX: p50,
                    centerY: p50,
                    position: "absolute",
                    role: "slider",
                    ariaValueMin: "0",
                    ariaValueMax: "100",
                    ariaLabel: language.translate("Use up and down arrows to move selection")
                });
                {
                    var rule = r("RoundedRectangle", ["background", "resize", "button"]);
                    rule.setAll({
                        cornerRadiusBL: 40,
                        cornerRadiusBR: 40,
                        cornerRadiusTL: 40,
                        cornerRadiusTR: 40
                    });
                    setColor(rule, "fill", ic, "secondaryButton");
                    setColor(rule, "stroke", ic, "secondaryButtonStroke");
                }
                {
                    var rule = r("RoundedRectangle", ["background", "resize", "button"]).states.create("hover", {});
                    setColor(rule, "fill", ic, "secondaryButtonHover");
                }
                {
                    var rule = r("RoundedRectangle", ["background", "resize", "button"]).states.create("down", { stateAnimationDuration: 0 });
                    setColor(rule, "fill", ic, "secondaryButtonDown");
                }
                {
                    var rule = r("Graphics", ["resize", "button", "icon"]);
                    rule.setAll({
                        strokeOpacity: 0.7,
                        draw: function (display) {
                            display.moveTo(0, 0);
                            display.lineTo(0, 12);
                            display.moveTo(4, 0);
                            display.lineTo(4, 12);
                        }
                    });
                    setColor(rule, "stroke", ic, "secondaryButtonText");
                }
                r("Button", ["resize", "vertical"]).setAll({
                    rotation: 90,
                    cursorOverStyle: "ns-resize"
                });
                r("Button", ["resize", "horizontal"]).setAll({
                    cursorOverStyle: "ew-resize"
                });
                /**
                 * ------------------------------------------------------------------------
                 * core: PlayButton
                 * ------------------------------------------------------------------------
                 */
                r("Button", ["play"]).setAll({
                    paddingTop: 13,
                    paddingBottom: 13,
                    paddingLeft: 14,
                    paddingRight: 14,
                    ariaLabel: language.translate("Play"),
                    toggleKey: "active"
                });
                {
                    var rule = r("RoundedRectangle", ["play", "background"]);
                    rule.setAll({
                        strokeOpacity: 0.5,
                        cornerRadiusBL: 100,
                        cornerRadiusBR: 100,
                        cornerRadiusTL: 100,
                        cornerRadiusTR: 100
                    });
                    setColor(rule, "fill", ic, "primaryButton");
                }
                {
                    var rule = r("Graphics", ["play", "icon"]);
                    rule.setAll({
                        stateAnimationDuration: 0,
                        dx: 1,
                        draw: function (display) {
                            display.moveTo(0, -5);
                            display.lineTo(8, 0);
                            display.lineTo(0, 5);
                            display.lineTo(0, -5);
                        }
                    });
                    setColor(rule, "fill", ic, "primaryButtonText");
                }
                r("Graphics", ["play", "icon"]).states.create("default", {
                    stateAnimationDuration: 0
                });
                r("Graphics", ["play", "icon"]).states.create("active", {
                    stateAnimationDuration: 0,
                    draw: function (display) {
                        display.moveTo(-4, -5);
                        display.lineTo(-1, -5);
                        display.lineTo(-1, 5);
                        display.lineTo(-4, 5);
                        display.lineTo(-4, -5);
                        display.moveTo(4, -5);
                        display.lineTo(1, -5);
                        display.lineTo(1, 5);
                        display.lineTo(4, 5);
                        display.lineTo(4, -5);
                    }
                });
                /**
                 * ------------------------------------------------------------------------
                 * core: SwitchButton
                 * ------------------------------------------------------------------------
                 */
                r("Button", ["switch"]).setAll({
                    paddingTop: 4,
                    paddingBottom: 4,
                    paddingLeft: 4,
                    paddingRight: 4,
                    ariaLabel: language.translate("Press ENTER to toggle"),
                    toggleKey: "active",
                    width: 40,
                    height: 24,
                    layout: null
                });
                {
                    var rule = r("RoundedRectangle", ["switch", "background"]);
                    rule.setAll({
                        strokeOpacity: 0.5,
                        cornerRadiusBL: 100,
                        cornerRadiusBR: 100,
                        cornerRadiusTL: 100,
                        cornerRadiusTR: 100
                    });
                    setColor(rule, "fill", ic, "primaryButton");
                }
                {
                    var rule = r("Circle", ["switch", "icon"]);
                    rule.setAll({
                        radius: 8,
                        centerY: 0,
                        centerX: 0,
                        dx: 0
                    });
                    setColor(rule, "fill", ic, "primaryButtonText");
                }
                r("Graphics", ["switch", "icon"]).states.create("active", {
                    dx: 16
                });
                /**
                 * ------------------------------------------------------------------------
                 * core: Scrollbar
                 * ------------------------------------------------------------------------
                 */
                r("Scrollbar").setAll({
                    start: 0,
                    end: 1,
                    layer: 30,
                    animationEasing: out(cubic)
                });
                r("Scrollbar", ["vertical"]).setAll({
                    marginRight: 13,
                    marginLeft: 13,
                    minWidth: 12,
                    height: p100
                });
                r("Scrollbar", ["horizontal"]).setAll({
                    marginTop: 13,
                    marginBottom: 13,
                    minHeight: 12,
                    width: p100
                });
                this.rule("Button", ["scrollbar"]).setAll({
                    exportable: false
                });
                {
                    var rule = r("RoundedRectangle", ["scrollbar", "main", "background"]);
                    rule.setAll({
                        cornerRadiusTL: 8,
                        cornerRadiusBL: 8,
                        cornerRadiusTR: 8,
                        cornerRadiusBR: 8,
                        fillOpacity: 0.8,
                    });
                    setColor(rule, "fill", ic, "fill");
                }
                {
                    var rule = r("RoundedRectangle", ["scrollbar", "thumb"]);
                    rule.setAll({
                        role: "slider",
                        ariaLive: "polite",
                        position: "absolute",
                        draggable: true
                    });
                    setColor(rule, "fill", ic, "secondaryButton");
                }
                {
                    var rule = r("RoundedRectangle", ["scrollbar", "thumb"]).states.create("hover", {});
                    setColor(rule, "fill", ic, "secondaryButtonHover");
                }
                {
                    var rule = r("RoundedRectangle", ["scrollbar", "thumb"]).states.create("down", { stateAnimationDuration: 0 });
                    setColor(rule, "fill", ic, "secondaryButtonDown");
                }
                r("RoundedRectangle", ["scrollbar", "thumb", "vertical"]).setAll({
                    x: p50,
                    width: p100,
                    centerX: p50,
                    ariaLabel: language.translate("Use up and down arrows to move selection")
                });
                r("RoundedRectangle", ["scrollbar", "thumb", "horizontal"]).setAll({
                    y: p50,
                    centerY: p50,
                    height: p100,
                    ariaLabel: language.translate("Use left and right arrows to move selection")
                });
                // @todo: is this needed? used to be "ContentScrollbar"
                // r("Scrollbar", ["content?"]).setAll({
                // 	marginRight: 0,
                // 	marginLeft: 5,
                // 	layer: 5
                // });
                /**
                 * ========================================================================
                 * charts/xy
                 * ========================================================================
                 *
                 * This needs to be in DefaultTheme because it's the only theme that is
                 * automatically applied to Root, and tooltips different ancestors
                 * than actual charts using them.
                 */
                {
                    var rule = r("PointedRectangle", ["axis", "tooltip", "background"]);
                    rule.setAll({
                        cornerRadius: 0
                    });
                    setColor(rule, "fill", ic, "alternativeBackground");
                }
                r("Label", ["axis", "tooltip"]).setAll({
                    role: undefined
                });
                r("Label", ["axis", "tooltip", "y"]).setAll({
                    textAlign: "right"
                });
                r("Label", ["axis", "tooltip", "y", "opposite"]).setAll({
                    textAlign: "left"
                });
                r("Label", ["axis", "tooltip", "x"]).setAll({
                    textAlign: "center"
                });
                r("Tooltip", ["categoryaxis"]).setAll({
                    labelText: "{category}"
                });
                /**
                 * ------------------------------------------------------------------------
                 * Shapes
                 * ------------------------------------------------------------------------
                 */
                // Class: Graphics
                r("Star").setAll({
                    spikes: 5,
                    innerRadius: 5,
                    radius: 10
                });
                // STOCK
                r("Tooltip", ["stock"]).setAll({
                    paddingTop: 6,
                    paddingBottom: 5,
                    paddingLeft: 7,
                    paddingRight: 7
                });
                r("PointedRectangle", ["tooltip", "stock", "axis"]).setAll({
                    pointerLength: 0,
                    pointerBaseWidth: 0,
                    cornerRadius: 3
                });
                r("Label", ["tooltip", "stock"]).setAll({
                    fontSize: "0.8em"
                });
            }
        });
        return DefaultTheme;
    }(Theme));

    /**
     * Modified from Pixi:
     *
     * The MIT License
     *
     * Copyright (c) 2013-2017 Mathew Groves, Chad Engler
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     */
    /**
     * @ignore
     */
    var Matrix = /** @class */ (function () {
        function Matrix(a, b, c, d, tx, ty) {
            if (a === void 0) { a = 1; }
            if (b === void 0) { b = 0; }
            if (c === void 0) { c = 0; }
            if (d === void 0) { d = 1; }
            if (tx === void 0) { tx = 0; }
            if (ty === void 0) { ty = 0; }
            Object.defineProperty(this, "a", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "b", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "c", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "d", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "tx", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "ty", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            this.a = a;
            this.b = b;
            this.c = c;
            this.d = d;
            this.tx = tx;
            this.ty = ty;
        }
        /**
         * Sets the matrix based on all the available properties
         */
        Object.defineProperty(Matrix.prototype, "setTransform", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (x, y, pivotX, pivotY, rotation, scale) {
                if (scale === void 0) { scale = 1; }
                this.a = Math.cos(rotation) * scale;
                this.b = Math.sin(rotation) * scale;
                this.c = -Math.sin(rotation) * scale;
                this.d = Math.cos(rotation) * scale;
                this.tx = x - ((pivotX * this.a) + (pivotY * this.c));
                this.ty = y - ((pivotX * this.b) + (pivotY * this.d));
            }
        });
        /**
         * Get a new position with the current transformation applied.
         * Can be used to go from a child's coordinate space to the world coordinate space. (e.g. rendering)
         */
        Object.defineProperty(Matrix.prototype, "apply", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (origin) {
                return {
                    x: (this.a * origin.x) + (this.c * origin.y) + this.tx,
                    y: (this.b * origin.x) + (this.d * origin.y) + this.ty
                };
            }
        });
        /**
         * Get a new position with the inverse of the current transformation applied.
         * Can be used to go from the world coordinate space to a child's coordinate space. (e.g. input)
         */
        Object.defineProperty(Matrix.prototype, "applyInverse", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (origin) {
                var id = 1 / ((this.a * this.d) + (this.c * -this.b));
                return {
                    x: (this.d * id * origin.x) + (-this.c * id * origin.y) + (((this.ty * this.c) - (this.tx * this.d)) * id),
                    y: (this.a * id * origin.y) + (-this.b * id * origin.x) + (((-this.ty * this.a) + (this.tx * this.b)) * id)
                };
            }
        });
        /**
         * Appends the given Matrix to this Matrix.
         */
        Object.defineProperty(Matrix.prototype, "append", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (matrix) {
                var a1 = this.a;
                var b1 = this.b;
                var c1 = this.c;
                var d1 = this.d;
                this.a = (matrix.a * a1) + (matrix.b * c1);
                this.b = (matrix.a * b1) + (matrix.b * d1);
                this.c = (matrix.c * a1) + (matrix.d * c1);
                this.d = (matrix.c * b1) + (matrix.d * d1);
                this.tx = (matrix.tx * a1) + (matrix.ty * c1) + this.tx;
                this.ty = (matrix.tx * b1) + (matrix.ty * d1) + this.ty;
            }
        });
        /**
         * Prepends the given Matrix to this Matrix.
         */
        Object.defineProperty(Matrix.prototype, "prepend", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (matrix) {
                var tx1 = this.tx;
                if (matrix.a !== 1 || matrix.b !== 0 || matrix.c !== 0 || matrix.d !== 1) {
                    var a1 = this.a;
                    var c1 = this.c;
                    this.a = (a1 * matrix.a) + (this.b * matrix.c);
                    this.b = (a1 * matrix.b) + (this.b * matrix.d);
                    this.c = (c1 * matrix.a) + (this.d * matrix.c);
                    this.d = (c1 * matrix.b) + (this.d * matrix.d);
                }
                this.tx = (tx1 * matrix.a) + (this.ty * matrix.c) + matrix.tx;
                this.ty = (tx1 * matrix.b) + (this.ty * matrix.d) + matrix.ty;
            }
        });
        /**
         * Copies the other matrix's properties into this matrix
         */
        Object.defineProperty(Matrix.prototype, "copyFrom", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (matrix) {
                this.a = matrix.a;
                this.b = matrix.b;
                this.c = matrix.c;
                this.d = matrix.d;
                this.tx = matrix.tx;
                this.ty = matrix.ty;
            }
        });
        return Matrix;
    }());

    var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

    var TAU = Math.PI * 2;

    var mapToEllipse = function mapToEllipse(_ref, rx, ry, cosphi, sinphi, centerx, centery) {
      var x = _ref.x,
          y = _ref.y;

      x *= rx;
      y *= ry;

      var xp = cosphi * x - sinphi * y;
      var yp = sinphi * x + cosphi * y;

      return {
        x: xp + centerx,
        y: yp + centery
      };
    };

    var approxUnitArc = function approxUnitArc(ang1, ang2) {
      // If 90 degree circular arc, use a constant
      // as derived from http://spencermortensen.com/articles/bezier-circle
      var a = ang2 === 1.5707963267948966 ? 0.551915024494 : ang2 === -1.5707963267948966 ? -0.551915024494 : 4 / 3 * Math.tan(ang2 / 4);

      var x1 = Math.cos(ang1);
      var y1 = Math.sin(ang1);
      var x2 = Math.cos(ang1 + ang2);
      var y2 = Math.sin(ang1 + ang2);

      return [{
        x: x1 - y1 * a,
        y: y1 + x1 * a
      }, {
        x: x2 + y2 * a,
        y: y2 - x2 * a
      }, {
        x: x2,
        y: y2
      }];
    };

    var vectorAngle = function vectorAngle(ux, uy, vx, vy) {
      var sign = ux * vy - uy * vx < 0 ? -1 : 1;

      var dot = ux * vx + uy * vy;

      if (dot > 1) {
        dot = 1;
      }

      if (dot < -1) {
        dot = -1;
      }

      return sign * Math.acos(dot);
    };

    var getArcCenter = function getArcCenter(px, py, cx, cy, rx, ry, largeArcFlag, sweepFlag, sinphi, cosphi, pxp, pyp) {
      var rxsq = Math.pow(rx, 2);
      var rysq = Math.pow(ry, 2);
      var pxpsq = Math.pow(pxp, 2);
      var pypsq = Math.pow(pyp, 2);

      var radicant = rxsq * rysq - rxsq * pypsq - rysq * pxpsq;

      if (radicant < 0) {
        radicant = 0;
      }

      radicant /= rxsq * pypsq + rysq * pxpsq;
      radicant = Math.sqrt(radicant) * (largeArcFlag === sweepFlag ? -1 : 1);

      var centerxp = radicant * rx / ry * pyp;
      var centeryp = radicant * -ry / rx * pxp;

      var centerx = cosphi * centerxp - sinphi * centeryp + (px + cx) / 2;
      var centery = sinphi * centerxp + cosphi * centeryp + (py + cy) / 2;

      var vx1 = (pxp - centerxp) / rx;
      var vy1 = (pyp - centeryp) / ry;
      var vx2 = (-pxp - centerxp) / rx;
      var vy2 = (-pyp - centeryp) / ry;

      var ang1 = vectorAngle(1, 0, vx1, vy1);
      var ang2 = vectorAngle(vx1, vy1, vx2, vy2);

      if (sweepFlag === 0 && ang2 > 0) {
        ang2 -= TAU;
      }

      if (sweepFlag === 1 && ang2 < 0) {
        ang2 += TAU;
      }

      return [centerx, centery, ang1, ang2];
    };

    var arcToBezier = function arcToBezier(_ref2) {
      var px = _ref2.px,
          py = _ref2.py,
          cx = _ref2.cx,
          cy = _ref2.cy,
          rx = _ref2.rx,
          ry = _ref2.ry,
          _ref2$xAxisRotation = _ref2.xAxisRotation,
          xAxisRotation = _ref2$xAxisRotation === undefined ? 0 : _ref2$xAxisRotation,
          _ref2$largeArcFlag = _ref2.largeArcFlag,
          largeArcFlag = _ref2$largeArcFlag === undefined ? 0 : _ref2$largeArcFlag,
          _ref2$sweepFlag = _ref2.sweepFlag,
          sweepFlag = _ref2$sweepFlag === undefined ? 0 : _ref2$sweepFlag;

      var curves = [];

      if (rx === 0 || ry === 0) {
        return [];
      }

      var sinphi = Math.sin(xAxisRotation * TAU / 360);
      var cosphi = Math.cos(xAxisRotation * TAU / 360);

      var pxp = cosphi * (px - cx) / 2 + sinphi * (py - cy) / 2;
      var pyp = -sinphi * (px - cx) / 2 + cosphi * (py - cy) / 2;

      if (pxp === 0 && pyp === 0) {
        return [];
      }

      rx = Math.abs(rx);
      ry = Math.abs(ry);

      var lambda = Math.pow(pxp, 2) / Math.pow(rx, 2) + Math.pow(pyp, 2) / Math.pow(ry, 2);

      if (lambda > 1) {
        rx *= Math.sqrt(lambda);
        ry *= Math.sqrt(lambda);
      }

      var _getArcCenter = getArcCenter(px, py, cx, cy, rx, ry, largeArcFlag, sweepFlag, sinphi, cosphi, pxp, pyp),
          _getArcCenter2 = _slicedToArray(_getArcCenter, 4),
          centerx = _getArcCenter2[0],
          centery = _getArcCenter2[1],
          ang1 = _getArcCenter2[2],
          ang2 = _getArcCenter2[3];

      // If 'ang2' == 90.0000000001, then `ratio` will evaluate to
      // 1.0000000001. This causes `segments` to be greater than one, which is an
      // unecessary split, and adds extra points to the bezier curve. To alleviate
      // this issue, we round to 1.0 when the ratio is close to 1.0.


      var ratio = Math.abs(ang2) / (TAU / 4);
      if (Math.abs(1.0 - ratio) < 0.0000001) {
        ratio = 1.0;
      }

      var segments = Math.max(Math.ceil(ratio), 1);

      ang2 /= segments;

      for (var i = 0; i < segments; i++) {
        curves.push(approxUnitArc(ang1, ang2));
        ang1 += ang2;
      }

      return curves.map(function (curve) {
        var _mapToEllipse = mapToEllipse(curve[0], rx, ry, cosphi, sinphi, centerx, centery),
            x1 = _mapToEllipse.x,
            y1 = _mapToEllipse.y;

        var _mapToEllipse2 = mapToEllipse(curve[1], rx, ry, cosphi, sinphi, centerx, centery),
            x2 = _mapToEllipse2.x,
            y2 = _mapToEllipse2.y;

        var _mapToEllipse3 = mapToEllipse(curve[2], rx, ry, cosphi, sinphi, centerx, centery),
            x = _mapToEllipse3.x,
            y = _mapToEllipse3.y;

        return { x1: x1, y1: y1, x2: x2, y2: y2, x: x, y: y };
      });
    };

    /** @ignore */ /** */
    /**
     * @ignore
     */
    function checkArgs(name, actual, expected) {
        if (actual !== expected) {
            throw new Error("Required " + expected + " arguments for " + name + " but got " + actual);
        }
    }
    /**
     * @ignore
     */
    function checkMinArgs(name, actual, expected) {
        if (actual < expected) {
            throw new Error("Required at least " + expected + " arguments for " + name + " but got " + actual);
        }
    }
    /**
     * @ignore
     */
    function checkEvenArgs(name, actual, expected) {
        checkMinArgs(name, actual, expected);
        if ((actual % expected) !== 0) {
            throw new Error("Arguments for " + name + " must be in pairs of " + expected);
        }
    }
    /**
     * @ignore
     */
    function assertBinary(value) {
        if (value === 0 || value === 1) {
            return value;
        }
        else {
            throw new Error("Flag must be 0 or 1");
        }
    }
    //  1 -> 0xffffff * (2 / 2)
    //  2 -> 0xffffff * (1 / 2)
    //
    //  3 -> 0xffffff * (3 / 4)
    //  4 -> 0xffffff * (1 / 4)
    //
    //  5 -> 0xffffff * (7 / 8)
    //  6 -> 0xffffff * (5 / 8)
    //  7 -> 0xffffff * (3 / 8)
    //  8 -> 0xffffff * (1 / 8)
    //
    //  9 -> 0xffffff * (15 / 16)
    // 10 -> 0xffffff * (13 / 16)
    // 11 -> 0xffffff * (11 / 16)
    // 12 -> 0xffffff *  (9 / 16)
    // 13 -> 0xffffff *  (7 / 16)
    // 14 -> 0xffffff *  (5 / 16)
    // 15 -> 0xffffff *  (3 / 16)
    // 16 -> 0xffffff *  (1 / 16)
    // @todo remove this old color distribution algo if the new one pans out
    // function distributeIdBAK(id: number): number {
    // 	if (id === 1) {
    // 		return 0x000001;
    // 	} else {
    // 		// Finds the closest power of 2
    // 		const base = Math.pow(2, Math.ceil(Math.log(id) / Math.log(2)));
    // 		// Translates the id into an odd fraction index
    // 		const index = ((base - id) * 2) + 1;
    // 		// TODO is Math.round correct ?
    // 		return Math.round(0xffffff * (index / base));
    // 	}
    // }
    /**
     * Function by smeans:
     * https://lowcode.life/generating-unique-contrasting-colors-in-javascript/
     * @ignore
     */
    function distributeId(id) {
        var rgb = [0, 0, 0];
        for (var i = 0; i < 24; i++) {
            rgb[i % 3] <<= 1;
            rgb[i % 3] |= id & 0x01;
            id >>= 1;
        }
        return (rgb[2] | 0) + (rgb[1] << 8) + (rgb[0] << 16);
    }
    /**
     * @ignore
     */
    function eachTargets(hitTarget, f) {
        for (;;) {
            if (hitTarget.interactive) {
                if (!f(hitTarget)) {
                    break;
                }
            }
            if (hitTarget._parent) {
                hitTarget = hitTarget._parent;
            }
            else {
                break;
            }
        }
    }
    // TODO feature detection for mouse/touch/pointer
    /**
     * @ignore
     */
    function onPointerEvent(element, name, f) {
        return addEventListener(element, getRendererEvent(name), function (event) {
            var touches = event.touches;
            if (touches) {
                if (touches.length == 0) {
                    touches = event.changedTouches;
                }
                f(copy$2(touches));
            }
            else {
                f([event]);
            }
        });
    }
    /**
     * @ignore
     */
    function isTainted(image) {
        var canvas = document.createElement("canvas");
        canvas.width = 1;
        canvas.height = 1;
        var context = canvas.getContext("2d");
        context.drawImage(image, 0, 0, 1, 1);
        try {
            context.getImageData(0, 0, 1, 1);
            return false;
        }
        catch (err) {
            console.warn("Image \"" + image.src + "\" is loaded from different host and is not covered by CORS policy. For more information about the implications read here: https://www.amcharts.com/docs/v5/concepts/cors");
            return true;
        }
    }
    /**
     * This is needed to workaround a bug in iOS which causes it to not GC canvas elements.
     *
     * @ignore
     */
    function clearCanvas(view) {
        view.width = 0;
        view.height = 0;
        view.style.width = "0px";
        view.style.height = "0px";
    }
    /**
     * @ignore
     */
    var CanvasPivot = /** @class */ (function () {
        function CanvasPivot() {
            Object.defineProperty(this, "_x", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(this, "_y", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
        }
        Object.defineProperty(CanvasPivot.prototype, "x", {
            get: function () {
                return this._x;
            },
            set: function (value) {
                this._x = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CanvasPivot.prototype, "y", {
            get: function () {
                return this._y;
            },
            set: function (value) {
                this._y = value;
            },
            enumerable: false,
            configurable: true
        });
        return CanvasPivot;
    }());
    /**
     * @ignore
     */
    var CanvasDisplayObject = /** @class */ (function (_super) {
        __extends(CanvasDisplayObject, _super);
        function CanvasDisplayObject(renderer) {
            var _this = _super.call(this) || this;
            Object.defineProperty(_this, "_layer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "mask", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: null
            });
            Object.defineProperty(_this, "visible", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: true
            });
            Object.defineProperty(_this, "exportable", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: true
            });
            Object.defineProperty(_this, "interactive", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "inactive", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "wheelable", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "cancelTouch", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "isMeasured", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "buttonMode", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "alpha", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 1
            });
            Object.defineProperty(_this, "compoundAlpha", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 1
            });
            Object.defineProperty(_this, "angle", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(_this, "scale", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 1
            });
            Object.defineProperty(_this, "x", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(_this, "y", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(_this, "pivot", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new CanvasPivot()
            });
            Object.defineProperty(_this, "filter", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "cursorOverStyle", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_replacedCursorStyle", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_localMatrix", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new Matrix()
            });
            Object.defineProperty(_this, "_matrix", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new Matrix()
            });
            // TODO can this be replaced with _localMatrix ?
            Object.defineProperty(_this, "_uMatrix", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new Matrix()
            });
            Object.defineProperty(_this, "_renderer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_parent", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_localBounds", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_bounds", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_colorId", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            _this._renderer = renderer;
            return _this;
        }
        Object.defineProperty(CanvasDisplayObject.prototype, "_dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._renderer._removeObject(this);
            }
        });
        Object.defineProperty(CanvasDisplayObject.prototype, "getCanvas", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this.getLayer().view;
            }
        });
        Object.defineProperty(CanvasDisplayObject.prototype, "getLayer", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var self = this;
                for (;;) {
                    if (self._layer) {
                        return self._layer;
                    }
                    else if (self._parent) {
                        self = self._parent;
                    }
                    else {
                        return this._renderer.defaultLayer;
                    }
                }
            }
        });
        Object.defineProperty(CanvasDisplayObject.prototype, "setLayer", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (order, visible) {
                if (visible === void 0) { visible = true; }
                if (order == null) {
                    this._layer = undefined;
                }
                else {
                    this._layer = this._renderer.getLayer(order, visible);
                    this._layer.visible = visible;
                    if (this._parent) {
                        this._parent.registerChildLayer(this._layer);
                    }
                }
            }
        });
        Object.defineProperty(CanvasDisplayObject.prototype, "markDirtyLayer", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.getLayer().dirty = true;
            }
        });
        Object.defineProperty(CanvasDisplayObject.prototype, "clear", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.invalidateBounds();
            }
        });
        Object.defineProperty(CanvasDisplayObject.prototype, "invalidateBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._localBounds = undefined;
            }
        });
        Object.defineProperty(CanvasDisplayObject.prototype, "_addBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_bounds) { }
        });
        Object.defineProperty(CanvasDisplayObject.prototype, "_getColorId", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (this._colorId === undefined) {
                    this._colorId = this._renderer.paintId(this);
                }
                return this._colorId;
            }
        });
        Object.defineProperty(CanvasDisplayObject.prototype, "_isInteractive", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this.inactive == false && (this.interactive || this._renderer._forceInteractive > 0);
            }
        });
        Object.defineProperty(CanvasDisplayObject.prototype, "_isInteractiveMask", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this._isInteractive();
            }
        });
        Object.defineProperty(CanvasDisplayObject.prototype, "contains", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (child) {
                for (;;) {
                    if (child === this) {
                        return true;
                    }
                    else if (child._parent) {
                        child = child._parent;
                    }
                    else {
                        return false;
                    }
                }
            }
        });
        Object.defineProperty(CanvasDisplayObject.prototype, "toGlobal", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (point) {
                return this._matrix.apply(point);
            }
        });
        Object.defineProperty(CanvasDisplayObject.prototype, "toLocal", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (point) {
                return this._matrix.applyInverse(point);
            }
        });
        Object.defineProperty(CanvasDisplayObject.prototype, "getLocalMatrix", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._uMatrix.setTransform(0, 0, this.pivot.x, this.pivot.y, this.angle * Math.PI / 180, this.scale);
                return this._uMatrix;
            }
        });
        Object.defineProperty(CanvasDisplayObject.prototype, "getLocalBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (!this._localBounds) {
                    var bn = 10000000;
                    this._localBounds = {
                        left: bn,
                        top: bn,
                        right: -bn,
                        bottom: -bn
                    };
                    this._addBounds(this._localBounds);
                }
                return this._localBounds;
            }
        });
        Object.defineProperty(CanvasDisplayObject.prototype, "getAdjustedBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (bounds) {
                this._setMatrix();
                var matrix = this.getLocalMatrix();
                var p0 = matrix.apply({ x: bounds.left, y: bounds.top });
                var p1 = matrix.apply({ x: bounds.right, y: bounds.top });
                var p2 = matrix.apply({ x: bounds.right, y: bounds.bottom });
                var p3 = matrix.apply({ x: bounds.left, y: bounds.bottom });
                return {
                    left: Math.min(p0.x, p1.x, p2.x, p3.x),
                    top: Math.min(p0.y, p1.y, p2.y, p3.y),
                    right: Math.max(p0.x, p1.x, p2.x, p3.x),
                    bottom: Math.max(p0.y, p1.y, p2.y, p3.y)
                };
            }
        });
        Object.defineProperty(CanvasDisplayObject.prototype, "on", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, callback, context) {
                if (this.interactive) {
                    return this._renderer._addEvent(this, key, callback, context);
                }
                else {
                    return new Disposer(function () { });
                }
            }
        });
        Object.defineProperty(CanvasDisplayObject.prototype, "_setMatrix", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                // TODO only calculate this if it has actually changed
                this._localMatrix.setTransform(this.x, this.y, this.pivot.x, this.pivot.y, 
                // Converts degrees to radians
                this.angle * Math.PI / 180, this.scale);
                this._matrix.copyFrom(this._localMatrix);
                if (this._parent) {
                    // TODO only calculate this if it has actually changed
                    this._matrix.prepend(this._parent._matrix);
                }
            }
        });
        Object.defineProperty(CanvasDisplayObject.prototype, "_transform", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (context, resolution) {
                var m = this._matrix;
                context.setTransform(m.a * resolution, m.b * resolution, m.c * resolution, m.d * resolution, m.tx * resolution, m.ty * resolution);
            }
        });
        Object.defineProperty(CanvasDisplayObject.prototype, "render", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (parentLayer) {
                var _this = this;
                if (this.visible && (this.exportable !== false || !this._renderer._omitTainted)) {
                    this._setMatrix();
                    var resolution_1 = this._renderer.resolution;
                    var layers = this._renderer.layers;
                    var ghostContext = this._renderer._ghostContext;
                    var mask_1 = this.mask;
                    if (mask_1) {
                        mask_1._setMatrix();
                    }
                    // TODO improve this
                    each$1(layers, function (layer) {
                        if (layer) {
                            var context = layer.context;
                            context.save();
                            // We must apply the mask before we transform the element
                            if (mask_1) {
                                mask_1._transform(context, layer.scale || resolution_1);
                                mask_1._runPath(context);
                                context.clip();
                            }
                            context.globalAlpha = _this.compoundAlpha * _this.alpha;
                            _this._transform(context, layer.scale || resolution_1);
                            if (_this.filter) {
                                context.filter = _this.filter;
                            }
                        }
                    });
                    ghostContext.save();
                    // We must apply the mask before we transform the element
                    if (mask_1 && this._isInteractiveMask()) {
                        mask_1._transform(ghostContext, resolution_1);
                        mask_1._runPath(ghostContext);
                        ghostContext.clip();
                    }
                    this._transform(ghostContext, resolution_1);
                    this._render(parentLayer);
                    ghostContext.restore();
                    each$1(layers, function (layer) {
                        if (layer) {
                            layer.context.restore();
                        }
                    });
                }
            }
        });
        Object.defineProperty(CanvasDisplayObject.prototype, "_render", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (parentLayer) {
                if (this.exportable === false) {
                    var layer = this._layer || parentLayer;
                    layer.tainted = true;
                }
            }
        });
        Object.defineProperty(CanvasDisplayObject.prototype, "hovering", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this._renderer._hovering.has(this);
            }
        });
        Object.defineProperty(CanvasDisplayObject.prototype, "dragging", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                return this._renderer._dragging.some(function (x) { return x.value === _this; });
            }
        });
        Object.defineProperty(CanvasDisplayObject.prototype, "dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.getLayer().dirty = true;
            }
        });
        Object.defineProperty(CanvasDisplayObject.prototype, "shouldCancelTouch", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var renderer = this._renderer;
                if (renderer.tapToActivate && !renderer._touchActive) {
                    return false;
                }
                if (this.cancelTouch) {
                    return true;
                }
                else if (this._parent) {
                    return this._parent.shouldCancelTouch();
                }
                return false;
            }
        });
        return CanvasDisplayObject;
    }(DisposerClass));
    /**
     * @ignore
     */
    var CanvasContainer = /** @class */ (function (_super) {
        __extends(CanvasContainer, _super);
        function CanvasContainer() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "interactiveChildren", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: true
            });
            Object.defineProperty(_this, "_childLayers", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_children", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            return _this;
        }
        Object.defineProperty(CanvasContainer.prototype, "_isInteractiveMask", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this.interactiveChildren || _super.prototype._isInteractiveMask.call(this);
            }
        });
        Object.defineProperty(CanvasContainer.prototype, "addChild", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (child) {
                child._parent = this;
                this._children.push(child);
                if (child._layer) {
                    this.registerChildLayer(child._layer);
                }
            }
        });
        Object.defineProperty(CanvasContainer.prototype, "addChildAt", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (child, index) {
                child._parent = this;
                this._children.splice(index, 0, child);
                if (child._layer) {
                    this.registerChildLayer(child._layer);
                }
            }
        });
        Object.defineProperty(CanvasContainer.prototype, "removeChild", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (child) {
                child._parent = undefined;
                removeFirst(this._children, child);
            }
        });
        Object.defineProperty(CanvasContainer.prototype, "_render", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (parentLayer) {
                var _this = this;
                _super.prototype._render.call(this, parentLayer);
                var renderer = this._renderer;
                if (this.interactive && this.interactiveChildren) {
                    ++renderer._forceInteractive;
                }
                var layer = this._layer || parentLayer;
                each$1(this._children, function (child) {
                    child.compoundAlpha = _this.compoundAlpha * _this.alpha;
                    child.render(layer);
                });
                if (this.interactive && this.interactiveChildren) {
                    --renderer._forceInteractive;
                }
            }
        });
        Object.defineProperty(CanvasContainer.prototype, "registerChildLayer", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (layer) {
                if (!this._childLayers) {
                    this._childLayers = [];
                }
                pushOne(this._childLayers, layer);
                if (this._parent) {
                    this._parent.registerChildLayer(layer);
                }
            }
        });
        Object.defineProperty(CanvasContainer.prototype, "markDirtyLayer", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (deep) {
                if (deep === void 0) { deep = false; }
                _super.prototype.markDirtyLayer.call(this);
                if (deep && this._childLayers) {
                    each$1(this._childLayers, function (layer) { return layer.dirty = true; });
                }
            }
        });
        Object.defineProperty(CanvasContainer.prototype, "dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype.dispose.call(this);
                if (this._childLayers) {
                    each$1(this._childLayers, function (layer) {
                        layer.dirty = true;
                    });
                }
            }
        });
        return CanvasContainer;
    }(CanvasDisplayObject));
    /**
     * @ignore
     */
    function setPoint(bounds, point) {
        bounds.left = Math.min(bounds.left, point.x);
        bounds.top = Math.min(bounds.top, point.y);
        bounds.right = Math.max(bounds.right, point.x);
        bounds.bottom = Math.max(bounds.bottom, point.y);
    }
    /**
     * @ignore
     */
    var Op = /** @class */ (function () {
        function Op() {
        }
        Object.defineProperty(Op.prototype, "colorize", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_context, _forceColor) { }
        });
        Object.defineProperty(Op.prototype, "path", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_context) { }
        });
        Object.defineProperty(Op.prototype, "addBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_bounds) { }
        });
        return Op;
    }());
    /**
     * @ignore
     */
    var BeginFill = /** @class */ (function (_super) {
        __extends(BeginFill, _super);
        function BeginFill(color) {
            var _this = _super.call(this) || this;
            Object.defineProperty(_this, "color", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: color
            });
            return _this;
        }
        Object.defineProperty(BeginFill.prototype, "colorize", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (context, forceColor) {
                if (forceColor !== undefined) {
                    context.fillStyle = forceColor;
                }
                else {
                    context.fillStyle = this.color;
                }
            }
        });
        return BeginFill;
    }(Op));
    /**
     * @ignore
     */
    var EndFill = /** @class */ (function (_super) {
        __extends(EndFill, _super);
        function EndFill(clearShadow) {
            var _this = _super.call(this) || this;
            Object.defineProperty(_this, "clearShadow", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: clearShadow
            });
            return _this;
        }
        Object.defineProperty(EndFill.prototype, "colorize", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (context, _forceColor) {
                context.fill();
                if (this.clearShadow) {
                    context.shadowColor = "";
                    context.shadowBlur = 0;
                    context.shadowOffsetX = 0;
                    context.shadowOffsetY = 0;
                }
            }
        });
        return EndFill;
    }(Op));
    /**
     * @ignore
     */
    var EndStroke = /** @class */ (function (_super) {
        __extends(EndStroke, _super);
        function EndStroke() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(EndStroke.prototype, "colorize", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (context, _forceColor) {
                context.stroke();
            }
        });
        return EndStroke;
    }(Op));
    /**
     * @ignore
     */
    var LineStyle = /** @class */ (function (_super) {
        __extends(LineStyle, _super);
        function LineStyle(width, color, lineJoin) {
            var _this = _super.call(this) || this;
            Object.defineProperty(_this, "width", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: width
            });
            Object.defineProperty(_this, "color", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: color
            });
            Object.defineProperty(_this, "lineJoin", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: lineJoin
            });
            return _this;
        }
        Object.defineProperty(LineStyle.prototype, "colorize", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (context, forceColor) {
                if (forceColor !== undefined) {
                    context.strokeStyle = forceColor;
                }
                else {
                    context.strokeStyle = this.color;
                }
                context.lineWidth = this.width;
                if (this.lineJoin) {
                    context.lineJoin = this.lineJoin;
                }
            }
        });
        return LineStyle;
    }(Op));
    /**
     * @ignore
     */
    var LineDash = /** @class */ (function (_super) {
        __extends(LineDash, _super);
        function LineDash(dash) {
            var _this = _super.call(this) || this;
            Object.defineProperty(_this, "dash", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: dash
            });
            return _this;
        }
        Object.defineProperty(LineDash.prototype, "colorize", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (context, _forceColor) {
                context.setLineDash(this.dash);
            }
        });
        return LineDash;
    }(Op));
    /**
     * @ignore
     */
    var LineDashOffset = /** @class */ (function (_super) {
        __extends(LineDashOffset, _super);
        function LineDashOffset(dashOffset) {
            var _this = _super.call(this) || this;
            Object.defineProperty(_this, "dashOffset", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: dashOffset
            });
            return _this;
        }
        Object.defineProperty(LineDashOffset.prototype, "colorize", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (context, _forceColor) {
                context.lineDashOffset = this.dashOffset;
            }
        });
        return LineDashOffset;
    }(Op));
    /**
     * @ignore
     */
    var DrawRect = /** @class */ (function (_super) {
        __extends(DrawRect, _super);
        function DrawRect(x, y, width, height) {
            var _this = _super.call(this) || this;
            Object.defineProperty(_this, "x", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: x
            });
            Object.defineProperty(_this, "y", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: y
            });
            Object.defineProperty(_this, "width", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: width
            });
            Object.defineProperty(_this, "height", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: height
            });
            return _this;
        }
        Object.defineProperty(DrawRect.prototype, "path", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (context) {
                context.rect(this.x, this.y, this.width, this.height);
            }
        });
        Object.defineProperty(DrawRect.prototype, "addBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (bounds) {
                var l = this.x;
                var t = this.y;
                var r = l + this.width;
                var b = t + this.height;
                setPoint(bounds, { x: l, y: t });
                setPoint(bounds, { x: r, y: t });
                setPoint(bounds, { x: l, y: b });
                setPoint(bounds, { x: r, y: b });
            }
        });
        return DrawRect;
    }(Op));
    /**
     * @ignore
     */
    var DrawCircle = /** @class */ (function (_super) {
        __extends(DrawCircle, _super);
        function DrawCircle(x, y, radius) {
            var _this = _super.call(this) || this;
            Object.defineProperty(_this, "x", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: x
            });
            Object.defineProperty(_this, "y", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: y
            });
            Object.defineProperty(_this, "radius", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: radius
            });
            return _this;
        }
        Object.defineProperty(DrawCircle.prototype, "path", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (context) {
                context.moveTo(this.x + this.radius, this.y);
                context.arc(this.x, this.y, this.radius, 0, 2 * Math.PI);
            }
        });
        // TODO handle skewing and rotation
        Object.defineProperty(DrawCircle.prototype, "addBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (bounds) {
                setPoint(bounds, { x: this.x - this.radius, y: this.y - this.radius });
                setPoint(bounds, { x: this.x + this.radius, y: this.y + this.radius });
            }
        });
        return DrawCircle;
    }(Op));
    /**
     * @ignore
     */
    var DrawEllipse = /** @class */ (function (_super) {
        __extends(DrawEllipse, _super);
        function DrawEllipse(x, y, radiusX, radiusY) {
            var _this = _super.call(this) || this;
            Object.defineProperty(_this, "x", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: x
            });
            Object.defineProperty(_this, "y", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: y
            });
            Object.defineProperty(_this, "radiusX", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: radiusX
            });
            Object.defineProperty(_this, "radiusY", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: radiusY
            });
            return _this;
        }
        Object.defineProperty(DrawEllipse.prototype, "path", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (context) {
                context.ellipse(0, 0, this.radiusX, this.radiusY, 0, 0, Math.PI * 2);
            }
        });
        // TODO handle skewing and rotation
        Object.defineProperty(DrawEllipse.prototype, "addBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (bounds) {
                setPoint(bounds, { x: this.x - this.radiusX, y: this.y - this.radiusY });
                setPoint(bounds, { x: this.x + this.radiusX, y: this.y + this.radiusY });
            }
        });
        return DrawEllipse;
    }(Op));
    /**
     * @ignore
     */
    var Arc = /** @class */ (function (_super) {
        __extends(Arc, _super);
        function Arc(cx, cy, radius, startAngle, endAngle, anticlockwise) {
            var _this = _super.call(this) || this;
            Object.defineProperty(_this, "cx", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: cx
            });
            Object.defineProperty(_this, "cy", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: cy
            });
            Object.defineProperty(_this, "radius", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: radius
            });
            Object.defineProperty(_this, "startAngle", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: startAngle
            });
            Object.defineProperty(_this, "endAngle", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: endAngle
            });
            Object.defineProperty(_this, "anticlockwise", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: anticlockwise
            });
            return _this;
        }
        Object.defineProperty(Arc.prototype, "path", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (context) {
                if (this.radius > 0) {
                    context.arc(this.cx, this.cy, this.radius, this.startAngle, this.endAngle, this.anticlockwise);
                }
            }
        });
        Object.defineProperty(Arc.prototype, "addBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (bounds) {
                var arcBounds = getArcBounds(this.cx, this.cy, this.startAngle * DEGREES, this.endAngle * DEGREES, this.radius);
                setPoint(bounds, { x: arcBounds.left, y: arcBounds.top });
                setPoint(bounds, { x: arcBounds.right, y: arcBounds.bottom });
            }
        });
        return Arc;
    }(Op));
    /**
     * @ignore
     */
    var ArcTo = /** @class */ (function (_super) {
        __extends(ArcTo, _super);
        function ArcTo(x1, y1, x2, y2, radius) {
            var _this = _super.call(this) || this;
            Object.defineProperty(_this, "x1", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: x1
            });
            Object.defineProperty(_this, "y1", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: y1
            });
            Object.defineProperty(_this, "x2", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: x2
            });
            Object.defineProperty(_this, "y2", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: y2
            });
            Object.defineProperty(_this, "radius", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: radius
            });
            return _this;
        }
        Object.defineProperty(ArcTo.prototype, "path", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (context) {
                if (this.radius > 0) {
                    context.arcTo(this.x1, this.y1, this.x2, this.y2, this.radius);
                }
            }
        });
        // TODO: add points
        Object.defineProperty(ArcTo.prototype, "addBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_bounds) {
                /*
                // not finished
                https://math.stackexchange.com/questions/1781438/finding-the-center-of-a-circle-given-two-points-and-a-radius-algebraically
        
                if (prevPoint) {
                    let x1 = prevPoint.x;
                    let y1 = prevPoint.y;
                    let x2 = this.x2;
                    let y2 = this.y2;
                    let r = this.radius;
        
                    let xa = (x2 - x1) / 2;
                    let ya = (y2 - y1) / 2;
        
                    let x0 = x1 + xa;
                    let y0 = y1 + ya;
        
                    let a = Math.hypot(xa, ya);
                    let b = Math.sqrt(r * r - a * a);
        
                    let cx = x0 + b * ya / a;
                    let cy = y0 - b * xa / a;
        
                    console.log(cx, cy);
                }*/
            }
        });
        return ArcTo;
    }(Op));
    /**
     * @ignore
     */
    var LineTo = /** @class */ (function (_super) {
        __extends(LineTo, _super);
        function LineTo(x, y) {
            var _this = _super.call(this) || this;
            Object.defineProperty(_this, "x", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: x
            });
            Object.defineProperty(_this, "y", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: y
            });
            return _this;
        }
        Object.defineProperty(LineTo.prototype, "path", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (context) {
                context.lineTo(this.x, this.y);
            }
        });
        Object.defineProperty(LineTo.prototype, "addBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (bounds) {
                setPoint(bounds, { x: this.x, y: this.y });
            }
        });
        return LineTo;
    }(Op));
    /**
     * @ignore
     */
    var MoveTo = /** @class */ (function (_super) {
        __extends(MoveTo, _super);
        function MoveTo(x, y) {
            var _this = _super.call(this) || this;
            Object.defineProperty(_this, "x", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: x
            });
            Object.defineProperty(_this, "y", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: y
            });
            return _this;
        }
        Object.defineProperty(MoveTo.prototype, "path", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (context) {
                context.moveTo(this.x, this.y);
            }
        });
        Object.defineProperty(MoveTo.prototype, "addBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (bounds) {
                setPoint(bounds, { x: this.x, y: this.y });
            }
        });
        return MoveTo;
    }(Op));
    /**
     * @ignore
     */
    var ClosePath = /** @class */ (function (_super) {
        __extends(ClosePath, _super);
        function ClosePath() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ClosePath.prototype, "path", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (context) {
                context.closePath();
            }
        });
        return ClosePath;
    }(Op));
    /**
     * @ignore
     */
    var BezierCurveTo = /** @class */ (function (_super) {
        __extends(BezierCurveTo, _super);
        function BezierCurveTo(cpX, cpY, cpX2, cpY2, toX, toY) {
            var _this = _super.call(this) || this;
            Object.defineProperty(_this, "cpX", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: cpX
            });
            Object.defineProperty(_this, "cpY", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: cpY
            });
            Object.defineProperty(_this, "cpX2", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: cpX2
            });
            Object.defineProperty(_this, "cpY2", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: cpY2
            });
            Object.defineProperty(_this, "toX", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: toX
            });
            Object.defineProperty(_this, "toY", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: toY
            });
            return _this;
        }
        Object.defineProperty(BezierCurveTo.prototype, "path", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (context) {
                context.bezierCurveTo(this.cpX, this.cpY, this.cpX2, this.cpY2, this.toX, this.toY);
            }
        });
        // TODO: OK?
        Object.defineProperty(BezierCurveTo.prototype, "addBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (bounds) {
                setPoint(bounds, { x: this.cpX, y: this.cpY });
                setPoint(bounds, { x: this.cpX2, y: this.cpY2 });
                setPoint(bounds, { x: this.toX, y: this.toY });
            }
        });
        return BezierCurveTo;
    }(Op));
    /**
     * @ignore
     */
    var QuadraticCurveTo = /** @class */ (function (_super) {
        __extends(QuadraticCurveTo, _super);
        function QuadraticCurveTo(cpX, cpY, toX, toY) {
            var _this = _super.call(this) || this;
            Object.defineProperty(_this, "cpX", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: cpX
            });
            Object.defineProperty(_this, "cpY", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: cpY
            });
            Object.defineProperty(_this, "toX", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: toX
            });
            Object.defineProperty(_this, "toY", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: toY
            });
            return _this;
        }
        Object.defineProperty(QuadraticCurveTo.prototype, "path", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (context) {
                context.quadraticCurveTo(this.cpX, this.cpY, this.toX, this.toY);
            }
        });
        // TODO: OK?
        Object.defineProperty(QuadraticCurveTo.prototype, "addBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (bounds) {
                setPoint(bounds, { x: this.cpX, y: this.cpY });
                setPoint(bounds, { x: this.toX, y: this.toY });
            }
        });
        return QuadraticCurveTo;
    }(Op));
    /**
     * @ignore
     */
    var Shadow = /** @class */ (function (_super) {
        __extends(Shadow, _super);
        function Shadow(color, blur, offsetX, offsetY, opacity) {
            var _this = _super.call(this) || this;
            Object.defineProperty(_this, "color", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: color
            });
            Object.defineProperty(_this, "blur", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: blur
            });
            Object.defineProperty(_this, "offsetX", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: offsetX
            });
            Object.defineProperty(_this, "offsetY", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: offsetY
            });
            Object.defineProperty(_this, "opacity", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: opacity
            });
            return _this;
        }
        Object.defineProperty(Shadow.prototype, "colorize", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (context, _forceColor) {
                if (this.opacity) {
                    context.fillStyle = this.color;
                }
                context.shadowColor = this.color;
                context.shadowBlur = this.blur;
                context.shadowOffsetX = this.offsetX;
                context.shadowOffsetY = this.offsetY;
            }
        });
        return Shadow;
    }(Op));
    /**
     * @ignore
     */
    var CanvasGraphics = /** @class */ (function (_super) {
        __extends(CanvasGraphics, _super);
        function CanvasGraphics() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_operations", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            Object.defineProperty(_this, "blendMode", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: BlendMode.NORMAL
            });
            Object.defineProperty(_this, "_hasShadows", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_fillAlpha", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_strokeAlpha", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            return _this;
        }
        Object.defineProperty(CanvasGraphics.prototype, "clear", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype.clear.call(this);
                this._operations.length = 0;
            }
        });
        Object.defineProperty(CanvasGraphics.prototype, "_pushOp", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (op) {
                this._operations.push(op);
            }
        });
        Object.defineProperty(CanvasGraphics.prototype, "beginFill", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (color, alpha) {
                if (alpha === void 0) { alpha = 1; }
                this._fillAlpha = alpha;
                if (color) {
                    if (color instanceof Color) {
                        this._pushOp(new BeginFill(color.toCSS(alpha)));
                    }
                    else {
                        this.isMeasured = true;
                        this._pushOp(new BeginFill(color));
                    }
                }
                else {
                    this._pushOp(new BeginFill("rgba(0, 0, 0, " + alpha + ")"));
                }
            }
        });
        Object.defineProperty(CanvasGraphics.prototype, "endFill", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._pushOp(new EndFill(this._hasShadows));
            }
        });
        Object.defineProperty(CanvasGraphics.prototype, "endStroke", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._pushOp(new EndStroke());
            }
        });
        Object.defineProperty(CanvasGraphics.prototype, "lineStyle", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (width, color, alpha, lineJoin) {
                if (width === void 0) { width = 0; }
                if (alpha === void 0) { alpha = 1; }
                this._strokeAlpha = alpha;
                if (color) {
                    if (color instanceof Color) {
                        this._pushOp(new LineStyle(width, color.toCSS(alpha), lineJoin));
                    }
                    else {
                        this._pushOp(new LineStyle(width, color, lineJoin));
                    }
                }
                else {
                    this._pushOp(new LineStyle(width, "rgba(0, 0, 0, " + alpha + ")", lineJoin));
                }
            }
        });
        Object.defineProperty(CanvasGraphics.prototype, "setLineDash", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dash) {
                this._pushOp(new LineDash(dash ? dash : []));
            }
        });
        Object.defineProperty(CanvasGraphics.prototype, "setLineDashOffset", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dashOffset) {
                if (dashOffset === void 0) { dashOffset = 0; }
                this._pushOp(new LineDashOffset(dashOffset));
            }
        });
        Object.defineProperty(CanvasGraphics.prototype, "drawRect", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (x, y, width, height) {
                this._pushOp(new DrawRect(x, y, width, height));
            }
        });
        Object.defineProperty(CanvasGraphics.prototype, "drawCircle", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (x, y, radius) {
                this._pushOp(new DrawCircle(x, y, radius));
            }
        });
        Object.defineProperty(CanvasGraphics.prototype, "drawEllipse", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (x, y, radiusX, radiusY) {
                this._pushOp(new DrawEllipse(x, y, radiusX, radiusY));
            }
        });
        Object.defineProperty(CanvasGraphics.prototype, "arc", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (cx, cy, radius, startAngle, endAngle, anticlockwise) {
                if (anticlockwise === void 0) { anticlockwise = false; }
                this._pushOp(new Arc(cx, cy, radius, startAngle, endAngle, anticlockwise));
            }
        });
        Object.defineProperty(CanvasGraphics.prototype, "arcTo", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (x1, y1, x2, y2, radius) {
                this._pushOp(new ArcTo(x1, y1, x2, y2, radius));
            }
        });
        Object.defineProperty(CanvasGraphics.prototype, "lineTo", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (x, y) {
                this._pushOp(new LineTo(x, y));
            }
        });
        Object.defineProperty(CanvasGraphics.prototype, "moveTo", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (x, y) {
                this._pushOp(new MoveTo(x, y));
            }
        });
        Object.defineProperty(CanvasGraphics.prototype, "bezierCurveTo", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (cpX, cpY, cpX2, cpY2, toX, toY) {
                this._pushOp(new BezierCurveTo(cpX, cpY, cpX2, cpY2, toX, toY));
            }
        });
        Object.defineProperty(CanvasGraphics.prototype, "quadraticCurveTo", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (cpX, cpY, toX, toY) {
                this._pushOp(new QuadraticCurveTo(cpX, cpY, toX, toY));
            }
        });
        Object.defineProperty(CanvasGraphics.prototype, "closePath", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._pushOp(new ClosePath());
            }
        });
        Object.defineProperty(CanvasGraphics.prototype, "shadow", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (color, blur, offsetX, offsetY, opacity) {
                if (blur === void 0) { blur = 0; }
                if (offsetX === void 0) { offsetX = 0; }
                if (offsetY === void 0) { offsetY = 0; }
                this._hasShadows = true;
                this._pushOp(new Shadow(opacity ? color.toCSS(opacity) : color.toCSS(this._fillAlpha || this._strokeAlpha), blur, offsetX, offsetY));
            }
        });
        // https://svgwg.org/svg2-draft/paths.html#DProperty
        // TODO better error checking
        Object.defineProperty(CanvasGraphics.prototype, "svgPath", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (path) {
                var _this = this;
                var x = 0;
                var y = 0;
                var cpx = null;
                var cpy = null;
                var qcpx = null;
                var qcpy = null;
                var SEGMENTS_REGEXP = /([MmZzLlHhVvCcSsQqTtAa])([^MmZzLlHhVvCcSsQqTtAa]*)/g;
                var ARGS_REGEXP = /[\u0009\u0020\u000A\u000C\u000D]*([\+\-]?[0-9]*\.?[0-9]+(?:[eE][\+\-]?[0-9]+)?)[\u0009\u0020\u000A\u000C\u000D]*,?/g;
                var match;
                while ((match = SEGMENTS_REGEXP.exec(path)) !== null) {
                    var name_1 = match[1];
                    var rest = match[2];
                    var args = [];
                    while ((match = ARGS_REGEXP.exec(rest)) !== null) {
                        args.push(+match[1]);
                    }
                    // Reset control point
                    if (name_1 !== "S" && name_1 !== "s" && name_1 !== "C" && name_1 !== "c") {
                        cpx = null;
                        cpy = null;
                    }
                    // Reset control point
                    if (name_1 !== "Q" && name_1 !== "q" && name_1 !== "T" && name_1 !== "t") {
                        qcpx = null;
                        qcpy = null;
                    }
                    switch (name_1) {
                        case "M":
                            checkEvenArgs(name_1, args.length, 2);
                            x = args[0];
                            y = args[1];
                            this.moveTo(x, y);
                            for (var i = 2; i < args.length; i += 2) {
                                x = args[i];
                                y = args[i + 1];
                                this.lineTo(x, y);
                            }
                            break;
                        case "m":
                            checkEvenArgs(name_1, args.length, 2);
                            x += args[0];
                            y += args[1];
                            this.moveTo(x, y);
                            for (var i = 2; i < args.length; i += 2) {
                                x += args[i];
                                y += args[i + 1];
                                this.lineTo(x, y);
                            }
                            break;
                        case "L":
                            checkEvenArgs(name_1, args.length, 2);
                            for (var i = 0; i < args.length; i += 2) {
                                x = args[i];
                                y = args[i + 1];
                                this.lineTo(x, y);
                            }
                            break;
                        case "l":
                            checkEvenArgs(name_1, args.length, 2);
                            for (var i = 0; i < args.length; i += 2) {
                                x += args[i];
                                y += args[i + 1];
                                this.lineTo(x, y);
                            }
                            break;
                        case "H":
                            checkMinArgs(name_1, args.length, 1);
                            for (var i = 0; i < args.length; ++i) {
                                x = args[i];
                                this.lineTo(x, y);
                            }
                            break;
                        case "h":
                            checkMinArgs(name_1, args.length, 1);
                            for (var i = 0; i < args.length; ++i) {
                                x += args[i];
                                this.lineTo(x, y);
                            }
                            break;
                        case "V":
                            checkMinArgs(name_1, args.length, 1);
                            for (var i = 0; i < args.length; ++i) {
                                y = args[i];
                                this.lineTo(x, y);
                            }
                            break;
                        case "v":
                            checkMinArgs(name_1, args.length, 1);
                            for (var i = 0; i < args.length; ++i) {
                                y += args[i];
                                this.lineTo(x, y);
                            }
                            break;
                        case "C":
                            checkEvenArgs(name_1, args.length, 6);
                            for (var i = 0; i < args.length; i += 6) {
                                var x1 = args[i];
                                var y1 = args[i + 1];
                                cpx = args[i + 2];
                                cpy = args[i + 3];
                                x = args[i + 4];
                                y = args[i + 5];
                                this.bezierCurveTo(x1, y1, cpx, cpy, x, y);
                            }
                            break;
                        case "c":
                            checkEvenArgs(name_1, args.length, 6);
                            for (var i = 0; i < args.length; i += 6) {
                                var x1 = args[i] + x;
                                var y1 = args[i + 1] + y;
                                cpx = args[i + 2] + x;
                                cpy = args[i + 3] + y;
                                x += args[i + 4];
                                y += args[i + 5];
                                this.bezierCurveTo(x1, y1, cpx, cpy, x, y);
                            }
                            break;
                        case "S":
                            checkEvenArgs(name_1, args.length, 4);
                            if (cpx === null || cpy === null) {
                                cpx = x;
                                cpy = y;
                            }
                            for (var i = 0; i < args.length; i += 4) {
                                var x1 = 2 * x - cpx;
                                var y1 = 2 * y - cpy;
                                cpx = args[i];
                                cpy = args[i + 1];
                                x = args[i + 2];
                                y = args[i + 3];
                                this.bezierCurveTo(x1, y1, cpx, cpy, x, y);
                            }
                            break;
                        case "s":
                            checkEvenArgs(name_1, args.length, 4);
                            if (cpx === null || cpy === null) {
                                cpx = x;
                                cpy = y;
                            }
                            for (var i = 0; i < args.length; i += 4) {
                                var x1 = 2 * x - cpx;
                                var y1 = 2 * y - cpy;
                                cpx = args[i] + x;
                                cpy = args[i + 1] + y;
                                x += args[i + 2];
                                y += args[i + 3];
                                this.bezierCurveTo(x1, y1, cpx, cpy, x, y);
                            }
                            break;
                        case "Q":
                            checkEvenArgs(name_1, args.length, 4);
                            for (var i = 0; i < args.length; i += 4) {
                                qcpx = args[i];
                                qcpy = args[i + 1];
                                x = args[i + 2];
                                y = args[i + 3];
                                this.quadraticCurveTo(qcpx, qcpy, x, y);
                            }
                            break;
                        case "q":
                            checkEvenArgs(name_1, args.length, 4);
                            for (var i = 0; i < args.length; i += 4) {
                                qcpx = args[i] + x;
                                qcpy = args[i + 1] + y;
                                x += args[i + 2];
                                y += args[i + 3];
                                this.quadraticCurveTo(qcpx, qcpy, x, y);
                            }
                            break;
                        case "T":
                            checkEvenArgs(name_1, args.length, 2);
                            if (qcpx === null || qcpy === null) {
                                qcpx = x;
                                qcpy = y;
                            }
                            for (var i = 0; i < args.length; i += 2) {
                                qcpx = 2 * x - qcpx;
                                qcpy = 2 * y - qcpy;
                                x = args[i];
                                y = args[i + 1];
                                this.quadraticCurveTo(qcpx, qcpy, x, y);
                            }
                            break;
                        case "t":
                            checkEvenArgs(name_1, args.length, 2);
                            if (qcpx === null || qcpy === null) {
                                qcpx = x;
                                qcpy = y;
                            }
                            for (var i = 0; i < args.length; i += 2) {
                                qcpx = 2 * x - qcpx;
                                qcpy = 2 * y - qcpy;
                                x += args[i];
                                y += args[i + 1];
                                this.quadraticCurveTo(qcpx, qcpy, x, y);
                            }
                            break;
                        case "A":
                        case "a":
                            var relative = (name_1 === "a");
                            checkEvenArgs(name_1, args.length, 7);
                            for (var i = 0; i < args.length; i += 7) {
                                var cx = args[i + 5];
                                var cy = args[i + 6];
                                if (relative) {
                                    cx += x;
                                    cy += y;
                                }
                                var bs = arcToBezier({
                                    px: x,
                                    py: y,
                                    rx: args[i],
                                    ry: args[i + 1],
                                    xAxisRotation: args[i + 2],
                                    largeArcFlag: assertBinary(args[i + 3]),
                                    sweepFlag: assertBinary(args[i + 4]),
                                    cx: cx,
                                    cy: cy,
                                });
                                each$1(bs, function (b) {
                                    _this.bezierCurveTo(b.x1, b.y1, b.x2, b.y2, b.x, b.y);
                                    x = b.x;
                                    y = b.y;
                                });
                            }
                            break;
                        case "Z":
                        case "z":
                            checkArgs(name_1, args.length, 0);
                            this.closePath();
                            break;
                    }
                }
            }
        });
        Object.defineProperty(CanvasGraphics.prototype, "_runPath", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (context) {
                context.beginPath();
                each$1(this._operations, function (op) {
                    op.path(context);
                });
            }
        });
        Object.defineProperty(CanvasGraphics.prototype, "_render", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (parentLayer) {
                _super.prototype._render.call(this, parentLayer);
                var layer = this._layer || parentLayer;
                var layerDirty = layer.dirty;
                var interactive = this._isInteractive();
                if (layerDirty || interactive) {
                    var context_1 = layer.context;
                    var ghostContext_1 = this._renderer._ghostContext;
                    if (layerDirty) {
                        context_1.globalCompositeOperation = this.blendMode;
                        context_1.beginPath();
                    }
                    var color_1;
                    if (interactive) {
                        ghostContext_1.beginPath();
                        color_1 = this._getColorId();
                    }
                    each$1(this._operations, function (op) {
                        if (layerDirty) {
                            op.path(context_1);
                            op.colorize(context_1, undefined);
                        }
                        if (interactive) {
                            op.path(ghostContext_1);
                            op.colorize(ghostContext_1, color_1);
                        }
                    });
                }
            }
        });
        Object.defineProperty(CanvasGraphics.prototype, "renderDetached", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (context) {
                if (this.visible) {
                    this._setMatrix();
                    context.save();
                    // We must apply the mask before we transform the element
                    var mask = this.mask;
                    if (mask) {
                        mask._setMatrix();
                        mask._transform(context, 1);
                        mask._runPath(context);
                        context.clip();
                    }
                    // TODO handle compoundAlpha somehow ?
                    context.globalAlpha = this.compoundAlpha * this.alpha;
                    this._transform(context, 1);
                    if (this.filter) {
                        context.filter = this.filter;
                    }
                    context.globalCompositeOperation = this.blendMode;
                    context.beginPath();
                    each$1(this._operations, function (op) {
                        op.path(context);
                        op.colorize(context, undefined);
                    });
                    context.restore();
                }
            }
        });
        Object.defineProperty(CanvasGraphics.prototype, "_addBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (bounds) {
                if (this.visible && this.isMeasured) {
                    each$1(this._operations, function (op) {
                        op.addBounds(bounds);
                    });
                }
            }
        });
        return CanvasGraphics;
    }(CanvasDisplayObject));
    /**
     * @ignore
     */
    var CanvasText = /** @class */ (function (_super) {
        __extends(CanvasText, _super);
        function CanvasText(renderer, text, style) {
            var _this = _super.call(this, renderer) || this;
            Object.defineProperty(_this, "text", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "style", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "resolution", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 1
            });
            Object.defineProperty(_this, "_textInfo", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_textVisible", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: true
            });
            Object.defineProperty(_this, "_originalScale", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 1
            });
            _this.text = text;
            _this.style = style;
            return _this;
        }
        Object.defineProperty(CanvasText.prototype, "invalidateBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype.invalidateBounds.call(this);
                this._textInfo = undefined;
            }
        });
        Object.defineProperty(CanvasText.prototype, "_shared", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (context) {
                if (this.style.textAlign) {
                    context.textAlign = this.style.textAlign;
                }
                if (this.style.direction) {
                    context.direction = this.style.direction;
                }
                if (this.style.textBaseline) {
                    context.textBaseline = this.style.textBaseline;
                }
            }
        });
        Object.defineProperty(CanvasText.prototype, "_prerender", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (layer, ignoreGhost, ignoreFontWeight) {
                if (ignoreGhost === void 0) { ignoreGhost = false; }
                if (ignoreFontWeight === void 0) { ignoreFontWeight = false; }
                _super.prototype._render.call(this, layer);
                var context = layer.context;
                var ghostContext = this._renderer._ghostContext;
                // Font style
                var style = this.style;
                var fontStyle = this._getFontStyle(undefined, ignoreFontWeight);
                context.font = fontStyle;
                if (this._isInteractive() && !ignoreGhost) {
                    ghostContext.font = fontStyle;
                }
                // Other parameters
                if (style.fill) {
                    if (style.fill instanceof Color) {
                        context.fillStyle = style.fill.toCSS();
                    }
                    else {
                        context.fillStyle = style.fill;
                    }
                }
                if (style.shadowColor) {
                    layer.context.shadowColor = style.shadowColor.toCSS(style.shadowOpacity || 1);
                }
                if (style.shadowBlur) {
                    layer.context.shadowBlur = style.shadowBlur;
                }
                if (style.shadowOffsetX) {
                    layer.context.shadowOffsetX = style.shadowOffsetX;
                }
                if (style.shadowOffsetY) {
                    layer.context.shadowOffsetY = style.shadowOffsetY;
                }
                this._shared(context);
                if (this._isInteractive() && !ignoreGhost) {
                    ghostContext.fillStyle = this._getColorId();
                    this._shared(ghostContext);
                }
            }
        });
        Object.defineProperty(CanvasText.prototype, "_getFontStyle", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (style2, ignoreFontWeight) {
                if (ignoreFontWeight === void 0) { ignoreFontWeight = false; }
                // Process defaults
                var style = this.style;
                var fontStyle = [];
                if (style2 && style2.fontVariant) {
                    fontStyle.push(style2.fontVariant);
                }
                else if (style.fontVariant) {
                    fontStyle.push(style.fontVariant);
                }
                if (!ignoreFontWeight) {
                    if (style2 && style2.fontWeight) {
                        fontStyle.push(style2.fontWeight);
                    }
                    else if (style.fontWeight) {
                        fontStyle.push(style.fontWeight);
                    }
                }
                if (style2 && style2.fontStyle) {
                    fontStyle.push(style2.fontStyle);
                }
                else if (style.fontStyle) {
                    fontStyle.push(style.fontStyle);
                }
                if (style2 && style2.fontSize) {
                    if (isNumber(style2.fontSize)) {
                        style2.fontSize = style2.fontSize + "px";
                    }
                    fontStyle.push(style2.fontSize);
                }
                else if (style.fontSize) {
                    if (isNumber(style.fontSize)) {
                        style.fontSize = style.fontSize + "px";
                    }
                    fontStyle.push(style.fontSize);
                }
                if (style2 && style2.fontFamily) {
                    fontStyle.push(style2.fontFamily);
                }
                else if (style.fontFamily) {
                    fontStyle.push(style.fontFamily);
                }
                else if (fontStyle.length) {
                    fontStyle.push("Arial");
                }
                return fontStyle.join(" ");
            }
        });
        Object.defineProperty(CanvasText.prototype, "_render", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (parentLayer) {
                var _this = this;
                var layer = this._layer || parentLayer;
                // We need measurements in order to properly position text for alignment
                if (!this._textInfo) {
                    this._measure(layer);
                }
                if (this._textVisible) {
                    var interactive_1 = this._isInteractive();
                    var context_2 = layer.context;
                    var layerDirty_1 = layer.dirty;
                    var ghostContext_2 = this._renderer._ghostContext;
                    context_2.save();
                    ghostContext_2.save();
                    this._prerender(layer);
                    // const lines = this.text.toString().replace(/\r/g, "").split(/\n/);
                    // const x = this._localBounds && (this._localBounds.left < 0) ? Math.abs(this._localBounds.left) : 0;
                    // Process text info produced by _measure()
                    each$1(this._textInfo, function (line, _index) {
                        each$1(line.textChunks, function (chunk, _index) {
                            // Set style
                            if (chunk.style) {
                                context_2.save();
                                ghostContext_2.save();
                                context_2.font = chunk.style;
                                if (_this._isInteractive()) {
                                    ghostContext_2.font = chunk.style;
                                }
                            }
                            if (chunk.fill) {
                                context_2.save();
                                context_2.fillStyle = chunk.fill.toCSS();
                                // Color does not affect ghostContext so we not set it
                            }
                            // Draw text
                            if (layerDirty_1) {
                                context_2.fillText(chunk.text, chunk.offsetX, line.offsetY + chunk.offsetY);
                            }
                            // Draw underline
                            if (chunk.textDecoration == "underline" || chunk.textDecoration == "line-through") {
                                var thickness = 1;
                                var offset = 1;
                                var fontSize = chunk.height;
                                var offsetX = chunk.offsetX;
                                switch (_this.style.textAlign) {
                                    case "right":
                                    case "end":
                                        offsetX -= chunk.width;
                                        break;
                                    case "center":
                                        offsetX -= chunk.width / 2;
                                        break;
                                }
                                if (chunk.style) {
                                    var format = TextFormatter.getTextStyle(chunk.style);
                                    switch (format.fontWeight) {
                                        case "bolder":
                                        case "bold":
                                        case "700":
                                        case "800":
                                        case "900":
                                            thickness = 2;
                                            break;
                                    }
                                }
                                if (fontSize) {
                                    offset = fontSize / 20;
                                }
                                var y = void 0;
                                if (chunk.textDecoration == "line-through") {
                                    y = thickness + line.offsetY + chunk.offsetY - chunk.height / 2;
                                }
                                else {
                                    y = thickness + offset * 1.5 + line.offsetY + chunk.offsetY;
                                }
                                context_2.save();
                                context_2.beginPath();
                                if (chunk.fill) {
                                    context_2.strokeStyle = chunk.fill.toCSS();
                                }
                                else if (_this.style.fill && _this.style.fill instanceof Color) {
                                    context_2.strokeStyle = _this.style.fill.toCSS();
                                }
                                context_2.lineWidth = thickness * offset;
                                context_2.moveTo(offsetX, y);
                                context_2.lineTo(offsetX + chunk.width, y);
                                context_2.stroke();
                                context_2.restore();
                            }
                            if (interactive_1 && _this.interactive) {
                                // Draw text in ghost canvas ONLY if it is set as interactive
                                // explicitly. This way we avoid hit test anomalies caused by anti
                                // aliasing of text.
                                ghostContext_2.fillText(chunk.text, chunk.offsetX, line.offsetY + chunk.offsetY);
                            }
                            if (chunk.fill) {
                                context_2.restore();
                                // Color does not affect ghostContext so we not set it
                            }
                            // Reset style
                            if (chunk.style) {
                                context_2.restore();
                                ghostContext_2.restore();
                            }
                        });
                    });
                    context_2.restore();
                    ghostContext_2.restore();
                }
            }
        });
        Object.defineProperty(CanvasText.prototype, "_addBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (bounds) {
                if (this.visible && this.isMeasured) {
                    //if (this._textVisible) {
                    var x = this._measure(this.getLayer());
                    setPoint(bounds, { x: x.left, y: x.top });
                    setPoint(bounds, { x: x.right, y: x.bottom });
                    //}
                }
            }
        });
        Object.defineProperty(CanvasText.prototype, "_measure", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (layer) {
                var _this = this;
                var context = layer.context;
                var ghostContext = this._renderer._ghostContext;
                var rtl = this.style.direction == "rtl";
                // Reset text info
                this._textInfo = [];
                // Init
                var oversizedBehavior = this.style.oversizedBehavior;
                var maxWidth = this.style.maxWidth;
                var truncate = isNumber(maxWidth) && oversizedBehavior == "truncate";
                var wrap = isNumber(maxWidth) && oversizedBehavior == "wrap";
                // Pre-render
                context.save();
                ghostContext.save();
                this._prerender(layer, true, true);
                // Get default font metrix
                var refText = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 ";
                // Split up text into lines
                var lines = this.text.toString().replace(/\r/g, "").split(/\n/);
                var styleRestored = true;
                var minX = 0;
                var maxX = 0;
                // Iterate through the lines
                var offsetY = 0;
                var currentStyle;
                each$1(lines, function (line, _index) {
                    // Split up line into format/value chunks
                    var chunks;
                    if (line == "") {
                        chunks = [{
                                type: "value",
                                text: ""
                            }];
                    }
                    else {
                        chunks = TextFormatter.chunk(line, false, _this.style.ignoreFormatting);
                    }
                    var _loop_1 = function () {
                        // Init line object
                        var lineInfo = {
                            offsetY: offsetY,
                            ascent: 0,
                            width: 0,
                            height: 0,
                            left: 0,
                            right: 0,
                            textChunks: []
                        };
                        // Measure reference text
                        var metrics = _this._measureText(refText, context);
                        var height = metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent;
                        lineInfo.height = height;
                        lineInfo.ascent = metrics.actualBoundingBoxAscent;
                        var currentFormat;
                        var currentDecoration = _this.style.textDecoration;
                        var currentFill;
                        var currentChunkWidth;
                        var skipFurtherText = false;
                        var firstTextChunk = true;
                        var leftoverChunks = [];
                        var currentVerticalAlign;
                        //let offsetX = 0;
                        //let chunk;
                        //while(chunk = chunks.shift()) {
                        eachContinue$1(chunks, function (chunk, index) {
                            // Format chunk
                            if (chunk.type == "format") {
                                if (chunk.text == "[/]") {
                                    if (!styleRestored) {
                                        context.restore();
                                        ghostContext.restore();
                                        styleRestored = true;
                                    }
                                    currentFill = undefined;
                                    currentStyle = undefined;
                                    currentChunkWidth = undefined;
                                    currentDecoration = _this.style.textDecoration;
                                    currentVerticalAlign = undefined;
                                    currentFormat = chunk.text;
                                }
                                else {
                                    if (!styleRestored) {
                                        context.restore();
                                        ghostContext.restore();
                                    }
                                    var format = TextFormatter.getTextStyle(chunk.text);
                                    var fontStyle = _this._getFontStyle(format);
                                    context.save();
                                    ghostContext.save();
                                    context.font = fontStyle;
                                    currentStyle = fontStyle;
                                    currentFormat = chunk.text;
                                    if (format.textDecoration) {
                                        currentDecoration = format.textDecoration;
                                    }
                                    if (format.fill) {
                                        currentFill = format.fill;
                                    }
                                    if (format.width) {
                                        currentChunkWidth = toNumber(format.width);
                                    }
                                    if (format.verticalAlign) {
                                        currentVerticalAlign = format.verticalAlign;
                                    }
                                    styleRestored = false;
                                    // Measure reference text after change of format
                                    var metrics_1 = _this._measureText(refText, context);
                                    var height_1 = metrics_1.actualBoundingBoxAscent + metrics_1.actualBoundingBoxDescent;
                                    if (height_1 > lineInfo.height) {
                                        lineInfo.height = height_1;
                                    }
                                    if (metrics_1.actualBoundingBoxAscent > lineInfo.ascent) {
                                        lineInfo.ascent = metrics_1.actualBoundingBoxAscent;
                                    }
                                }
                            }
                            // Text chunk
                            else if (chunk.type == "value" && !skipFurtherText) {
                                // Measure
                                var metrics_2 = _this._measureText(chunk.text, context);
                                var chunkWidth = metrics_2.actualBoundingBoxLeft + metrics_2.actualBoundingBoxRight;
                                // Check for fit
                                if (truncate) {
                                    // Break words?
                                    var breakWords = firstTextChunk || _this.style.breakWords || false;
                                    // Measure ellipsis and check if it fits
                                    var ellipsis = _this.style.ellipsis || "";
                                    var ellipsisMetrics = _this._measureText(ellipsis, context);
                                    var ellipsisWidth = ellipsisMetrics.actualBoundingBoxLeft + ellipsisMetrics.actualBoundingBoxRight;
                                    // Check fit
                                    if ((lineInfo.width + chunkWidth) > maxWidth) {
                                        var excessWidth = maxWidth - lineInfo.width - ellipsisWidth;
                                        chunk.text = _this._truncateText(context, chunk.text, excessWidth, breakWords);
                                        chunk.text += ellipsis;
                                        skipFurtherText = true;
                                    }
                                }
                                else if (wrap) {
                                    // Check fit
                                    if ((lineInfo.width + chunkWidth) > maxWidth) {
                                        var excessWidth = maxWidth - lineInfo.width;
                                        var tmpText = _this._truncateText(context, chunk.text, excessWidth, false, firstTextChunk);
                                        if (tmpText == "") {
                                            // Unable to fit a single letter - hide the whole label
                                            _this._textVisible = true;
                                            return false;
                                        }
                                        //skipFurtherText = true;
                                        //Add remaining chunks for the next line
                                        leftoverChunks = chunks.slice(index + 1);
                                        //Add remaining text of current chunk if it was forced-cut
                                        if (trim(tmpText) != trim(chunk.text)) {
                                            leftoverChunks.unshift({
                                                type: "value",
                                                text: chunk.text.substr(tmpText.length)
                                            });
                                            if (currentFormat) {
                                                leftoverChunks.unshift({
                                                    type: "format",
                                                    text: currentFormat
                                                });
                                            }
                                        }
                                        // Set current chunk (truncated)
                                        chunk.text = trim(tmpText);
                                        chunks = [];
                                        skipFurtherText = true;
                                    }
                                }
                                // Chunk width?
                                var leftBoundMod = 1;
                                var rightBoundMod = 1;
                                if (currentStyle && currentChunkWidth && (currentChunkWidth > chunkWidth)) {
                                    // increase horizontal bounding boxes accordingly
                                    var boundsMod = chunkWidth / currentChunkWidth;
                                    switch (_this.style.textAlign) {
                                        case "right":
                                        case "end":
                                            leftBoundMod = boundsMod;
                                            break;
                                        case "center":
                                            leftBoundMod = boundsMod;
                                            rightBoundMod = boundsMod;
                                            break;
                                        default:
                                            rightBoundMod = boundsMod;
                                    }
                                    chunkWidth = currentChunkWidth;
                                }
                                var chunkHeight = metrics_2.actualBoundingBoxAscent + metrics_2.actualBoundingBoxDescent;
                                if (chunkHeight > lineInfo.height) {
                                    lineInfo.height = chunkHeight;
                                }
                                if (metrics_2.actualBoundingBoxAscent > lineInfo.ascent) {
                                    lineInfo.ascent = metrics_2.actualBoundingBoxAscent;
                                }
                                lineInfo.width += chunkWidth;
                                lineInfo.left += metrics_2.actualBoundingBoxLeft / leftBoundMod;
                                lineInfo.right += metrics_2.actualBoundingBoxRight / rightBoundMod;
                                lineInfo.textChunks.push({
                                    style: currentStyle,
                                    fill: currentFill,
                                    text: chunk.text,
                                    width: chunkWidth,
                                    height: chunkHeight,
                                    left: metrics_2.actualBoundingBoxLeft,
                                    right: metrics_2.actualBoundingBoxRight,
                                    ascent: metrics_2.actualBoundingBoxAscent,
                                    offsetX: 0,
                                    offsetY: 0,
                                    textDecoration: currentDecoration,
                                    verticalAlign: currentVerticalAlign
                                });
                                //offsetX += chunkWidth;
                                firstTextChunk = false;
                            }
                            return true;
                            //}
                        });
                        if (_this.style.lineHeight instanceof Percent) {
                            lineInfo.height *= _this.style.lineHeight.value;
                            lineInfo.ascent *= _this.style.lineHeight.value;
                        }
                        else {
                            lineInfo.height *= _this.style.lineHeight || 1.2;
                            lineInfo.ascent *= _this.style.lineHeight || 1.2;
                        }
                        if (minX < lineInfo.left) {
                            minX = lineInfo.left;
                        }
                        if (maxX < lineInfo.right) {
                            maxX = lineInfo.right;
                        }
                        _this._textInfo.push(lineInfo);
                        //lineInfo.offsetY += lineInfo.ascent;
                        offsetY += lineInfo.height;
                        // Reset chunks so that it can proceed to the next line
                        chunks = leftoverChunks || [];
                    };
                    while (chunks.length > 0) {
                        _loop_1();
                    }
                });
                if (!styleRestored) {
                    context.restore();
                    ghostContext.restore();
                }
                // Adjust chunk internal offsets
                each$1(this._textInfo, function (lineInfo, _index) {
                    var currentChunkOffset = 0;
                    each$1(lineInfo.textChunks, function (chunk) {
                        chunk.offsetX = currentChunkOffset + chunk.left - lineInfo.left;
                        chunk.offsetY += lineInfo.height - lineInfo.height * (_this.style.baselineRatio || 0.19);
                        currentChunkOffset += chunk.width;
                        if (chunk.verticalAlign) {
                            switch (chunk.verticalAlign) {
                                case "super":
                                    chunk.offsetY -= lineInfo.height / 2 - chunk.height / 2;
                                    break;
                                case "sub":
                                    chunk.offsetY += chunk.height / 2;
                                    break;
                            }
                        }
                    });
                });
                var bounds = {
                    left: rtl ? -maxX : -minX,
                    top: 0,
                    right: rtl ? minX : maxX,
                    bottom: offsetY,
                };
                // We need to fit?
                if (oversizedBehavior !== "none") {
                    var ratio = this._fitRatio(bounds);
                    if (ratio < 1) {
                        if (oversizedBehavior == "fit") {
                            if (isNumber(this.style.minScale) && (ratio < this.style.minScale)) {
                                this._textVisible = false;
                            }
                            else {
                                if (!this._originalScale || this._originalScale == 1) {
                                    this._originalScale = this.scale;
                                }
                                this.scale = ratio;
                                this._textVisible = true;
                            }
                        }
                        else if (oversizedBehavior == "hide") {
                            this._textVisible = false;
                        }
                        else {
                            switch (this.style.textAlign) {
                                case "right":
                                case "end":
                                    bounds.left = -maxWidth;
                                    bounds.right = 0;
                                    break;
                                case "center":
                                    bounds.left = -maxWidth / 2;
                                    bounds.right = maxWidth / 2;
                                    break;
                                default:
                                    bounds.left = 0;
                                    bounds.right = maxWidth;
                            }
                            this.scale = this._originalScale || 1;
                            this._originalScale = undefined;
                            this._textVisible = true;
                        }
                    }
                    else {
                        this.scale = this._originalScale || 1;
                        this._originalScale = undefined;
                        this._textVisible = true;
                    }
                }
                context.restore();
                ghostContext.restore();
                return bounds;
            }
        });
        Object.defineProperty(CanvasText.prototype, "_fitRatio", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (bounds) {
                var maxW = this.style.maxWidth;
                var maxH = this.style.maxHeight;
                if (!isNumber(maxW) && !isNumber(maxH)) {
                    return 1;
                }
                var w = bounds.right - bounds.left;
                var h = bounds.bottom - bounds.top;
                return Math.min(maxW / w || 1, maxH / h || 1);
            }
        });
        Object.defineProperty(CanvasText.prototype, "_truncateText", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (context, text, maxWidth, breakWords, fallbackBreakWords) {
                if (breakWords === void 0) { breakWords = false; }
                if (fallbackBreakWords === void 0) { fallbackBreakWords = true; }
                var width;
                do {
                    if (breakWords) {
                        text = text.slice(0, -1);
                    }
                    else {
                        var tmp = text.replace(/[^,;:!?\\\/\s]+[,;:!?\\\/\s]*$/g, "");
                        if (tmp == "" && fallbackBreakWords) {
                            breakWords = true;
                        }
                        else {
                            text = tmp;
                        }
                    }
                    var metrics = this._measureText(text, context);
                    width = metrics.actualBoundingBoxLeft + metrics.actualBoundingBoxRight;
                } while ((width > maxWidth) && text != "");
                return text;
            }
        });
        Object.defineProperty(CanvasText.prototype, "_measureText", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (text, context) {
                var metrics = context.measureText(text);
                var fakeMetrics = {};
                if (metrics.actualBoundingBoxAscent == null) {
                    var div = document.createElement("div");
                    div.innerText = text;
                    div.style.visibility = "hidden";
                    div.style.position = "absolute";
                    div.style.top = "-1000000px;";
                    div.style.fontFamily = this.style.fontFamily || "";
                    div.style.fontSize = this.style.fontSize + "";
                    document.body.appendChild(div);
                    var bbox = div.getBoundingClientRect();
                    document.body.removeChild(div);
                    var h = bbox.height;
                    var w_1 = metrics.width;
                    var left = 0;
                    var right = w_1;
                    fakeMetrics = {
                        actualBoundingBoxAscent: h,
                        actualBoundingBoxDescent: 0,
                        actualBoundingBoxLeft: left,
                        actualBoundingBoxRight: right,
                        fontBoundingBoxAscent: h,
                        fontBoundingBoxDescent: 0,
                        width: w_1
                    };
                    //return fake;
                }
                else {
                    fakeMetrics = {
                        actualBoundingBoxAscent: metrics.actualBoundingBoxAscent,
                        actualBoundingBoxDescent: metrics.actualBoundingBoxDescent,
                        actualBoundingBoxLeft: metrics.actualBoundingBoxLeft,
                        actualBoundingBoxRight: metrics.actualBoundingBoxRight,
                        fontBoundingBoxAscent: metrics.actualBoundingBoxAscent,
                        fontBoundingBoxDescent: metrics.actualBoundingBoxDescent,
                        width: metrics.width
                    };
                }
                var w = metrics.width;
                switch (this.style.textAlign) {
                    case "right":
                    case "end":
                        fakeMetrics.actualBoundingBoxLeft = w;
                        fakeMetrics.actualBoundingBoxRight = 0;
                        break;
                    case "center":
                        fakeMetrics.actualBoundingBoxLeft = w / 2;
                        fakeMetrics.actualBoundingBoxRight = w / 2;
                        break;
                    default:
                        fakeMetrics.actualBoundingBoxLeft = 0;
                        fakeMetrics.actualBoundingBoxRight = w;
                }
                return fakeMetrics;
            }
        });
        return CanvasText;
    }(CanvasDisplayObject));
    /**
     * @ignore
     */
    var CanvasTextStyle = /** @class */ (function () {
        function CanvasTextStyle() {
            //public wordWrapWidth: number = 100;
            Object.defineProperty(this, "fill", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "textAlign", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "fontFamily", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "fontSize", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "fontWeight", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "fontStyle", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "fontVariant", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "textDecoration", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "shadowColor", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "shadowBlur", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "shadowOffsetX", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "shadowOffsetY", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "shadowOpacity", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            // leading?: number;
            // letterSpacing?: number;
            Object.defineProperty(this, "lineHeight", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: percent(120)
            });
            Object.defineProperty(this, "baselineRatio", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0.19
            });
            // padding?: number;
            // stroke?: number;
            // strokeThickness?: number;
            // trim?: number;
            // wordWrap?: boolean;
            Object.defineProperty(this, "direction", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "textBaseline", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "oversizedBehavior", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: "none"
            });
            Object.defineProperty(this, "breakWords", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(this, "ellipsis", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: "…"
            });
            Object.defineProperty(this, "maxWidth", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "maxHeight", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "minScale", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "ignoreFormatting", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
        }
        return CanvasTextStyle;
    }());
    /**
     * @ignore
     */
    var CanvasRadialText = /** @class */ (function (_super) {
        __extends(CanvasRadialText, _super);
        function CanvasRadialText() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "textType", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: "circular"
            });
            Object.defineProperty(_this, "radius", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "startAngle", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "inside", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "orientation", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: "auto"
            });
            Object.defineProperty(_this, "kerning", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(_this, "_textReversed", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            return _this;
        }
        Object.defineProperty(CanvasRadialText.prototype, "_render", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (parentLayer) {
                switch (this.textType) {
                    case "circular":
                        this._renderCircular(parentLayer);
                        break;
                    default:
                        _super.prototype._render.call(this, parentLayer);
                        break;
                }
            }
        });
        Object.defineProperty(CanvasRadialText.prototype, "_renderCircular", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (parentLayer) {
                var layer = this._layer || parentLayer;
                this._prerender(layer);
                var interactive = this._isInteractive();
                var context = layer.context;
                var layerDirty = layer.dirty;
                var ghostContext = this._renderer._ghostContext;
                // Savepoint
                context.save();
                if (interactive) {
                    ghostContext.save();
                }
                // Init
                var radius = (this.radius || 0);
                var startAngle = (this.startAngle || 0);
                var deltaAngle = 0;
                var orientation = this.orientation;
                var inward = orientation == "auto" ? "auto" : orientation == "inward";
                var inside = this.inside;
                var align = this.style.textAlign || "left";
                var kerning = this.kerning || 0;
                var clockwise = align == "left" ? 1 : -1;
                var shouldReverse = !this._textReversed;
                // We need measurements in order to properly position text for alignment
                if (!this._textInfo) {
                    this._measure(layer);
                }
                // Check if we need to invert the whole stuff
                if (inward == "auto") {
                    // Calc max angle so we know whether we need to flip it
                    var maxAngle_1 = 0;
                    var midAngle = 0;
                    each$1(this._textInfo, function (line, _index) {
                        var deltaAngle = startAngle + (line.width / (radius - line.height)) / 2 * -clockwise;
                        if (deltaAngle > maxAngle_1) {
                            maxAngle_1 = deltaAngle;
                        }
                    });
                    if (align == "left") {
                        midAngle = (maxAngle_1 + deltaAngle / 2) * DEGREES;
                    }
                    else if (align == "right") {
                        midAngle = (maxAngle_1 - deltaAngle / 2) * DEGREES;
                    }
                    else {
                        midAngle = startAngle * DEGREES;
                    }
                    midAngle = normalizeAngle(midAngle);
                    inward = (midAngle >= 270) || (midAngle <= 90);
                }
                if (inward == true && shouldReverse) {
                    this._textInfo.reverse();
                    this._textReversed = true;
                }
                // if ((inward == false && align == "left") || (inward == true && align == "right")) {
                // 	clockwise *= -1;
                // }
                // Process text info produced by _measure()
                each$1(this._textInfo, function (line, _index) {
                    var textHeight = line.height;
                    // Adjust radius (for `inside = false`)
                    // Radius adjustment for `inside = false` is below the line calculation
                    if (!inside) {
                        radius += textHeight;
                    }
                    // Reverse letters if we're painting them counter-clockwise
                    if (((clockwise == -1 && inward) || (clockwise == 1 && !inward)) && shouldReverse) {
                        line.textChunks.reverse();
                    }
                    // Init angles
                    var lineStartAngle = startAngle;
                    deltaAngle = 0;
                    // Adjust for center-align
                    if (align == "center") {
                        lineStartAngle += (line.width / (radius - textHeight)) / 2 * -clockwise;
                        deltaAngle = lineStartAngle - startAngle;
                    }
                    // if (inward == "auto") {
                    // 	let midAngle;
                    // 	if (align == "left") {
                    // 		midAngle = (lineStartAngle + deltaAngle / 2) * $math.DEGREES;
                    // 	}
                    // 	else if () {
                    // 		midAngle = (lineStartAngle - deltaAngle / 2) * $math.DEGREES;
                    // 	}
                    // 	inward = (midAngle >= 270) || (midAngle <= 90);
                    // }
                    // Rotate letters if they are facing outward
                    lineStartAngle += (Math.PI * (inward ? 0 : 1)); // Rotate 180 if outward
                    // Savepoint
                    context.save();
                    if (interactive) {
                        ghostContext.save();
                    }
                    // Assume starting angle
                    context.rotate(lineStartAngle);
                    if (interactive) {
                        ghostContext.rotate(lineStartAngle);
                    }
                    var angleShift = 0;
                    each$1(line.textChunks, function (chunk, _index) {
                        // Draw the letter
                        var char = chunk.text;
                        var charWidth = chunk.width;
                        // Rotate half a letter
                        angleShift = (charWidth / 2) / (radius - textHeight) * clockwise;
                        context.rotate(angleShift);
                        if (interactive) {
                            ghostContext.rotate(angleShift);
                        }
                        // Set style
                        if (chunk.style) {
                            context.save();
                            ghostContext.save();
                            context.font = chunk.style;
                            if (interactive) {
                                ghostContext.font = chunk.style;
                            }
                        }
                        if (chunk.fill) {
                            context.save();
                            context.fillStyle = chunk.fill.toCSS();
                            // Color does not affect ghostContext so we not set it
                        }
                        // Center letters
                        context.textBaseline = "middle";
                        context.textAlign = "center";
                        if (interactive) {
                            ghostContext.textBaseline = "middle";
                            ghostContext.textAlign = "center";
                        }
                        // Plop the letter
                        if (layerDirty) {
                            context.fillText(char, 0, (inward ? 1 : -1) * (0 - radius + textHeight / 2));
                        }
                        if (interactive) {
                            ghostContext.fillText(char, 0, (inward ? 1 : -1) * (0 - radius + textHeight / 2));
                        }
                        if (chunk.fill) {
                            context.restore();
                            // Color does not affect ghostContext so we not set it
                        }
                        // Reset style
                        if (chunk.style) {
                            context.restore();
                            ghostContext.restore();
                        }
                        // Rotate half a letter and add spacing
                        angleShift = (charWidth / 2 + kerning) / (radius - textHeight) * clockwise;
                        context.rotate(angleShift);
                        if (interactive) {
                            ghostContext.rotate(angleShift);
                        }
                    });
                    // Restore angle
                    context.restore();
                    if (interactive) {
                        ghostContext.restore();
                    }
                    // Adjust radius (for `inside = true`)
                    if (inside) {
                        radius -= textHeight;
                    }
                });
                // Restore
                context.restore();
                if (interactive) {
                    ghostContext.restore();
                }
            }
        });
        Object.defineProperty(CanvasRadialText.prototype, "_measure", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (layer) {
                switch (this.textType) {
                    case "circular":
                        return this._measureCircular(layer);
                    default:
                        return _super.prototype._measure.call(this, layer);
                }
            }
        });
        Object.defineProperty(CanvasRadialText.prototype, "_measureCircular", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (layer) {
                var _this = this;
                var context = layer.context;
                var ghostContext = this._renderer._ghostContext;
                var rtl = this.style.direction == "rtl";
                // Reset text info
                this._textInfo = [];
                this._textReversed = false;
                // Pre-render
                context.save();
                ghostContext.save();
                this._prerender(layer, true);
                // Split up text into lines
                var lines = this.text.toString().replace(/\r/g, "").split(/\n/);
                var styleRestored = true;
                // Iterate through the lines
                var offsetY = 0;
                each$1(lines, function (line, _index) {
                    // Split up line into format/value chunks
                    var chunks = TextFormatter.chunk(line, false, _this.style.ignoreFormatting);
                    // Init line object
                    var lineInfo = {
                        offsetY: offsetY,
                        ascent: 0,
                        width: 0,
                        height: 0,
                        left: 0,
                        right: 0,
                        textChunks: []
                    };
                    var currentStyle;
                    var currentFill;
                    var currentChunkWidth;
                    //while(chunk = chunks.shift()) {
                    each$1(chunks, function (chunk, _index) {
                        // Format chunk
                        if (chunk.type == "format") {
                            if (chunk.text == "[/]") {
                                if (!styleRestored) {
                                    context.restore();
                                    ghostContext.restore();
                                    styleRestored = true;
                                }
                                currentFill = undefined;
                                currentStyle = undefined;
                                currentChunkWidth = undefined;
                            }
                            else {
                                var format = TextFormatter.getTextStyle(chunk.text);
                                var fontStyle = _this._getFontStyle(format);
                                context.save();
                                ghostContext.save();
                                context.font = fontStyle;
                                currentStyle = fontStyle;
                                if (format.fill) {
                                    currentFill = format.fill;
                                }
                                if (format.width) {
                                    currentChunkWidth = toNumber(format.width);
                                }
                                styleRestored = false;
                            }
                        }
                        // Text format
                        else if (chunk.type == "value") {
                            // Measure each letter
                            var chars = chunk.text.match(/./ug) || [];
                            if (rtl) {
                                chars.reverse();
                            }
                            for (var i = 0; i < chars.length; i++) {
                                var char = chars[i];
                                // Measure
                                var metrics = _this._measureText(char, context);
                                var chunkWidth = metrics.width;
                                // Chunk width?
                                if (currentStyle && currentChunkWidth && (currentChunkWidth > chunkWidth)) {
                                    chunkWidth = currentChunkWidth;
                                }
                                var chunkHeight = metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent;
                                if (chunkHeight > lineInfo.height) {
                                    lineInfo.height = chunkHeight;
                                }
                                if (metrics.actualBoundingBoxAscent > lineInfo.ascent) {
                                    lineInfo.ascent = metrics.actualBoundingBoxAscent;
                                }
                                lineInfo.width += chunkWidth;
                                lineInfo.left += metrics.actualBoundingBoxLeft;
                                lineInfo.right += metrics.actualBoundingBoxRight;
                                lineInfo.textChunks.push({
                                    style: currentStyle,
                                    fill: currentFill,
                                    text: char,
                                    width: chunkWidth,
                                    height: chunkHeight + metrics.actualBoundingBoxDescent,
                                    left: metrics.actualBoundingBoxLeft,
                                    right: metrics.actualBoundingBoxRight,
                                    ascent: metrics.actualBoundingBoxAscent,
                                    offsetX: 0,
                                    offsetY: chunkHeight,
                                    textDecoration: undefined
                                });
                                if (rtl) {
                                    break;
                                }
                            }
                        }
                    });
                    if (_this.style.lineHeight instanceof Percent) {
                        lineInfo.height *= _this.style.lineHeight.value;
                    }
                    else {
                        lineInfo.height *= _this.style.lineHeight || 1.2;
                    }
                    _this._textInfo.push(lineInfo);
                    //lineInfo.offsetY += lineInfo.ascent;
                    offsetY += lineInfo.height;
                });
                if (!styleRestored) {
                    context.restore();
                    ghostContext.restore();
                }
                // Adjust chunk internal offsets
                each$1(this._textInfo, function (lineInfo) {
                    each$1(lineInfo.textChunks, function (chunk) {
                        chunk.offsetY += Math.round((lineInfo.height - chunk.height + (lineInfo.ascent - chunk.ascent)) / 2);
                    });
                });
                context.restore();
                ghostContext.restore();
                return {
                    left: 0,
                    top: 0,
                    right: 0,
                    bottom: 0,
                };
            }
        });
        return CanvasRadialText;
    }(CanvasText));
    /**
     * @ignore
     */
    var CanvasImage = /** @class */ (function (_super) {
        __extends(CanvasImage, _super);
        function CanvasImage(renderer, image) {
            var _this = _super.call(this, renderer) || this;
            Object.defineProperty(_this, "width", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "height", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "image", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "tainted", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "shadowColor", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "shadowBlur", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "shadowOffsetX", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "shadowOffsetY", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "shadowOpacity", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_imageMask", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            _this.image = image;
            return _this;
        }
        Object.defineProperty(CanvasImage.prototype, "_dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._dispose.call(this);
                if (this._imageMask) {
                    clearCanvas(this._imageMask);
                }
            }
        });
        Object.defineProperty(CanvasImage.prototype, "getLocalBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (!this._localBounds) {
                    var w = 0;
                    var h = 0;
                    if (this.width) {
                        w = this.width;
                    }
                    if (this.height) {
                        h = this.height;
                    }
                    this._localBounds = {
                        left: 0,
                        top: 0,
                        right: w,
                        bottom: h
                    };
                    this._addBounds(this._localBounds);
                }
                return this._localBounds;
            }
        });
        Object.defineProperty(CanvasImage.prototype, "_render", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (parentLayer) {
                _super.prototype._render.call(this, parentLayer);
                if (this.image) {
                    var layer = this._layer || parentLayer;
                    if (this.tainted === undefined) {
                        this.tainted = isTainted(this.image);
                        layer.tainted = true;
                    }
                    if (this.tainted && this._renderer._omitTainted) {
                        return;
                    }
                    if (layer.dirty) {
                        if (this.shadowColor) {
                            layer.context.shadowColor = this.shadowColor.toCSS(this.shadowOpacity || 1);
                        }
                        if (this.shadowBlur) {
                            layer.context.shadowBlur = this.shadowBlur;
                        }
                        if (this.shadowOffsetX) {
                            layer.context.shadowOffsetX = this.shadowOffsetX;
                        }
                        if (this.shadowOffsetY) {
                            layer.context.shadowOffsetY = this.shadowOffsetY;
                        }
                        // TODO should this round ?
                        var width = this.width || this.image.naturalWidth;
                        var height = this.height || this.image.naturalHeight;
                        layer.context.drawImage(this.image, 0, 0, width, height);
                    }
                    if (this.interactive && this._isInteractive()) {
                        var mask = this._getMask(this.image);
                        this._renderer._ghostContext.drawImage(mask, 0, 0);
                    }
                }
            }
        });
        Object.defineProperty(CanvasImage.prototype, "clear", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype.clear.call(this);
                this.image = undefined;
                this._imageMask = undefined;
            }
        });
        Object.defineProperty(CanvasImage.prototype, "_getMask", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (image) {
                if (this._imageMask === undefined) {
                    // TODO should this round ?
                    var width = this.width || image.naturalWidth;
                    var height = this.height || image.naturalHeight;
                    // We need to create a second canvas because destination-in clears out the entire canvas
                    var canvas = document.createElement("canvas");
                    canvas.width = width;
                    canvas.height = height;
                    var context = canvas.getContext("2d");
                    context.imageSmoothingEnabled = false;
                    context.fillStyle = this._getColorId();
                    context.fillRect(0, 0, width, height);
                    if (!isTainted(image)) {
                        context.globalCompositeOperation = "destination-in";
                        context.drawImage(image, 0, 0, width, height);
                    }
                    this._imageMask = canvas;
                }
                return this._imageMask;
            }
        });
        return CanvasImage;
    }(CanvasDisplayObject));
    /**
     * @ignore
     */
    var CanvasRendererEvent = /** @class */ (function () {
        function CanvasRendererEvent(event, point, bbox) {
            Object.defineProperty(this, "event", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: event
            });
            Object.defineProperty(this, "point", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: point
            });
            Object.defineProperty(this, "bbox", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: bbox
            });
            Object.defineProperty(this, "id", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "simulated", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(this, "native", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: true
            });
            if (supports("touchevents") && event instanceof Touch) {
                this.id = event.identifier;
            }
            else {
                this.id = null;
            }
        }
        return CanvasRendererEvent;
    }());
    /**
     * @ignore
     */
    var CanvasRenderer = /** @class */ (function (_super) {
        __extends(CanvasRenderer, _super);
        /*protected _mouseMoveThrottler: Throttler = new Throttler(() => {
            this._dispatchGlobalMousemove(this._lastPointerMoveEvent.event, this._lastPointerMoveEvent.native);
        });
        */
        function CanvasRenderer(resolution) {
            var _this = _super.call(this) || this;
            Object.defineProperty(_this, "view", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: document.createElement("div")
            });
            Object.defineProperty(_this, "_layerDom", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: document.createElement("div")
            });
            Object.defineProperty(_this, "layers", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            Object.defineProperty(_this, "_dirtyLayers", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            Object.defineProperty(_this, "defaultLayer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this.getLayer(0)
            });
            Object.defineProperty(_this, "_ghostView", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_ghostContext", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_patternCanvas", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: document.createElement("canvas")
            });
            Object.defineProperty(_this, "_patternContext", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this._patternCanvas.getContext("2d")
            });
            Object.defineProperty(_this, "_width", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(_this, "_height", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(_this, "_clientWidth", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(_this, "_clientHeight", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(_this, "resolution", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "interactionsEnabled", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: true
            });
            Object.defineProperty(_this, "_listeners", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(_this, "_events", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(_this, "_colorId", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(_this, "_colorMap", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(_this, "_forceInteractive", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(_this, "_omitTainted", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            // TODO this should store the Id as well
            Object.defineProperty(_this, "_hovering", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new Set()
            });
            Object.defineProperty(_this, "_dragging", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            Object.defineProperty(_this, "_mousedown", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            Object.defineProperty(_this, "_lastPointerMoveEvent", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "tapToActivate", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "tapToActivateTimeout", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 3000
            });
            Object.defineProperty(_this, "_touchActive", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_touchActiveTimeout", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            if (resolution == null) {
                _this.resolution = window.devicePixelRatio;
            }
            else {
                _this.resolution = resolution;
            }
            _this.view.style.position = "absolute";
            _this.view.appendChild(_this._layerDom);
            _this._disposers.push(new Disposer(function () {
                each(_this._events, function (_key, events) {
                    events.disposer.dispose();
                });
                each$1(_this.layers, function (layer) {
                    clearCanvas(layer.view);
                    if (layer.exportableView) {
                        clearCanvas(layer.exportableView);
                    }
                });
                clearCanvas(_this._ghostView);
                clearCanvas(_this._patternCanvas);
            }));
            // @todo : do the same for ghost
            _this._ghostView = document.createElement("canvas");
            _this._ghostContext = _this._ghostView.getContext("2d", { alpha: false });
            _this._ghostContext.imageSmoothingEnabled = false;
            _this._ghostView.style.position = "absolute";
            _this._ghostView.style.top = "0px";
            _this._ghostView.style.left = "0px";
            _this._disposers.push(addEventListener(_this._ghostView, "click", function (originalEvent) {
                var event = _this.getEvent(originalEvent);
                var target = _this._getHitTarget(event.point, event.bbox);
                console.debug(target);
            }));
            // Monitor for possible pixel ratio changes (when page is zoomed)
            _this._disposers.push(addEventListener(window, "resize", function (_ev) {
                if (resolution == null) {
                    _this.resolution = window.devicePixelRatio;
                }
            }));
            // We need this in order top prevent default touch gestures when dragging
            // draggable elements
            if (supports("touchevents")) {
                var listener = function (ev) {
                    if (_this._dragging.length !== 0) {
                        eachContinue$1(_this._dragging, function (item) {
                            if (item.value.shouldCancelTouch()) {
                                ev.preventDefault();
                                return false;
                            }
                            return true;
                        });
                    }
                    // If touch down happends, delay touch out
                    if (_this._touchActiveTimeout) {
                        _this._delayTouchDeactivate();
                    }
                };
                _this._disposers.push(addEventListener(window, "touchstart", listener, { passive: false }));
                _this._disposers.push(addEventListener(_this.view, "touchstart", listener, { passive: false }));
                _this._disposers.push(addEventListener(_this.view, "touchmove", function () {
                    // If touch is moving, delay touch out
                    if (_this._touchActiveTimeout) {
                        _this._delayTouchDeactivate();
                    }
                }, { passive: true }));
                _this._disposers.push(addEventListener(window, "click", function (_ev) {
                    _this._touchActive = false;
                }, { passive: true }));
                _this._disposers.push(addEventListener(_this.view, "click", function (_ev) {
                    window.setTimeout(function () {
                        _this._touchActive = true;
                        _this._delayTouchDeactivate();
                    }, 100);
                }, { passive: true }));
            }
            // Prevent scrolling of the window when hovering on "wheelable" object
            if (supports("wheelevents")) {
                _this._disposers.push(addEventListener(_this.view, "wheel", function (ev) {
                    var prevent = false;
                    _this._hovering.forEach(function (obj) {
                        if (obj.wheelable) {
                            prevent = true;
                            return false;
                        }
                    });
                    if (prevent) {
                        ev.preventDefault();
                    }
                }, { passive: false }));
            }
            return _this;
        }
        Object.defineProperty(CanvasRenderer.prototype, "_delayTouchDeactivate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                if (this._touchActiveTimeout) {
                    clearTimeout(this._touchActiveTimeout);
                }
                if (this.tapToActivateTimeout > 0) {
                    this._touchActiveTimeout = window.setTimeout(function () {
                        _this._touchActive = false;
                    }, this.tapToActivateTimeout);
                }
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "debugGhostView", {
            get: function () {
                return !!this._ghostView.parentNode;
            },
            set: function (value) {
                if (value) {
                    if (!this._ghostView.parentNode) {
                        this.view.appendChild(this._ghostView);
                    }
                }
                else {
                    if (this._ghostView.parentNode) {
                        this._ghostView.parentNode.removeChild(this._ghostView);
                    }
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CanvasRenderer.prototype, "createLinearGradient", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (x1, y1, x2, y2) {
                return this.defaultLayer.context.createLinearGradient(x1, y1, x2, y2);
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "createRadialGradient", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (x1, y1, radius1, x2, y2, radius2) {
                return this.defaultLayer.context.createRadialGradient(x1, y1, radius1, x2, y2, radius2);
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "createPattern", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (graphics, background, repetition, width, height) {
                // const patternCanvas = document.createElement("canvas");
                // const patternContext = patternCanvas.getContext("2d")!;
                // patternCanvas.width = width;
                // patternCanvas.height = height;
                // if (fill) {
                // 	patternContext.fillStyle = fill.toCSS();
                // 	patternContext.fillRect(0, 0, patternCanvas.width, patternCanvas.height);
                // }
                // const layer = {
                // 	view: patternCanvas,
                // 	context: patternContext,
                // 	visible: true,
                // 	order: 0,
                // 	width: width,
                // 	height: height,
                // 	dirty: true
                // };
                // // patternContext.arc(0, 0, 50, 0, .5 * Math.PI);
                // // patternContext.stroke();
                // image.targetLayer = layer;
                // image.render(layer);
                //this._layerDom.appendChild(patternCanvas);
                this._patternCanvas.width = width;
                this._patternCanvas.height = height;
                this._patternContext.clearRect(0, 0, width, height);
                // patternCanvas.style.width = width * this.resolution + "px";
                // patternCanvas.style.height = height * this.resolution + "px";
                background.renderDetached(this._patternContext);
                graphics.renderDetached(this._patternContext);
                return this._patternContext.createPattern(this._patternCanvas, repetition);
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "makeContainer", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return new CanvasContainer(this);
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "makeGraphics", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return new CanvasGraphics(this);
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "makeText", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (text, style) {
                return new CanvasText(this, text, style);
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "makeTextStyle", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return new CanvasTextStyle();
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "makeRadialText", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (text, style) {
                return new CanvasRadialText(this, text, style);
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "makePicture", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (image) {
                return new CanvasImage(this, image);
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "resize", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (width, height) {
                var _this = this;
                this._clientWidth = width;
                this._clientHeight = height;
                this._width = Math.floor(width * this.resolution);
                this._height = Math.floor(height * this.resolution);
                each$1(this.layers, function (layer) {
                    if (layer) {
                        layer.dirty = true;
                        if (layer.width != null) {
                            layer.view.width = layer.width;
                            layer.view.style.width = layer.width + "px";
                        }
                        else {
                            layer.view.width = _this._width;
                            layer.view.style.width = width + "px";
                        }
                        if (layer.height != null) {
                            layer.view.height = layer.height;
                            layer.view.style.height = layer.height + "px";
                        }
                        else {
                            layer.view.height = _this._height;
                            layer.view.style.height = height + "px";
                        }
                    }
                });
                // @todo: do the same for ghost canvases
                this._ghostView.width = this._width;
                this._ghostView.height = this._height;
                this._ghostView.style.width = width + "px";
                this._ghostView.style.height = height + "px";
                this.view.style.width = width + "px";
                this.view.style.height = height + "px";
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "createDetachedLayer", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var view = document.createElement("canvas");
                var context = view.getContext("2d");
                var layer = {
                    view: view,
                    context: context,
                    order: 0,
                    visible: true,
                    width: undefined,
                    height: undefined,
                    dirty: true,
                    tainted: false
                };
                view.style.position = "absolute";
                view.style.top = "0px";
                view.style.left = "0px";
                return layer;
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "getLayerByOrder", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (order) {
                var layers = this.layers;
                var length = layers.length;
                for (var i = 0; i < length; i++) {
                    var layer = layers[i];
                    if (layer.order == order) {
                        return layer;
                    }
                }
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "getLayer", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (order, visible) {
                if (visible === void 0) { visible = true; }
                var existingLayer = this.getLayerByOrder(order);
                if (existingLayer) {
                    return existingLayer;
                }
                var layer = this.createDetachedLayer();
                layer.order = order;
                layer.visible = visible;
                if (layer.visible && this._width) {
                    layer.view.width = this._width;
                    layer.view.style.width = this._clientWidth + "px";
                    layer.view.height = this._height;
                    layer.view.style.height = this._clientHeight + "px";
                }
                var layers = this.layers;
                layers.push(layer);
                layers.sort(function (a, b) {
                    if (a.order > b.order) {
                        return 1;
                    }
                    else if (a.order < b.order) {
                        return -1;
                    }
                    else {
                        return 0;
                    }
                });
                var length = layers.length;
                var layerIndex = indexOf(layers, layer);
                var next;
                for (var i = layerIndex + 1; i < length; i++) {
                    if (layers[i].visible) {
                        next = layers[i];
                        break;
                    }
                }
                if (layer.visible) {
                    if (next === undefined) {
                        this._layerDom.appendChild(layer.view);
                    }
                    else {
                        this._layerDom.insertBefore(layer.view, next.view);
                    }
                }
                return layer;
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "render", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (root) {
                var _this = this;
                this._dirtyLayers.length = 0;
                each$1(this.layers, function (layer) {
                    if (layer) {
                        if (layer.dirty && layer.visible) {
                            var context = layer.context;
                            _this._dirtyLayers.push(layer);
                            context.save();
                            context.clearRect(0, 0, _this._width, _this._height);
                        }
                    }
                });
                this._ghostContext.save();
                //this._ghostContext.clearRect(0, 0, this._width, this._height);
                //this._ghostContext.beginPath();
                this._ghostContext.fillStyle = '#000';
                this._ghostContext.fillRect(0, 0, this._width, this._height);
                root.render(this.defaultLayer);
                this._ghostContext.restore();
                //setTimeout(() => {
                // Remove this after the Chrome bug is fixed:
                // https://bugs.chromium.org/p/chromium/issues/detail?id=1279394
                each$1(this.layers, function (layer) {
                    if (layer) {
                        var context = layer.context;
                        context.beginPath();
                        context.moveTo(0, 0);
                        context.stroke();
                    }
                });
                each$1(this._dirtyLayers, function (layer) {
                    layer.context.restore();
                    layer.dirty = false;
                });
                //}, 100)
                if (this._hovering.size && this._lastPointerMoveEvent) {
                    //this._mouseMoveThrottler.run();
                    var native_1 = this._lastPointerMoveEvent.native;
                    each$1(this._lastPointerMoveEvent.events, function (event) {
                        _this._dispatchGlobalMousemove(event, native_1);
                    });
                }
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "paintId", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (obj) {
                var id = distributeId(++this._colorId);
                var color = Color.fromHex(id).toCSS();
                this._colorMap[color] = obj;
                return color;
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "_removeObject", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (obj) {
                if (obj._colorId !== undefined) {
                    delete this._colorMap[obj._colorId];
                }
            }
        });
        // protected _identifyObjectByColor(colorId: number): CanvasDisplayObject | undefined {
        // 	return this._colorMap[colorId];
        // }
        Object.defineProperty(CanvasRenderer.prototype, "getEvent", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (originalEvent, adjustPoint) {
                if (adjustPoint === void 0) { adjustPoint = true; }
                var bbox = adjustPoint ? this.view.getBoundingClientRect() : new DOMRect(0, 0, 0, 0);
                return new CanvasRendererEvent(originalEvent, (originalEvent.clientX || originalEvent.clientY ? {
                    x: originalEvent.clientX - (originalEvent.clientX ? bbox.left : 0),
                    y: originalEvent.clientY - (originalEvent.clientY ? bbox.top : 0),
                } : {
                    x: 0,
                    y: 0
                }), bbox);
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "_getHitTarget", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (point, bbox) {
                if (point.x < 0 || point.x > bbox.width || point.y < 0 || point.y > bbox.height) {
                    return;
                }
                else {
                    var pixel = this._ghostContext.getImageData(
                    // TODO should this round ?
                    Math.round((point.x / bbox.width) * this._width), Math.round((point.y / bbox.height) * this._height), 1, 1);
                    if (pixel.data[0] === 0 && pixel.data[1] === 0 && pixel.data[2] === 0) {
                        return false;
                    }
                    var colorId = Color.fromRGB(pixel.data[0], pixel.data[1], pixel.data[2]).toCSS();
                    var hit = this._colorMap[colorId];
                    return hit;
                }
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "_withEvents", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, f) {
                var events = this._events[key];
                if (events !== undefined) {
                    events.dispatching = true;
                    try {
                        f(events);
                    }
                    finally {
                        events.dispatching = false;
                        if (events.cleanup) {
                            events.cleanup = false;
                            keepIf(events.callbacks, function (callback) {
                                return !callback.disposed;
                            });
                            if (events.callbacks.length === 0) {
                                events.disposer.dispose();
                                delete this._events[key];
                            }
                        }
                    }
                }
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "_dispatchEventAll", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, event) {
                if (!this.interactionsEnabled) {
                    return;
                }
                this._withEvents(key, function (events) {
                    each$1(events.callbacks, function (callback) {
                        if (!callback.disposed) {
                            callback.callback.call(callback.context, event);
                        }
                    });
                });
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "_dispatchEvent", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, target, event) {
                if (!this.interactionsEnabled) {
                    return false;
                }
                var dispatched = false;
                this._withEvents(key, function (events) {
                    each$1(events.callbacks, function (callback) {
                        if (!callback.disposed && callback.object === target) {
                            callback.callback.call(callback.context, event);
                            dispatched = true;
                        }
                    });
                });
                return dispatched;
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "_dispatchMousedown", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (originalEvent) {
                var _this = this;
                var button = originalEvent.button;
                if (button != 0 && button != 2 && button != 1 && button !== undefined) {
                    // Ignore non-primary mouse buttons
                    return;
                }
                var event = this.getEvent(originalEvent);
                var target = this._getHitTarget(event.point, event.bbox);
                if (target) {
                    var id_1 = event.id;
                    var dragged_1 = false;
                    eachTargets(target, function (obj) {
                        var info = { id: id_1, value: obj };
                        _this._mousedown.push(info);
                        if (!dragged_1 && _this._dispatchEvent("pointerdown", obj, event)) {
                            // Only dispatch the first element which matches
                            dragged_1 = true;
                            var has = _this._dragging.some(function (x) {
                                return x.value === obj && x.id === id_1;
                            });
                            if (!has) {
                                _this._dragging.push(info);
                            }
                        }
                        return true;
                    });
                }
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "_dispatchGlobalMousemove", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (originalEvent, native) {
                var _this = this;
                var event = this.getEvent(originalEvent);
                var target = this._getHitTarget(event.point, event.bbox);
                event.native = native;
                if (target) {
                    this._hovering.forEach(function (obj) {
                        if (!obj.contains(target)) {
                            _this._hovering.delete(obj);
                            if (obj.cursorOverStyle) {
                                setStyle(document.body, "cursor", obj._replacedCursorStyle);
                            }
                            _this._dispatchEvent("pointerout", obj, event);
                        }
                    });
                    if (event.native) {
                        eachTargets(target, function (obj) {
                            if (!_this._hovering.has(obj)) {
                                _this._hovering.add(obj);
                                if (obj.cursorOverStyle) {
                                    obj._replacedCursorStyle = getStyle(document.body, "cursor");
                                    setStyle(document.body, "cursor", obj.cursorOverStyle);
                                }
                                _this._dispatchEvent("pointerover", obj, event);
                            }
                            return true;
                        });
                    }
                    //} else if (target === false) {
                }
                else {
                    this._hovering.forEach(function (obj) {
                        if (obj.cursorOverStyle) {
                            setStyle(document.body, "cursor", obj._replacedCursorStyle);
                        }
                        _this._dispatchEvent("pointerout", obj, event);
                    });
                    this._hovering.clear();
                }
                this._dispatchEventAll("globalpointermove", event);
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "_dispatchGlobalMouseup", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (originalEvent, native) {
                var event = this.getEvent(originalEvent);
                event.native = native;
                //const target = this._getHitTarget(event.point);
                this._dispatchEventAll("globalpointerup", event);
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "_dispatchDragMove", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (originalEvent) {
                var _this = this;
                if (this._dragging.length !== 0) {
                    var event_1 = this.getEvent(originalEvent);
                    var id_2 = event_1.id;
                    this._dragging.forEach(function (obj) {
                        if (obj.id === id_2) {
                            _this._dispatchEvent("pointermove", obj.value, event_1);
                        }
                    });
                }
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "_dispatchDragEnd", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (originalEvent) {
                var _this = this;
                var button = originalEvent.button;
                var clickevent;
                if (button == 0 || button === undefined) {
                    clickevent = "click";
                }
                else if (button == 2) {
                    clickevent = "rightclick";
                }
                else if (button == 1) {
                    clickevent = "middleclick";
                }
                else {
                    // Ignore non-primary mouse buttons
                    return;
                }
                var event = this.getEvent(originalEvent);
                var id = event.id;
                if (this._mousedown.length !== 0) {
                    var target_1 = this._getHitTarget(event.point, event.bbox);
                    if (target_1) {
                        this._mousedown.forEach(function (obj) {
                            if (obj.id === id && obj.value.contains(target_1)) {
                                _this._dispatchEvent(clickevent, obj.value, event);
                            }
                        });
                    }
                    this._mousedown.length = 0;
                }
                if (this._dragging.length !== 0) {
                    this._dragging.forEach(function (obj) {
                        if (obj.id === id) {
                            _this._dispatchEvent("pointerup", obj.value, event);
                        }
                    });
                    this._dragging.length = 0;
                }
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "_dispatchDoubleClick", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (originalEvent) {
                var _this = this;
                var event = this.getEvent(originalEvent);
                var target = this._getHitTarget(event.point, event.bbox);
                if (target) {
                    eachTargets(target, function (obj) {
                        if (_this._dispatchEvent("dblclick", obj, event)) {
                            return false;
                        }
                        else {
                            return true;
                        }
                    });
                }
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "_dispatchWheel", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (originalEvent) {
                var _this = this;
                var event = this.getEvent(originalEvent);
                var target = this._getHitTarget(event.point, event.bbox);
                if (target) {
                    eachTargets(target, function (obj) {
                        if (_this._dispatchEvent("wheel", obj, event)) {
                            return false;
                        }
                        else {
                            return true;
                        }
                    });
                }
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "_makeSharedEvent", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, f) {
                var _this = this;
                if (this._listeners[key] === undefined) {
                    var listener_1 = f();
                    this._listeners[key] = new CounterDisposer(function () {
                        delete _this._listeners[key];
                        listener_1.dispose();
                    });
                }
                return this._listeners[key].increment();
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "_onPointerEvent", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (name, f) {
                var native = false;
                var timer = null;
                function clear() {
                    timer = null;
                    native = false;
                }
                return new MultiDisposer([
                    new Disposer(function () {
                        if (timer !== null) {
                            clearTimeout(timer);
                        }
                        clear();
                    }),
                    addEventListener(this.view, getRendererEvent(name), function (_) {
                        native = true;
                        if (timer !== null) {
                            clearTimeout(timer);
                        }
                        timer = window.setTimeout(clear, 0);
                    }),
                    onPointerEvent(window, name, function (ev) {
                        if (timer !== null) {
                            clearTimeout(timer);
                            timer = null;
                        }
                        f(ev, native);
                        native = false;
                    }),
                ]);
            }
        });
        // This ensures that only a single DOM event is added (e.g. only a single mousemove event listener)
        Object.defineProperty(CanvasRenderer.prototype, "_initEvent", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key) {
                var _this = this;
                switch (key) {
                    case "globalpointermove":
                    case "pointerover":
                    case "pointerout":
                        return this._makeSharedEvent("pointermove", function () {
                            var listener = function (events, native) {
                                _this._lastPointerMoveEvent = { events: events, native: native };
                                each$1(events, function (event) {
                                    _this._dispatchGlobalMousemove(event, native);
                                });
                            };
                            return new MultiDisposer([
                                _this._onPointerEvent("pointerdown", listener),
                                _this._onPointerEvent("pointermove", listener),
                            ]);
                        });
                    case "globalpointerup":
                        return this._makeSharedEvent("pointerup", function () {
                            var mouseup = _this._onPointerEvent("pointerup", function (events, native) {
                                each$1(events, function (event) {
                                    _this._dispatchGlobalMouseup(event, native);
                                });
                                _this._lastPointerMoveEvent = { events: events, native: native };
                            });
                            var pointercancel = _this._onPointerEvent("pointercancel", function (events, native) {
                                each$1(events, function (event) {
                                    _this._dispatchGlobalMouseup(event, native);
                                });
                                _this._lastPointerMoveEvent = { events: events, native: native };
                            });
                            return new Disposer(function () {
                                mouseup.dispose();
                                pointercancel.dispose();
                            });
                        });
                    case "click":
                    case "rightclick":
                    case "middleclick":
                    case "pointerdown":
                    /*
                        return this._makeSharedEvent("pointerdown", () => {
                            return this._onPointerEvent("pointerdown", (event, native) => {
                                this._lastPointerMoveEvent = { event, native };
                                this._dispatchMousedown(event)
                            });
                        });
                    */
                    case "pointermove":
                    case "pointerup":
                        return this._makeSharedEvent("pointerdown", function () {
                            //const throttler = new Throttler();
                            var mousedown = onPointerEvent(_this.view, "pointerdown", function (events) {
                                each$1(events, function (ev) {
                                    _this._dispatchMousedown(ev);
                                });
                            });
                            // TODO handle throttling properly for multitouch
                            var mousemove = _this._onPointerEvent("pointermove", function (ev) {
                                //throttler.throttle(() => {
                                each$1(ev, function (ev) {
                                    _this._dispatchDragMove(ev);
                                });
                                //});
                            });
                            var mouseup = _this._onPointerEvent("pointerup", function (ev) {
                                each$1(ev, function (ev) {
                                    _this._dispatchDragEnd(ev);
                                });
                            });
                            var pointercancel = _this._onPointerEvent("pointercancel", function (ev) {
                                each$1(ev, function (ev) {
                                    _this._dispatchDragEnd(ev);
                                });
                            });
                            return new Disposer(function () {
                                mousedown.dispose();
                                mousemove.dispose();
                                mouseup.dispose();
                                pointercancel.dispose();
                            });
                        });
                    case "dblclick":
                        return this._makeSharedEvent("dblclick", function () {
                            return _this._onPointerEvent("dblclick", function (ev) {
                                each$1(ev, function (ev) {
                                    _this._dispatchDoubleClick(ev);
                                });
                            });
                        });
                    case "wheel":
                        return this._makeSharedEvent("wheel", function () {
                            return addEventListener(window, getRendererEvent("wheel"), function (event) {
                                _this._dispatchWheel(event);
                            }, { passive: false });
                        });
                }
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "_addEvent", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (object, key, callback, context) {
                var _this = this;
                var events = this._events[key];
                if (events === undefined) {
                    events = this._events[key] = {
                        disposer: this._initEvent(key),
                        callbacks: [],
                        dispatching: false,
                        cleanup: false,
                    };
                }
                var listener = { object: object, context: context, callback: callback, disposed: false };
                events.callbacks.push(listener);
                return new Disposer(function () {
                    listener.disposed = true;
                    if (events.dispatching) {
                        events.cleanup = true;
                    }
                    else {
                        removeFirst(events.callbacks, listener);
                        if (events.callbacks.length === 0) {
                            events.disposer.dispose();
                            delete _this._events[key];
                        }
                    }
                });
            }
        });
        Object.defineProperty(CanvasRenderer.prototype, "getCanvas", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (root, options) {
                var _this = this;
                // Make sure everything is rendered
                this.render(root);
                if (!options) {
                    options = {};
                }
                var scale = this.resolution;
                // Check if we need to scale
                if (options.minWidth && (options.minWidth > this._width)) {
                    var minScale = options.minWidth / this._width;
                    if (minScale > scale) {
                        scale = minScale * this.resolution;
                    }
                }
                if (options.minHeight && (options.minHeight > this._height)) {
                    var minScale = options.minHeight / this._height;
                    if (minScale > scale) {
                        scale = minScale * this.resolution;
                    }
                }
                if (options.maxWidth && (options.maxWidth < this._width)) {
                    var maxScale = options.maxWidth / this._width;
                    if (maxScale < scale) {
                        scale = maxScale * this.resolution;
                    }
                }
                if (options.maxHeight && (options.maxHeight > this._height)) {
                    var maxScale = options.maxHeight / this._height;
                    if (maxScale < scale) {
                        scale = maxScale * this.resolution;
                    }
                }
                // Check if we need to compensate for pixel ratio
                if (options.maintainPixelRatio) {
                    scale /= this.resolution;
                }
                // Init list canvases to remove from DOM after export
                var canvases = [];
                // Set up new canvas for export
                var forceRender = false;
                var canvasWidth = this._width;
                var canvasHeight = this._height;
                var canvas = document.createElement("canvas");
                if (scale != this.resolution) {
                    forceRender = true;
                    canvasWidth = this._width * scale / this.resolution;
                    canvasHeight = this._height * scale / this.resolution;
                }
                canvas.width = canvasWidth;
                canvas.height = canvasHeight;
                // Add to DOM so it inherits CSS
                canvas.style.position = "fixed";
                canvas.style.top = "-10000px";
                this.view.appendChild(canvas);
                canvases.push(canvas);
                // Context
                var context = canvas.getContext("2d");
                var width = 0;
                var height = 0;
                var needRerender = false;
                each$1(this.layers, function (layer) {
                    if (layer && layer.visible) {
                        if (layer.tainted || forceRender) {
                            needRerender = true;
                            layer.exportableView = layer.view;
                            layer.exportableContext = layer.context;
                            layer.view = document.createElement("canvas");
                            // Add to DOM so it inherits CSS
                            _this.view.style.position = "fixed";
                            _this.view.style.top = "-10000px";
                            _this.view.appendChild(layer.view);
                            canvases.push(layer.view);
                            layer.view.width = canvasWidth;
                            layer.view.height = canvasHeight;
                            layer.context = layer.view.getContext("2d");
                            layer.dirty = true;
                            layer.scale = scale;
                        }
                    }
                });
                if (needRerender) {
                    this._omitTainted = true;
                    this.render(root);
                    this._omitTainted = false;
                }
                each$1(this.layers, function (layer) {
                    if (layer && layer.visible) {
                        // Layer is fine. Just plop it into our target canvas
                        context.drawImage(layer.view, 0, 0);
                        // Restore layer original canvas
                        if (layer.exportableView) {
                            layer.view = layer.exportableView;
                            layer.exportableView = undefined;
                        }
                        if (layer.exportableContext) {
                            layer.context = layer.exportableContext;
                            layer.exportableContext = undefined;
                        }
                        if (width < layer.view.clientWidth) {
                            width = layer.view.clientWidth;
                        }
                        if (height < layer.view.clientHeight) {
                            height = layer.view.clientHeight;
                        }
                        layer.scale = undefined;
                    }
                });
                canvas.style.width = width + "px";
                canvas.style.height = height + "px";
                each$1(canvases, function (canvas) {
                    _this.view.style.position = "";
                    _this.view.style.top = "";
                    _this.view.removeChild(canvas);
                });
                return canvas;
            }
        });
        return CanvasRenderer;
    }(ArrayDisposer));

    function rAF(fps, callback) {
        if (fps == null) {
            requestAnimationFrame(callback);
        }
        else {
            setTimeout(function () {
                requestAnimationFrame(callback);
            }, 1000 / fps);
        }
    }
    // TODO implement Disposer
    /**
     * Root element of the chart.
     *
     * @see {@link https://www.amcharts.com/docs/v5/getting-started/#Root_element} for more info
     */
    var Root = /** @class */ (function () {
        function Root(id, settings, isReal) {
            if (settings === void 0) { settings = {}; }
            /**
             * A reference to original chart container (div element).
             */
            Object.defineProperty(this, "dom", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_inner", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_isDirty", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(this, "_isDirtyParents", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(this, "_dirty", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(this, "_dirtyParents", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(this, "_dirtyBounds", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(this, "_dirtyPositions", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(this, "_ticker", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: null
            });
            Object.defineProperty(this, "_tickers", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            /**
             * Root's event dispatcher.
             *
             * @see {@link https://www.amcharts.com/docs/v5/concepts/events/} for more info
             */
            Object.defineProperty(this, "events", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new EventDispatcher()
            });
            /**
             * @ignore
             * @todo needs description
             */
            Object.defineProperty(this, "animationTime", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: null
            });
            Object.defineProperty(this, "_animations", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            Object.defineProperty(this, "_renderer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_rootContainer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            /**
             * Main content container.
             */
            Object.defineProperty(this, "container", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            /**
             * A [[Container]] used to display tooltips in.
             */
            Object.defineProperty(this, "tooltipContainer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_tooltip", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            // Locale-related
            /**
             * @ignore
             */
            Object.defineProperty(this, "language", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: Language.new(this, {})
            });
            /**
             * Locale used by the chart.
             *
             * @see {@link https://www.amcharts.com/docs/v5/concepts/locales/}
             */
            Object.defineProperty(this, "locale", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: en
            });
            // Date-time related
            /**
             * Use UTC when formatting date/time.
             *
             * @see {@link https://www.amcharts.com/docs/v5/concepts/formatters/formatting-dates/#UTC_and_time_zones} for more info
             */
            Object.defineProperty(this, "utc", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            /**
             * If set, will format date/time in specific time zone.
             *
             * The value should be named time zone, e.g.:
             * `"America/Vancouver"`, `"Australia/Sydney"`, `"UTC"`.
             *
             * @see {@link https://www.amcharts.com/docs/v5/getting-started/root-element/#Time_zone} for more info
             * @since 5.1.0
             */
            Object.defineProperty(this, "timezone", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            /**
             * The maximum FPS that the Root will run at.
             *
             * If `undefined` it will run at the highest FPS.
             *
             * @see {@link https://www.amcharts.com/docs/v5/getting-started/root-element/#Performance} for more info
             */
            Object.defineProperty(this, "fps", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            /**
             * Number formatter.
             *
             * @see {@link https://www.amcharts.com/docs/v5/concepts/formatters/formatting-numbers/} for more info
             */
            Object.defineProperty(this, "numberFormatter", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: NumberFormatter.new(this, {})
            });
            /**
             * Date/time formatter.
             *
             * @see {@link https://www.amcharts.com/docs/v5/concepts/formatters/formatting-dates/} for more info
             */
            Object.defineProperty(this, "dateFormatter", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: DateFormatter.new(this, {})
            });
            /**
             * Duration formatter.
             *
             * @see {@link https://www.amcharts.com/docs/v5/concepts/formatters/formatting-dates/} for more info
             */
            Object.defineProperty(this, "durationFormatter", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: DurationFormatter.new(this, {})
            });
            // Accessibility
            /**
             * Global tab index for using for the whole chart
             *
             * @see {@link https://www.amcharts.com/docs/v5/concepts/accessibility/} for more info
             */
            Object.defineProperty(this, "tabindex", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            //@todo maybe make this better
            Object.defineProperty(this, "_tabindexes", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            Object.defineProperty(this, "_focusElementDirty", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(this, "_focusElementContainer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_focusedSprite", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_isShift", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_keyboardDragPoint", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_tooltipElementContainer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_readerAlertElement", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_logo", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            /**
             * Used for dynamically-created CSS and JavaScript with strict source policies.
             */
            Object.defineProperty(this, "nonce", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            /**
             * Special color set to be used for various controls.
             *
             * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/#Interface_colors} for more info
             */
            Object.defineProperty(this, "interfaceColors", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            /**
             * An instance of vertical layout object that can be used to set `layout` setting
             * of a [[Container]].
             *
             * @default VerticalLayout.new()
             */
            Object.defineProperty(this, "verticalLayout", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: VerticalLayout.new(this, {})
            });
            /**
             * An instance of horizontal layout object that can be used to set `layout` setting
             * of a [[Container]].
             *
             * @default HorizontalLayout.new()
             */
            Object.defineProperty(this, "horizontalLayout", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: HorizontalLayout.new(this, {})
            });
            /**
             * An instance of grid layout object that can be used to set `layout` setting
             * of a [[Container]].
             *
             * @default VerticalLayout.new()
             */
            Object.defineProperty(this, "gridLayout", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: GridLayout.new(this, {})
            });
            /**
             * Indicates whether chart should resized automatically when parent container
             * width and/or height changes.
             *
             * If disabled (`autoResize = false`) you can make the chart resize manually
             * by calling root element's `resize()` method.
             */
            Object.defineProperty(this, "autoResize", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: true
            });
            Object.defineProperty(this, "_fontHash", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: ""
            });
            Object.defineProperty(this, "_isDisposed", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(this, "_disposers", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            Object.defineProperty(this, "_resizeSensorDisposer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_tooltips", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            if (!isReal) {
                throw new Error("You cannot use `new Class()`, instead use `Class.new()`");
            }
            if (settings.useSafeResolution == null) {
                settings.useSafeResolution = true;
            }
            var resolution;
            if (settings.useSafeResolution) {
                resolution = getSafeResolution();
            }
            this._renderer = new CanvasRenderer(resolution);
            var dom;
            if (id instanceof HTMLElement) {
                dom = id;
            }
            else {
                dom = document.getElementById(id);
            }
            each$1(registry.rootElements, function (root) {
                if (root.dom === dom) {
                    throw new Error("You cannot have multiple Roots on the same DOM node");
                }
            });
            this.interfaceColors = InterfaceColors.new(this, {});
            if (dom === null) {
                throw new Error("Could not find HTML element with id `" + id + "`");
            }
            this.dom = dom;
            var inner = document.createElement("div");
            inner.style.position = "relative";
            inner.style.height = "100%";
            dom.appendChild(inner);
            this._inner = inner;
            this._updateComputedStyles();
            registry.rootElements.push(this);
        }
        Object.defineProperty(Root, "new", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (id, settings) {
                var root = new Root(id, settings, true);
                root._init();
                return root;
            }
        });
        Object.defineProperty(Root.prototype, "moveDOM", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (id) {
                var dom;
                if (id instanceof HTMLElement) {
                    dom = id;
                }
                else {
                    dom = document.getElementById(id);
                }
                if (dom) {
                    while (this.dom.childNodes.length > 0) {
                        dom.appendChild(this.dom.childNodes[0]);
                    }
                    this.dom = dom;
                    this._initResizeSensor();
                    this.resize();
                }
            }
        });
        Object.defineProperty(Root.prototype, "_handleLogo", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (this._logo) {
                    var w = this.dom.offsetWidth;
                    var h = this.dom.offsetHeight;
                    if ((w <= 150) || (h <= 60)) {
                        this._logo.hide();
                    }
                    else {
                        this._logo.show();
                    }
                }
            }
        });
        Object.defineProperty(Root.prototype, "_showBranding", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (!this._logo) {
                    var logo = this.tooltipContainer.children.push(Container.new(this, {
                        interactive: true,
                        interactiveChildren: false,
                        position: "absolute",
                        setStateOnChildren: true,
                        paddingTop: 9,
                        paddingRight: 9,
                        paddingBottom: 9,
                        paddingLeft: 9,
                        scale: .6,
                        y: percent(100),
                        centerY: p100,
                        tooltipText: "Created using amCharts 5",
                        tooltipX: p100,
                        cursorOverStyle: "pointer",
                        background: Rectangle.new(this, {
                            fill: color(0x474758),
                            fillOpacity: 0,
                            tooltipY: 5
                        })
                    }));
                    var tooltip = Tooltip.new(this, {
                        pointerOrientation: "horizontal",
                        paddingTop: 4,
                        paddingRight: 7,
                        paddingBottom: 4,
                        paddingLeft: 7
                    });
                    tooltip.label.setAll({
                        fontSize: 12
                    });
                    tooltip.get("background").setAll({
                        fill: this.interfaceColors.get("background"),
                        stroke: this.interfaceColors.get("grid"),
                        strokeOpacity: 0.3
                    });
                    logo.set("tooltip", tooltip);
                    logo.events.on("click", function () {
                        window.open("https://www.amcharts.com/", "_blank");
                    });
                    logo.states.create("hover", {});
                    var m = logo.children.push(Graphics.new(this, {
                        stroke: color(0xcccccc),
                        strokeWidth: 3,
                        svgPath: "M5 25 L13 25h13.6c3.4 0 6 0 10.3-4.3s5.2-12 8.6-12c3.4 0 4.3 8.6 7.7 8.6M83.4 25H79.8c-3.4 0-6 0-10.3-4.3s-5.2-12-8.6-12-4.3 8.6-7.7 8.6"
                    }));
                    m.states.create("hover", { stroke: color(0x3CABFF) });
                    var a = logo.children.push(Graphics.new(this, {
                        stroke: color(0x888888),
                        strokeWidth: 3,
                        svgPath: "M83.4 25h-31C37 25 39.5 4.4 28.4 4.4S18.9 24.2 4.3 25H0"
                    }));
                    a.states.create("hover", { stroke: color(0x474758) });
                    //logo.set("tooltip", this._tooltip);
                    //logo.setPrivate("tooltipTarget", logo.get("background"));
                    this._logo = logo;
                    this._handleLogo();
                }
            }
        });
        Object.defineProperty(Root.prototype, "_init", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                var renderer = this._renderer;
                var rootContainer = Container.new(this, { visible: true, width: this.dom.clientWidth, height: this.dom.clientHeight });
                this._rootContainer = rootContainer;
                this._rootContainer._defaultThemes.push(DefaultTheme.new(this));
                var container = rootContainer.children.push(Container.new(this, { visible: true, width: p100, height: p100 }));
                this.container = container;
                renderer.resize(this.dom.clientWidth, this.dom.clientHeight);
                //@todo: better appendChild - refer
                this._inner.appendChild(renderer.view);
                // TODO: TMP TMP TMP for testing only, remove
                //document.body.appendChild((<any>renderer)._ghostView);
                this._initResizeSensor();
                // Create element which is used to make announcements to screen reader
                var readerAlertElement = document.createElement("div");
                readerAlertElement.setAttribute("role", "alert");
                readerAlertElement.style.zIndex = "-100000";
                readerAlertElement.style.opacity = "0";
                readerAlertElement.style.position = "absolute";
                readerAlertElement.style.top = "0";
                this._readerAlertElement = readerAlertElement;
                this._inner.appendChild(this._readerAlertElement);
                var focusElementContainer = document.createElement("div");
                focusElementContainer.style.position = "absolute";
                focusElementContainer.style.pointerEvents = "none";
                focusElementContainer.style.top = "0px";
                focusElementContainer.style.left = "0px";
                focusElementContainer.style.overflow = "hidden";
                focusElementContainer.style.width = this.dom.clientWidth + "px";
                focusElementContainer.style.height = this.dom.clientHeight + "px";
                focusElementContainer.setAttribute("role", "application");
                setInteractive(focusElementContainer, false);
                this._focusElementContainer = focusElementContainer;
                this._inner.appendChild(this._focusElementContainer);
                this._tooltipElementContainer = document.createElement("div");
                this._inner.appendChild(this._tooltipElementContainer);
                // Add keyboard events for accessibility, e.g. simulating drag with arrow
                // keys and click with ENTER
                if (supports("keyboardevents")) {
                    this._disposers.push(addEventListener(window, "keydown", function (ev) {
                        if (ev.keyCode == 16) {
                            _this._isShift = true;
                        }
                    }));
                    this._disposers.push(addEventListener(window, "keyup", function (ev) {
                        if (ev.keyCode == 16) {
                            _this._isShift = false;
                        }
                    }));
                    this._disposers.push(addEventListener(focusElementContainer, "keydown", function (ev) {
                        var focusedSprite = _this._focusedSprite;
                        if (focusedSprite) {
                            if (ev.keyCode == 27) {
                                // ESC pressed - lose current focus
                                blur();
                                _this._focusedSprite = undefined;
                            }
                            var dragOffsetX = 0;
                            var dragOffsetY = 0;
                            // TODO: figure out if using bogus MouseEvent is fine, or it will
                            // fail on some platforms
                            switch (ev.keyCode) {
                                case 13:
                                    ev.preventDefault();
                                    var downEvent = renderer.getEvent(new MouseEvent("click"));
                                    focusedSprite.events.dispatch("click", {
                                        type: "click",
                                        originalEvent: downEvent.event,
                                        point: downEvent.point,
                                        simulated: true,
                                        target: focusedSprite
                                    });
                                    return;
                                case 37:
                                    dragOffsetX = -6;
                                    break;
                                case 39:
                                    dragOffsetX = 6;
                                    break;
                                case 38:
                                    dragOffsetY = -6;
                                    break;
                                case 40:
                                    dragOffsetY = 6;
                                    break;
                                default:
                                    return;
                            }
                            if (dragOffsetX != 0 || dragOffsetY != 0) {
                                ev.preventDefault();
                                if (!focusedSprite.isDragging()) {
                                    // Start dragging
                                    _this._keyboardDragPoint = {
                                        x: 0,
                                        y: 0
                                    };
                                    var downEvent = renderer.getEvent(new MouseEvent("mousedown", {
                                        clientX: 0,
                                        clientY: 0
                                    }));
                                    if (focusedSprite.events.isEnabled("pointerdown")) {
                                        focusedSprite.events.dispatch("pointerdown", {
                                            type: "pointerdown",
                                            originalEvent: downEvent.event,
                                            point: downEvent.point,
                                            simulated: true,
                                            target: focusedSprite
                                        });
                                    }
                                }
                                // Move incrementally
                                var dragPoint = _this._keyboardDragPoint;
                                dragPoint.x += dragOffsetX;
                                dragPoint.y += dragOffsetY;
                                var moveEvent = renderer.getEvent(new MouseEvent("mousemove", {
                                    clientX: dragPoint.x,
                                    clientY: dragPoint.y
                                }), false);
                                if (focusedSprite.events.isEnabled("globalpointermove")) {
                                    focusedSprite.events.dispatch("globalpointermove", {
                                        type: "globalpointermove",
                                        originalEvent: moveEvent.event,
                                        point: moveEvent.point,
                                        simulated: true,
                                        target: focusedSprite
                                    });
                                }
                            }
                        }
                    }));
                    this._disposers.push(addEventListener(focusElementContainer, "keyup", function (ev) {
                        if (_this._focusedSprite) {
                            var focusedSprite = _this._focusedSprite;
                            var keyCode = ev.keyCode;
                            switch (keyCode) {
                                case 37:
                                case 39:
                                case 38:
                                case 40:
                                    if (focusedSprite.isDragging()) {
                                        // Simulate drag stop
                                        var dragPoint = _this._keyboardDragPoint;
                                        var upEvent = renderer.getEvent(new MouseEvent("mouseup", {
                                            clientX: dragPoint.x,
                                            clientY: dragPoint.y
                                        }));
                                        if (focusedSprite.events.isEnabled("globalpointerup")) {
                                            focusedSprite.events.dispatch("globalpointerup", {
                                                type: "globalpointerup",
                                                originalEvent: upEvent.event,
                                                point: upEvent.point,
                                                simulated: true,
                                                target: focusedSprite
                                            });
                                        }
                                        //this._positionFocusElement(focusedSprite);
                                        _this._keyboardDragPoint = undefined;
                                        // @todo dispatch mouseup event instead of calling dragStop?
                                        // this._dispatchEvent("globalpointerup", target, upEvent);
                                        return;
                                    }
                                    else if (focusedSprite.get("focusableGroup")) {
                                        // Find next item in focusable group
                                        var group_1 = focusedSprite.get("focusableGroup");
                                        var items = _this._tabindexes.filter(function (item) { return item.get("focusableGroup") == group_1; });
                                        var index = items.indexOf(focusedSprite);
                                        var lastIndex = items.length - 1;
                                        index += (keyCode == 39 || keyCode == 40) ? 1 : -1;
                                        if (index < 0) {
                                            index = lastIndex;
                                        }
                                        else if (index > lastIndex) {
                                            index = 0;
                                        }
                                        focus(items[index].getPrivate("focusElement").dom);
                                    }
                                    break;
                            }
                        }
                    }));
                }
                this._startTicker();
                this.setThemes([]);
                this._addTooltip();
                if (!this._hasLicense()) {
                    this._showBranding();
                }
            }
        });
        Object.defineProperty(Root.prototype, "_initResizeSensor", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                if (this._resizeSensorDisposer) {
                    this._resizeSensorDisposer.dispose();
                }
                this._resizeSensorDisposer = new ResizeSensor(this.dom, function () {
                    if (_this.autoResize) {
                        _this.resize();
                    }
                });
                this._disposers.push(this._resizeSensorDisposer);
            }
        });
        /**
         * If automatic resizing of char is disabled (`root.autoResize = false`), it
         * can be resized manually by calling this method.
         */
        Object.defineProperty(Root.prototype, "resize", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var dom = this.dom;
                var w = dom.clientWidth;
                var h = dom.clientHeight;
                if (w > 0 && h > 0) {
                    var focusElementContainer = this._focusElementContainer;
                    focusElementContainer.style.width = w + "px";
                    focusElementContainer.style.height = h + "px";
                    this._renderer.resize(w, h);
                    var rootContainer = this._rootContainer;
                    rootContainer.setPrivate("width", w);
                    rootContainer.setPrivate("height", h);
                    this._render();
                    this._handleLogo();
                }
            }
        });
        Object.defineProperty(Root.prototype, "_render", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._renderer.render(this._rootContainer._display);
                if (this._focusElementDirty) {
                    this._updateCurrentFocus();
                    this._focusElementDirty = false;
                }
            }
        });
        Object.defineProperty(Root.prototype, "_runTickers", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (currentTime) {
                each$1(this._tickers, function (f) {
                    f(currentTime);
                });
            }
        });
        Object.defineProperty(Root.prototype, "_runAnimations", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (currentTime) {
                keepIf(this._animations, function (animation) {
                    return !animation._runAnimation(currentTime);
                });
            }
        });
        Object.defineProperty(Root.prototype, "_runDirties", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                //console.log("tick **************************************************************");
                var allParents = {};
                while (this._isDirtyParents) {
                    // This must be before calling _prepareChildren
                    this._isDirtyParents = false;
                    keys(this._dirtyParents).forEach(function (key) {
                        var parent = _this._dirtyParents[key];
                        delete _this._dirtyParents[key];
                        if (!parent.isDisposed()) {
                            allParents[parent.uid] = parent;
                            parent._prepareChildren();
                        }
                    });
                }
                keys(allParents).forEach(function (key) {
                    allParents[key]._updateChildren();
                });
                var objects = [];
                //		console.log("_beforeChanged")
                keys(this._dirty).forEach(function (key) {
                    var entity = _this._dirty[key];
                    if (entity.isDisposed()) {
                        delete _this._dirty[entity.uid];
                    }
                    else {
                        objects.push(entity);
                        entity._beforeChanged();
                    }
                });
                //		console.log("_changed")
                objects.forEach(function (entity) {
                    entity._changed();
                    delete _this._dirty[entity.uid];
                    entity._clearDirty();
                });
                this._isDirty = false;
                var depths = {};
                var bounds = [];
                keys(this._dirtyBounds).forEach(function (key) {
                    var entity = _this._dirtyBounds[key];
                    delete _this._dirtyBounds[key];
                    if (!entity.isDisposed()) {
                        depths[entity.uid] = entity.depth();
                        bounds.push(entity);
                    }
                });
                // High depth -> low depth
                bounds.sort(function (x, y) {
                    return compare(depths[y.uid], depths[x.uid]);
                });
                //		console.log("_updateBounds")
                bounds.forEach(function (entity) {
                    entity._updateBounds();
                });
                //		console.log("_updatePosition")
                var dirtyPositions = this._dirtyPositions;
                keys(dirtyPositions).forEach(function (key) {
                    var sprite = dirtyPositions[key];
                    delete dirtyPositions[key];
                    if (!sprite.isDisposed()) {
                        sprite._updatePosition();
                    }
                });
                //		console.log("_afterChanged")
                objects.forEach(function (entity) {
                    entity._afterChanged();
                });
            }
        });
        Object.defineProperty(Root.prototype, "_renderFrame", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (currentTime) {
                if (this.events.isEnabled("framestarted")) {
                    this.events.dispatch("framestarted", {
                        type: "framestarted",
                        target: this,
                        timestamp: currentTime,
                    });
                }
                this._checkComputedStyles();
                this._runTickers(currentTime);
                this._runAnimations(currentTime);
                this._runDirties();
                this._render();
                if (this.events.isEnabled("frameended")) {
                    this.events.dispatch("frameended", {
                        type: "frameended",
                        target: this,
                        timestamp: currentTime,
                    });
                }
                return this._tickers.length === 0 &&
                    this._animations.length === 0 &&
                    !this._isDirty;
            }
        });
        Object.defineProperty(Root.prototype, "_runTicker", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (currentTime) {
                if (!this.isDisposed()) {
                    this.animationTime = currentTime;
                    var done = this._renderFrame(currentTime);
                    // No more work to do
                    if (done) {
                        this._ticker = null;
                        this.animationTime = null;
                    }
                    else {
                        rAF(this.fps, this._ticker);
                    }
                }
            }
        });
        Object.defineProperty(Root.prototype, "_runTickerNow", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (!this.isDisposed()) {
                    for (;;) {
                        var currentTime = performance.now();
                        this.animationTime = currentTime;
                        var done = this._renderFrame(currentTime);
                        if (done) {
                            this.animationTime = null;
                            break;
                        }
                    }
                }
            }
        });
        Object.defineProperty(Root.prototype, "_startTicker", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                if (this._ticker === null) {
                    this.animationTime = null;
                    this._ticker = function (currentTime) {
                        _this._runTicker(currentTime);
                    };
                    rAF(this.fps, this._ticker);
                }
            }
        });
        Object.defineProperty(Root.prototype, "_addDirtyEntity", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (entity) {
                if (this._dirty[entity.uid] === undefined) {
                    this._isDirty = true;
                    this._dirty[entity.uid] = entity;
                    this._startTicker();
                }
            }
        });
        Object.defineProperty(Root.prototype, "_addDirtyParent", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (parent) {
                if (this._dirtyParents[parent.uid] === undefined) {
                    this._isDirty = true;
                    this._isDirtyParents = true;
                    this._dirtyParents[parent.uid] = parent;
                    this._startTicker();
                }
            }
        });
        Object.defineProperty(Root.prototype, "_addDirtyBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (entity) {
                if (this._dirtyBounds[entity.uid] === undefined) {
                    this._isDirty = true;
                    this._dirtyBounds[entity.uid] = entity;
                    this._startTicker();
                }
            }
        });
        Object.defineProperty(Root.prototype, "_addDirtyPosition", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (sprite) {
                if (this._dirtyPositions[sprite.uid] === undefined) {
                    this._isDirty = true;
                    this._dirtyPositions[sprite.uid] = sprite;
                    this._startTicker();
                }
            }
        });
        Object.defineProperty(Root.prototype, "_addAnimation", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (animation) {
                // TODO use numeric id instead
                if (this._animations.indexOf(animation) === -1) {
                    this._animations.push(animation);
                    this._startTicker();
                }
            }
        });
        Object.defineProperty(Root.prototype, "_markDirty", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._isDirty = true;
            }
        });
        Object.defineProperty(Root.prototype, "_markDirtyRedraw", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                this.events.once("frameended", function () {
                    _this._isDirty = true;
                    _this._startTicker();
                });
            }
        });
        Object.defineProperty(Root.prototype, "eachFrame", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (f) {
                var _this = this;
                this._tickers.push(f);
                this._startTicker();
                return new Disposer(function () {
                    removeFirst(_this._tickers, f);
                });
            }
        });
        /**
         * Returns width of the target container, in pixels.
         *
         * @return Width
         */
        Object.defineProperty(Root.prototype, "width", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this.dom.clientWidth;
            }
        });
        /**
         * Returns height of the target container, in pixels.
         *
         * @return Height
         */
        Object.defineProperty(Root.prototype, "height", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this.dom.clientHeight;
            }
        });
        /**
         * Disposes root and all the content in it.
         */
        Object.defineProperty(Root.prototype, "dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (!this._isDisposed) {
                    this._isDisposed = true;
                    this._rootContainer.dispose();
                    this._renderer.dispose();
                    this.horizontalLayout.dispose();
                    this.verticalLayout.dispose();
                    this.interfaceColors.dispose();
                    each$1(this._disposers, function (x) {
                        x.dispose();
                    });
                    if (this._inner) {
                        removeElement(this._inner);
                    }
                    remove(registry.rootElements, this);
                }
            }
        });
        /**
         * Returns `true` if root element is disposed.
         *
         * @return Disposed?
         */
        Object.defineProperty(Root.prototype, "isDisposed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this._isDisposed;
            }
        });
        /**
         * Triggers screen reader read out a message.
         *
         * @see {@link https://www.amcharts.com/docs/v5/concepts/accessibility/} for more info
         * @param  text  Alert text
         */
        Object.defineProperty(Root.prototype, "readerAlert", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (text) {
                this._readerAlertElement.innerHTML = stripTags(text);
            }
        });
        /**
         * Sets themes to be used for the chart.
         *
         * @see {@link https://www.amcharts.com/docs/v5/concepts/themes/} for more info
         * @param  themes  A list of themes
         */
        Object.defineProperty(Root.prototype, "setThemes", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (themes) {
                this._rootContainer.set("themes", themes);
                // otherwise new themes are not applied
                var tooltipContainer = this.tooltipContainer;
                if (tooltipContainer) {
                    tooltipContainer._applyThemes();
                }
                // @todo review this
                var interfaceColors = this.interfaceColors;
                if (interfaceColors) {
                    interfaceColors._applyThemes();
                }
            }
        });
        Object.defineProperty(Root.prototype, "_addTooltip", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (!this.tooltipContainer) {
                    var tooltipContainer = this._rootContainer.children.push(Container.new(this, { position: "absolute", isMeasured: false, width: p100, height: p100, layer: 30 }));
                    this.tooltipContainer = tooltipContainer;
                    var tooltip = Tooltip.new(this, {});
                    this.container.set("tooltip", tooltip);
                    tooltip.hide(0);
                    this._tooltip = tooltip;
                }
            }
        });
        /**
         * Accesibility
         */
        Object.defineProperty(Root.prototype, "_registerTabindexOrder", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (target) {
                if (target.get("focusable")) {
                    pushOne(this._tabindexes, target);
                }
                else {
                    remove(this._tabindexes, target);
                }
                this._invalidateTabindexes();
            }
        });
        Object.defineProperty(Root.prototype, "_unregisterTabindexOrder", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (target) {
                remove(this._tabindexes, target);
                this._invalidateTabindexes();
            }
        });
        Object.defineProperty(Root.prototype, "_invalidateTabindexes", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                this._tabindexes.sort(function (a, b) {
                    var aindex = a.get("tabindexOrder", 0);
                    var bindex = b.get("tabindexOrder", 0);
                    if (aindex == bindex) {
                        return 0;
                    }
                    else if (aindex > bindex) {
                        return 1;
                    }
                    else {
                        return -1;
                    }
                });
                var groups = [];
                each$1(this._tabindexes, function (item, index) {
                    if (!item.getPrivate("focusElement")) {
                        _this._makeFocusElement(index, item);
                    }
                    else {
                        _this._moveFocusElement(index, item);
                    }
                    var group = item.get("focusableGroup");
                    if (group) {
                        if (groups.indexOf(group) !== -1) {
                            // Non-first element in the group, make it not directly focusable
                            item.getPrivate("focusElement").dom.setAttribute("tabindex", "-1");
                        }
                        else {
                            groups.push(group);
                        }
                    }
                });
            }
        });
        Object.defineProperty(Root.prototype, "_updateCurrentFocus", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (this._focusedSprite) {
                    this._decorateFocusElement(this._focusedSprite);
                    this._positionFocusElement(this._focusedSprite);
                }
            }
        });
        Object.defineProperty(Root.prototype, "_decorateFocusElement", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (target, focusElement) {
                // Decorate with proper accessibility attributes
                if (!focusElement) {
                    focusElement = target.getPrivate("focusElement").dom;
                }
                if (!focusElement) {
                    return;
                }
                if (target.get("visible") && target.get("role") != "tooltip" && !target.isHidden()) {
                    if (focusElement.getAttribute("tabindex") != "-1") {
                        focusElement.setAttribute("tabindex", "" + this.tabindex);
                    }
                }
                else {
                    focusElement.removeAttribute("tabindex");
                }
                var role = target.get("role");
                if (role) {
                    focusElement.setAttribute("role", role);
                }
                else {
                    focusElement.removeAttribute("role");
                }
                var ariaLabel = target.get("ariaLabel");
                if (ariaLabel) {
                    var label = populateString(target, ariaLabel);
                    focusElement.setAttribute("aria-label", label);
                }
                else {
                    focusElement.removeAttribute("aria-label");
                }
                var ariaLive = target.get("ariaLive");
                if (ariaLive) {
                    focusElement.setAttribute("aria-live", ariaLive);
                }
                else {
                    focusElement.removeAttribute("aria-live");
                }
                var ariaChecked = target.get("ariaChecked");
                if (ariaChecked != null) {
                    focusElement.setAttribute("aria-checked", ariaChecked ? "true" : "false");
                }
                else {
                    focusElement.removeAttribute("aria-checked");
                }
                if (target.get("ariaHidden")) {
                    focusElement.setAttribute("aria-hidden", "hidden");
                }
                else {
                    focusElement.removeAttribute("aria-hidden");
                }
                var ariaOrientation = target.get("ariaOrientation");
                if (ariaOrientation) {
                    focusElement.setAttribute("aria-orientation", ariaOrientation);
                }
                else {
                    focusElement.removeAttribute("aria-orientation");
                }
                var ariaValueNow = target.get("ariaValueNow");
                if (ariaValueNow) {
                    focusElement.setAttribute("aria-valuenow", ariaValueNow);
                }
                else {
                    focusElement.removeAttribute("aria-valuenow");
                }
                var ariaValueMin = target.get("ariaValueMin");
                if (ariaValueMin) {
                    focusElement.setAttribute("aria-valuemin", ariaValueMin);
                }
                else {
                    focusElement.removeAttribute("aria-valuemin");
                }
                var ariaValueMax = target.get("ariaValueMax");
                if (ariaValueMax) {
                    focusElement.setAttribute("aria-valuemax", ariaValueMax);
                }
                else {
                    focusElement.removeAttribute("aria-valuemax");
                }
                var ariaValueText = target.get("ariaValueText");
                if (ariaValueText) {
                    focusElement.setAttribute("aria-valuetext", ariaValueText);
                }
                else {
                    focusElement.removeAttribute("aria-valuetext");
                }
                var ariaControls = target.get("ariaControls");
                if (ariaControls) {
                    focusElement.setAttribute("aria-controls", ariaControls);
                }
                else {
                    focusElement.removeAttribute("aria-controls");
                }
            }
        });
        Object.defineProperty(Root.prototype, "_makeFocusElement", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (index, target) {
                var _this = this;
                if (target.getPrivate("focusElement")) {
                    return;
                }
                // Init
                var focusElement = document.createElement("div");
                if (target.get("role") != "tooltip") {
                    focusElement.tabIndex = this.tabindex;
                }
                focusElement.style.position = "absolute";
                setInteractive(focusElement, false);
                var disposers = [];
                target.setPrivate("focusElement", {
                    dom: focusElement,
                    disposers: disposers,
                });
                this._decorateFocusElement(target);
                disposers.push(addEventListener(focusElement, "focus", function (ev) {
                    _this._handleFocus(ev, index);
                }));
                disposers.push(addEventListener(focusElement, "blur", function (ev) {
                    _this._handleBlur(ev, index);
                }));
                this._moveFocusElement(index, target);
            }
        });
        Object.defineProperty(Root.prototype, "_removeFocusElement", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (target) {
                remove(this._tabindexes, target);
                var focusElement = target.getPrivate("focusElement");
                if (focusElement) {
                    var container = this._focusElementContainer;
                    container.removeChild(focusElement.dom);
                    each$1(focusElement.disposers, function (x) {
                        x.dispose();
                    });
                }
            }
        });
        Object.defineProperty(Root.prototype, "_hideFocusElement", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (target) {
                var focusElement = target.getPrivate("focusElement");
                focusElement.dom.style.display = "none";
            }
        });
        Object.defineProperty(Root.prototype, "_moveFocusElement", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (index, target) {
                // Get container
                var container = this._focusElementContainer;
                var focusElement = target.getPrivate("focusElement").dom;
                if (focusElement === this._focusElementContainer.children[index]) {
                    // Nothing to do
                    return;
                }
                var next = this._focusElementContainer.children[index + 1];
                if (next) {
                    container.insertBefore(focusElement, next);
                }
                else {
                    container.append(focusElement);
                }
            }
        });
        Object.defineProperty(Root.prototype, "_positionFocusElement", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (target) {
                var bounds = target.globalBounds();
                var width = bounds.right == bounds.left ? target.width() : bounds.right - bounds.left;
                var height = bounds.top == bounds.bottom ? target.height() : bounds.bottom - bounds.top;
                var focusElement = target.getPrivate("focusElement").dom;
                focusElement.style.top = (bounds.top - 2) + "px";
                focusElement.style.left = (bounds.left - 2) + "px";
                focusElement.style.width = (width + 4) + "px";
                focusElement.style.height = (height + 4) + "px";
            }
        });
        Object.defineProperty(Root.prototype, "_handleFocus", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (ev, index) {
                // Get element
                var focused = this._tabindexes[index];
                // Jump over hidden elements
                if (!focused.isVisibleDeep()) {
                    this._focusNext(ev.target, this._isShift ? -1 : 1);
                    return;
                }
                // Size and position
                this._positionFocusElement(focused);
                //this._decorateFocusElement(focused);
                this._focusedSprite = focused;
                if (focused.events.isEnabled("focus")) {
                    focused.events.dispatch("focus", {
                        type: "focus",
                        originalEvent: ev,
                        target: focused
                    });
                }
            }
        });
        Object.defineProperty(Root.prototype, "_focusNext", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (el, direction) {
                var focusableElements = Array.from(document.querySelectorAll([
                    'a[href]',
                    'area[href]',
                    'button:not([disabled])',
                    'details',
                    'input:not([disabled])',
                    'iframe:not([disabled])',
                    'select:not([disabled])',
                    'textarea:not([disabled])',
                    '[contentEditable=""]',
                    '[contentEditable="true"]',
                    '[contentEditable="TRUE"]',
                    '[tabindex]:not([tabindex^="-"])',
                    //':not([disabled])'
                ].join(',')));
                var index = focusableElements.indexOf(el) + direction;
                if (index < 0) {
                    index = focusableElements.length - 1;
                }
                else if (index >= focusableElements.length) {
                    index = 0;
                }
                focusableElements[index].focus();
            }
        });
        Object.defineProperty(Root.prototype, "_handleBlur", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (ev, _index) {
                var focused = this._focusedSprite;
                if (focused && focused.events.isEnabled("blur")) {
                    focused.events.dispatch("blur", {
                        type: "blur",
                        originalEvent: ev,
                        target: focused
                    });
                }
                this._focusedSprite = undefined;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Root.prototype, "updateTooltip", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (target) {
                var text = stripTags(target._getText());
                var tooltipElement = target.getPrivate("tooltipElement");
                if (target.get("role") == "tooltip" && text != "") {
                    if (!tooltipElement) {
                        tooltipElement = this._makeTooltipElement(target);
                    }
                    if (tooltipElement.innerHTML != text) {
                        tooltipElement.innerHTML = text;
                    }
                }
                else if (tooltipElement) {
                    tooltipElement.remove();
                    target.removePrivate("tooltipElement");
                }
            }
        });
        Object.defineProperty(Root.prototype, "_makeTooltipElement", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (target) {
                var container = this._tooltipElementContainer;
                var tooltipElement = document.createElement("div");
                tooltipElement.style.position = "absolute";
                tooltipElement.style.opacity = "0.0000001";
                setInteractive(tooltipElement, false);
                this._decorateFocusElement(target, tooltipElement);
                container.append(tooltipElement);
                target.setPrivate("tooltipElement", tooltipElement);
                return tooltipElement;
            }
        });
        Object.defineProperty(Root.prototype, "_invalidateAccessibility", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (target) {
                this._focusElementDirty = true;
                var focusElement = target.getPrivate("focusElement");
                if (target.get("focusable")) {
                    if (focusElement) {
                        this._decorateFocusElement(target);
                        this._positionFocusElement(target);
                    }
                    // else {
                    // 	this._renderer._makeFocusElement(0, this);
                    // }
                }
                else if (focusElement) {
                    this._removeFocusElement(target);
                }
                //this.updateCurrentFocus();
            }
        });
        /**
         * Returns `true` if `target` is currently focused.
         *
         * @param   target  Target
         * @return          Focused?
         */
        Object.defineProperty(Root.prototype, "focused", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (target) {
                return this._focusedSprite === target;
            }
        });
        /**
         * Converts document coordinates to coordinates withing root element.
         *
         * @param   point  Document point
         * @return         Root point
         */
        Object.defineProperty(Root.prototype, "documentPointToRoot", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (point) {
                var bbox = this.dom.getBoundingClientRect();
                return {
                    x: point.x - bbox.left,
                    y: point.y - bbox.top
                };
            }
        });
        /**
         * Converts root coordinates to document
         *
         * @param   point  Document point
         * @return         Root point
         */
        Object.defineProperty(Root.prototype, "rootPointToDocument", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (point) {
                var bbox = this.dom.getBoundingClientRect();
                return {
                    x: point.x + bbox.left,
                    y: point.y + bbox.top
                };
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Root.prototype, "addDisposer", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (disposer) {
                this._disposers.push(disposer);
                return disposer;
            }
        });
        Object.defineProperty(Root.prototype, "_updateComputedStyles", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var styles = window.getComputedStyle(this.dom);
                var fontHash = "";
                each(styles, function (key, val) {
                    if (isString(key) && key.match(/^font/)) {
                        fontHash += val;
                    }
                });
                var changed = fontHash != this._fontHash;
                if (changed) {
                    this._fontHash = fontHash;
                }
                return changed;
            }
        });
        Object.defineProperty(Root.prototype, "_checkComputedStyles", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (this._updateComputedStyles()) {
                    this._invalidateLabelBounds(this.container);
                }
            }
        });
        Object.defineProperty(Root.prototype, "_invalidateLabelBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (target) {
                var _this = this;
                if (target instanceof Container) {
                    target.children.each(function (child) {
                        _this._invalidateLabelBounds(child);
                    });
                }
                else if (target instanceof Text) {
                    target.markDirtyBounds();
                }
            }
        });
        /**
         * To all the clever heads out there. Yes, we did not make any attempts to
         * scramble this.
         *
         * This is a part of a tool meant for our users to manage their commercial
         * licenses for removal of amCharts branding from charts.
         *
         * The only legit way to do so is to purchase a commercial license for amCharts:
         * https://www.amcharts.com/online-store/
         *
         * Removing or altering this code, or disabling amCharts branding in any other
         * way is against the license and thus illegal.
         */
        Object.defineProperty(Root.prototype, "_hasLicense", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                for (var i = 0; i < registry.licenses.length; i++) {
                    if (registry.licenses[i].match(/^AM5C.{5,}/i)) {
                        return true;
                    }
                }
                return false;
            }
        });
        Object.defineProperty(Root.prototype, "_licenseApplied", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (this._logo) {
                    this._logo.set("forceHidden", true);
                }
            }
        });
        Object.defineProperty(Root.prototype, "debugGhostView", {
            /**
             * @ignore
             */
            get: function () {
                return this._renderer.debugGhostView;
            },
            /**
             * @ignore
             */
            set: function (value) {
                this._renderer.debugGhostView = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Root.prototype, "tapToActivate", {
            /**
             * @return Needs a tap to activate touch functions
             */
            get: function () {
                return this._renderer.tapToActivate;
            },
            /**
             * Set this to `true` if you need chart to require first a tap onto it before
             * touch gesture related functionality like zoom/pan is turned on.
             *
             * @see {@link https://www.amcharts.com/docs/v5/getting-started/root-element/#Touch_related_options} for more info
             * @default false
             * @since 5.2.9
             * @param  value  Needs a tap to activate touch functions
             */
            set: function (value) {
                this._renderer.tapToActivate = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Root.prototype, "tapToActivateTimeout", {
            /**
             * @return Timeout
             */
            get: function () {
                return this._renderer.tapToActivateTimeout;
            },
            /**
             * If `tapToActivate` is set to `true`, this setting will determine number
             * of milliseconds the chart will stay "active", before releasing the
             * controls back to the page.
             *
             * @see {@link https://www.amcharts.com/docs/v5/getting-started/root-element/#Touch_related_options} for more info
             * @default 3000
             * @since 5.2.9
             * @param  value  Timeout
             */
            set: function (value) {
                this._renderer.tapToActivateTimeout = value;
            },
            enumerable: false,
            configurable: true
        });
        return Root;
    }());

    /**
     * @ignore
     */
    var rules;
    /**
     * @ignore
     */
    function modalCSS(element, root, _prefix) {
        var ic = root.interfaceColors;
        var active = ic.get("secondaryButton").toCSS();
        var text = ic.get("text").toCSS();
        var shadow = ic.get("alternativeBackground").toCSS(0.45);
        //const altbg = ic.get("alternativeBackground")!.toCSS();
        if (!rules) {
            var disposer_1 = new MultiDisposer([
                new StyleRule(element, ".am5-modal", {
                    "width": "100%",
                    "height": "100%",
                    "position": "absolute",
                    "z-index": "100000",
                    "top": "0",
                    "left": "0"
                }),
                new StyleRule(element, ".am5-modal-curtain", {
                    "top": "0",
                    "left": "0",
                    "width": "100%",
                    "height": "100%",
                    "position": "absolute",
                    "background": ic.get("background").toCSS(0.5),
                    "z-index": "100"
                }),
                new StyleRule(element, ".am5-modal-wrapper", {
                    "top": "0",
                    "left": "0",
                    "width": "100%",
                    "height": "100%",
                    "position": "absolute",
                    "text-align": "center",
                    "white-space": "nowrap",
                    "background": ic.get("background").toCSS(0.5),
                    "z-index": "101"
                }),
                new StyleRule(element, ".am5-modal-wrapper:before", {
                    "content": "''",
                    "display": "inline-block",
                    "height": "100%",
                    "vertical-align": "middle",
                    "margin-right": "-0.25em"
                }),
                new StyleRule(element, ".am5-modal-content", {
                    "display": "inline-block",
                    "padding": "1.2em",
                    "vertical-align": "middle",
                    "text-align": "left",
                    "white-space": "normal",
                    "background": ic.get("background").toCSS(),
                    //"border": "1px solid " + ic.get("alternativeBackground")!.toCSS(),
                    "border-radius": "4px",
                    "-webkit-box-shadow": "0px 0px 36px 0px " + shadow,
                    "box-shadow": "0px 0px 36px 0px " + shadow,
                    "color": text
                }),
                new StyleRule(element, ".am5-modal-content h1", {
                    "font-size": "1em",
                    "margin": "0 0 0.5em 0"
                }),
                new StyleRule(element, ".am5-modal-table", {
                    "display": "table",
                    "margin": "1em 0"
                }),
                new StyleRule(element, ".am5-modal-table-row", {
                    "display": "table-row"
                }),
                new StyleRule(element, ".am5-modal-table-heading", {
                    "display": "table-heading",
                    "padding": "3px 10px 3px 0",
                }),
                new StyleRule(element, ".am5-modal-table-cell", {
                    "display": "table-cell",
                    "padding": "3px 0 3px 0",
                }),
                new StyleRule(element, ".am5-modal-table-cell > *", {
                    "vertical-align": "middle"
                }),
                new StyleRule(element, ".am5-modal-content input[type=text], .am5-modal-content input[type=number], .am5-modal-content select", {
                    "border": "1px solid " + active,
                    "border-radius": "4px",
                    "padding": "3px 5px",
                    "margin": "2px"
                }),
                new StyleRule(element, ".am5-modal-input-narrow", {
                    "width": "50px"
                }),
                new StyleRule(element, ".am5-modal-button", {
                    "font-weight": "400",
                    "color": ic.get("secondaryButtonText").toCSS(),
                    "line-height": "1.5",
                    "text-align": "center",
                    "text-decoration": "none",
                    "vertical-align": "middle",
                    "cursor": "pointer",
                    "padding": "0.2em 0.8em",
                    "font-size": "1em",
                    "border-radius": "0.25em",
                    "margin": "0 0.25em 0 0",
                    "border": "1px solid " + ic.get("secondaryButtonStroke").toCSS(),
                    "background": ic.get("secondaryButton").toCSS()
                }),
                new StyleRule(element, ".am5-modal-button:hover", {
                    "background": ic.get("secondaryButtonHover").toCSS()
                }),
                new StyleRule(element, ".am5-modal-button.am5-modal-primary", {
                    "color": ic.get("primaryButtonText").toCSS(),
                    "border": "1px solid " + ic.get("primaryButtonStroke").toCSS(),
                    "background": ic.get("primaryButton").toCSS()
                }),
                new StyleRule(element, ".am5-modal-button.am5-modal-primary:hover", {
                    "background": ic.get("primaryButtonHover").toCSS()
                }),
            ]);
            rules = new CounterDisposer(function () {
                rules = undefined;
                disposer_1.dispose();
            });
        }
        return rules.increment();
    }
    /**
     * Used to display a modal dialog with HTML content.
     */
    var Modal = /** @class */ (function (_super) {
        __extends(Modal, _super);
        function Modal() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        //protected _currentPass: number = 0;
        Object.defineProperty(Modal.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                // Applying themes because this will not have parents
                _super.prototype._afterNewApplyThemes.call(this);
                // Load CSS
                modalCSS(getShadowRoot(this._root.dom), this._root);
                // Create elements
                var container = document.createElement("div");
                container.className = "am5-modal";
                container.style.display = "none";
                this.root._inner.appendChild(container);
                this.setPrivate("container", container);
                var curtain = document.createElement("div");
                curtain.className = "am5-modal-curtain";
                container.appendChild(curtain);
                this.setPrivate("curtain", curtain);
                addEventListener(curtain, "click", function () {
                    _this.cancel();
                });
                var wrapper = document.createElement("div");
                wrapper.className = "am5-modal-wrapper";
                container.appendChild(wrapper);
                this.setPrivate("wrapper", wrapper);
                var content = document.createElement("div");
                content.className = "am5-modal-content";
                wrapper.appendChild(content);
                this.setPrivate("content", content);
                var html = this.get("content");
                if (html) {
                    content.innerHTML = html;
                }
                // Close on ESC
                if (supports("keyboardevents")) {
                    this._disposers.push(addEventListener(document, "keydown", function (ev) {
                        if (_this.isOpen() && ev.keyCode == 27) {
                            _this.cancel();
                        }
                    }));
                }
            }
        });
        Object.defineProperty(Modal.prototype, "_beforeChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._beforeChanged.call(this);
                if (this.isDirty("content")) {
                    this.getPrivate("content").innerHTML = this.get("content", "");
                }
            }
        });
        /**
         * Returns `true` if modal is currently open.
         *
         * @return  Modal open?
         */
        Object.defineProperty(Modal.prototype, "isOpen", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this.getPrivate("container").style.display != "none";
            }
        });
        /**
         * Opens modal.
         */
        Object.defineProperty(Modal.prototype, "open", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.getPrivate("container").style.display = "block";
                this.events.dispatch("opened", {
                    type: "opened",
                    target: this
                });
            }
        });
        /**
         * Closes modal.
         */
        Object.defineProperty(Modal.prototype, "close", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.getPrivate("container").style.display = "none";
                this.events.dispatch("closed", {
                    type: "closed",
                    target: this
                });
            }
        });
        /**
         * Closes modal and invokes `cancelled` event.
         */
        Object.defineProperty(Modal.prototype, "cancel", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.getPrivate("container").style.display = "none";
                this.events.dispatch("cancelled", {
                    type: "cancelled",
                    target: this
                });
            }
        });
        /**
         * Disposes modal.
         */
        Object.defineProperty(Modal.prototype, "dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype.dispose.call(this);
                this.root.dom.removeChild(this.getPrivate("container"));
            }
        });
        Object.defineProperty(Modal, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Modal"
        });
        Object.defineProperty(Modal, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Entity.classNames.concat([Modal.className])
        });
        return Modal;
    }(Entity));

    /**
     * A universal placeholder for bullet elements.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/bullets/} for more info
     */
    var Bullet = /** @class */ (function (_super) {
        __extends(Bullet, _super);
        function Bullet() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            // used by MapPolygons where one data item can have multiple bullets of the same kind
            Object.defineProperty(_this, "_index", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            /**
             * Target series object if it's a bullet for series.
             */
            Object.defineProperty(_this, "series", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            return _this;
        }
        Object.defineProperty(Bullet.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                // Applying themes because bullet will not have parent
                _super.prototype._afterNewApplyThemes.call(this);
            }
        });
        Object.defineProperty(Bullet.prototype, "_beforeChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._beforeChanged.call(this);
                if (this.isDirty("sprite")) {
                    var sprite = this.get("sprite");
                    if (sprite) {
                        sprite.setAll({ position: "absolute", role: "figure" });
                        this._disposers.push(sprite);
                    }
                }
                if (this.isDirty("locationX") || this.isDirty("locationY")) {
                    if (this.series) {
                        this.series._positionBullet(this);
                    }
                }
            }
        });
        Object.defineProperty(Bullet, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Bullet"
        });
        Object.defineProperty(Bullet, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Entity.classNames.concat([Bullet.className])
        });
        return Bullet;
    }(Entity));

    /**
     * Draws a rectangle with rounded corners.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info
     * @important
     */
    var RoundedRectangle = /** @class */ (function (_super) {
        __extends(RoundedRectangle, _super);
        function RoundedRectangle() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(RoundedRectangle.prototype, "_beforeChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._beforeChanged.call(this);
                if (this.isDirty("cornerRadiusTL") || this.isDirty("cornerRadiusTR") || this.isDirty("cornerRadiusBR") || this.isDirty("cornerRadiusBL")) {
                    this._clear = true;
                }
            }
        });
        Object.defineProperty(RoundedRectangle.prototype, "_draw", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var width = this.width();
                var height = this.height();
                var w = width;
                var h = height;
                var wSign = w / Math.abs(width);
                var hSign = h / Math.abs(height);
                if (isNumber(w) && isNumber(h)) {
                    var minSide = Math.min(w, h) / 2;
                    var crtl = relativeToValue(this.get("cornerRadiusTL", 8), minSide);
                    var crtr = relativeToValue(this.get("cornerRadiusTR", 8), minSide);
                    var crbr = relativeToValue(this.get("cornerRadiusBR", 8), minSide);
                    var crbl = relativeToValue(this.get("cornerRadiusBL", 8), minSide);
                    var maxcr = Math.min(Math.abs(w / 2), Math.abs(h / 2));
                    crtl = fitToRange(crtl, 0, maxcr);
                    crtr = fitToRange(crtr, 0, maxcr);
                    crbr = fitToRange(crbr, 0, maxcr);
                    crbl = fitToRange(crbl, 0, maxcr);
                    this._display.moveTo(crtl * wSign, 0);
                    this._display.lineTo(w - crtr * wSign, 0);
                    if (crtr > 0) {
                        this._display.arcTo(w, 0, w, crtr * hSign, crtr);
                    }
                    this._display.lineTo(w, h - crbr * hSign);
                    if (crbr > 0) {
                        this._display.arcTo(w, h, w - crbr * wSign, h, crbr);
                    }
                    this._display.lineTo(crbl * wSign, h);
                    if (crbl > 0) {
                        this._display.arcTo(0, h, 0, h - crbl * hSign, crbl);
                    }
                    this._display.lineTo(0, crtl * hSign);
                    if (crtl > 0) {
                        this._display.arcTo(0, 0, crtl * wSign, 0, crtl);
                    }
                }
            }
        });
        Object.defineProperty(RoundedRectangle, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "RoundedRectangle"
        });
        Object.defineProperty(RoundedRectangle, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Rectangle.classNames.concat([RoundedRectangle.className])
        });
        return RoundedRectangle;
    }(Rectangle));

    /**
     * Draws an interactive button.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/buttons/} for more info
     * @important
     */
    var Button = /** @class */ (function (_super) {
        __extends(Button, _super);
        function Button() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Button.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._settings.themeTags = mergeTags(this._settings.themeTags, ["button"]);
                _super.prototype._afterNew.call(this);
                if (!this._settings.background) {
                    this.set("background", RoundedRectangle.new(this._root, {
                        themeTags: mergeTags(this._settings.themeTags, ["background"])
                    }));
                }
            }
        });
        Object.defineProperty(Button.prototype, "_prepareChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._prepareChildren.call(this);
                if (this.isDirty("icon")) {
                    var previous = this._prevSettings.icon;
                    var icon = this.get("icon");
                    if (icon !== previous) {
                        this._disposeProperty("icon");
                        if (previous) {
                            previous.dispose();
                        }
                        if (icon) {
                            this.children.push(icon);
                        }
                        this._prevSettings.icon = icon;
                    }
                }
                if (this.isDirty("label")) {
                    var previous = this._prevSettings.label;
                    var label = this.get("label");
                    if (label !== previous) {
                        this._disposeProperty("label");
                        if (previous) {
                            previous.dispose();
                        }
                        if (label) {
                            this.children.push(label);
                        }
                        this._prevSettings.label = label;
                    }
                }
            }
        });
        Object.defineProperty(Button, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Button"
        });
        Object.defineProperty(Button, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Container.classNames.concat([Button.className])
        });
        return Button;
    }(Container));

    /**
     * Draws a circle.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info
     * @important
     */
    var Circle = /** @class */ (function (_super) {
        __extends(Circle, _super);
        function Circle() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Circle.prototype, "_beforeChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._beforeChanged.call(this);
                if (this.isDirty("radius")) {
                    this._clear = true;
                }
            }
        });
        Object.defineProperty(Circle.prototype, "_changed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._changed.call(this);
                if (this._clear) {
                    this._display.drawCircle(0, 0, this.get("radius", 10));
                }
            }
        });
        Object.defineProperty(Circle, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Circle"
        });
        Object.defineProperty(Circle, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Graphics.classNames.concat([Circle.className])
        });
        return Circle;
    }(Graphics));

    /**
     * Draws a Ellipse.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info
     * @important
     */
    var Ellipse = /** @class */ (function (_super) {
        __extends(Ellipse, _super);
        function Ellipse() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Ellipse.prototype, "_beforeChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._beforeChanged.call(this);
                if (this.isDirty("radiusX") || this.isDirty("radiusY") || this.isDirty("rotation")) {
                    this._clear = true;
                }
            }
        });
        Object.defineProperty(Ellipse.prototype, "_changed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._changed.call(this);
                if (this._clear) {
                    this._display.drawEllipse(0, 0, Math.abs(this.get("radiusX")), Math.abs(this.get("radiusY")));
                }
            }
        });
        Object.defineProperty(Ellipse, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Ellipse"
        });
        Object.defineProperty(Ellipse, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Graphics.classNames.concat([Ellipse.className])
        });
        return Ellipse;
    }(Graphics));

    /**
     * Draws a Star.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info
     * @important
     */
    var Star = /** @class */ (function (_super) {
        __extends(Star, _super);
        function Star() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Star.prototype, "_beforeChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._beforeChanged.call(this);
                if (this.isDirty("radius") || this.isDirty("innerRadius") || this.isDirty("spikes")) {
                    this._clear = true;
                }
            }
        });
        Object.defineProperty(Star.prototype, "_changed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._changed.call(this);
                if (this._clear) {
                    var display = this._display;
                    var r = this.get("radius", 0);
                    var ir = relativeToValue(this.get("innerRadius", 0), r);
                    var spikes = this.get("spikes", 0);
                    var step = Math.PI / spikes;
                    var angle = Math.PI / 2 * 3;
                    display.moveTo(0, -r);
                    for (var i = 0; i < spikes; i++) {
                        display.lineTo(Math.cos(angle) * r, Math.sin(angle) * r);
                        angle += step;
                        display.lineTo(Math.cos(angle) * ir, Math.sin(angle) * ir);
                        angle += step;
                    }
                    display.lineTo(0, -r);
                }
            }
        });
        Object.defineProperty(Star, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Star"
        });
        Object.defineProperty(Star, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Graphics.classNames.concat([Star.className])
        });
        return Star;
    }(Graphics));

    /**
     * A [[List]] that holds components data.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/data/} for more info
     */
    var ListData = /** @class */ (function (_super) {
        __extends(ListData, _super);
        function ListData() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            /**
             * An optional processor for data.
             *
             * @see {@link https://www.amcharts.com/docs/v5/concepts/data/#Pre_processing_data} for more info
             */
            Object.defineProperty(_this, "processor", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            return _this;
        }
        /**
         * @ignore
         */
        Object.defineProperty(ListData.prototype, "incrementRef", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () { }
        });
        /**
         * @ignore
         */
        Object.defineProperty(ListData.prototype, "decrementRef", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () { }
        });
        Object.defineProperty(ListData.prototype, "_onPush", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (newValue) {
                if (this.processor) {
                    this.processor.processRow(newValue);
                    //console.log(newValue)
                }
                _super.prototype._onPush.call(this, newValue);
            }
        });
        Object.defineProperty(ListData.prototype, "_onInsertIndex", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (index, newValue) {
                if (this.processor) {
                    this.processor.processRow(newValue);
                }
                _super.prototype._onInsertIndex.call(this, index, newValue);
            }
        });
        Object.defineProperty(ListData.prototype, "_onSetIndex", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (index, oldValue, newValue) {
                if (this.processor) {
                    this.processor.processRow(newValue);
                }
                _super.prototype._onSetIndex.call(this, index, oldValue, newValue);
            }
        });
        return ListData;
    }(List));
    /**
     * @deprecated
     * @todo remove
     */
    var JsonData = /** @class */ (function () {
        function JsonData(value) {
            Object.defineProperty(this, "processor", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_value", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            this._value = value;
        }
        Object.defineProperty(JsonData.prototype, "incrementRef", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () { }
        });
        Object.defineProperty(JsonData.prototype, "decrementRef", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () { }
        });
        return JsonData;
    }());

    /**
     * A base element that holds data bit (data item) for any [[Component]].
     */
    var DataItem = /** @class */ (function (_super) {
        __extends(DataItem, _super);
        function DataItem(component, dataContext, settings) {
            var _this = _super.call(this, settings) || this;
            /**
             * A data item's owener [[Component]].
             */
            Object.defineProperty(_this, "component", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            /**
             * A reference to actual item in source data this item is based on.
             */
            Object.defineProperty(_this, "dataContext", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            /**
             * @todo requires description
             */
            Object.defineProperty(_this, "bullets", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            /**
             * A set of "open" values.
             */
            Object.defineProperty(_this, "open", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            /**
             * A set of "close" values.
             */
            Object.defineProperty(_this, "close", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            _this.dataContext = dataContext;
            _this.component = component;
            _this._settings.visible = true;
            _this._checkDirty();
            return _this;
        }
        /**
         * @ignore
         */
        Object.defineProperty(DataItem.prototype, "markDirty", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.component.markDirtyValues(this);
            }
        });
        Object.defineProperty(DataItem.prototype, "_startAnimation", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.component._root._addAnimation(this);
            }
        });
        Object.defineProperty(DataItem.prototype, "_animationTime", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this.component._root.animationTime;
            }
        });
        Object.defineProperty(DataItem.prototype, "_dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (this.component) {
                    this.component.disposeDataItem(this);
                }
                _super.prototype._dispose.call(this);
            }
        });
        /**
         * Shows a data item that's currently hidden.
         */
        Object.defineProperty(DataItem.prototype, "show", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (duration) {
                this.setRaw("visible", true);
                if (this.component) {
                    this.component.showDataItem(this, duration);
                }
            }
        });
        /**
         * Hides a data item that's currently visible.
         */
        Object.defineProperty(DataItem.prototype, "hide", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (duration) {
                this.setRaw("visible", false);
                if (this.component) {
                    this.component.hideDataItem(this, duration);
                }
            }
        });
        Object.defineProperty(DataItem.prototype, "isHidden", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return !this.get("visible");
            }
        });
        return DataItem;
    }(Settings));
    /**
     * A base class for elements that make use of data.
     */
    var Component = /** @class */ (function (_super) {
        __extends(Component, _super);
        function Component() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_data", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new ListData()
            });
            Object.defineProperty(_this, "_dataItems", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            Object.defineProperty(_this, "_mainDataItems", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this._dataItems
            });
            Object.defineProperty(_this, "valueFields", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            Object.defineProperty(_this, "fields", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: ["id"]
            });
            Object.defineProperty(_this, "_valueFields", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_valueFieldsF", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_fields", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_fieldsF", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_valuesDirty", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_dataChanged", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_dataGrouped", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            /**
             * Indicates if the component has already been initialized.
             */
            Object.defineProperty(_this, "inited", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            return _this;
        }
        Object.defineProperty(Component.prototype, "data", {
            /**
             * @return  Data
             */
            get: function () {
                return this._data;
            },
            /**
             * Component's data.
             *
             * @see {@link https://www.amcharts.com/docs/v5/concepts/data/} for more info
             */
            set: function (data) {
                data.incrementRef();
                this._data.decrementRef();
                this._data = data;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Component.prototype, "_dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._dispose.call(this);
                this._data.decrementRef();
            }
        });
        Object.defineProperty(Component.prototype, "_onDataClear", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
            }
        });
        Object.defineProperty(Component.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                _super.prototype._afterNew.call(this);
                this._data.incrementRef();
                this._updateFields();
                this._disposers.push(this.data.events.onAll(function (change) {
                    var dataItems = _this._mainDataItems;
                    _this.markDirtyValues();
                    _this._markDirtyGroup();
                    _this._dataChanged = true;
                    if (change.type === "clear") {
                        each$1(dataItems, function (dataItem) {
                            dataItem.dispose();
                        });
                        dataItems.length = 0;
                        _this._onDataClear();
                    }
                    else if (change.type === "push") {
                        var dataItem = new DataItem(_this, change.newValue, _this._makeDataItem(change.newValue));
                        dataItems.push(dataItem);
                        _this.processDataItem(dataItem);
                    }
                    else if (change.type === "setIndex") {
                        var dataItem_1 = dataItems[change.index];
                        var properties_1 = _this._makeDataItem(change.newValue);
                        keys(properties_1).forEach(function (key) {
                            dataItem_1.animate({
                                key: key,
                                to: properties_1[key],
                                duration: _this.get("interpolationDuration", 0),
                                easing: _this.get("interpolationEasing"),
                            });
                        });
                        dataItem_1.dataContext = change.newValue;
                    }
                    else if (change.type === "insertIndex") {
                        var dataItem = new DataItem(_this, change.newValue, _this._makeDataItem(change.newValue));
                        dataItems.splice(change.index, 0, dataItem);
                        _this.processDataItem(dataItem);
                    }
                    else if (change.type === "removeIndex") {
                        var dataItem = dataItems[change.index];
                        dataItem.dispose();
                        dataItems.splice(change.index, 1);
                    }
                    else if (change.type === "moveIndex") {
                        var dataItem = dataItems[change.oldIndex];
                        dataItems.splice(change.oldIndex, 1);
                        dataItems.splice(change.newIndex, 0, dataItem);
                    }
                    else {
                        throw new Error("Unknown IStreamEvent type");
                    }
                    _this._afterDataChange();
                }));
            }
        });
        Object.defineProperty(Component.prototype, "_updateFields", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                if (this.valueFields) {
                    this._valueFields = [];
                    this._valueFieldsF = {};
                    each$1(this.valueFields, function (key) {
                        var field = _this.get((key + "Field"));
                        if (field) {
                            _this._valueFields.push(key);
                            _this._valueFieldsF[key] = { fieldKey: key + "Field", workingKey: key + "Working" };
                        }
                    });
                }
                if (this.fields) {
                    this._fields = [];
                    this._fieldsF = {};
                    each$1(this.fields, function (key) {
                        var field = _this.get((key + "Field"));
                        if (field) {
                            _this._fields.push(key);
                            _this._fieldsF[key] = key + "Field";
                        }
                    });
                }
            }
        });
        Object.defineProperty(Component.prototype, "dataItems", {
            /**
             * A list of component's data items.
             *
             * @return  Data items
             */
            get: function () {
                return this._dataItems;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Component.prototype, "processDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_dataItem) { }
        });
        Object.defineProperty(Component.prototype, "_makeDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (data) {
                var _this = this;
                //const output: this["_dataItemSettings"] = {};
                var output = {}; // temporary to solve error
                if (this._valueFields) {
                    each$1(this._valueFields, function (key) {
                        var field = _this.get((_this._valueFieldsF[key].fieldKey));
                        output[key] = data[field];
                        output[_this._valueFieldsF[key].workingKey] = output[key];
                    });
                }
                if (this._fields) {
                    each$1(this._fields, function (key) {
                        var field = _this.get((_this._fieldsF[key]));
                        output[key] = data[field];
                    });
                }
                return output;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Component.prototype, "makeDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (data) {
                var dataItem = new DataItem(this, undefined, data);
                this.processDataItem(dataItem);
                return dataItem;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Component.prototype, "pushDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (data) {
                var dataItem = this.makeDataItem(data);
                this._mainDataItems.push(dataItem);
                return dataItem;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Component.prototype, "disposeDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_dataItem) { }
        });
        /**
         * Shows component's data item.
         *
         * @param   dataItem   Data item
         * @param   _duration  Animation duration in milliseconds
         * @return             Promise
         */
        Object.defineProperty(Component.prototype, "showDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, _duration) {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        dataItem.set("visible", true);
                        return [2 /*return*/];
                    });
                });
            }
        });
        /**
         * Hides component's data item.
         *
         * @param   dataItem   Data item
         * @param   _duration  Animation duration in milliseconds
         * @return             Promise
         */
        Object.defineProperty(Component.prototype, "hideDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, _duration) {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        dataItem.set("visible", false);
                        return [2 /*return*/];
                    });
                });
            }
        });
        Object.defineProperty(Component.prototype, "_clearDirty", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._clearDirty.call(this);
                this._valuesDirty = false;
            }
        });
        Object.defineProperty(Component.prototype, "_afterDataChange", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
            }
        });
        Object.defineProperty(Component.prototype, "_afterChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._afterChanged.call(this);
                if (this._dataChanged) {
                    var type = "datavalidated";
                    if (this.events.isEnabled(type)) {
                        this.events.dispatch(type, { type: type, target: this });
                    }
                    this._dataChanged = false;
                }
                this.inited = true;
            }
        });
        /**
         * Forces a repaint of the element which relies on data.
         *
         * @since 5.0.21
         */
        Object.defineProperty(Component.prototype, "markDirtyValues", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_dataItem) {
                this.markDirty();
                this._valuesDirty = true;
            }
        });
        Object.defineProperty(Component.prototype, "_markDirtyGroup", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._dataGrouped = false;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Component.prototype, "markDirtySize", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._sizeDirty = true;
                this.markDirty();
            }
        });
        Object.defineProperty(Component, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Component"
        });
        Object.defineProperty(Component, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Container.classNames.concat([Component.className])
        });
        return Component;
    }(Container));

    /**
     * Base class for gradients.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/gradients/} for more info
     */
    var Gradient = /** @class */ (function (_super) {
        __extends(Gradient, _super);
        function Gradient() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Gradient.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                // Applying themes because gradient will not have parent
                _super.prototype._afterNewApplyThemes.call(this);
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Gradient.prototype, "getFill", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_target) {
                return {
                    addColorStop: function (_offset, _color) { }
                };
            }
        });
        Object.defineProperty(Gradient.prototype, "_changed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._changed.call(this);
                //if (this.isDirty("target") && this.get("target")) {
                //	this.get("target")!.events.on("boundschanged", () => {
                //	});
                //}
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Gradient.prototype, "getBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (target) {
                var gradientTarget = this.get("target");
                if (gradientTarget) {
                    var bounds = gradientTarget.globalBounds();
                    var p0 = target.toLocal({ x: bounds.left, y: bounds.top });
                    var p1 = target.toLocal({ x: bounds.right, y: bounds.top });
                    var p2 = target.toLocal({ x: bounds.right, y: bounds.bottom });
                    var p3 = target.toLocal({ x: bounds.left, y: bounds.bottom });
                    return {
                        left: Math.min(p0.x, p1.x, p2.x, p3.x),
                        top: Math.min(p0.y, p1.y, p2.y, p3.y),
                        right: Math.max(p0.x, p1.x, p2.x, p3.x),
                        bottom: Math.max(p0.y, p1.y, p2.y, p3.y)
                    };
                }
                return target._display.getLocalBounds();
            }
        });
        Object.defineProperty(Gradient, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Gradient"
        });
        Object.defineProperty(Gradient, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Entity.classNames.concat([Gradient.className])
        });
        return Gradient;
    }(Entity));

    /**
     * Linear gradient.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/gradients/} for more info
     */
    var LinearGradient = /** @class */ (function (_super) {
        __extends(LinearGradient, _super);
        function LinearGradient() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @ignore
         */
        Object.defineProperty(LinearGradient.prototype, "getFill", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (target) {
                var rotation = this.get("rotation", 0);
                var bounds = this.getBounds(target);
                var l = bounds.left || 0;
                var r = bounds.right || 0;
                var t = bounds.top || 0;
                var b = bounds.bottom || 0;
                var cos = cos$1(rotation);
                var sin = sin$1(rotation);
                var w = cos * (r - l);
                var h = sin * (b - t);
                var longer = Math.max(w, h);
                var gradient = this._root._renderer.createLinearGradient(l, t, l + longer * cos, t + longer * sin);
                var stops = this.get("stops");
                if (stops) {
                    var i_1 = 0;
                    each$1(stops, function (stop) {
                        var offset = stop.offset;
                        if (!isNumber(offset)) {
                            offset = i_1 / (stops.length - 1);
                        }
                        var opacity = stop.opacity;
                        if (!isNumber(opacity)) {
                            opacity = 1;
                        }
                        var color = stop.color;
                        if (color) {
                            var lighten = stop.lighten;
                            if (lighten) {
                                color = Color.lighten(color, lighten);
                            }
                            var brighten = stop.brighten;
                            if (brighten) {
                                color = Color.brighten(color, brighten);
                            }
                            gradient.addColorStop(offset, 'rgba(' + color.r + ',' + color.g + ',' + color.b + ',' + opacity + ')');
                        }
                        i_1++;
                    });
                }
                return gradient;
            }
        });
        Object.defineProperty(LinearGradient, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "LinearGradient"
        });
        Object.defineProperty(LinearGradient, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Gradient.classNames.concat([LinearGradient.className])
        });
        return LinearGradient;
    }(Gradient));

    /**
     * Heat legend.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/legend/heat-legend/} for more info
     */
    var HeatLegend = /** @class */ (function (_super) {
        __extends(HeatLegend, _super);
        function HeatLegend() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            /**
             * A [[Container]] that all labels are placed in.
             *
             * @default Container.new()
             */
            Object.defineProperty(_this, "labelContainer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this.children.push(Container.new(_this._root, {}))
            });
            /**
             * A [[Container]] that all markers are placed in.
             *
             * @default Container.new()
             */
            Object.defineProperty(_this, "markerContainer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this.children.push(Container.new(_this._root, {}))
            });
            /**
             * A start [[Label]].
             *
             * @default Label.new()
             */
            Object.defineProperty(_this, "startLabel", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this.labelContainer.children.push(Label.new(_this._root, { themeTags: ["start"] }))
            });
            /**
             * An end [[Label]].
             *
             * @default Label.new()
             */
            Object.defineProperty(_this, "endLabel", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this.labelContainer.children.push(Label.new(_this._root, { themeTags: ["end"] }))
            });
            /**
             * List of rectangle elements used for default legend markers.
             *
             * @default new ListTemplate<RoundedRectangle>
             */
            Object.defineProperty(_this, "markers", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new ListTemplate(Template.new({}), function () { return RoundedRectangle._new(_this._root, {
                    themeTags: mergeTags(_this.markers.template.get("themeTags", []), [_this.get("orientation"), "heatlegend", "marker"])
                }, [_this.markers.template]); })
            });
            return _this;
        }
        Object.defineProperty(HeatLegend.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._settings.themeTags = mergeTags(this._settings.themeTags, ["heatlegend", this._settings.orientation]);
                _super.prototype._afterNew.call(this);
                this.set("tooltip", Tooltip.new(this._root, {
                    themeTags: ["heatlegend"]
                }));
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(HeatLegend.prototype, "makeMarker", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var marker = this.markers.make();
                marker.states.create("disabled", {});
                return marker;
            }
        });
        /**
         * Moves and shows tooltip at specific value.
         *
         * Can also specify optional text to show in tooltip, as well as the color.
         *
         * @param  value  Value
         * @param  text   Text
         * @param  color  Color
         */
        Object.defineProperty(HeatLegend.prototype, "showValue", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value, text, color) {
                var tooltip = this.getTooltip();
                if (tooltip && isNumber(value)) {
                    var startValue = this.get("startValue", 0);
                    var endValue = this.get("endValue", 1);
                    var c = (value - startValue) / (endValue - startValue);
                    var startColor = this.get("startColor");
                    var endColor = this.get("endColor");
                    if (!text) {
                        text = this.getNumberFormatter().format(value);
                    }
                    if (!color) {
                        color = Color.interpolate(c, startColor, endColor);
                    }
                    tooltip.label.set("text", text);
                    var p = void 0;
                    if (this.get("orientation") == "vertical") {
                        p = this.markerContainer.toGlobal({ x: 0, y: this.innerHeight() * (1 - c) });
                    }
                    else {
                        p = this.markerContainer.toGlobal({ x: this.innerWidth() * c, y: 0 });
                    }
                    var background = tooltip.get("background");
                    if (background) {
                        background.set("fill", Color.interpolate(c, startColor, endColor));
                    }
                    tooltip.set("pointTo", p);
                    tooltip.show();
                }
            }
        });
        Object.defineProperty(HeatLegend.prototype, "_prepareChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._prepareChildren.call(this);
                var labelContainer = this.labelContainer;
                var orientation = this.get("orientation");
                var startLabel = this.startLabel;
                var endLabel = this.endLabel;
                var tooltip = this.getTooltip();
                if (this.isDirty("orientation")) {
                    if (orientation == "vertical") {
                        this.markerContainer.setAll({ layout: this._root.verticalLayout, height: p100 });
                        this.set("layout", this._root.horizontalLayout);
                        startLabel.setAll({ y: p100, x: undefined, centerY: p100, centerX: p100 });
                        endLabel.setAll({ y: 0, x: undefined, centerY: 0, centerX: p100 });
                        labelContainer.setAll({ height: p100, width: undefined });
                        if (tooltip) {
                            tooltip.set("pointerOrientation", "horizontal");
                        }
                    }
                    else {
                        this.markerContainer.setAll({ layout: this._root.horizontalLayout, width: p100 });
                        this.set("layout", this._root.verticalLayout);
                        startLabel.setAll({ x: 0, y: undefined, centerX: 0, centerY: 0 });
                        endLabel.setAll({ x: p100, y: undefined, centerX: p100, centerY: 0 });
                        labelContainer.setAll({ width: p100, height: undefined });
                        if (tooltip) {
                            tooltip.set("pointerOrientation", "vertical");
                        }
                    }
                }
                if (this.isDirty("stepCount")) {
                    var stepCount = this.get("stepCount", 1);
                    var startColor = this.get("startColor");
                    var endColor = this.get("endColor");
                    this.markerContainer.children.clear();
                    if (stepCount > 1) {
                        for (var i = 0; i < stepCount; i++) {
                            var marker = this.makeMarker();
                            if (orientation == "vertical") {
                                this.markerContainer.children.moveValue(marker, 0);
                            }
                            else {
                                this.markerContainer.children.push(marker);
                            }
                            if (startColor && endColor) {
                                marker.set("fill", Color.interpolate(i / stepCount, startColor, endColor));
                            }
                        }
                    }
                    else if (stepCount == 1) {
                        var marker = this.makeMarker();
                        this.markerContainer.children.push(marker);
                        var gradient = LinearGradient.new(this._root, { stops: [{ color: startColor }, { color: endColor }] });
                        if (orientation == "vertical") {
                            gradient.set("rotation", 90);
                            var stops = gradient.get("stops");
                            if (stops) {
                                stops.reverse();
                            }
                        }
                        else {
                            gradient.set("rotation", 0);
                        }
                        if (startColor && endColor) {
                            marker.set("fillGradient", gradient);
                        }
                    }
                }
                if (this.isDirty("startText") || this.isDirty("startValue")) {
                    startLabel.set("text", this.get("startText", this.getNumberFormatter().format(this.get("startValue", 0))));
                }
                if (this.isDirty("endText") || this.isDirty("endValue")) {
                    endLabel.set("text", this.get("endText", this.getNumberFormatter().format(this.get("endValue", 1))));
                }
            }
        });
        Object.defineProperty(HeatLegend, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "HeatLegend"
        });
        Object.defineProperty(HeatLegend, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Container.classNames.concat([HeatLegend.className])
        });
        return HeatLegend;
    }(Container));

    /**
     * Returns a `Promise` which can be used to execute code after number of
     * milliseconds.
     *
     * @param   ms  Sleep duration in ms
     * @return      Promise
     */
    function sleep(ms) {
        return new Promise(function (resolve, _reject) {
            setTimeout(resolve, ms);
        });
    }
    /**
     * Maps time period names to their numeric representations in milliseconds.
     *
     * @ignore Exclude from docs
     */
    var timeUnitDurations = {
        millisecond: 1,
        second: 1000,
        minute: 60000,
        hour: 3600000,
        day: 86400000,
        week: 604800000,
        month: 365.242 / 12 * 86400000,
        year: 31536000000
    };
    /**
     * Returns the next time unit that goes after source `unit`.
     *
     * E.g. "hour" is the next unit after "minute", etc.
     *
     * @ignore Exclude from docs
     * @param unit  Source time unit
     * @return Next time unit
     */
    function getNextUnit(unit) {
        switch (unit) {
            case "year":
                return;
            case "month":
                return "year";
            case "week":
                return "month";
            case "day":
                return "month"; // not a mistake
            case "hour":
                return "day";
            case "minute":
                return "hour";
            case "second":
                return "minute";
            case "millisecond":
                return "second";
        }
    }
    /**
     * Returns number of milliseconds in the `count` of time `unit`.
     *
     * Available units: "millisecond", "second", "minute", "hour", "day", "week",
     * "month", and "year".
     *
     * @param unit   Time unit
     * @param count  Number of units
     * @return Milliseconds
     */
    function getDuration(unit, count) {
        if (count == null) {
            count = 1;
        }
        return timeUnitDurations[unit] * count;
    }
    /**
     * @ignore
     */
    function getIntervalDuration(interval) {
        if (interval) {
            return timeUnitDurations[interval.timeUnit] * interval.count;
        }
        return 0;
    }
    function getDateIntervalDuration(interval, date, firstDateOfWeek, utc, timezone) {
        var unit = interval.timeUnit;
        var count = interval.count;
        if (unit == "hour" || unit == "minute" || unit == "second" || unit == "millisecond") {
            return timeUnitDurations[interval.timeUnit] * interval.count;
        }
        else {
            var firstTime = round(new Date(date.getTime()), unit, count, firstDateOfWeek, utc, undefined, timezone).getTime();
            var lastTime = add(new Date(firstTime), unit, count, utc).getTime();
            return lastTime - firstTime;
        }
    }
    /**
     * Returns current `Date` object.
     *
     * @return Current date
     */
    function now() {
        return new Date();
    }
    /**
     * Returns current timestamp.
     *
     * @return Current timestamp
     */
    function getTime() {
        return now().getTime();
    }
    /**
     * Returns a copy of the `Date` object.
     *
     * @param date  Source date
     * @return Copy
     */
    function copy(date) {
        return new Date(date.getTime()); // todo: check if this is ok. new Date(date) used to strip milliseconds on FF in v3
    }
    /**
     * Checks if the `unit` part of two `Date` objects do not match. Two dates
     * represent a "range" of time, rather the same time date.
     *
     * @param timeOne  timestamp
     * @param timeTwo  timestamp
     * @param unit     Time unit to check
     * @return Range?
     */
    function checkChange(timeOne, timeTwo, unit, utc, timezone) {
        // quick
        if ((timeTwo - timeOne) > getDuration(unit, 1.2)) {
            return true;
        }
        var dateOne = new Date(timeOne);
        var dateTwo = new Date(timeTwo);
        if (timezone) {
            dateOne = timezone.convertLocal(dateOne);
            dateTwo = timezone.convertLocal(dateTwo);
        }
        var timeZoneOffset1 = 0;
        var timeZoneOffset2 = 0;
        if (!utc && unit != "millisecond") {
            timeZoneOffset1 = dateOne.getTimezoneOffset();
            dateOne.setUTCMinutes(dateOne.getUTCMinutes() - timeZoneOffset1);
            timeZoneOffset2 = dateTwo.getTimezoneOffset();
            dateTwo.setUTCMinutes(dateTwo.getUTCMinutes() - timeZoneOffset2);
        }
        var changed = false;
        switch (unit) {
            case "year":
                if (dateOne.getUTCFullYear() != dateTwo.getUTCFullYear()) {
                    changed = true;
                }
                break;
            case "month":
                if (dateOne.getUTCFullYear() != dateTwo.getUTCFullYear()) {
                    changed = true;
                }
                else if (dateOne.getUTCMonth() != dateTwo.getUTCMonth()) {
                    changed = true;
                }
                break;
            case "day":
                if (dateOne.getUTCMonth() != dateTwo.getUTCMonth()) {
                    changed = true;
                }
                else if (dateOne.getUTCDate() != dateTwo.getUTCDate()) {
                    changed = true;
                }
                break;
            case "hour":
                if (dateOne.getUTCHours() != dateTwo.getUTCHours()) {
                    changed = true;
                }
                break;
            case "minute":
                if (dateOne.getUTCMinutes() != dateTwo.getUTCMinutes()) {
                    changed = true;
                }
                break;
            case "second":
                if (dateOne.getUTCSeconds() != dateTwo.getUTCSeconds()) {
                    changed = true;
                }
                break;
            case "millisecond":
                if (dateOne.getTime() != dateTwo.getTime()) {
                    changed = true;
                }
                break;
        }
        if (changed) {
            return changed;
        }
        var nextUnit = getNextUnit(unit);
        if (nextUnit) {
            return checkChange(timeOne, timeTwo, nextUnit, utc, timezone);
        }
        else {
            return false;
        }
    }
    /**
     * Adds `count` of time `unit` to the source date. Returns a modified `Date` object.
     *
     * @param date   Source date
     * @param unit   Time unit
     * @param count  Number of units to add
     * @return Modified date
     */
    function add(date, unit, count, utc) {
        var timeZoneOffset = 0;
        if (!utc && unit != "millisecond") {
            timeZoneOffset = date.getTimezoneOffset();
            date.setUTCMinutes(date.getUTCMinutes() - timeZoneOffset);
        }
        switch (unit) {
            case "day":
                var day = date.getUTCDate();
                date.setUTCDate(day + count);
                break;
            case "second":
                var seconds = date.getUTCSeconds();
                date.setUTCSeconds(seconds + count);
                break;
            case "millisecond":
                var milliseconds = date.getUTCMilliseconds();
                date.setUTCMilliseconds(milliseconds + count);
                break;
            case "hour":
                var hours = date.getUTCHours();
                date.setUTCHours(hours + count);
                break;
            case "minute":
                var minutes = date.getUTCMinutes();
                date.setUTCMinutes(minutes + count);
                break;
            case "year":
                var year = date.getUTCFullYear();
                date.setUTCFullYear(year + count);
                break;
            case "month":
                var month = date.getUTCMonth();
                date.setUTCMonth(month + count);
                break;
            case "week":
                var wday = date.getUTCDate();
                date.setUTCDate(wday + count * 7);
                break;
        }
        if (!utc && unit != "millisecond") {
            date.setUTCMinutes(date.getUTCMinutes() + timeZoneOffset);
            if (unit == "day" || unit == "week" || unit == "month" || unit == "year") {
                var newTimeZoneOffset = date.getTimezoneOffset();
                if (newTimeZoneOffset != timeZoneOffset) {
                    var diff = newTimeZoneOffset - timeZoneOffset;
                    date.setUTCMinutes(date.getUTCMinutes() + diff);
                    // solves issues if newe time falls back to old time zone
                    if (date.getTimezoneOffset() != newTimeZoneOffset) {
                        date.setUTCMinutes(date.getUTCMinutes() - diff);
                    }
                }
            }
        }
        return date;
    }
    /**
     * "Rounds" the date to specific time unit.
     *
     * @param date             Source date
     * @param unit             Time unit
     * @param count            Number of units to round to
     * @param firstDateOfWeek  First day of week
     * @param utc              Use UTC timezone
     * @param firstDate        First date to round to
     * @param roundMinutes     Minutes to round to (some timezones use non-whole hour)
     * @param timezone         Use specific named timezone when rounding
     * @return New date
     */
    function round(date, unit, count, firstDateOfWeek, utc, firstDate, timezone) {
        if (!timezone || utc) {
            var timeZoneOffset = 0;
            if (!utc && unit != "millisecond") {
                timeZoneOffset = date.getTimezoneOffset();
                date.setUTCMinutes(date.getUTCMinutes() - timeZoneOffset);
            }
            switch (unit) {
                case "day":
                    var day = date.getUTCDate();
                    if (count > 1) {
                        //	day = Math.floor(day / count) * count;
                        if (firstDate) {
                            firstDate = round(firstDate, "day", 1);
                            var difference = date.getTime() - firstDate.getTime();
                            var unitCount = Math.floor(difference / getDuration("day") / count);
                            var duration = getDuration("day", unitCount * count);
                            date.setTime(firstDate.getTime() + duration - timeZoneOffset * getDuration("minute"));
                        }
                    }
                    else {
                        date.setUTCDate(day);
                    }
                    date.setUTCHours(0, 0, 0, 0);
                    break;
                case "second":
                    var seconds = date.getUTCSeconds();
                    if (count > 1) {
                        seconds = Math.floor(seconds / count) * count;
                    }
                    date.setUTCSeconds(seconds, 0);
                    break;
                case "millisecond":
                    if (count == 1) {
                        return date; // much better for perf!
                    }
                    var milliseconds = date.getUTCMilliseconds();
                    milliseconds = Math.floor(milliseconds / count) * count;
                    date.setUTCMilliseconds(milliseconds);
                    break;
                case "hour":
                    var hours = date.getUTCHours();
                    if (count > 1) {
                        hours = Math.floor(hours / count) * count;
                    }
                    date.setUTCHours(hours, 0, 0, 0);
                    break;
                case "minute":
                    var minutes = date.getUTCMinutes();
                    milliseconds = date.getUTCMilliseconds();
                    if (count > 1) {
                        minutes = Math.floor(minutes / count) * count;
                    }
                    date.setUTCMinutes(minutes, 0, 0);
                    break;
                case "month":
                    var month = date.getUTCMonth();
                    if (count > 1) {
                        month = Math.floor(month / count) * count;
                    }
                    date.setUTCMonth(month, 1);
                    date.setUTCHours(0, 0, 0, 0);
                    break;
                case "year":
                    var year = date.getUTCFullYear();
                    if (count > 1) {
                        year = Math.floor(year / count) * count;
                    }
                    date.setUTCFullYear(year, 0, 1);
                    date.setUTCHours(0, 0, 0, 0);
                    break;
                case "week":
                    var wday = date.getUTCDate();
                    var weekDay = date.getUTCDay();
                    if (!isNumber(firstDateOfWeek)) {
                        firstDateOfWeek = 1;
                    }
                    if (weekDay >= firstDateOfWeek) {
                        wday = wday - weekDay + firstDateOfWeek;
                    }
                    else {
                        wday = wday - (7 + weekDay) + firstDateOfWeek;
                    }
                    date.setUTCDate(wday);
                    date.setUTCHours(0, 0, 0, 0);
                    break;
            }
            if (!utc && unit != "millisecond") {
                date.setUTCMinutes(date.getUTCMinutes() + timeZoneOffset);
                if (unit == "day" || unit == "week" || unit == "month" || unit == "year") {
                    var newTimeZoneOffset = date.getTimezoneOffset();
                    if (newTimeZoneOffset != timeZoneOffset) {
                        var diff = newTimeZoneOffset - timeZoneOffset;
                        date.setUTCMinutes(date.getUTCMinutes() + diff);
                    }
                }
            }
            return date;
        }
        else {
            var tzoffset = timezone.offsetUTC(date);
            var timeZoneOffset = date.getTimezoneOffset();
            var parsedDate = timezone.parseDate(date);
            var year = parsedDate.year;
            var month = parsedDate.month;
            var day = parsedDate.day;
            var hour = parsedDate.hour;
            var minute = parsedDate.minute;
            var second = parsedDate.second;
            var millisecond = parsedDate.millisecond;
            var weekday = parsedDate.weekday;
            switch (unit) {
                case "day":
                    if (firstDate) {
                        firstDate = round(firstDate, "day", 1);
                        var difference = date.getTime() - firstDate.getTime();
                        var unitCount = Math.floor(difference / getDuration("day") / count);
                        var duration = getDuration("day", unitCount * count);
                        date.setTime(firstDate.getTime() + duration - timeZoneOffset * getDuration("minute"));
                        parsedDate = timezone.parseDate(date);
                        year = parsedDate.year;
                        month = parsedDate.month;
                        day = parsedDate.day;
                    }
                    hour = 0;
                    minute = 0;
                    second = 0;
                    millisecond = 0;
                    break;
                case "second":
                    if (count > 1) {
                        second = Math.floor(second / count) * count;
                    }
                    millisecond = 0;
                    break;
                case "millisecond":
                    if (count > 1) {
                        millisecond = Math.floor(millisecond / count) * count;
                    }
                    break;
                case "hour":
                    if (count > 1) {
                        hour = Math.floor(hour / count) * count;
                    }
                    minute = 0;
                    second = 0;
                    millisecond = 0;
                    break;
                case "minute":
                    if (count > 1) {
                        minute = Math.floor(minute / count) * count;
                    }
                    second = 0;
                    millisecond = 0;
                    break;
                case "month":
                    if (count > 1) {
                        month = Math.floor(month / count) * count;
                    }
                    day = 1;
                    hour = 0;
                    minute = 0;
                    second = 0;
                    millisecond = 0;
                    break;
                case "year":
                    if (count > 1) {
                        year = Math.floor(year / count) * count;
                    }
                    month = 0;
                    day = 1;
                    hour = 0;
                    minute = 0;
                    second = 0;
                    millisecond = 0;
                    break;
                case "week":
                    if (!isNumber(firstDateOfWeek)) {
                        firstDateOfWeek = 1;
                    }
                    if (weekday >= firstDateOfWeek) {
                        day = day - weekday + firstDateOfWeek;
                    }
                    else {
                        day = day - (7 + weekday) + firstDateOfWeek;
                    }
                    hour = 0;
                    minute = 0;
                    second = 0;
                    millisecond = 0;
                    break;
            }
            minute += tzoffset - timeZoneOffset;
            date = new Date(year, month, day, hour, minute, second, millisecond);
            var newOffset = date.getTimezoneOffset();
            if (newOffset != timeZoneOffset) {
                date.setTime(date.getTime() + (timeZoneOffset - newOffset) * 60000);
            }
            return date;
        }
    }
    /**
     * @ignore
     */
    function chooseInterval(index, duration, gridCount, intervals) {
        var gridInterval = intervals[index];
        var intervalDuration = getIntervalDuration(gridInterval);
        var lastIndex = intervals.length - 1;
        if (index >= lastIndex) {
            return __assign({}, intervals[lastIndex]);
        }
        var count = Math.ceil(duration / intervalDuration);
        if (duration < intervalDuration && index > 0) {
            return __assign({}, intervals[index - 1]);
        }
        if (count <= gridCount) {
            return __assign({}, intervals[index]);
        }
        else {
            if (index + 1 < intervals.length) {
                return chooseInterval(index + 1, duration, gridCount, intervals);
            }
            else {
                return __assign({}, intervals[index]);
            }
        }
    }
    /**
     * @ignore
     */
    function getUnitValue(date, unit) {
        switch (unit) {
            case "day":
                return date.getDate();
            case "second":
                return date.getSeconds();
            case "millisecond":
                return date.getMilliseconds();
            case "hour":
                return date.getHours();
            case "minute":
                return date.getMinutes();
            case "month":
                return date.getMonth();
            case "year":
                return date.getFullYear();
            case "week":
                return getWeek(date);
        }
    }

    var Time = /*#__PURE__*/Object.freeze({
        __proto__: null,
        sleep: sleep,
        timeUnitDurations: timeUnitDurations,
        getNextUnit: getNextUnit,
        getDuration: getDuration,
        getIntervalDuration: getIntervalDuration,
        getDateIntervalDuration: getDateIntervalDuration,
        now: now,
        getTime: getTime,
        copy: copy,
        checkChange: checkChange,
        add: add,
        round: round,
        chooseInterval: chooseInterval,
        getUnitValue: getUnitValue
    });

    /**
     * A base class for all series.
     */
    var Series = /** @class */ (function (_super) {
        __extends(Series, _super);
        function Series() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_aggregatesCalculated", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_selectionAggregatesCalculated", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_dataProcessed", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_psi", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_pei", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            /**
             * A chart series belongs to.
             */
            Object.defineProperty(_this, "chart", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            /**
             * List of bullets to use for the series.
             *
             * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/bullets/} for more info
             */
            Object.defineProperty(_this, "bullets", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new List()
            });
            /**
             * A [[Container]] series' bullets are stored in.
             *
             * @default Container.new()
             */
            Object.defineProperty(_this, "bulletsContainer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: Container.new(_this._root, { width: p100, height: p100, position: "absolute" })
            });
            return _this;
        }
        Object.defineProperty(Series.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                this.valueFields.push("value");
                _super.prototype._afterNew.call(this);
                this.setPrivate("customData", {});
                this._disposers.push(this.bullets.events.onAll(function (change) {
                    if (change.type === "clear") {
                        _this._handleBullets(_this.dataItems);
                    }
                    else if (change.type === "push") {
                        _this._handleBullets(_this.dataItems);
                    }
                    else if (change.type === "setIndex") {
                        _this._handleBullets(_this.dataItems);
                    }
                    else if (change.type === "insertIndex") {
                        _this._handleBullets(_this.dataItems);
                    }
                    else if (change.type === "removeIndex") {
                        _this._handleBullets(_this.dataItems);
                    }
                    else if (change.type === "moveIndex") {
                        _this._handleBullets(_this.dataItems);
                    }
                    else {
                        throw new Error("Unknown IListEvent type");
                    }
                }));
            }
        });
        Object.defineProperty(Series.prototype, "_dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.bulletsContainer.dispose(); // can be in a different parent
                _super.prototype._dispose.call(this);
            }
        });
        Object.defineProperty(Series.prototype, "startIndex", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var len = this.dataItems.length;
                return Math.min(this.getPrivate("startIndex", 0), len);
            }
        });
        Object.defineProperty(Series.prototype, "endIndex", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var len = this.dataItems.length;
                return Math.min(this.getPrivate("endIndex", len), len);
            }
        });
        Object.defineProperty(Series.prototype, "_handleBullets", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItems) {
                each$1(dataItems, function (dataItem) {
                    var bullets = dataItem.bullets;
                    if (bullets) {
                        each$1(bullets, function (bullet) {
                            bullet.dispose();
                        });
                        dataItem.bullets = undefined;
                    }
                });
                this.markDirtyValues();
            }
        });
        /**
         * Looks up and returns a data item by its ID.
         *
         * @param   id  ID
         * @return      Data item
         */
        Object.defineProperty(Series.prototype, "getDataItemById", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (id) {
                return find(this.dataItems, function (dataItem) {
                    return dataItem.get("id") == id;
                });
            }
        });
        Object.defineProperty(Series.prototype, "_makeBullets", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem) {
                var _this = this;
                if (this._shouldMakeBullet(dataItem)) {
                    dataItem.bullets = [];
                    this.bullets.each(function (bulletFunction) {
                        _this._makeBullet(dataItem, bulletFunction);
                    });
                }
            }
        });
        Object.defineProperty(Series.prototype, "_shouldMakeBullet", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_dataItem) {
                return true;
            }
        });
        Object.defineProperty(Series.prototype, "_makeBullet", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, bulletFunction, index) {
                var bullet = bulletFunction(this._root, this, dataItem);
                if (bullet) {
                    var sprite = bullet.get("sprite");
                    if (sprite) {
                        sprite._setDataItem(dataItem);
                        sprite.setRaw("position", "absolute");
                        this.bulletsContainer.children.push(sprite);
                    }
                    bullet._index = index;
                    bullet.series = this;
                    dataItem.bullets.push(bullet);
                }
                return bullet;
            }
        });
        Object.defineProperty(Series.prototype, "_clearDirty", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._clearDirty.call(this);
                this._aggregatesCalculated = false;
                this._selectionAggregatesCalculated = false;
            }
        });
        Object.defineProperty(Series.prototype, "_prepareChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                _super.prototype._prepareChildren.call(this);
                var startIndex = this.startIndex();
                var endIndex = this.endIndex();
                if (this.isPrivateDirty("baseValueSeries")) {
                    var baseValueSeries = this.getPrivate("baseValueSeries");
                    if (baseValueSeries) {
                        this._disposers.push(baseValueSeries.onPrivate("startIndex", function () {
                            _this.markDirtyValues();
                        }));
                    }
                }
                var calculateAggregates = this.get("calculateAggregates");
                if (calculateAggregates) {
                    if (this._valuesDirty && !this._dataProcessed) {
                        if (!this._aggregatesCalculated) {
                            this._calculateAggregates(0, this.dataItems.length);
                            this._aggregatesCalculated = true;
                        }
                    }
                    if ((this._psi != startIndex || this._pei != endIndex) && !this._selectionAggregatesCalculated) {
                        if (startIndex === 0 && endIndex === this.dataItems.length && this._aggregatesCalculated) ;
                        else {
                            this._calculateAggregates(startIndex, endIndex);
                        }
                        this._selectionAggregatesCalculated = true;
                    }
                }
                if (this.isDirty("tooltip")) {
                    var tooltip = this.get("tooltip");
                    if (tooltip) {
                        tooltip.hide(0);
                        tooltip.set("tooltipTarget", this);
                    }
                }
                if (this.isDirty("fill") || this.isDirty("stroke")) {
                    var markerRectangle = void 0;
                    var legendDataItem = this.get("legendDataItem");
                    if (legendDataItem) {
                        markerRectangle = legendDataItem.get("markerRectangle");
                        if (markerRectangle) {
                            if (this.isVisible()) {
                                if (this.isDirty("stroke")) {
                                    var stroke = this.get("stroke");
                                    markerRectangle.set("stroke", stroke);
                                }
                                if (this.isDirty("fill")) {
                                    var fill = this.get("fill");
                                    markerRectangle.set("fill", fill);
                                }
                            }
                        }
                    }
                    this.updateLegendMarker(undefined);
                }
                if (this.bullets.length > 0) {
                    var startIndex_1 = this.startIndex();
                    var endIndex_1 = this.endIndex();
                    for (var i = startIndex_1; i < endIndex_1; i++) {
                        var dataItem = this.dataItems[i];
                        if (!dataItem.bullets) {
                            this._makeBullets(dataItem);
                        }
                    }
                }
            }
        });
        Object.defineProperty(Series.prototype, "_calculateAggregates", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (startIndex, endIndex) {
                var _this = this;
                var fields = this._valueFields;
                if (!fields) {
                    throw new Error("No value fields are set for the series.");
                }
                var sum = {};
                var absSum = {};
                var count = {};
                var low = {};
                var high = {};
                var open = {};
                var close = {};
                var average = {};
                var previous = {};
                each$1(fields, function (key) {
                    sum[key] = 0;
                    absSum[key] = 0;
                    count[key] = 0;
                });
                each$1(fields, function (key) {
                    var change = key + "Change";
                    var changePercent = key + "ChangePercent";
                    var changePrevious = key + "ChangePrevious";
                    var changePreviousPercent = key + "ChangePreviousPercent";
                    var changeSelection = key + "ChangeSelection";
                    var changeSelectionPercent = key + "ChangeSelectionPercent";
                    var openKey = "valueY";
                    if (key == "valueX" || key == "openValueX" || key == "lowValueX" || key == "highValueX") {
                        openKey = "valueX";
                    }
                    var baseValueSeries = _this.getPrivate("baseValueSeries");
                    for (var i = startIndex; i < endIndex; i++) {
                        var dataItem = _this.dataItems[i];
                        var value = dataItem.get(key);
                        if (value != null) {
                            count[key]++;
                            sum[key] += value;
                            absSum[key] += Math.abs(value);
                            average[key] = sum[key] / count[key];
                            if (low[key] > value || low[key] == null) {
                                low[key] = value;
                            }
                            if (high[key] < value || high[key] == null) {
                                high[key] = value;
                            }
                            close[key] = value;
                            if (open[key] == null) {
                                open[key] = value;
                                previous[key] = value;
                                if (baseValueSeries) {
                                    open[openKey] = baseValueSeries._getBase(openKey);
                                }
                            }
                            if (startIndex === 0) {
                                dataItem.setRaw((change), value - open[openKey]);
                                dataItem.setRaw((changePercent), (value - open[openKey]) / open[openKey] * 100);
                            }
                            dataItem.setRaw((changePrevious), value - previous[openKey]);
                            dataItem.setRaw((changePreviousPercent), (value - previous[openKey]) / previous[openKey] * 100);
                            dataItem.setRaw((changeSelection), value - open[openKey]);
                            dataItem.setRaw((changeSelectionPercent), (value - open[openKey]) / open[openKey] * 100);
                            previous[key] = value;
                        }
                    }
                });
                each$1(fields, function (key) {
                    _this.setPrivate((key + "AverageSelection"), average[key]);
                    _this.setPrivate((key + "CountSelection"), count[key]);
                    _this.setPrivate((key + "SumSelection"), sum[key]);
                    _this.setPrivate((key + "AbsoluteSumSelection"), absSum[key]);
                    _this.setPrivate((key + "LowSelection"), low[key]);
                    _this.setPrivate((key + "HighSelection"), high[key]);
                    _this.setPrivate((key + "OpenSelection"), open[key]);
                    _this.setPrivate((key + "CloseSelection"), close[key]);
                });
                if (startIndex === 0 && endIndex === this.dataItems.length) {
                    each$1(fields, function (key) {
                        _this.setPrivate((key + "Average"), average[key]);
                        _this.setPrivate((key + "Count"), count[key]);
                        _this.setPrivate((key + "Sum"), sum[key]);
                        _this.setPrivate((key + "AbsoluteSum"), absSum[key]);
                        _this.setPrivate((key + "Low"), low[key]);
                        _this.setPrivate((key + "High"), high[key]);
                        _this.setPrivate((key + "Open"), open[key]);
                        _this.setPrivate((key + "Close"), close[key]);
                    });
                }
            }
        });
        Object.defineProperty(Series.prototype, "_updateChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                _super.prototype._updateChildren.call(this);
                this._psi = this.startIndex();
                this._pei = this.endIndex();
                if (this.isDirty("visible")) {
                    this.bulletsContainer.set("visible", this.get("visible"));
                }
                // Apply heat rules
                if (this._valuesDirty && this.get("heatRules") != null) {
                    var rules = this.get("heatRules", []);
                    each$1(rules, function (rule) {
                        var minValue = rule.minValue || _this.getPrivate((rule.dataField + "Low")) || 0;
                        var maxValue = rule.maxValue || _this.getPrivate((rule.dataField + "High")) || 0;
                        each$1(rule.target._entities, function (target) {
                            var value = target.dataItem.get(rule.dataField);
                            if (!isNumber(value)) {
                                return;
                            }
                            var percent;
                            if (rule.logarithmic) {
                                percent = (Math.log(value) * Math.LOG10E - Math.log(minValue) * Math.LOG10E) / ((Math.log(maxValue) * Math.LOG10E - Math.log(minValue) * Math.LOG10E));
                            }
                            else {
                                percent = (value - minValue) / (maxValue - minValue);
                            }
                            if (isNumber(value) && (!isNumber(percent) || Math.abs(percent) == Infinity)) {
                                percent = 0.5;
                            }
                            // fixes problems if all values are the same
                            var propertyValue;
                            if (isNumber(rule.min)) {
                                propertyValue = rule.min + (rule.max - rule.min) * percent;
                            }
                            else if (rule.min instanceof Color) {
                                propertyValue = Color.interpolate(percent, rule.min, rule.max);
                            }
                            else if (rule.min instanceof Percent) {
                                propertyValue = percentInterpolate(percent, rule.min, rule.max);
                            }
                            if (rule.customFunction) {
                                rule.customFunction.call(_this, target, minValue, maxValue, value);
                            }
                            else {
                                target.set(rule.key, propertyValue);
                            }
                        });
                    });
                }
                if (this.bullets.length > 0) {
                    var count = this.dataItems.length;
                    var startIndex = this.startIndex();
                    var endIndex = this.endIndex();
                    if (endIndex < count) {
                        endIndex++;
                    }
                    if (startIndex > 0) {
                        startIndex--;
                    }
                    for (var i = 0; i < startIndex; i++) {
                        this._hideBullets(this.dataItems[i]);
                    }
                    for (var i = startIndex; i < endIndex; i++) {
                        this._positionBullets(this.dataItems[i]);
                    }
                    for (var i = endIndex; i < count; i++) {
                        this._hideBullets(this.dataItems[i]);
                    }
                }
            }
        });
        Object.defineProperty(Series.prototype, "_positionBullets", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem) {
                var _this = this;
                if (dataItem.bullets) {
                    each$1(dataItem.bullets, function (bullet) {
                        _this._positionBullet(bullet);
                        var sprite = bullet.get("sprite");
                        if (bullet.get("dynamic")) {
                            if (sprite) {
                                sprite._markDirtyKey("fill");
                                sprite.markDirtySize();
                            }
                            if (sprite instanceof Container) {
                                sprite.walkChildren(function (child) {
                                    child._markDirtyKey("fill");
                                    child.markDirtySize();
                                    if (child instanceof Label) {
                                        child.text.markDirtyText();
                                    }
                                });
                            }
                        }
                        if (sprite instanceof Label && sprite.get("populateText")) {
                            sprite.text.markDirtyText();
                        }
                    });
                }
            }
        });
        Object.defineProperty(Series.prototype, "_hideBullets", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem) {
                if (dataItem.bullets) {
                    each$1(dataItem.bullets, function (bullet) {
                        var sprite = bullet.get("sprite");
                        if (sprite) {
                            sprite.setPrivate("visible", false);
                        }
                    });
                }
            }
        });
        Object.defineProperty(Series.prototype, "_positionBullet", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_bullet) {
            }
        });
        Object.defineProperty(Series.prototype, "_placeBulletsContainer", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (chart) {
                chart.bulletsContainer.children.moveValue(this.bulletsContainer);
            }
        });
        Object.defineProperty(Series.prototype, "_removeBulletsContainer", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var bulletsContainer = this.bulletsContainer;
                if (bulletsContainer.parent) {
                    bulletsContainer.parent.children.removeValue(bulletsContainer);
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Series.prototype, "disposeDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem) {
                var bullets = dataItem.bullets;
                if (bullets) {
                    each$1(bullets, function (bullet) {
                        bullet.dispose();
                    });
                }
            }
        });
        Object.defineProperty(Series.prototype, "_getItemReaderLabel", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return "";
            }
        });
        /**
         * Shows series's data item.
         *
         * @param   dataItem  Data item
         * @param   duration  Animation duration in milliseconds
         * @return            Promise
         */
        Object.defineProperty(Series.prototype, "showDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, duration) {
                return __awaiter(this, void 0, void 0, function () {
                    var promises, bullets;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                promises = [_super.prototype.showDataItem.call(this, dataItem, duration)];
                                bullets = dataItem.bullets;
                                if (bullets) {
                                    each$1(bullets, function (bullet) {
                                        promises.push(bullet.get("sprite").show(duration));
                                    });
                                }
                                return [4 /*yield*/, Promise.all(promises)];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                });
            }
        });
        /**
         * Hides series's data item.
         *
         * @param   dataItem  Data item
         * @param   duration  Animation duration in milliseconds
         * @return            Promise
         */
        Object.defineProperty(Series.prototype, "hideDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, duration) {
                return __awaiter(this, void 0, void 0, function () {
                    var promises, bullets;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                promises = [_super.prototype.hideDataItem.call(this, dataItem, duration)];
                                bullets = dataItem.bullets;
                                if (bullets) {
                                    each$1(bullets, function (bullet) {
                                        promises.push(bullet.get("sprite").hide(duration));
                                    });
                                }
                                return [4 /*yield*/, Promise.all(promises)];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                });
            }
        });
        Object.defineProperty(Series.prototype, "_sequencedShowHide", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (show, duration) {
                return __awaiter(this, void 0, void 0, function () {
                    var startIndex_2, endIndex_2;
                    var _this = this;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (!this.get("sequencedInterpolation")) return [3 /*break*/, 4];
                                if (!isNumber(duration)) {
                                    duration = this.get("interpolationDuration", 0);
                                }
                                if (!(duration > 0)) return [3 /*break*/, 2];
                                startIndex_2 = this.startIndex();
                                endIndex_2 = this.endIndex();
                                return [4 /*yield*/, Promise.all(map(this.dataItems, function (dataItem, i) { return __awaiter(_this, void 0, void 0, function () {
                                        var realDuration, delay;
                                        return __generator(this, function (_a) {
                                            switch (_a.label) {
                                                case 0:
                                                    realDuration = duration || 0;
                                                    if (i < startIndex_2 - 10 || i > endIndex_2 + 10) {
                                                        realDuration = 0;
                                                    }
                                                    delay = this.get("sequencedDelay", 0) + realDuration / (endIndex_2 - startIndex_2);
                                                    return [4 /*yield*/, sleep(delay * (i - startIndex_2))];
                                                case 1:
                                                    _a.sent();
                                                    if (!show) return [3 /*break*/, 3];
                                                    return [4 /*yield*/, this.showDataItem(dataItem, realDuration)];
                                                case 2:
                                                    _a.sent();
                                                    return [3 /*break*/, 5];
                                                case 3: return [4 /*yield*/, this.hideDataItem(dataItem, realDuration)];
                                                case 4:
                                                    _a.sent();
                                                    _a.label = 5;
                                                case 5: return [2 /*return*/];
                                            }
                                        });
                                    }); }))];
                            case 1:
                                _a.sent();
                                return [3 /*break*/, 4];
                            case 2: return [4 /*yield*/, Promise.all(map(this.dataItems, function (dataItem) {
                                    if (show) {
                                        return _this.showDataItem(dataItem, 0);
                                    }
                                    else {
                                        return _this.hideDataItem(dataItem, 0);
                                    }
                                }))];
                            case 3:
                                _a.sent();
                                _a.label = 4;
                            case 4: return [2 /*return*/];
                        }
                    });
                });
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Series.prototype, "updateLegendValue", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem) {
                var legendDataItem = dataItem.get("legendDataItem");
                if (legendDataItem) {
                    var valueLabel = legendDataItem.get("valueLabel");
                    if (valueLabel) {
                        var text = valueLabel.text;
                        var txt = "";
                        valueLabel._setDataItem(dataItem);
                        txt = this.get("legendValueText", text.get("text", ""));
                        valueLabel.set("text", txt);
                        text.markDirtyText();
                    }
                    var label = legendDataItem.get("label");
                    if (label) {
                        var text = label.text;
                        var txt = "";
                        label._setDataItem(dataItem);
                        txt = this.get("legendLabelText", text.get("text", ""));
                        label.set("text", txt);
                        text.markDirtyText();
                    }
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Series.prototype, "updateLegendMarker", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_dataItem) {
            }
        });
        Object.defineProperty(Series.prototype, "_onHide", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._onHide.call(this);
                var tooltip = this.getTooltip();
                if (tooltip) {
                    tooltip.hide();
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Series.prototype, "hoverDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_dataItem) { }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Series.prototype, "unhoverDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_dataItem) { }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Series.prototype, "_getBase", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key) {
                var dataItem = this.dataItems[this.startIndex()];
                if (dataItem) {
                    return dataItem.get(key);
                }
                return 0;
            }
        });
        Object.defineProperty(Series, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Series"
        });
        Object.defineProperty(Series, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Component.classNames.concat([Series.className])
        });
        return Series;
    }(Component));

    /**
     * A universal legend control.
     *
     * @important
     * @see {@link https://www.amcharts.com/docs/v5/concepts/legend/} for more info
     */
    var Legend = /** @class */ (function (_super) {
        __extends(Legend, _super);
        function Legend() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            /**
             * List of all [[Container]] elements for legend items.
             *
             * @default new ListTemplate<Container>
             */
            Object.defineProperty(_this, "itemContainers", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new ListTemplate(Template.new({}), function () { return Container._new(_this._root, {
                    themeTags: mergeTags(_this.itemContainers.template.get("themeTags", []), ["legend", "item"]),
                    themeTagsSelf: mergeTags(_this.itemContainers.template.get("themeTagsSelf", []), ["itemcontainer"]),
                    background: RoundedRectangle.new(_this._root, {
                        themeTags: mergeTags(_this.itemContainers.template.get("themeTags", []), ["legend", "item", "background"]),
                        themeTagsSelf: mergeTags(_this.itemContainers.template.get("themeTagsSelf", []), ["itemcontainer"])
                    })
                }, [_this.itemContainers.template]); })
            });
            /**
             * List of legend marker elements.
             *
             * @default new ListTemplate<Container>
             */
            Object.defineProperty(_this, "markers", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new ListTemplate(Template.new({}), function () { return Container._new(_this._root, {
                    themeTags: mergeTags(_this.markers.template.get("themeTags", []), ["legend", "marker"])
                }, [_this.markers.template]); })
            });
            /**
             * List of legend label elements.
             *
             * @default new ListTemplate<Label>
             */
            Object.defineProperty(_this, "labels", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new ListTemplate(Template.new({}), function () { return Label._new(_this._root, {
                    themeTags: mergeTags(_this.labels.template.get("themeTags", []), ["legend", "label"])
                }, [_this.labels.template]); })
            });
            /**
             * List of legend value label elements.
             *
             * @default new ListTemplate<label>
             */
            Object.defineProperty(_this, "valueLabels", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new ListTemplate(Template.new({}), function () { return Label._new(_this._root, {
                    themeTags: mergeTags(_this.valueLabels.template.get("themeTags", []), ["legend", "label", "value"])
                }, [_this.valueLabels.template]); })
            });
            /**
             * List of rectangle elements used for default legend markers.
             *
             * @default new ListTemplate<RoundedRectangle>
             */
            Object.defineProperty(_this, "markerRectangles", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new ListTemplate(Template.new({}), function () { return RoundedRectangle._new(_this._root, {
                    themeTags: mergeTags(_this.markerRectangles.template.get("themeTags", []), ["legend", "marker", "rectangle"])
                }, [_this.markerRectangles.template]); })
            });
            return _this;
        }
        Object.defineProperty(Legend.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._settings.themeTags = mergeTags(this._settings.themeTags, ["legend"]);
                this.fields.push("name", "stroke", "fill");
                _super.prototype._afterNew.call(this);
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Legend.prototype, "makeItemContainer", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem) {
                var itemContainer = this.children.push(this.itemContainers.make());
                itemContainer._setDataItem(dataItem);
                this.itemContainers.push(itemContainer);
                itemContainer.states.create("disabled", {});
                return itemContainer;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Legend.prototype, "makeMarker", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var marker = this.markers.make();
                this.markers.push(marker);
                marker.states.create("disabled", {});
                return marker;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Legend.prototype, "makeLabel", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var label = this.labels.make();
                label.states.create("disabled", {});
                return label;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Legend.prototype, "makeValueLabel", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var valueLabel = this.valueLabels.make();
                valueLabel.states.create("disabled", {});
                return valueLabel;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Legend.prototype, "makeMarkerRectangle", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var markerRectangle = this.markerRectangles.make();
                markerRectangle.states.create("disabled", {});
                return markerRectangle;
            }
        });
        Object.defineProperty(Legend.prototype, "processDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem) {
                var _this = this;
                _super.prototype.processDataItem.call(this, dataItem);
                var itemContainer = this.makeItemContainer(dataItem);
                var nameField = this.get("nameField");
                var fillField = this.get("fillField");
                var strokeField = this.get("strokeField");
                if (itemContainer) {
                    var clickTarget = this.get("clickTarget", "itemContainer");
                    var item_1 = dataItem.dataContext;
                    if (item_1 && item_1.set) {
                        item_1.set("legendDataItem", dataItem);
                    }
                    itemContainer._setDataItem(dataItem);
                    dataItem.set("itemContainer", itemContainer);
                    var marker = this.makeMarker();
                    if (marker) {
                        itemContainer.children.push(marker);
                        marker._setDataItem(dataItem);
                        dataItem.set("marker", marker);
                        var useDefaultMarker = this.get("useDefaultMarker");
                        var markerRectangle_1 = marker.children.push(this.makeMarkerRectangle());
                        var fill = dataItem.get("fill");
                        var stroke = dataItem.get("stroke");
                        dataItem.set("markerRectangle", markerRectangle_1);
                        if (item_1 && item_1.get) {
                            fill = item_1.get(fillField, fill);
                            stroke = item_1.get(strokeField, stroke);
                        }
                        if (!stroke) {
                            stroke = fill;
                        }
                        if (!useDefaultMarker) {
                            if (item_1 && item_1.createLegendMarker) {
                                item_1.createLegendMarker();
                            }
                        }
                        else {
                            if (item_1.on) {
                                item_1.on(fillField, function () {
                                    markerRectangle_1.set("fill", item_1.get(fillField));
                                });
                                item_1.on(strokeField, function () {
                                    markerRectangle_1.set("stroke", item_1.get(strokeField));
                                });
                            }
                        }
                        markerRectangle_1.setAll({ fill: fill, stroke: stroke });
                        // this solves if template field is set on slice
                        var component = item_1.component;
                        if (component && component.updateLegendMarker) {
                            component.updateLegendMarker(item_1);
                        }
                    }
                    var label_1 = this.makeLabel();
                    if (label_1) {
                        itemContainer.children.push(label_1);
                        label_1._setDataItem(dataItem);
                        dataItem.set("label", label_1);
                        label_1.text.on("text", function () {
                            itemContainer.set("ariaLabel", label_1.text._getText() + "; " + _this._t("Press ENTER to toggle"));
                        });
                        if (item_1 && item_1.get) {
                            dataItem.set("name", item_1.get(nameField));
                        }
                        var name_1 = dataItem.get("name");
                        if (name_1) {
                            label_1.set("text", name_1);
                        }
                    }
                    var valueLabel = this.makeValueLabel();
                    if (valueLabel) {
                        itemContainer.children.push(valueLabel);
                        valueLabel._setDataItem(dataItem);
                        dataItem.set("valueLabel", valueLabel);
                    }
                    if (item_1 && item_1.show) {
                        this._disposers.push(item_1.on("visible", function (visible) {
                            itemContainer.set("disabled", !visible);
                        }));
                        if (!item_1.get("visible")) {
                            itemContainer.set("disabled", true);
                        }
                        if (clickTarget != "none") {
                            var clickContainer = itemContainer;
                            if (clickTarget == "marker") {
                                clickContainer = marker;
                            }
                            this._addClickEvents(clickContainer, item_1, dataItem);
                        }
                    }
                    // Sort children
                    this.children.values.sort(function (a, b) {
                        var targetA = a.dataItem.dataContext;
                        var targetB = b.dataItem.dataContext;
                        if (targetA && targetB) {
                            var indexA = _this.data.indexOf(targetA);
                            var indexB = _this.data.indexOf(targetB);
                            if (indexA > indexB) {
                                return 1;
                            }
                            else if (indexA < indexB) {
                                return -1;
                            }
                        }
                        return 0;
                    });
                }
            }
        });
        Object.defineProperty(Legend.prototype, "_addClickEvents", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (container, item, dataItem) {
                var _this = this;
                container.set("cursorOverStyle", "pointer");
                container.events.on("pointerover", function () {
                    var component = item.component;
                    if (component && component.hoverDataItem) {
                        component.hoverDataItem(item);
                    }
                });
                container.events.on("pointerout", function () {
                    var component = item.component;
                    if (component && component.hoverDataItem) {
                        component.unhoverDataItem(item);
                    }
                });
                container.events.on("click", function () {
                    var labelText = dataItem.get("label").text._getText();
                    if (item.show && item.isHidden && (item.isHidden() || item.get("visible") === false)) {
                        item.show();
                        container.set("disabled", false);
                        _this._root.readerAlert(_this._t("%1 shown", _this._root.locale, labelText));
                    }
                    else if (item.hide) {
                        item.hide();
                        container.set("disabled", true);
                        _this._root.readerAlert(_this._t("%1 hidden", _this._root.locale, labelText));
                    }
                });
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Legend.prototype, "disposeDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem) {
                var dataContext = dataItem.dataContext;
                if (dataContext && dataContext.get) {
                    var di = dataContext.get("legendDataItem");
                    if (di == dataItem) {
                        dataContext.set("legendDataItem", undefined);
                    }
                }
                var itemContainer = dataItem.get("itemContainer");
                if (itemContainer) {
                    this.itemContainers.removeValue(itemContainer);
                    itemContainer.dispose();
                }
                var marker = dataItem.get("marker");
                if (marker) {
                    this.markers.removeValue(marker);
                    marker.dispose();
                }
                var markerRectangle = dataItem.get("markerRectangle");
                if (markerRectangle) {
                    this.markerRectangles.removeValue(markerRectangle);
                    markerRectangle.dispose();
                }
                var label = dataItem.get("label");
                if (label) {
                    this.labels.removeValue(label);
                    label.dispose();
                }
                var valueLabel = dataItem.get("valueLabel");
                if (valueLabel) {
                    this.valueLabels.removeValue(valueLabel);
                    valueLabel.dispose();
                }
            }
        });
        Object.defineProperty(Legend, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Legend"
        });
        Object.defineProperty(Legend, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Series.classNames.concat([Legend.className])
        });
        return Legend;
    }(Series));

    /** @ignore */ /** */
    /**
     * @ignore
     */
    function segmentedLine(display, segments) {
        for (var s = 0, len = segments.length; s < len; s++) {
            var groups = segments[s];
            if (groups.length > 0) {
                var firstGroup = groups[0];
                if (firstGroup.length > 0) {
                    var firstPoint = firstGroup[0];
                    display.moveTo(firstPoint.x, firstPoint.y);
                    for (var g = 0, len_1 = groups.length; g < len_1; g++) {
                        line$1(display, groups[g]);
                    }
                }
            }
        }
    }
    /**
     * @ignore
     */
    function line$1(display, points) {
        for (var p = 0, len = points.length; p < len; p++) {
            var point = points[p];
            display.lineTo(point.x, point.y);
        }
    }

    /**
     * Draws a line.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info
     * @important
     */
    var Line = /** @class */ (function (_super) {
        __extends(Line, _super);
        function Line() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Line.prototype, "_beforeChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._beforeChanged.call(this);
                if (this.isDirty("points") || this.isDirty("segments") || this._sizeDirty || this.isPrivateDirty("width") || this.isPrivateDirty("height")) {
                    this._clear = true;
                }
            }
        });
        Object.defineProperty(Line.prototype, "_changed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._changed.call(this);
                if (this._clear) {
                    var points = this.get("points");
                    var segments = this.get("segments");
                    if (points && points.length > 0) {
                        var point = points[0];
                        this._display.moveTo(point.x, point.y);
                        segmentedLine(this._display, [[points]]);
                    }
                    else if (segments) {
                        segmentedLine(this._display, segments);
                    }
                    else if (!this.get("draw")) {
                        var w = this.width();
                        var h = this.height();
                        this._display.moveTo(0, 0);
                        this._display.lineTo(w, h);
                    }
                }
            }
        });
        Object.defineProperty(Line, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Line"
        });
        Object.defineProperty(Line, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Graphics.classNames.concat([Line.className])
        });
        return Line;
    }(Graphics));

    /**
     * Displays an image.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/images/} for more info
     * @important
     */
    var Picture = /** @class */ (function (_super) {
        __extends(Picture, _super);
        function Picture() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_display", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this._root._renderer.makePicture(undefined)
            });
            return _this;
        }
        Object.defineProperty(Picture.prototype, "_changed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._changed.call(this);
                if (this.isDirty("width")) {
                    var width = this.get("width");
                    this._display.width = isNumber(width) ? width : undefined;
                }
                if (this.isDirty("height")) {
                    var height = this.get("height");
                    this._display.height = isNumber(height) ? height : undefined;
                }
                if (this.isDirty("shadowColor")) {
                    this._display.clear();
                    var shadowColor = this.get("shadowColor");
                    this._display.shadowColor = shadowColor == null ? undefined : shadowColor;
                }
                if (this.isDirty("shadowBlur")) {
                    this._display.clear();
                    this._display.shadowBlur = this.get("shadowBlur");
                }
                if (this.isDirty("shadowOffsetX")) {
                    this._display.clear();
                    this._display.shadowOffsetX = this.get("shadowOffsetX");
                }
                if (this.isDirty("shadowOffsetY")) {
                    this._display.clear();
                    this._display.shadowOffsetY = this.get("shadowOffsetY");
                }
                if (this.isDirty("shadowOpacity")) {
                    this._display.clear();
                    this._display.shadowOpacity = this.get("shadowOpacity");
                }
                if (this.isDirty("src")) {
                    this._display.clear();
                    this._load();
                }
            }
        });
        Object.defineProperty(Picture.prototype, "_load", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                var src = this.get("src");
                if (src) {
                    var image_1 = new Image();
                    //image.crossOrigin = "Anonymous";
                    image_1.src = src;
                    image_1.decode().then(function () {
                        _this._display.image = image_1;
                        _this._updateSize();
                    }).catch(function (_error) {
                        // TODO: maybe raise error?
                    });
                }
            }
        });
        Object.defineProperty(Picture.prototype, "_updateSize", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._updateSize.call(this);
                var image = this._display.image;
                if (image) {
                    var w = this.getPrivate("width", this.get("width"));
                    var h = this.getPrivate("height", this.get("height"));
                    var r = image.width && image.height ? image.width / image.height : 0;
                    if (isNumber(w) && isNumber(h)) {
                        this._display.width = w;
                        this._display.height = h;
                    }
                    else if (isNumber(w) && r) {
                        h = w / r;
                    }
                    else if (isNumber(h) && r) {
                        w = h * r;
                    }
                    else {
                        w = image.width;
                        h = image.height;
                    }
                    if (isNumber(w)) {
                        this._display.width = w;
                    }
                    if (isNumber(h)) {
                        this._display.height = h;
                    }
                    this.markDirtyBounds();
                    this.markDirty();
                }
            }
        });
        Object.defineProperty(Picture, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Picture"
        });
        Object.defineProperty(Picture, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Sprite.classNames.concat([Picture.className])
        });
        return Picture;
    }(Sprite));

    /**
     * @ignore
     */
    var RadialText = /** @class */ (function (_super) {
        __extends(RadialText, _super);
        function RadialText() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_display", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this._root._renderer.makeRadialText("", _this.textStyle)
            });
            return _this;
        }
        Object.defineProperty(RadialText.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._afterNew.call(this);
            }
        });
        Object.defineProperty(RadialText.prototype, "_beforeChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._beforeChanged.call(this);
                this._display.clear();
                if (this.isDirty("textType")) {
                    this._display.textType = this.get("textType");
                    this.markDirtyBounds();
                }
                if (this.isDirty("radius")) {
                    this._display.radius = this.get("radius");
                    this.markDirtyBounds();
                }
                if (this.isDirty("startAngle")) {
                    this._display.startAngle = (this.get("startAngle", 0) + 90) * RADIANS;
                    this.markDirtyBounds();
                }
                if (this.isDirty("inside")) {
                    this._display.inside = this.get("inside");
                    this.markDirtyBounds();
                }
                if (this.isDirty("orientation")) {
                    this._display.orientation = this.get("orientation");
                    this.markDirtyBounds();
                }
                if (this.isDirty("kerning")) {
                    this._display.kerning = this.get("kerning");
                    this.markDirtyBounds();
                }
            }
        });
        Object.defineProperty(RadialText, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "RadialText"
        });
        Object.defineProperty(RadialText, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Text.classNames.concat([RadialText.className])
        });
        return RadialText;
    }(Text));

    var RadialLabel = /** @class */ (function (_super) {
        __extends(RadialLabel, _super);
        function RadialLabel() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_flipped", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            return _this;
        }
        Object.defineProperty(RadialLabel.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._textKeys.push("textType", "kerning");
                _super.prototype._afterNew.call(this);
            }
        });
        Object.defineProperty(RadialLabel.prototype, "_makeText", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._text = this.children.push(RadialText.new(this._root, {}));
            }
        });
        /**
         * Returns base radius in pixels.
         *
         * @return Base radius
         */
        Object.defineProperty(RadialLabel.prototype, "baseRadius", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var radiusPrivate = this.getPrivate("radius", 0);
                var innerRadiusPrivate = this.getPrivate("innerRadius", 0);
                var baseRadius = this.get("baseRadius", 0);
                return innerRadiusPrivate + relativeToValue(baseRadius, radiusPrivate - innerRadiusPrivate);
            }
        });
        /**
         * Returns radius adjustment in pixels.
         *
         * @return Radius
         */
        Object.defineProperty(RadialLabel.prototype, "radius", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var inside = this.get("inside", false);
                return this.baseRadius() + this.get("radius", 0) * (inside ? -1 : 1);
            }
        });
        Object.defineProperty(RadialLabel.prototype, "_updateChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._updateChildren.call(this);
                if (this.isDirty("baseRadius") || this.isPrivateDirty("radius") || this.isPrivateDirty("innerRadius") || this.isDirty("labelAngle") || this.isDirty("radius") || this.isDirty("inside") || this.isDirty("orientation") || this.isDirty("textType")) {
                    var textType = this.get("textType", "adjusted");
                    var inside = this.get("inside", false);
                    var orientation_1 = this.get("orientation");
                    var labelAngle = normalizeAngle(this.get("labelAngle", 0));
                    this._text.set("startAngle", this.get("labelAngle", 0));
                    this._text.set("inside", inside);
                    var sin = sin$1(labelAngle);
                    var cos = cos$1(labelAngle);
                    var baseRadius = this.baseRadius();
                    var radius = this.radius();
                    this._display.angle = 0;
                    if (textType == "circular") {
                        this.setAll({
                            paddingTop: 0,
                            paddingBottom: 0,
                            paddingLeft: 0,
                            paddingRight: 0
                        });
                        // Circular labels are handled and positioned differently
                        this._text.set("orientation", orientation_1);
                        this._text.set("radius", radius);
                    }
                    else {
                        if (baseRadius == 0) {
                            labelAngle = 0;
                            radius = 0;
                        }
                        // Positioning of radial/regular labels are teh same
                        var x = radius * cos;
                        var y = radius * sin;
                        if (textType == "radial") {
                            this.setRaw("x", x);
                            this.setRaw("y", y);
                            if ((labelAngle < 90) || (labelAngle > 270) || orientation_1 != "auto") {
                                this._display.angle = labelAngle; // + 90;
                                this._flipped = false;
                            }
                            else {
                                this._display.angle = labelAngle + 180;
                                this._flipped = true;
                            }
                            this._dirty.rotation = false;
                        }
                        else if (textType == "adjusted") {
                            this.setRaw("centerX", p50);
                            this.setRaw("centerY", p50);
                            this.setRaw("x", x);
                            this.setRaw("y", y);
                        }
                        else if (textType == "regular") {
                            this.setRaw("x", x);
                            this.setRaw("y", y);
                        }
                    }
                    this.markDirtyPosition();
                    this.markDirtyBounds();
                }
            }
        });
        Object.defineProperty(RadialLabel.prototype, "_updatePosition", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var textType = this.get("textType", "regular");
                var inside = this.get("inside", false);
                var dx = 0;
                var dy = 0;
                var labelAngle = this.get("labelAngle", 0);
                var bounds = this.localBounds();
                var w = bounds.right - bounds.left;
                var h = bounds.bottom - bounds.top;
                if (textType == "radial") {
                    if (this._flipped) {
                        var centerX = this.get("centerX");
                        if (centerX instanceof Percent) {
                            w = w * (1 - centerX.value * 2);
                        }
                        dx = w * cos$1(labelAngle);
                        dy = w * sin$1(labelAngle);
                    }
                }
                else if (!inside && textType == "adjusted") {
                    dx = w / 2 * cos$1(labelAngle);
                    dy = h / 2 * sin$1(labelAngle);
                }
                this.setRaw("dx", dx);
                this.setRaw("dy", dy);
                _super.prototype._updatePosition.call(this);
            }
        });
        Object.defineProperty(RadialLabel.prototype, "text", {
            /**
             * @ignore
             */
            get: function () {
                return this._text;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RadialLabel, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "RadialLabel"
        });
        Object.defineProperty(RadialLabel, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Label.classNames.concat([RadialLabel.className])
        });
        return RadialLabel;
    }(Label));

    /**
     * Draws a triangle.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info
     * @important
     */
    var Triangle = /** @class */ (function (_super) {
        __extends(Triangle, _super);
        function Triangle() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Triangle.prototype, "_beforeChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._beforeChanged.call(this);
                if (this.isDirty("width") || this.isDirty("height") || this.isPrivateDirty("width") || this.isPrivateDirty("height")) {
                    this._clear = true;
                }
            }
        });
        Object.defineProperty(Triangle.prototype, "_changed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._changed.call(this);
                if (this._clear && !this.get("draw")) {
                    this._draw();
                }
            }
        });
        Object.defineProperty(Triangle.prototype, "_draw", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var w = this.width();
                var h = this.height();
                var display = this._display;
                display.moveTo(-w / 2, h / 2);
                display.lineTo(0, -h / 2);
                display.lineTo(w / 2, h / 2);
                display.lineTo(-w / 2, h / 2);
            }
        });
        Object.defineProperty(Triangle.prototype, "_updateSize", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.markDirty();
                this._clear = true;
            }
        });
        Object.defineProperty(Triangle, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Triangle"
        });
        Object.defineProperty(Triangle, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Graphics.classNames.concat([Triangle.className])
        });
        return Triangle;
    }(Graphics));

    /**
     * A control that allows zooming chart's axes, or other uses requiring range
     * selection.
     *
     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/scrollbars/} for more info
     */
    var Scrollbar = /** @class */ (function (_super) {
        __extends(Scrollbar, _super);
        function Scrollbar() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            /**
             * A thumb elment - a draggable square between the grips, used for panning
             * the selection.
             */
            Object.defineProperty(_this, "thumb", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this._makeThumb()
            });
            /**
             * Start grip button.
             */
            Object.defineProperty(_this, "startGrip", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this._makeButton()
            });
            /**
             * End grip button.
             */
            Object.defineProperty(_this, "endGrip", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this._makeButton()
            });
            Object.defineProperty(_this, "_thumbBusy", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_startDown", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_endDown", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_thumbDown", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_gripDown", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            return _this;
        }
        Object.defineProperty(Scrollbar.prototype, "_addOrientationClass", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._settings.themeTags = mergeTags(this._settings.themeTags, ["scrollbar", this._settings.orientation]);
                if (!this._settings.background) {
                    this._settings.background = RoundedRectangle.new(this._root, {
                        themeTags: mergeTags(this._settings.themeTags, ["main", "background"])
                    });
                }
            }
        });
        Object.defineProperty(Scrollbar.prototype, "_makeButton", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this.children.push(Button.new(this._root, {
                    themeTags: ["resize", "button", this.get("orientation")], icon: Graphics.new(this._root, {
                        themeTags: ["icon"]
                    })
                }));
            }
        });
        Object.defineProperty(Scrollbar.prototype, "_makeThumb", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this.children.push(RoundedRectangle.new(this._root, {
                    themeTags: ["thumb", this.get("orientation")]
                }));
            }
        });
        Object.defineProperty(Scrollbar.prototype, "_handleAnimation", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (animation) {
                var _this = this;
                if (animation) {
                    this._disposers.push(animation.events.on("stopped", function () {
                        _this.setPrivateRaw("isBusy", false);
                        _this._thumbBusy = false;
                    }));
                }
            }
        });
        Object.defineProperty(Scrollbar.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                this._addOrientationClass();
                _super.prototype._afterNew.call(this);
                var startGrip = this.startGrip;
                var endGrip = this.endGrip;
                var thumb = this.thumb;
                var background = this.get("background");
                if (background) {
                    this._disposers.push(background.events.on("click", function (event) {
                        _this.setPrivateRaw("isBusy", true);
                        var point = _this._display.toLocal(event.point);
                        var w = _this.width();
                        var h = _this.height();
                        var orientation = _this.get("orientation");
                        var newMiddle;
                        if (orientation == "vertical") {
                            newMiddle = (point.y - thumb.height() / 2) / h;
                        }
                        else {
                            newMiddle = (point.x - thumb.width() / 2) / w;
                        }
                        var newCoordinate;
                        var key;
                        if (orientation == "vertical") {
                            newCoordinate = newMiddle * h;
                            key = "y";
                        }
                        else {
                            newCoordinate = newMiddle * w;
                            key = "x";
                        }
                        var duration = _this.get("animationDuration", 0);
                        if (duration > 0) {
                            _this._thumbBusy = true;
                            _this._handleAnimation(_this.thumb.animate({ key: key, to: newCoordinate, duration: duration, easing: _this.get("animationEasing") }));
                        }
                        else {
                            _this.thumb.set(key, newCoordinate);
                            _this._root.events.on("frameended", function () {
                                _this.setPrivateRaw("isBusy", false);
                            });
                        }
                    }));
                }
                this._disposers.push(thumb.events.on("dblclick", function (event) {
                    if (!isLocalEvent(event.originalEvent, _this)) {
                        return;
                    }
                    var duration = _this.get("animationDuration", 0);
                    var easing = _this.get("animationEasing");
                    _this.animate({ key: "start", to: 0, duration: duration, easing: easing });
                    _this.animate({ key: "end", to: 1, duration: duration, easing: easing });
                }));
                this._disposers.push(startGrip.events.on("pointerdown", function () {
                    _this.setPrivateRaw("isBusy", true);
                    _this._startDown = true;
                    _this._gripDown = "start";
                }));
                this._disposers.push(endGrip.events.on("pointerdown", function () {
                    _this.setPrivateRaw("isBusy", true);
                    _this._endDown = true;
                    _this._gripDown = "end";
                }));
                this._disposers.push(thumb.events.on("pointerdown", function () {
                    _this.setPrivateRaw("isBusy", true);
                    _this._thumbDown = true;
                    _this._gripDown = undefined;
                }));
                this._disposers.push(startGrip.events.on("globalpointerup", function () {
                    if (_this._startDown) {
                        _this.setPrivateRaw("isBusy", false);
                    }
                    _this._startDown = false;
                }));
                this._disposers.push(endGrip.events.on("globalpointerup", function () {
                    if (_this._endDown) {
                        _this.setPrivateRaw("isBusy", false);
                    }
                    _this._endDown = false;
                }));
                this._disposers.push(thumb.events.on("globalpointerup", function () {
                    if (_this._thumbDown) {
                        _this.setPrivateRaw("isBusy", false);
                    }
                    _this._thumbDown = false;
                }));
                this._disposers.push(startGrip.on("x", function () {
                    _this._updateThumb();
                }));
                this._disposers.push(endGrip.on("x", function () {
                    _this._updateThumb();
                }));
                this._disposers.push(startGrip.on("y", function () {
                    _this._updateThumb();
                }));
                this._disposers.push(endGrip.on("y", function () {
                    _this._updateThumb();
                }));
                this._disposers.push(thumb.events.on("positionchanged", function () {
                    _this._updateGripsByThumb();
                }));
                if (this.get("orientation") == "vertical") {
                    startGrip.set("x", 0);
                    endGrip.set("x", 0);
                    this._disposers.push(thumb.adapters.add("y", function (value) {
                        return Math.max(Math.min(Number(value), _this.height() - thumb.height()), 0);
                    }));
                    this._disposers.push(thumb.adapters.add("x", function (_value) {
                        return _this.width() / 2;
                    }));
                    this._disposers.push(startGrip.adapters.add("x", function (_value) {
                        return _this.width() / 2;
                    }));
                    this._disposers.push(endGrip.adapters.add("x", function (_value) {
                        return _this.width() / 2;
                    }));
                    this._disposers.push(startGrip.adapters.add("y", function (value) {
                        return Math.max(Math.min(Number(value), _this.height()), 0);
                    }));
                    this._disposers.push(endGrip.adapters.add("y", function (value) {
                        return Math.max(Math.min(Number(value), _this.height()), 0);
                    }));
                }
                else {
                    startGrip.set("y", 0);
                    endGrip.set("y", 0);
                    this._disposers.push(thumb.adapters.add("x", function (value) {
                        return Math.max(Math.min(Number(value), _this.width() - thumb.width()), 0);
                    }));
                    this._disposers.push(thumb.adapters.add("y", function (_value) {
                        return _this.height() / 2;
                    }));
                    this._disposers.push(startGrip.adapters.add("y", function (_value) {
                        return _this.height() / 2;
                    }));
                    this._disposers.push(endGrip.adapters.add("y", function (_value) {
                        return _this.height() / 2;
                    }));
                    this._disposers.push(startGrip.adapters.add("x", function (value) {
                        return Math.max(Math.min(Number(value), _this.width()), 0);
                    }));
                    this._disposers.push(endGrip.adapters.add("x", function (value) {
                        return Math.max(Math.min(Number(value), _this.width()), 0);
                    }));
                }
            }
        });
        Object.defineProperty(Scrollbar.prototype, "_updateChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._updateChildren.call(this);
                if (this.isDirty("end") || this.isDirty("start") || this._sizeDirty) {
                    this.updateGrips();
                }
            }
        });
        Object.defineProperty(Scrollbar.prototype, "_changed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._changed.call(this);
                if (this.isDirty("start") || this.isDirty("end")) {
                    var eventType = "rangechanged";
                    if (this.events.isEnabled(eventType)) {
                        this.events.dispatch(eventType, { type: eventType, target: this, start: this.get("start", 0), end: this.get("end", 1), grip: this._gripDown });
                    }
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Scrollbar.prototype, "updateGrips", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var startGrip = this.startGrip;
                var endGrip = this.endGrip;
                var orientation = this.get("orientation");
                var height = this.height();
                var width = this.width();
                if (orientation == "vertical") {
                    startGrip.set("y", height * this.get("start", 0));
                    endGrip.set("y", height * this.get("end", 1));
                }
                else {
                    startGrip.set("x", width * this.get("start", 0));
                    endGrip.set("x", width * this.get("end", 1));
                }
                var valueFunction = this.getPrivate("positionTextFunction");
                var from = Math.round(this.get("start", 0) * 100);
                var to = Math.round(this.get("end", 0) * 100);
                var fromValue;
                var toValue;
                if (valueFunction) {
                    fromValue = valueFunction.call(this, this.get("start", 0));
                    toValue = valueFunction.call(this, this.get("end", 0));
                }
                else {
                    fromValue = from + "%";
                    toValue = to + "%";
                }
                startGrip.set("ariaLabel", this._t("From %1", undefined, fromValue));
                startGrip.set("ariaValueNow", "" + from);
                startGrip.set("ariaValueText", from + "%");
                startGrip.set("ariaValueMin", "0");
                startGrip.set("ariaValueMax", "100");
                endGrip.set("ariaLabel", this._t("To %1", undefined, toValue));
                endGrip.set("ariaValueNow", "" + to);
                endGrip.set("ariaValueText", to + "%");
                endGrip.set("ariaValueMin", "0");
                endGrip.set("ariaValueMax", "100");
            }
        });
        Object.defineProperty(Scrollbar.prototype, "_updateThumb", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var thumb = this.thumb;
                var startGrip = this.startGrip;
                var endGrip = this.endGrip;
                var height = this.height();
                var width = this.width();
                var x0 = startGrip.x();
                var x1 = endGrip.x();
                var y0 = startGrip.y();
                var y1 = endGrip.y();
                var start = 0;
                var end = 1;
                if (this.get("orientation") == "vertical") {
                    if (isNumber(y0) && isNumber(y1)) {
                        if (!this._thumbBusy && !thumb.isDragging()) {
                            thumb.set("height", y1 - y0);
                            thumb.set("y", y0);
                        }
                        start = y0 / height;
                        end = y1 / height;
                    }
                }
                else {
                    if (isNumber(x0) && isNumber(x1)) {
                        if (!this._thumbBusy && !thumb.isDragging()) {
                            thumb.set("width", x1 - x0);
                            thumb.set("x", x0);
                        }
                        start = x0 / width;
                        end = x1 / width;
                    }
                }
                if (this.getPrivate("isBusy") && (this.get("start") != start || this.get("end") != end)) {
                    this.set("start", start);
                    this.set("end", end);
                }
                var valueFunction = this.getPrivate("positionTextFunction");
                var from = Math.round(this.get("start", 0) * 100);
                var to = Math.round(this.get("end", 0) * 100);
                var fromValue;
                var toValue;
                if (valueFunction) {
                    fromValue = valueFunction.call(this, this.get("start", 0));
                    toValue = valueFunction.call(this, this.get("end", 0));
                }
                else {
                    fromValue = from + "%";
                    toValue = to + "%";
                }
                thumb.set("ariaLabel", this._t("From %1 to %2", undefined, fromValue, toValue));
                thumb.set("ariaValueNow", "" + from);
                thumb.set("ariaValueText", from + "%");
            }
        });
        Object.defineProperty(Scrollbar.prototype, "_updateGripsByThumb", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var thumb = this.thumb;
                var startGrip = this.startGrip;
                var endGrip = this.endGrip;
                if (this.get("orientation") == "vertical") {
                    var thumbSize = thumb.height();
                    startGrip.set("y", thumb.y());
                    endGrip.set("y", thumb.y() + thumbSize);
                }
                else {
                    var thumbSize = thumb.width();
                    startGrip.set("x", thumb.x());
                    endGrip.set("x", thumb.x() + thumbSize);
                }
            }
        });
        Object.defineProperty(Scrollbar, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Scrollbar"
        });
        Object.defineProperty(Scrollbar, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Container.classNames.concat([Scrollbar.className])
        });
        return Scrollbar;
    }(Container));

    /**
     * A control that allows zooming chart's axes, or other uses requiring range
     * selection.
     */
    var Slider = /** @class */ (function (_super) {
        __extends(Slider, _super);
        function Slider() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Slider.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._addOrientationClass();
                _super.prototype._afterNew.call(this);
                this.endGrip.setPrivate("visible", false);
                this.thumb.setPrivate("visible", false);
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Slider.prototype, "updateGrips", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype.updateGrips.call(this);
                var startGrip = this.startGrip;
                this.endGrip.setAll({ x: startGrip.x(), y: startGrip.y() });
                this.setRaw("end", this.get("start"));
            }
        });
        Object.defineProperty(Slider, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Slider"
        });
        Object.defineProperty(Slider, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Scrollbar.classNames.concat([Slider.className])
        });
        return Slider;
    }(Scrollbar));

    const pi$1 = Math.PI,
        tau$1 = 2 * pi$1,
        epsilon$1 = 1e-6,
        tauEpsilon = tau$1 - epsilon$1;

    function Path() {
      this._x0 = this._y0 = // start of current subpath
      this._x1 = this._y1 = null; // end of current subpath
      this._ = "";
    }

    function path() {
      return new Path;
    }

    Path.prototype = path.prototype = {
      constructor: Path,
      moveTo: function(x, y) {
        this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y);
      },
      closePath: function() {
        if (this._x1 !== null) {
          this._x1 = this._x0, this._y1 = this._y0;
          this._ += "Z";
        }
      },
      lineTo: function(x, y) {
        this._ += "L" + (this._x1 = +x) + "," + (this._y1 = +y);
      },
      quadraticCurveTo: function(x1, y1, x, y) {
        this._ += "Q" + (+x1) + "," + (+y1) + "," + (this._x1 = +x) + "," + (this._y1 = +y);
      },
      bezierCurveTo: function(x1, y1, x2, y2, x, y) {
        this._ += "C" + (+x1) + "," + (+y1) + "," + (+x2) + "," + (+y2) + "," + (this._x1 = +x) + "," + (this._y1 = +y);
      },
      arcTo: function(x1, y1, x2, y2, r) {
        x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
        var x0 = this._x1,
            y0 = this._y1,
            x21 = x2 - x1,
            y21 = y2 - y1,
            x01 = x0 - x1,
            y01 = y0 - y1,
            l01_2 = x01 * x01 + y01 * y01;

        // Is the radius negative? Error.
        if (r < 0) throw new Error("negative radius: " + r);

        // Is this path empty? Move to (x1,y1).
        if (this._x1 === null) {
          this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
        }

        // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.
        else if (!(l01_2 > epsilon$1));

        // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?
        // Equivalently, is (x1,y1) coincident with (x2,y2)?
        // Or, is the radius zero? Line to (x1,y1).
        else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon$1) || !r) {
          this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
        }

        // Otherwise, draw an arc!
        else {
          var x20 = x2 - x0,
              y20 = y2 - y0,
              l21_2 = x21 * x21 + y21 * y21,
              l20_2 = x20 * x20 + y20 * y20,
              l21 = Math.sqrt(l21_2),
              l01 = Math.sqrt(l01_2),
              l = r * Math.tan((pi$1 - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),
              t01 = l / l01,
              t21 = l / l21;

          // If the start tangent is not coincident with (x0,y0), line to.
          if (Math.abs(t01 - 1) > epsilon$1) {
            this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
          }

          this._ += "A" + r + "," + r + ",0,0," + (+(y01 * x20 > x01 * y20)) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
        }
      },
      arc: function(x, y, r, a0, a1, ccw) {
        x = +x, y = +y, r = +r, ccw = !!ccw;
        var dx = r * Math.cos(a0),
            dy = r * Math.sin(a0),
            x0 = x + dx,
            y0 = y + dy,
            cw = 1 ^ ccw,
            da = ccw ? a0 - a1 : a1 - a0;

        // Is the radius negative? Error.
        if (r < 0) throw new Error("negative radius: " + r);

        // Is this path empty? Move to (x0,y0).
        if (this._x1 === null) {
          this._ += "M" + x0 + "," + y0;
        }

        // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).
        else if (Math.abs(this._x1 - x0) > epsilon$1 || Math.abs(this._y1 - y0) > epsilon$1) {
          this._ += "L" + x0 + "," + y0;
        }

        // Is this arc empty? We’re done.
        if (!r) return;

        // Does the angle go the wrong way? Flip the direction.
        if (da < 0) da = da % tau$1 + tau$1;

        // Is this a complete circle? Draw two arcs to complete the circle.
        if (da > tauEpsilon) {
          this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x - dx) + "," + (y - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
        }

        // Is this arc non-empty? Draw an arc!
        else if (da > epsilon$1) {
          this._ += "A" + r + "," + r + ",0," + (+(da >= pi$1)) + "," + cw + "," + (this._x1 = x + r * Math.cos(a1)) + "," + (this._y1 = y + r * Math.sin(a1));
        }
      },
      rect: function(x, y, w, h) {
        this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y) + "h" + (+w) + "v" + (+h) + "h" + (-w) + "Z";
      },
      toString: function() {
        return this._;
      }
    };

    function constant(x) {
      return function constant() {
        return x;
      };
    }

    const abs = Math.abs;
    const atan2 = Math.atan2;
    const cos = Math.cos;
    const max$1 = Math.max;
    const min$1 = Math.min;
    const sin = Math.sin;
    const sqrt = Math.sqrt;

    const epsilon = 1e-12;
    const pi = Math.PI;
    const halfPi = pi / 2;
    const tau = 2 * pi;

    function acos(x) {
      return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
    }

    function asin(x) {
      return x >= 1 ? halfPi : x <= -1 ? -halfPi : Math.asin(x);
    }

    function arcInnerRadius(d) {
      return d.innerRadius;
    }

    function arcOuterRadius(d) {
      return d.outerRadius;
    }

    function arcStartAngle(d) {
      return d.startAngle;
    }

    function arcEndAngle(d) {
      return d.endAngle;
    }

    function arcPadAngle(d) {
      return d && d.padAngle; // Note: optional!
    }

    function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
      var x10 = x1 - x0, y10 = y1 - y0,
          x32 = x3 - x2, y32 = y3 - y2,
          t = y32 * x10 - x32 * y10;
      if (t * t < epsilon) return;
      t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / t;
      return [x0 + t * x10, y0 + t * y10];
    }

    // Compute perpendicular offset line of length rc.
    // http://mathworld.wolfram.com/Circle-LineIntersection.html
    function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
      var x01 = x0 - x1,
          y01 = y0 - y1,
          lo = (cw ? rc : -rc) / sqrt(x01 * x01 + y01 * y01),
          ox = lo * y01,
          oy = -lo * x01,
          x11 = x0 + ox,
          y11 = y0 + oy,
          x10 = x1 + ox,
          y10 = y1 + oy,
          x00 = (x11 + x10) / 2,
          y00 = (y11 + y10) / 2,
          dx = x10 - x11,
          dy = y10 - y11,
          d2 = dx * dx + dy * dy,
          r = r1 - rc,
          D = x11 * y10 - x10 * y11,
          d = (dy < 0 ? -1 : 1) * sqrt(max$1(0, r * r * d2 - D * D)),
          cx0 = (D * dy - dx * d) / d2,
          cy0 = (-D * dx - dy * d) / d2,
          cx1 = (D * dy + dx * d) / d2,
          cy1 = (-D * dx + dy * d) / d2,
          dx0 = cx0 - x00,
          dy0 = cy0 - y00,
          dx1 = cx1 - x00,
          dy1 = cy1 - y00;

      // Pick the closer of the two intersection points.
      // TODO Is there a faster way to determine which intersection to use?
      if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;

      return {
        cx: cx0,
        cy: cy0,
        x01: -ox,
        y01: -oy,
        x11: cx0 * (r1 / r - 1),
        y11: cy0 * (r1 / r - 1)
      };
    }

    function arc() {
      var innerRadius = arcInnerRadius,
          outerRadius = arcOuterRadius,
          cornerRadius = constant(0),
          padRadius = null,
          startAngle = arcStartAngle,
          endAngle = arcEndAngle,
          padAngle = arcPadAngle,
          context = null;

      function arc() {
        var buffer,
            r,
            r0 = +innerRadius.apply(this, arguments),
            r1 = +outerRadius.apply(this, arguments),
            a0 = startAngle.apply(this, arguments) - halfPi,
            a1 = endAngle.apply(this, arguments) - halfPi,
            da = abs(a1 - a0),
            cw = a1 > a0;

        if (!context) context = buffer = path();

        // Ensure that the outer radius is always larger than the inner radius.
        if (r1 < r0) r = r1, r1 = r0, r0 = r;

        // Is it a point?
        if (!(r1 > epsilon)) context.moveTo(0, 0);

        // Or is it a circle or annulus?
        else if (da > tau - epsilon) {
          context.moveTo(r1 * cos(a0), r1 * sin(a0));
          context.arc(0, 0, r1, a0, a1, !cw);
          if (r0 > epsilon) {
            context.moveTo(r0 * cos(a1), r0 * sin(a1));
            context.arc(0, 0, r0, a1, a0, cw);
          }
        }

        // Or is it a circular or annular sector?
        else {
          var a01 = a0,
              a11 = a1,
              a00 = a0,
              a10 = a1,
              da0 = da,
              da1 = da,
              ap = padAngle.apply(this, arguments) / 2,
              rp = (ap > epsilon) && (padRadius ? +padRadius.apply(this, arguments) : sqrt(r0 * r0 + r1 * r1)),
              rc = min$1(abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),
              rc0 = rc,
              rc1 = rc,
              t0,
              t1;

          // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.
          if (rp > epsilon) {
            var p0 = asin(rp / r0 * sin(ap)),
                p1 = asin(rp / r1 * sin(ap));
            if ((da0 -= p0 * 2) > epsilon) p0 *= (cw ? 1 : -1), a00 += p0, a10 -= p0;
            else da0 = 0, a00 = a10 = (a0 + a1) / 2;
            if ((da1 -= p1 * 2) > epsilon) p1 *= (cw ? 1 : -1), a01 += p1, a11 -= p1;
            else da1 = 0, a01 = a11 = (a0 + a1) / 2;
          }

          var x01 = r1 * cos(a01),
              y01 = r1 * sin(a01),
              x10 = r0 * cos(a10),
              y10 = r0 * sin(a10);

          // Apply rounded corners?
          if (rc > epsilon) {
            var x11 = r1 * cos(a11),
                y11 = r1 * sin(a11),
                x00 = r0 * cos(a00),
                y00 = r0 * sin(a00),
                oc;

            // Restrict the corner radius according to the sector angle.
            if (da < pi && (oc = intersect(x01, y01, x00, y00, x11, y11, x10, y10))) {
              var ax = x01 - oc[0],
                  ay = y01 - oc[1],
                  bx = x11 - oc[0],
                  by = y11 - oc[1],
                  kc = 1 / sin(acos((ax * bx + ay * by) / (sqrt(ax * ax + ay * ay) * sqrt(bx * bx + by * by))) / 2),
                  lc = sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
              rc0 = min$1(rc, (r0 - lc) / (kc - 1));
              rc1 = min$1(rc, (r1 - lc) / (kc + 1));
            }
          }

          // Is the sector collapsed to a line?
          if (!(da1 > epsilon)) context.moveTo(x01, y01);

          // Does the sector’s outer ring have rounded corners?
          else if (rc1 > epsilon) {
            t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
            t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);

            context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);

            // Have the corners merged?
            if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);

            // Otherwise, draw the two corners and the ring.
            else {
              context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);
              context.arc(0, 0, r1, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);
              context.arc(t1.cx, t1.cy, rc1, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);
            }
          }

          // Or is the outer ring just a circular arc?
          else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);

          // Is there no inner ring, and it’s a circular sector?
          // Or perhaps it’s an annular sector collapsed due to padding?
          if (!(r0 > epsilon) || !(da0 > epsilon)) context.lineTo(x10, y10);

          // Does the sector’s inner ring (or point) have rounded corners?
          else if (rc0 > epsilon) {
            t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
            t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);

            context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);

            // Have the corners merged?
            if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);

            // Otherwise, draw the two corners and the ring.
            else {
              context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);
              context.arc(0, 0, r0, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);
              context.arc(t1.cx, t1.cy, rc0, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);
            }
          }

          // Or is the inner ring just a circular arc?
          else context.arc(0, 0, r0, a10, a00, cw);
        }

        context.closePath();

        if (buffer) return context = null, buffer + "" || null;
      }

      arc.centroid = function() {
        var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,
            a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi / 2;
        return [cos(a) * r, sin(a) * r];
      };

      arc.innerRadius = function(_) {
        return arguments.length ? (innerRadius = typeof _ === "function" ? _ : constant(+_), arc) : innerRadius;
      };

      arc.outerRadius = function(_) {
        return arguments.length ? (outerRadius = typeof _ === "function" ? _ : constant(+_), arc) : outerRadius;
      };

      arc.cornerRadius = function(_) {
        return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : constant(+_), arc) : cornerRadius;
      };

      arc.padRadius = function(_) {
        return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : constant(+_), arc) : padRadius;
      };

      arc.startAngle = function(_) {
        return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant(+_), arc) : startAngle;
      };

      arc.endAngle = function(_) {
        return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant(+_), arc) : endAngle;
      };

      arc.padAngle = function(_) {
        return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant(+_), arc) : padAngle;
      };

      arc.context = function(_) {
        return arguments.length ? ((context = _ == null ? null : _), arc) : context;
      };

      return arc;
    }

    function array(x) {
      return typeof x === "object" && "length" in x
        ? x // Array, TypedArray, NodeList, array-like
        : Array.from(x); // Map, Set, iterable, string, or anything else
    }

    function Linear(context) {
      this._context = context;
    }

    Linear.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._point = 0;
      },
      lineEnd: function() {
        if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x, y) {
        x = +x, y = +y;
        switch (this._point) {
          case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
          case 1: this._point = 2; // falls through
          default: this._context.lineTo(x, y); break;
        }
      }
    };

    function curveLinear(context) {
      return new Linear(context);
    }

    function x(p) {
      return p[0];
    }

    function y(p) {
      return p[1];
    }

    function line(x$1, y$1) {
      var defined = constant(true),
          context = null,
          curve = curveLinear,
          output = null;

      x$1 = typeof x$1 === "function" ? x$1 : (x$1 === undefined) ? x : constant(x$1);
      y$1 = typeof y$1 === "function" ? y$1 : (y$1 === undefined) ? y : constant(y$1);

      function line(data) {
        var i,
            n = (data = array(data)).length,
            d,
            defined0 = false,
            buffer;

        if (context == null) output = curve(buffer = path());

        for (i = 0; i <= n; ++i) {
          if (!(i < n && defined(d = data[i], i, data)) === defined0) {
            if (defined0 = !defined0) output.lineStart();
            else output.lineEnd();
          }
          if (defined0) output.point(+x$1(d, i, data), +y$1(d, i, data));
        }

        if (buffer) return output = null, buffer + "" || null;
      }

      line.x = function(_) {
        return arguments.length ? (x$1 = typeof _ === "function" ? _ : constant(+_), line) : x$1;
      };

      line.y = function(_) {
        return arguments.length ? (y$1 = typeof _ === "function" ? _ : constant(+_), line) : y$1;
      };

      line.defined = function(_) {
        return arguments.length ? (defined = typeof _ === "function" ? _ : constant(!!_), line) : defined;
      };

      line.curve = function(_) {
        return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
      };

      line.context = function(_) {
        return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
      };

      return line;
    }

    function area(x0, y0, y1) {
      var x1 = null,
          defined = constant(true),
          context = null,
          curve = curveLinear,
          output = null;

      x0 = typeof x0 === "function" ? x0 : (x0 === undefined) ? x : constant(+x0);
      y0 = typeof y0 === "function" ? y0 : (y0 === undefined) ? constant(0) : constant(+y0);
      y1 = typeof y1 === "function" ? y1 : (y1 === undefined) ? y : constant(+y1);

      function area(data) {
        var i,
            j,
            k,
            n = (data = array(data)).length,
            d,
            defined0 = false,
            buffer,
            x0z = new Array(n),
            y0z = new Array(n);

        if (context == null) output = curve(buffer = path());

        for (i = 0; i <= n; ++i) {
          if (!(i < n && defined(d = data[i], i, data)) === defined0) {
            if (defined0 = !defined0) {
              j = i;
              output.areaStart();
              output.lineStart();
            } else {
              output.lineEnd();
              output.lineStart();
              for (k = i - 1; k >= j; --k) {
                output.point(x0z[k], y0z[k]);
              }
              output.lineEnd();
              output.areaEnd();
            }
          }
          if (defined0) {
            x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
            output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
          }
        }

        if (buffer) return output = null, buffer + "" || null;
      }

      function arealine() {
        return line().defined(defined).curve(curve).context(context);
      }

      area.x = function(_) {
        return arguments.length ? (x0 = typeof _ === "function" ? _ : constant(+_), x1 = null, area) : x0;
      };

      area.x0 = function(_) {
        return arguments.length ? (x0 = typeof _ === "function" ? _ : constant(+_), area) : x0;
      };

      area.x1 = function(_) {
        return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : constant(+_), area) : x1;
      };

      area.y = function(_) {
        return arguments.length ? (y0 = typeof _ === "function" ? _ : constant(+_), y1 = null, area) : y0;
      };

      area.y0 = function(_) {
        return arguments.length ? (y0 = typeof _ === "function" ? _ : constant(+_), area) : y0;
      };

      area.y1 = function(_) {
        return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : constant(+_), area) : y1;
      };

      area.lineX0 =
      area.lineY0 = function() {
        return arealine().x(x0).y(y0);
      };

      area.lineY1 = function() {
        return arealine().x(x0).y(y1);
      };

      area.lineX1 = function() {
        return arealine().x(x1).y(y0);
      };

      area.defined = function(_) {
        return arguments.length ? (defined = typeof _ === "function" ? _ : constant(!!_), area) : defined;
      };

      area.curve = function(_) {
        return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
      };

      area.context = function(_) {
        return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
      };

      return area;
    }

    function point$2(that, x, y) {
      that._context.bezierCurveTo(
        that._x1 + that._k * (that._x2 - that._x0),
        that._y1 + that._k * (that._y2 - that._y0),
        that._x2 + that._k * (that._x1 - x),
        that._y2 + that._k * (that._y1 - y),
        that._x2,
        that._y2
      );
    }

    function Cardinal(context, tension) {
      this._context = context;
      this._k = (1 - tension) / 6;
    }

    Cardinal.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._x2 =
        this._y0 = this._y1 = this._y2 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 2: this._context.lineTo(this._x2, this._y2); break;
          case 3: point$2(this, this._x1, this._y1); break;
        }
        if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x, y) {
        x = +x, y = +y;
        switch (this._point) {
          case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
          case 1: this._point = 2; this._x1 = x, this._y1 = y; break;
          case 2: this._point = 3; // falls through
          default: point$2(this, x, y); break;
        }
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
      }
    };

    var curveCardinal = (function custom(tension) {

      function cardinal(context) {
        return new Cardinal(context, tension);
      }

      cardinal.tension = function(tension) {
        return custom(+tension);
      };

      return cardinal;
    })(0);

    function Step(context, t) {
      this._context = context;
      this._t = t;
    }

    Step.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x = this._y = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);
        if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
        if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;
      },
      point: function(x, y) {
        x = +x, y = +y;
        switch (this._point) {
          case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
          case 1: this._point = 2; // falls through
          default: {
            if (this._t <= 0) {
              this._context.lineTo(this._x, y);
              this._context.lineTo(x, y);
            } else {
              var x1 = this._x * (1 - this._t) + x * this._t;
              this._context.lineTo(x1, this._y);
              this._context.lineTo(x1, y);
            }
            break;
          }
        }
        this._x = x, this._y = y;
      }
    };

    function stepAfter(context) {
      return new Step(context, 1);
    }

    /**
     * Draws a slice shape.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info
     */
    var Slice = /** @class */ (function (_super) {
        __extends(Slice, _super);
        function Slice() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            /**
             * @ignore
             */
            Object.defineProperty(_this, "ix", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            /**
             * @ignore
             */
            Object.defineProperty(_this, "iy", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(_this, "_generator", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: arc()
            });
            return _this;
        }
        Object.defineProperty(Slice.prototype, "_getTooltipPoint", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var tooltipX = this.get("tooltipX");
                var tooltipY = this.get("tooltipY");
                var x = 0;
                var y = 0;
                if (isNumber(tooltipX)) {
                    x = tooltipX;
                }
                if (isNumber(tooltipY)) {
                    y = tooltipY;
                }
                var radius = this.get("radius", 0);
                var innerRadius = this.get("innerRadius", 0);
                var dRadius = this.get("dRadius", 0);
                var dInnerRadius = this.get("dInnerRadius", 0);
                radius += dRadius;
                innerRadius += dInnerRadius;
                if (innerRadius < 0) {
                    innerRadius = radius + innerRadius;
                }
                if (tooltipX instanceof Percent) {
                    x = this.ix * (innerRadius + (radius - innerRadius) * tooltipX.value);
                }
                if (tooltipY instanceof Percent) {
                    y = this.iy * (innerRadius + (radius - innerRadius) * tooltipY.value);
                }
                if (this.get("arc") >= 360 && innerRadius == 0) {
                    x = 0;
                    y = 0;
                }
                return { x: x, y: y };
            }
        });
        Object.defineProperty(Slice.prototype, "_beforeChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._beforeChanged.call(this);
                if (this.isDirty("radius") || this.isDirty("arc") || this.isDirty("innerRadius") || this.isDirty("startAngle") || this.isDirty("dRadius") || this.isDirty("dInnerRadius") || this.isDirty("cornerRadius")) {
                    this._clear = true;
                }
            }
        });
        Object.defineProperty(Slice.prototype, "_changed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._changed.call(this);
                if (this._clear) {
                    var startAngle = this.get("startAngle", 0);
                    var arc_1 = this.get("arc", 0);
                    var generator = this._generator;
                    if (arc_1 < 0) {
                        startAngle = startAngle + arc_1;
                        arc_1 = arc_1 * -1;
                    }
                    if (arc_1 > 0.1) { // this fixes bug with full circle when arc is very small
                        generator.cornerRadius(this.get("cornerRadius", 0));
                    }
                    generator.context(this._display);
                    var radius = this.get("radius", 0);
                    var innerRadius = this.get("innerRadius", 0);
                    var dRadius = this.get("dRadius", 0);
                    var dInnerRadius = this.get("dInnerRadius", 0);
                    radius += dRadius;
                    innerRadius += dInnerRadius;
                    if (innerRadius < 0) {
                        innerRadius = radius + innerRadius;
                    }
                    generator({ innerRadius: innerRadius, outerRadius: radius, startAngle: (startAngle + 90) * RADIANS, endAngle: (startAngle + arc_1 + 90) * RADIANS });
                    var middleAngle = startAngle + arc_1 / 2;
                    this.ix = cos$1(middleAngle);
                    this.iy = sin$1(middleAngle);
                }
                if (this.isDirty("shiftRadius")) {
                    var shiftRadius = this.get("shiftRadius", 0);
                    this.setRaw("dx", this.ix * shiftRadius);
                    this.setRaw("dy", this.iy * shiftRadius);
                    this.markDirtyPosition();
                }
            }
        });
        Object.defineProperty(Slice, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Slice"
        });
        Object.defineProperty(Slice, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Graphics.classNames.concat([Slice.className])
        });
        return Slice;
    }(Graphics));

    /**
     * A base class for all charts.
     */
    var Chart = /** @class */ (function (_super) {
        __extends(Chart, _super);
        function Chart() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            /**
             * A [[Container]] chart places its elements in.
             *
             * @default Container.new()
             */
            Object.defineProperty(_this, "chartContainer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this.children.push(Container.new(_this._root, { width: p100, height: p100, interactiveChildren: false }))
            });
            /**
             * A [[Container]] chart places its bullets in.
             *
             * @default Container.new()
             */
            Object.defineProperty(_this, "bulletsContainer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: Container.new(_this._root, { interactiveChildren: false, isMeasured: false, position: "absolute", width: p100, height: p100 })
            });
            return _this;
        }
        Object.defineProperty(Chart, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Chart"
        });
        Object.defineProperty(Chart, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Container.classNames.concat([Chart.className])
        });
        return Chart;
    }(Container));

    /**
     * A base class for all series-based charts.
     */
    var SerialChart = /** @class */ (function (_super) {
        __extends(SerialChart, _super);
        function SerialChart() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            /**
             * A [[Container]] where chart will store all series.
             *
             * @default Container.new()
             */
            Object.defineProperty(_this, "seriesContainer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: Container.new(_this._root, { width: p100, height: p100, isMeasured: false })
            });
            /**
             * A list of chart's series.
             */
            Object.defineProperty(_this, "series", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new ListAutoDispose()
            });
            return _this;
        }
        Object.defineProperty(SerialChart.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                _super.prototype._afterNew.call(this);
                this._disposers.push(this.series);
                var children = this.seriesContainer.children;
                this._disposers.push(this.series.events.onAll(function (change) {
                    if (change.type === "clear") {
                        each$1(change.oldValues, function (series) {
                            _this._removeSeries(series);
                        });
                        var colors = _this.get("colors");
                        if (colors) {
                            colors.reset();
                        }
                    }
                    else if (change.type === "push") {
                        children.moveValue(change.newValue);
                        _this._processSeries(change.newValue);
                    }
                    else if (change.type === "setIndex") {
                        children.setIndex(change.index, change.newValue);
                        _this._processSeries(change.newValue);
                    }
                    else if (change.type === "insertIndex") {
                        children.insertIndex(change.index, change.newValue);
                        _this._processSeries(change.newValue);
                    }
                    else if (change.type === "removeIndex") {
                        _this._removeSeries(change.oldValue);
                    }
                    else if (change.type === "moveIndex") {
                        children.moveValue(change.value, change.newIndex);
                        _this._processSeries(change.value);
                    }
                    else {
                        throw new Error("Unknown IListEvent type");
                    }
                }));
            }
        });
        Object.defineProperty(SerialChart.prototype, "_processSeries", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (series) {
                series.chart = this;
                series._placeBulletsContainer(this);
            }
        });
        Object.defineProperty(SerialChart.prototype, "_removeSeries", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (series) {
                if (!series.isDisposed()) {
                    this.seriesContainer.children.removeValue(series);
                    series._removeBulletsContainer();
                }
            }
        });
        Object.defineProperty(SerialChart, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "SerialChart"
        });
        Object.defineProperty(SerialChart, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Chart.classNames.concat([SerialChart.className])
        });
        return SerialChart;
    }(Chart));

    /**
     * Draws a tick element (mostly used on axes).
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info
     */
    var Tick = /** @class */ (function (_super) {
        __extends(Tick, _super);
        function Tick() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Tick, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Tick"
        });
        Object.defineProperty(Tick, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Line.classNames.concat([Tick.className])
        });
        return Tick;
    }(Line));

    function parseDate(timezone, date) {
        var year = 0;
        var month = 0;
        var day = 1;
        var hour = 0;
        var minute = 0;
        var second = 0;
        var millisecond = 0;
        var weekday = 0;
        timezone.formatToParts(date).forEach(function (x) {
            switch (x.type) {
                case "year":
                    year = +x.value;
                    break;
                case "month":
                    month = (+x.value) - 1;
                    break;
                case "day":
                    day = +x.value;
                    break;
                case "hour":
                    hour = +x.value;
                    break;
                case "minute":
                    minute = +x.value;
                    break;
                case "second":
                    second = +x.value;
                    break;
                case "fractionalSecond":
                    millisecond = +x.value;
                    break;
                case "weekday":
                    switch (x.value) {
                        case "Sun":
                            weekday = 0;
                            break;
                        case "Mon":
                            weekday = 1;
                            break;
                        case "Tue":
                            weekday = 2;
                            break;
                        case "Wed":
                            weekday = 3;
                            break;
                        case "Thu":
                            weekday = 4;
                            break;
                        case "Fri":
                            weekday = 5;
                            break;
                        case "Sat":
                            weekday = 6;
                            break;
                    }
            }
        });
        if (hour === 24) {
            hour = 0;
        }
        return { year: year, month: month, day: day, hour: hour, minute: minute, second: second, millisecond: millisecond, weekday: weekday };
    }
    function toUTCDate(timezone, date) {
        var _a = parseDate(timezone, date), year = _a.year, month = _a.month, day = _a.day, hour = _a.hour, minute = _a.minute, second = _a.second, millisecond = _a.millisecond;
        return Date.UTC(year, month, day, hour, minute, second, millisecond);
    }
    var Timezone = /** @class */ (function () {
        function Timezone(timezone, isReal) {
            Object.defineProperty(this, "_utc", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_dtf", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "name", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            if (!isReal) {
                throw new Error("You cannot use `new Class()`, instead use `Class.new()`");
            }
            this.name = timezone;
            this._utc = new Intl.DateTimeFormat("UTC", {
                hour12: false,
                timeZone: "UTC",
                year: "numeric",
                month: "2-digit",
                day: "2-digit",
                hour: "2-digit",
                minute: "2-digit",
                second: "2-digit",
                weekday: "short",
                fractionalSecondDigits: 3,
            });
            this._dtf = new Intl.DateTimeFormat("UTC", {
                hour12: false,
                timeZone: timezone,
                year: "numeric",
                month: "2-digit",
                day: "2-digit",
                hour: "2-digit",
                minute: "2-digit",
                second: "2-digit",
                weekday: "short",
                fractionalSecondDigits: 3,
            });
        }
        /**
         * Use this method to create an instance of this class.
         *
         * @see {@link https://www.amcharts.com/docs/v5/getting-started/#New_element_syntax} for more info
         * @param   timezone  IANA timezone
         * @return            Instantiated object
         */
        Object.defineProperty(Timezone, "new", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (timezone) {
                return (new this(timezone, true));
            }
        });
        Object.defineProperty(Timezone.prototype, "convertLocal", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (date) {
                var offset = this.offsetUTC(date);
                var userOffset = date.getTimezoneOffset();
                var output = new Date(date);
                output.setUTCMinutes(output.getUTCMinutes() - (offset - userOffset));
                var newUserOffset = output.getTimezoneOffset();
                if (userOffset != newUserOffset) {
                    output.setUTCMinutes(output.getUTCMinutes() + newUserOffset - userOffset);
                }
                return output;
            }
        });
        Object.defineProperty(Timezone.prototype, "offsetUTC", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (date) {
                var utc = toUTCDate(this._utc, date);
                var dtf = toUTCDate(this._dtf, date);
                return (utc - dtf) / 60000;
            }
        });
        Object.defineProperty(Timezone.prototype, "parseDate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (date) {
                return parseDate(this._dtf, date);
            }
        });
        return Timezone;
    }());

    /**
     * Radial gradient.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/gradients/} for more info
     */
    var RadialGradient = /** @class */ (function (_super) {
        __extends(RadialGradient, _super);
        function RadialGradient() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @ignore
         */
        Object.defineProperty(RadialGradient.prototype, "getFill", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (target) {
                var bounds = this.getBounds(target);
                var x = 0;
                var y = 0;
                var l = bounds.left || 0;
                var r = bounds.right || 0;
                var t = bounds.top || 0;
                var b = bounds.bottom || 0;
                var width = r - l;
                var height = b - t;
                var radius = target.get("radius");
                if (isNumber(radius)) {
                    x = 0;
                    y = 0;
                }
                else {
                    radius = Math.min(width, height) / 2;
                    x = width / 2;
                    y = height / 2;
                }
                var gradient = this._root._renderer.createRadialGradient(x, y, 0, x, y, radius);
                var stops = this.get("stops");
                if (stops) {
                    var i_1 = 0;
                    each$1(stops, function (stop) {
                        var offset = stop.offset;
                        if (!isNumber(offset)) {
                            offset = i_1 / (stops.length - 1);
                        }
                        var opacity = stop.opacity;
                        if (!isNumber(opacity)) {
                            opacity = 1;
                        }
                        var color = stop.color;
                        if (color) {
                            var lighten = stop.lighten;
                            if (lighten) {
                                color = Color.lighten(color, lighten);
                            }
                            var brighten = stop.brighten;
                            if (brighten) {
                                color = Color.brighten(color, brighten);
                            }
                            gradient.addColorStop(offset, 'rgba(' + color.r + ',' + color.g + ',' + color.b + ',' + opacity + ')');
                        }
                        i_1++;
                    });
                }
                return gradient;
            }
        });
        Object.defineProperty(RadialGradient, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "RadialGradient"
        });
        Object.defineProperty(RadialGradient, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Gradient.classNames.concat([RadialGradient.className])
        });
        return RadialGradient;
    }(Gradient));

    /**
     * Base class for patterns.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info
     */
    var Pattern = /** @class */ (function (_super) {
        __extends(Pattern, _super);
        function Pattern() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_display", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this._root._renderer.makeGraphics()
            });
            Object.defineProperty(_this, "_backgroundDisplay", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this._root._renderer.makeGraphics()
            });
            Object.defineProperty(_this, "_clear", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_pattern", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            return _this;
        }
        Object.defineProperty(Pattern.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                // Applying themes because pattern will not have parent
                _super.prototype._afterNewApplyThemes.call(this);
            }
        });
        Object.defineProperty(Pattern.prototype, "pattern", {
            get: function () {
                return this._pattern;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Pattern.prototype, "_draw", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () { }
        });
        Object.defineProperty(Pattern.prototype, "_beforeChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._beforeChanged.call(this);
                if (this.isDirty("repetition") || this.isDirty("width") || this.isDirty("height") || this.isDirty("rotation") || this.isDirty("color") || this.isDirty("strokeWidth") || this.isDirty("strokeDasharray") || this.isDirty("strokeDashoffset") || this.isDirty("colorOpacity") || this.isDirty("fill") || this.isDirty("fillOpacity")) {
                    this._clear = true;
                }
            }
        });
        Object.defineProperty(Pattern.prototype, "_changed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._changed.call(this);
                if (this._clear) {
                    var repetition = this.get("repetition", "");
                    var width = this.get("width", 100);
                    var height = this.get("height", 100);
                    var fill = this.get("fill");
                    var fillOpacity = this.get("fillOpacity", 1);
                    this._display.clear();
                    this._backgroundDisplay.clear();
                    if (fill && (fillOpacity > 0)) {
                        this._backgroundDisplay.beginFill(fill, fillOpacity);
                        this._backgroundDisplay.drawRect(0, 0, width, height);
                        this._backgroundDisplay.endFill();
                    }
                    this._display.angle = this.get("rotation", 0);
                    //this._display.pivot = { x: width / 2, y: height / 2 };
                    this._draw();
                    this._pattern = this._root._renderer.createPattern(this._display, this._backgroundDisplay, repetition, width, height);
                }
            }
        });
        Object.defineProperty(Pattern, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Pattern"
        });
        Object.defineProperty(Pattern, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Entity.classNames.concat([Pattern.className])
        });
        return Pattern;
    }(Entity));

    /**
     * Circle pattern.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info
     */
    var CirclePattern = /** @class */ (function (_super) {
        __extends(CirclePattern, _super);
        function CirclePattern() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(CirclePattern.prototype, "_beforeChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._beforeChanged.call(this);
                if (this.isDirty("gap")) {
                    this._clear = true;
                }
            }
        });
        Object.defineProperty(CirclePattern.prototype, "_draw", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._draw.call(this);
                var checkered = this.get("checkered", false);
                var centered = this.get("centered", true);
                var gap = this.get("gap", 0);
                var rotation = this.get("rotation", 0);
                var w = this.get("width", 100);
                var h = this.get("height", 100);
                var radius = this.get("radius", 3);
                var cellW = radius * 2 + gap;
                var cellH = radius * 2 + gap;
                var cols = Math.round(w / cellW);
                var rows = Math.round(h / cellH);
                cellW = w / cols;
                cellH = h / rows;
                if (rotation != 0) {
                    // @todo this is probably not right
                    this._display.x = cellW * cos$1(rotation);
                    this._display.y = cellH * sin$1(rotation);
                }
                var color = this.get("color");
                var colorOpacity = this.get("colorOpacity");
                if (color || colorOpacity) {
                    this._display.beginFill(color, colorOpacity);
                }
                for (var r = rotation == 0 ? 0 : -rows * 2; r < rows * 2; r++) {
                    for (var c = rotation == 0 ? 0 : -cols * 2; c < cols * 2; c++) {
                        if (!checkered || ((r & 1) != 1 && (c & 1) != 1) || ((r & 1) == 1 && (c & 1) == 1)) {
                            var x = c * cellW;
                            var y = r * cellH;
                            if (centered) {
                                x += cellW + gap / 2;
                                y += cellH + gap / 2;
                            }
                            this._display.drawCircle(x - radius, y - radius, radius);
                        }
                    }
                }
                if (checkered) {
                    w = w / 2 - gap * 2;
                    h = h / 2 - gap * 2;
                }
                else {
                    w -= gap;
                    h -= gap;
                }
                if (color || colorOpacity) {
                    this._display.endFill();
                }
            }
        });
        Object.defineProperty(CirclePattern, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "CirclePattern"
        });
        Object.defineProperty(CirclePattern, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Pattern.classNames.concat([CirclePattern.className])
        });
        return CirclePattern;
    }(Pattern));

    /**
     * Line pattern.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info
     */
    var LinePattern = /** @class */ (function (_super) {
        __extends(LinePattern, _super);
        function LinePattern() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(LinePattern.prototype, "_beforeChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._beforeChanged.call(this);
                if (this.isDirty("gap")) {
                    this._clear = true;
                }
            }
        });
        Object.defineProperty(LinePattern.prototype, "_draw", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._draw.call(this);
                var w = this.get("width", 100);
                var h = this.get("height", 100);
                var gap = this.get("gap", 0);
                var strokeWidth = this.get("strokeWidth", 1);
                if (!gap) {
                    this._display.moveTo(0, 0);
                    this._display.lineTo(w, 0);
                }
                else {
                    var step = gap + strokeWidth;
                    var count = h / step;
                    for (var i = -count; i < count * 2; i++) {
                        var y = Math.round(i * step - step / 2) + 0.5;
                        this._display.moveTo(-w, y);
                        this._display.lineTo(w * 2, y);
                    }
                }
                this._display.lineStyle(strokeWidth, this.get("color"), this.get("colorOpacity"));
                var strokeDasharray = this.get("strokeDasharray");
                if (isNumber(strokeDasharray)) {
                    if (strokeDasharray < 0.5) {
                        strokeDasharray = [0];
                    }
                    else {
                        strokeDasharray = [strokeDasharray];
                    }
                }
                this._display.setLineDash(strokeDasharray);
                var strokeDashoffset = this.get("strokeDashoffset");
                if (strokeDashoffset) {
                    this._display.setLineDashOffset(strokeDashoffset);
                }
                this._display.endStroke();
            }
        });
        Object.defineProperty(LinePattern, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "LinePattern"
        });
        Object.defineProperty(LinePattern, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Pattern.classNames.concat([LinePattern.className])
        });
        return LinePattern;
    }(Pattern));

    /**
     * Rectangle pattern.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info
     */
    var RectanglePattern = /** @class */ (function (_super) {
        __extends(RectanglePattern, _super);
        function RectanglePattern() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(RectanglePattern.prototype, "_beforeChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._beforeChanged.call(this);
                if (this.isDirty("gap")) {
                    this._clear = true;
                }
            }
        });
        Object.defineProperty(RectanglePattern.prototype, "_draw", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._draw.call(this);
                var checkered = this.get("checkered", false);
                var centered = this.get("centered", true);
                var gap = this.get("gap", 0);
                var rotation = this.get("rotation", 0);
                var w = this.get("width", 100);
                var h = this.get("height", 100);
                var rectW = this.get("maxWidth", 5);
                var rectH = this.get("maxHeight", 5);
                var cellW = rectW + gap;
                var cellH = rectH + gap;
                var cols = Math.round(w / cellW);
                var rows = Math.round(h / cellH);
                cellW = w / cols;
                cellH = h / rows;
                if (rotation != 0) {
                    // @todo this is probably not right
                    this._display.x = cellW / 2 * cos$1(rotation);
                    this._display.y = -cellH / 2 * sin$1(rotation);
                }
                for (var r = rotation == 0 ? 0 : -rows * 2; r < rows * 2; r++) {
                    for (var c = rotation == 0 ? 0 : -cols * 2; c < cols * 2; c++) {
                        if (!checkered || ((r & 1) != 1 && (c & 1) != 1) || ((r & 1) == 1 && (c & 1) == 1)) {
                            var x = c * cellW;
                            var y = r * cellH;
                            if (centered) {
                                x += (cellW - rectW) / 2;
                                y += (cellH - rectH) / 2;
                            }
                            this._display.drawRect(x, y, rectW, rectH);
                        }
                    }
                }
                if (checkered) {
                    w = w / 2 - gap * 2;
                    h = h / 2 - gap * 2;
                }
                else {
                    w -= gap;
                    h -= gap;
                }
                var color = this.get("color");
                var colorOpacity = this.get("colorOpacity");
                if (color || colorOpacity) {
                    // this._display.lineStyle(strokeWidth, stroke, colorOpacity);
                    // this._display.endStroke();
                    this._display.beginFill(color, colorOpacity);
                    this._display.endFill();
                }
            }
        });
        Object.defineProperty(RectanglePattern, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "RectanglePattern"
        });
        Object.defineProperty(RectanglePattern, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Pattern.classNames.concat([RectanglePattern.className])
        });
        return RectanglePattern;
    }(Pattern));

    /**
     * An object which holds list of colors and can generate new ones.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/#Color_sets} for more info
     */
    var ColorSet = /** @class */ (function (_super) {
        __extends(ColorSet, _super);
        function ColorSet() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        //protected _currentPass: number = 0;
        Object.defineProperty(ColorSet.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                // Applying themes because color set will not have parent
                _super.prototype._afterNewApplyThemes.call(this);
            }
        });
        Object.defineProperty(ColorSet.prototype, "_beforeChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (this.isDirty("colors")) {
                    this.reset();
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(ColorSet.prototype, "generateColors", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.setPrivate("currentPass", this.getPrivate("currentPass", 0) + 1);
                var pass = this.getPrivate("currentPass");
                var colors = this.get("colors", [this.get("baseColor", Color.fromHex(0xff0000))]);
                if (!this.getPrivate("numColors")) {
                    this.setPrivate("numColors", colors.length);
                }
                //const len = colors.length;
                var len = this.getPrivate("numColors");
                //const start = len - this.getPrivate("numColors")!;
                var start = 0;
                var passOptions = this.get("passOptions");
                var reuse = this.get("reuse");
                for (var i = start; i < len; i++) {
                    if (reuse) {
                        colors.push(colors[i]);
                    }
                    else {
                        var hsl = colors[i].toHSL();
                        var h = hsl.h + (passOptions.hue || 0) * pass;
                        while (h > 1)
                            h -= 1;
                        var s = hsl.s + (passOptions.saturation || 0) * pass;
                        //if (s > 1) s -= Math.floor(s);
                        if (s > 1)
                            s = 1;
                        if (s < 0)
                            s = 0;
                        var l = hsl.l + (passOptions.lightness || 0) * pass;
                        //if (l > 1) l -= Math.floor(l);
                        while (l > 1)
                            l -= 1;
                        colors.push(Color.fromHSL(h, s, l));
                    }
                }
            }
        });
        /**
         * Returns a [[Color]] at specific index.
         *
         * If there's no color at this index, a new color is generated.
         *
         * @param   index  Index
         * @return         Color
         */
        Object.defineProperty(ColorSet.prototype, "getIndex", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (index) {
                var colors = this.get("colors", []);
                var saturation = this.get("saturation");
                if (index >= colors.length) {
                    this.generateColors();
                    return this.getIndex(index);
                }
                return saturation != null ? Color.saturate(colors[index], saturation) : colors[index];
            }
        });
        /**
         * Returns next [[Color]] in the list.
         *
         * If the list is out of colors, new ones are generated dynamically.
         */
        Object.defineProperty(ColorSet.prototype, "next", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var currentStep = this.getPrivate("currentStep", this.get("startIndex", 0));
                this.setPrivate("currentStep", currentStep + this.get("step", 1));
                return this.getIndex(currentStep);
            }
        });
        /**
         * Resets counter to the start of the list, so the next call for `next()` will
         * return the first color.
         */
        Object.defineProperty(ColorSet.prototype, "reset", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.setPrivate("currentStep", this.get("startIndex", 0));
                this.setPrivate("currentPass", 0);
            }
        });
        Object.defineProperty(ColorSet, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "ColorSet"
        });
        Object.defineProperty(ColorSet, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Entity.classNames.concat([ColorSet.className])
        });
        return ColorSet;
    }(Entity));

    /**
     * Tool to parse JSON string into structured data.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/data/#Parsing} for more info
     * @important
     */
    var JSONParser = /** @class */ (function () {
        function JSONParser() {
        }
        /**
         * Parses JSON string.
         *
         * @param   input    JSON
         * @param   options  Options
         * @return           Data
         */
        Object.defineProperty(JSONParser, "parse", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (input, options) {
                options = this._applyDefaults(options);
                try {
                    if (isString(input)) {
                        var data = JSON.parse(input);
                        if (options.reverse && isArray(data)) {
                            data.reverse();
                        }
                        return data;
                    }
                    else if (isArray(input) || isObject(input)) {
                        return input;
                    }
                    else {
                        throw ("Unable to parse JSON data");
                    }
                }
                catch (e) {
                    return undefined;
                }
            }
        });
        Object.defineProperty(JSONParser, "_applyDefaults", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (options) {
                var normalized = {};
                var defaults = {
                    reverse: false
                };
                if (!options) {
                    options = {};
                }
                each(defaults, function (key, val) {
                    normalized[key] = options[key] || val;
                });
                return normalized;
            }
        });
        return JSONParser;
    }());
    /**
     * Tool to parse JSON string into structured data.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/data/#Parsing} for more info
     * @important
     */
    var CSVParser = /** @class */ (function () {
        function CSVParser() {
        }
        /**
         * Parses CSV string.
         *
         * @param   input    CSV
         * @param   options  Options
         * @return           Data
         */
        Object.defineProperty(CSVParser, "parse", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (input, options) {
                options = this._applyDefaults(options);
                // Get CSV data as array
                var data = this.CSVToArray(input, options.delimiter);
                // Init resuling array
                var res = [], cols = [], col, i;
                // Skip rows
                for (i = 0; i < options.skipRows; i++) {
                    data.shift();
                }
                // First row holds column names?
                if (options.useColumnNames) {
                    cols = data.shift();
                    // Normalize column names
                    for (var x = 0; x < cols.length; x++) {
                        // trim
                        col = cols[x] != null ? cols[x].replace(/^\s+|\s+$/gm, "") : "";
                        // Check for empty
                        if ("" === col) {
                            col = "col" + x;
                        }
                        cols[x] = col;
                    }
                }
                // Iterate through the result set
                var row;
                while (true) {
                    row = options.reverse ? data.pop() : data.shift();
                    if (!row) {
                        break;
                    }
                    if (options.skipEmpty && row.length === 1 && row[0] === "") {
                        continue;
                    }
                    var dataPoint = {};
                    for (i = 0; i < row.length; i++) {
                        col = undefined === cols[i] ? "col" + i : cols[i];
                        dataPoint[col] = row[i];
                    }
                    res.push(dataPoint);
                }
                return res;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(CSVParser, "CSVToArray", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (data, delimiter) {
                // Check to see if the delimiter is defined. If not,
                // then default to comma.
                delimiter = (delimiter || ',');
                // Create a regular expression to parse the CSV values.
                var objPattern = new RegExp((
                // Delimiters.
                "(\\" + delimiter + "|\\r?\\n|\\r|^)" +
                    // Quoted fields.
                    "(?:\"([^\"]*(?:\"\"[^\"]*)*)\"|" +
                    // Standard fields.
                    "([^\"\\" + delimiter + "\\r\\n]*))"), "gi");
                // Create an array to hold our data. Give the array
                // a default empty first row.
                var arrData = [
                    []
                ];
                // Create an array to hold our individual pattern
                // matching groups.
                var arrMatches = null;
                // Keep looping over the regular expression matches
                // until we can no longer find a match.
                while (true) {
                    arrMatches = objPattern.exec(data);
                    if (!arrMatches) {
                        break;
                    }
                    // Get the delimiter that was found.
                    var strMatchedDelimiter = arrMatches[1];
                    // Check to see if the given delimiter has a length
                    // (is not the start of string) and if it matches
                    // field delimiter. If id does not, then we know
                    // that this delimiter is a row delimiter.
                    if (strMatchedDelimiter.length &&
                        (strMatchedDelimiter !== delimiter)) {
                        // Since we have reached a new row of data,
                        // add an empty row to our data array.
                        arrData.push([]);
                    }
                    // Now that we have our delimiter out of the way,
                    // let's check to see which kind of value we
                    // captured (quoted or unquoted).
                    var strMatchedValue = void 0;
                    if (arrMatches[2]) {
                        // We found a quoted value. When we capture
                        // this value, unescape any double quotes.
                        strMatchedValue = arrMatches[2].replace(new RegExp("\"\"", "g"), "\"");
                    }
                    else {
                        // We found a non-quoted value.
                        strMatchedValue = arrMatches[3];
                    }
                    // Now that we have our value string, let's add
                    // it to the data array.
                    arrData[arrData.length - 1].push(strMatchedValue);
                }
                // Return the parsed data.
                return (arrData);
            }
        });
        Object.defineProperty(CSVParser, "_applyDefaults", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (options) {
                var normalized = {};
                var defaults = {
                    delimiter: ",",
                    reverse: false,
                    skipRows: 0,
                    skipEmpty: true,
                    useColumnNames: false
                };
                if (!options) {
                    options = {};
                }
                each(defaults, function (key, val) {
                    normalized[key] = options[key] || val;
                });
                return normalized;
            }
        });
        return CSVParser;
    }());

    /**
     * A tool that can process the data before it is being used in charts.
     *
     * @see {@link https://www.amcharts.com/docs/v5/concepts/data/#Pre_processing_data} for more info
     * @important
     */
    var DataProcessor = /** @class */ (function (_super) {
        __extends(DataProcessor, _super);
        function DataProcessor() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_checkDates", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_checkNumbers", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_checkColors", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_checkEmpty", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_checkDeep", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            return _this;
        }
        Object.defineProperty(DataProcessor.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                _super.prototype._afterNew.call(this);
                this._checkFeatures();
                this.on("dateFields", function () { return _this._checkFeatures(); });
                this.on("dateFormat", function () { return _this._checkFeatures(); });
                this.on("numericFields", function () { return _this._checkFeatures(); });
                this.on("colorFields", function () { return _this._checkFeatures(); });
                this.on("emptyAs", function () { return _this._checkFeatures(); });
            }
        });
        Object.defineProperty(DataProcessor.prototype, "_checkFeatures", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (this.isDirty("dateFields") || this.isDirty("dateFormat")) {
                    this._checkDates = this.get("dateFields") && (this.get("dateFields").length > 0);
                }
                if (this.isDirty("numericFields")) {
                    this._checkNumbers = this.get("numericFields") && (this.get("numericFields").length > 0);
                }
                if (this.isDirty("colorFields")) {
                    this._checkColors = this.get("colorFields") && (this.get("colorFields").length > 0);
                }
                if (this.isDirty("emptyAs")) {
                    this._checkEmpty = this.get("emptyAs") != null;
                }
                this._checkDeepFeatures();
            }
        });
        Object.defineProperty(DataProcessor.prototype, "_checkDeepFeatures", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                var deepFields = [];
                each$1(["dateFields", "numericFields", "colorFields"], function (where) {
                    each$1(_this.get(where, []), function (field) {
                        var steps = field.split(".");
                        steps.pop();
                        while (steps.length > 0) {
                            deepFields.push(steps.join("."));
                            steps.pop();
                        }
                    });
                });
                this._checkDeep = deepFields.length > 0;
                this.setPrivate("deepFields", deepFields);
            }
        });
        /**
         * Processess entire array of data.
         *
         * NOTE: calling this will modify original array!
         */
        Object.defineProperty(DataProcessor.prototype, "processMany", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (data) {
                var _this = this;
                if (isArray(data) && (this._checkDates || this._checkNumbers || this._checkColors || this._checkEmpty)) {
                    each$1(data, function (row) {
                        _this.processRow(row);
                    });
                }
            }
        });
        /**
         * Processes a row (object) of data.
         *
         * NOTE: calling this will modify values of the original object!
         */
        Object.defineProperty(DataProcessor.prototype, "processRow", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (row, prefix) {
                var _this = this;
                if (prefix === void 0) { prefix = ""; }
                each(row, function (key, _value) {
                    var lookupKey = prefix + key;
                    if (_this._checkEmpty) {
                        row[key] = _this._maybeToEmpty(row[key]);
                    }
                    if (_this._checkNumbers) {
                        row[key] = _this._maybeToNumber(lookupKey, row[key]);
                    }
                    if (_this._checkDates) {
                        row[key] = _this._maybeToDate(lookupKey, row[key]);
                    }
                    if (_this._checkColors) {
                        row[key] = _this._maybeToColor(lookupKey, row[key]);
                    }
                    if (_this._checkDeep && _this.getPrivate("deepFields", []).indexOf(lookupKey) !== -1 && isObject(row[key])) {
                        _this.processRow(row[key], lookupKey + ".");
                    }
                });
            }
        });
        Object.defineProperty(DataProcessor.prototype, "_maybeToNumber", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (field, value) {
                if (this.get("numericFields").indexOf(field) !== -1) {
                    return toNumber(value);
                }
                return value;
            }
        });
        Object.defineProperty(DataProcessor.prototype, "_maybeToDate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (field, value) {
                if (this.get("dateFields").indexOf(field) !== -1) {
                    return this._root.dateFormatter.parse(value, this.get("dateFormat", "")).getTime();
                }
                return value;
            }
        });
        Object.defineProperty(DataProcessor.prototype, "_maybeToEmpty", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value) {
                if ((value == null || value == "") && this.get("emptyAs") != null) {
                    return this.get("emptyAs");
                }
                return value;
            }
        });
        Object.defineProperty(DataProcessor.prototype, "_maybeToColor", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (field, value) {
                if (this.get("colorFields").indexOf(field) !== -1) {
                    return Color.fromAny(value);
                }
                return value;
            }
        });
        return DataProcessor;
    }(Entity));

    /**
     * A collection of network-related functions
     */
    /**
     * Loads an external file via its URL.
     *
     * Please note that this is an asynchronous function.
     *
     * It will not return the result, but rather a `Promise`.
     *
     * You can use the `await` notion, or `then()`.
     *
     * ```TypeScript
     * // Using await
     * let response = await Net.load( "http://www.my.com/data.json" );
     * console.log( response.response );
     *
     * // Using then()
     * Net.load( "http://www.my.com/data.json" ).then( ( response ) => {
     *   console.log( response.response );
     * } );
     * ```
     * ```JavaScript
     * // Using then()
     * Net.load( "http://www.my.com/data.json" ).then( function( response ) {
     *   console.log( response.response );
     * } );
     * ```
     *
     * @async
     * @see {@link https://www.amcharts.com/docs/v5/concepts/data/net-load-utility/} for more info
     * @param url      URL for the file to load
     * @param target   A target element that is requesting the net load
     * @param options  Request options
     * @return Result (Promise)
     */
    function load(url, target, options) {
        return new Promise(function (success, error) {
            // Is return type Blob?
            var isBlob = options != null && options.responseType == "blob";
            // Create request and set up handlers
            var xhr = new XMLHttpRequest();
            xhr.onload = function () {
                if (xhr.status === 200) {
                    var response = void 0;
                    var blob_1;
                    if (isBlob) {
                        blob_1 = xhr.response;
                        readBlob(blob_1).then(function (response) {
                            var output = {
                                xhr: xhr,
                                error: false,
                                response: response,
                                blob: blob_1,
                                type: xhr.getResponseHeader("Content-Type"),
                                target: target
                            };
                            success(output);
                        });
                        return;
                    }
                    else {
                        response = xhr.responseText || xhr.response;
                    }
                    var output = {
                        xhr: xhr,
                        error: false,
                        response: response,
                        blob: blob_1,
                        type: xhr.getResponseHeader("Content-Type"),
                        target: target
                    };
                    success(output);
                }
                else {
                    error({
                        xhr: xhr,
                        error: true,
                        type: xhr.getResponseHeader("Content-Type"),
                        target: target
                    });
                }
            };
            xhr.onerror = function () {
                error({
                    xhr: xhr,
                    error: true,
                    type: xhr.getResponseHeader("Content-Type"),
                    target: target
                });
            };
            // Open request
            xhr.open("GET", url, true);
            if (options && options.withCredentials) {
                xhr.withCredentials = true;
            }
            // Process options
            if (options != null) {
                if (options.requestHeaders != null) {
                    for (var i = 0; i < options.requestHeaders.length; i++) {
                        var header = options.requestHeaders[i];
                        xhr.setRequestHeader(header.key, header.value);
                    }
                }
                if (options.responseType != null) {
                    xhr.responseType = options.responseType;
                }
            }
            // Send request
            xhr.send();
        });
    }
    /**
     * Returns textual representation of a Blob object.
     *
     * @param   blob  Target blob
     * @return        Text promise
     */
    function readBlob(blob) {
        return new Promise(function (success, error) {
            var reader = new FileReader();
            reader.onload = function (_event) {
                success(reader.result);
            };
            reader.onerror = function (e) {
                error(e);
            };
            reader.readAsText(blob);
        });
    }

    var Net = /*#__PURE__*/Object.freeze({
        __proto__: null,
        load: load,
        readBlob: readBlob
    });

    var am5 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        array: Array$1,
        ease: Ease,
        math: Math$1,
        net: Net,
        object: Object$1,
        time: Time,
        type: Type,
        utils: Utils,
        Root: Root,
        Theme: Theme,
        addLicense: addLicense,
        registry: registry,
        disposeAllRootElements: disposeAllRootElements,
        ready: ready,
        Modal: Modal,
        Entity: Entity,
        Bullet: Bullet,
        Button: Button,
        Circle: Circle,
        Ellipse: Ellipse,
        Star: Star,
        Component: Component,
        DataItem: DataItem,
        Container: Container,
        Graphics: Graphics,
        GridLayout: GridLayout,
        HeatLegend: HeatLegend,
        HorizontalLayout: HorizontalLayout,
        Label: Label,
        Layout: Layout,
        Legend: Legend,
        Line: Line,
        Picture: Picture,
        PointedRectangle: PointedRectangle,
        RadialLabel: RadialLabel,
        RadialText: RadialText,
        Rectangle: Rectangle,
        Triangle: Triangle,
        RoundedRectangle: RoundedRectangle,
        Scrollbar: Scrollbar,
        Slider: Slider,
        Slice: Slice,
        Sprite: Sprite,
        Series: Series,
        Chart: Chart,
        SerialChart: SerialChart,
        Text: Text,
        Tick: Tick,
        Tooltip: Tooltip,
        VerticalLayout: VerticalLayout,
        Timezone: Timezone,
        Gradient: Gradient,
        LinearGradient: LinearGradient,
        RadialGradient: RadialGradient,
        CirclePattern: CirclePattern,
        LinePattern: LinePattern,
        Pattern: Pattern,
        RectanglePattern: RectanglePattern,
        Color: Color,
        color: color,
        ColorSet: ColorSet,
        ListData: ListData,
        JsonData: JsonData,
        JSONParser: JSONParser,
        CSVParser: CSVParser,
        DataProcessor: DataProcessor,
        DateFormatter: DateFormatter,
        DurationFormatter: DurationFormatter,
        InterfaceColors: InterfaceColors,
        NumberFormatter: NumberFormatter,
        Percent: Percent,
        percent: percent,
        p100: p100,
        p50: p50,
        p0: p0,
        Template: Template,
        TextFormatter: TextFormatter
    });

    /**
     * @ignore
     */
    var XYChartDefaultTheme = /** @class */ (function (_super) {
        __extends(XYChartDefaultTheme, _super);
        function XYChartDefaultTheme() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(XYChartDefaultTheme.prototype, "setupDefaultRules", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                _super.prototype.setupDefaultRules.call(this);
                var ic = this._root.interfaceColors;
                var language = this._root.language;
                var r = this.rule.bind(this);
                /**
                 * ========================================================================
                 * charts/xy
                 * ========================================================================
                 */
                r("XYChart").setAll({
                    colors: ColorSet.new(this._root, {}),
                    paddingLeft: 20,
                    paddingRight: 20,
                    paddingTop: 16,
                    paddingBottom: 16,
                    panX: false,
                    panY: false,
                    wheelStep: 0.25,
                    arrangeTooltips: true,
                    pinchZoomX: false,
                    pinchZoomY: false
                });
                /**
                 * ------------------------------------------------------------------------
                 * charts/xy: XYChartScrollbar
                 * ------------------------------------------------------------------------
                 */
                r("XYChart", ["scrollbar", "chart"]).setAll({
                    paddingBottom: 0,
                    paddingLeft: 0,
                    paddingTop: 0,
                    paddingRight: 0,
                    colors: ColorSet.new(this._root, {
                        saturation: 0
                    })
                });
                {
                    var rule = r("Graphics", ["scrollbar", "overlay"]);
                    rule.setAll({
                        fillOpacity: 0.5
                    });
                    setColor(rule, "fill", ic, "background");
                }
                // Class: RoundedRectangle
                r("RoundedRectangle", ["xy", "scrollbar", "thumb"]).setAll({
                    cornerRadiusTR: 0,
                    cornerRadiusTL: 0,
                    cornerRadiusBR: 0,
                    cornerRadiusBL: 0,
                    fillOpacity: 0,
                    focusable: true
                });
                r("RoundedRectangle", ["xy", "scrollbar", "thumb"]).states.create("hover", { fillOpacity: 0.4 });
                r("RoundedRectangle", ["xy", "scrollbar", "chart", "background"]).setAll({
                    cornerRadiusTL: 0,
                    cornerRadiusBL: 0,
                    cornerRadiusTR: 0,
                    cornerRadiusBR: 0
                });
                r("RoundedRectangle", ["xy", "scrollbar", "chart", "background", "resize", "button"]).setAll({
                    cornerRadiusBL: 40,
                    cornerRadiusBR: 40,
                    cornerRadiusTL: 40,
                    cornerRadiusTR: 40
                });
                r("AxisRendererX", ["xy", "chart", "scrollbar"]).setAll({
                    strokeOpacity: 0,
                    inside: true
                });
                r("AxisRendererY", ["xy", "chart", "scrollbar"]).setAll({
                    strokeOpacity: 0,
                    inside: true,
                    minGridDistance: 5
                });
                r("AxisLabel", ["xy", "scrollbar", "x"]).setAll({
                    opacity: 0.5,
                    centerY: p100,
                    minPosition: 0.01,
                    maxPosition: 0.99,
                    fontSize: "0.8em"
                });
                r("AxisLabel", ["category"]).setAll({
                    text: "{category}",
                    populateText: true
                });
                r("AxisLabel", ["x"]).setAll({
                    centerY: 0
                });
                r("AxisLabel", ["x", "inside"]).setAll({
                    centerY: p100
                });
                r("AxisLabel", ["x", "inside", "opposite"]).setAll({
                    centerY: 0
                });
                r("AxisLabel", ["x", "opposite"]).setAll({
                    centerY: p100
                });
                r("AxisLabel", ["y"]).setAll({
                    centerX: p100
                });
                r("AxisLabel", ["y", "inside"]).setAll({
                    centerX: 0
                });
                r("AxisLabel", ["y", "inside", "opposite"]).setAll({
                    centerX: p100
                });
                r("AxisLabel", ["y", "opposite"]).setAll({
                    centerX: 0
                });
                r("AxisLabel", ["xy", "scrollbar", "y"]).setAll({
                    visible: false
                });
                // Class: Grid
                r("Grid", ["xy", "scrollbar", "y"]).setAll({
                    visible: false
                });
                // Class: Grid
                r("Grid", ["xy", "scrollbar", "x"]).setAll({
                    opacity: 0.5
                });
                /**
                 * ------------------------------------------------------------------------
                 * charts/xy: Cursor
                 * ------------------------------------------------------------------------
                 */
                r("XYCursor").setAll({
                    behavior: "none",
                    layer: 30,
                    exportable: false,
                    snapToSeriesBy: "xy"
                });
                {
                    var rule = r("Grid", ["cursor", "x"]);
                    rule.setAll({
                        strokeOpacity: 0.8,
                        strokeDasharray: [2, 2]
                    });
                    setColor(rule, "stroke", ic, "alternativeBackground");
                }
                {
                    var rule = r("Grid", ["cursor", "y"]);
                    rule.setAll({
                        strokeOpacity: 0.8,
                        strokeDasharray: [2, 2]
                    });
                    setColor(rule, "stroke", ic, "alternativeBackground");
                }
                {
                    var rule = r("Graphics", ["cursor", "selection"]);
                    rule.setAll({
                        fillOpacity: 0.15,
                    });
                    setColor(rule, "fill", ic, "alternativeBackground");
                }
                /**
                 * ------------------------------------------------------------------------
                 * charts/xy: Axes
                 * ------------------------------------------------------------------------
                 */
                r("Axis").setAll({
                    start: 0,
                    end: 1,
                    minZoomCount: 1,
                    maxZoomCount: Infinity,
                    maxZoomFactor: 1000,
                    maxDeviation: 0.1,
                    snapTooltip: true,
                    tooltipLocation: 0.5,
                    panX: true,
                    panY: true,
                    zoomX: true,
                    zoomY: true,
                    fixAxisSize: true
                });
                r("AxisLabel").setAll({
                    location: 0.5,
                    multiLocation: 0,
                    centerX: p50,
                    centerY: p50,
                    paddingTop: 3,
                    paddingBottom: 3,
                    paddingLeft: 5,
                    paddingRight: 5
                });
                // The following is deprecated following text measuring updates in 5.0.5
                // r("AxisLabel", ["y"]).setAll({
                // 	textAlign: "right"
                // });
                // r("AxisLabel", ["y", "opposite"]).setAll({
                // 	textAlign: "left"
                // });
                r("Container", ["axis", "header"]).setAll({
                    layer: 30
                });
                {
                    var rule = r("AxisRenderer");
                    rule.setAll({
                        strokeOpacity: 0
                    });
                    setColor(rule, "stroke", ic, "grid");
                }
                r("AxisRendererX").setAll({
                    minGridDistance: 120,
                    opposite: false,
                    inversed: false,
                    cellStartLocation: 0,
                    cellEndLocation: 1,
                    width: p100
                });
                r("AxisRendererY").setAll({
                    minGridDistance: 40,
                    opposite: false,
                    inversed: false,
                    cellStartLocation: 0,
                    cellEndLocation: 1,
                    height: p100
                });
                {
                    var rule = r("Rectangle", ["axis", "thumb"]);
                    rule.setAll({
                        fillOpacity: 0
                    });
                    setColor(rule, "fill", ic, "alternativeBackground");
                    rule.states.create("hover", { fillOpacity: 0.1 });
                }
                r("Rectangle", ["axis", "thumb", "x"]).setAll({
                    cursorOverStyle: "ew-resize"
                });
                r("Rectangle", ["axis", "thumb", "y"]).setAll({
                    cursorOverStyle: "ns-resize"
                });
                {
                    var rule = r("Grid");
                    rule.setAll({
                        location: 0,
                        strokeOpacity: 0.15,
                    });
                    setColor(rule, "stroke", ic, "grid");
                }
                r("Grid", ["base"]).setAll({
                    strokeOpacity: 0.3
                });
                {
                    var rule = r("Graphics", ["axis", "fill"]);
                    rule.setAll({
                        visible: false,
                        isMeasured: false,
                        position: "absolute",
                        fillOpacity: 0.05,
                    });
                    setColor(rule, "fill", ic, "alternativeBackground");
                }
                r("Graphics", ["axis", "fill", "range"]).setAll({
                    isMeasured: true
                });
                // hides all elements of series axis range
                r("Graphics", ["series", "fill", "range"]).setAll({
                    visible: false,
                    isMeasured: true
                });
                r("Grid", ["series", "range"]).setAll({
                    visible: false
                });
                r("AxisTick", ["series", "range"]).setAll({
                    visible: false
                });
                r("AxisLabel", ["series", "range"]).setAll({
                    visible: false
                });
                {
                    var rule = r("AxisTick");
                    rule.setAll({
                        location: 0.5,
                        multiLocation: 0,
                        strokeOpacity: 1,
                        isMeasured: false,
                        position: "absolute",
                        visible: false
                    });
                    setColor(rule, "stroke", ic, "grid");
                }
                r("CategoryAxis").setAll({
                    startLocation: 0,
                    endLocation: 1,
                    fillRule: function (dataItem, index) {
                        var axisFill = dataItem.get("axisFill");
                        if (axisFill) {
                            if (!isNumber(index) || index % 2 == 0) {
                                axisFill.setPrivate("visible", true);
                            }
                            else {
                                axisFill.setPrivate("visible", false);
                            }
                        }
                    }
                });
                var gridIntervals = [
                    { timeUnit: "millisecond", count: 1 },
                    { timeUnit: "millisecond", count: 5 },
                    { timeUnit: "millisecond", count: 10 },
                    { timeUnit: "millisecond", count: 50 },
                    { timeUnit: "millisecond", count: 100 },
                    { timeUnit: "millisecond", count: 500 },
                    { timeUnit: "second", count: 1 },
                    { timeUnit: "second", count: 5 },
                    { timeUnit: "second", count: 10 },
                    { timeUnit: "second", count: 30 },
                    { timeUnit: "minute", count: 1 },
                    { timeUnit: "minute", count: 5 },
                    { timeUnit: "minute", count: 10 },
                    { timeUnit: "minute", count: 15 },
                    { timeUnit: "minute", count: 30 },
                    { timeUnit: "hour", count: 1 },
                    { timeUnit: "hour", count: 3 },
                    { timeUnit: "hour", count: 6 },
                    { timeUnit: "hour", count: 12 },
                    { timeUnit: "day", count: 1 },
                    { timeUnit: "day", count: 2 },
                    { timeUnit: "day", count: 3 },
                    { timeUnit: "day", count: 4 },
                    { timeUnit: "day", count: 5 },
                    { timeUnit: "week", count: 1 },
                    { timeUnit: "month", count: 1 },
                    { timeUnit: "month", count: 2 },
                    { timeUnit: "month", count: 3 },
                    { timeUnit: "month", count: 6 },
                    { timeUnit: "year", count: 1 },
                    { timeUnit: "year", count: 2 },
                    { timeUnit: "year", count: 5 },
                    { timeUnit: "year", count: 10 },
                    { timeUnit: "year", count: 50 },
                    { timeUnit: "year", count: 100 },
                    { timeUnit: "year", count: 200 },
                    { timeUnit: "year", count: 500 },
                    { timeUnit: "year", count: 1000 },
                    { timeUnit: "year", count: 2000 },
                    { timeUnit: "year", count: 5000 },
                    { timeUnit: "year", count: 10000 },
                    { timeUnit: "year", count: 100000 }
                ];
                var dateFormats = {
                    "millisecond": language.translate("_date_millisecond"),
                    "second": language.translate("_date_second"),
                    "minute": language.translate("_date_minute"),
                    "hour": language.translate("_date_hour"),
                    "day": language.translate("_date_day"),
                    "week": language.translate("_date_day"),
                    "month": language.translate("_date_month"),
                    "year": language.translate("_date_year")
                };
                var periodChangeDateFormats = {
                    "millisecond": language.translate("_date_millisecond"),
                    "second": language.translate("_date_second"),
                    "minute": language.translate("_date_minute"),
                    "hour": language.translate("_date_day"),
                    "day": language.translate("_date_day"),
                    "week": language.translate("_date_day"),
                    "month": language.translate("_date_month") + " " + language.translate("_date_year"),
                    "year": language.translate("_date_year")
                };
                var tooltipDateFormats = {
                    "millisecond": language.translate("_date_millisecond_full"),
                    "second": language.translate("_date_second_full"),
                    "minute": language.translate("_date_minute_full"),
                    "hour": language.translate("_date_hour_full"),
                    "day": language.translate("_date_day_full"),
                    "week": language.translate("_date_week_full"),
                    "month": language.translate("_date_month_full"),
                    "year": language.translate("_date_year")
                };
                r("CategoryDateAxis").setAll({
                    markUnitChange: true,
                    gridIntervals: copy$2(gridIntervals),
                    dateFormats: copy$1(dateFormats),
                    periodChangeDateFormats: copy$1(periodChangeDateFormats)
                });
                r("DateAxis").setAll({
                    strictMinMax: true,
                    startLocation: 0,
                    endLocation: 1,
                    markUnitChange: true,
                    groupData: false,
                    groupCount: 500,
                    gridIntervals: copy$2(gridIntervals),
                    dateFormats: copy$1(dateFormats),
                    periodChangeDateFormats: copy$1(periodChangeDateFormats),
                    tooltipDateFormats: tooltipDateFormats,
                    groupIntervals: [
                        { timeUnit: "millisecond", count: 1 },
                        { timeUnit: "millisecond", count: 10 },
                        { timeUnit: "millisecond", count: 100 },
                        { timeUnit: "second", count: 1 },
                        { timeUnit: "second", count: 10 },
                        { timeUnit: "minute", count: 1 },
                        { timeUnit: "minute", count: 10 },
                        { timeUnit: "hour", count: 1 },
                        { timeUnit: "day", count: 1 },
                        { timeUnit: "week", count: 1 },
                        { timeUnit: "month", count: 1 },
                        { timeUnit: "year", count: 1 }
                    ],
                    fillRule: function (dataItem) {
                        var axisFill = dataItem.get("axisFill");
                        if (axisFill) {
                            var axis = dataItem.component;
                            var value = dataItem.get("value");
                            var endValue = dataItem.get("endValue");
                            var intervalDuration = axis.intervalDuration();
                            var baseInterval = axis.getPrivate("baseInterval");
                            var min = axis.getPrivate("min", 0);
                            min = round(new Date(min), baseInterval.timeUnit, baseInterval.count, _this._root.locale.firstDayOfWeek, _this._root.utc, undefined, _this._root.timezone).getTime();
                            if (value != null && endValue != null) {
                                var val = Math.round((value - min) / intervalDuration) / 2;
                                if (val == Math.round(val)) {
                                    axisFill.setPrivate("visible", true);
                                }
                                else {
                                    axisFill.setPrivate("visible", false);
                                }
                            }
                        }
                    }
                });
                r("GaplessDateAxis").setAll({
                    fillRule: function (dataItem) {
                        var axisFill = dataItem.get("axisFill");
                        if (axisFill) {
                            var index = dataItem.get("index");
                            var visible = false;
                            if (!isNumber(index) || index % 2 == 0) {
                                visible = true;
                            }
                            axisFill.setPrivate("visible", visible);
                        }
                    }
                });
                r("ValueAxis").setAll({
                    baseValue: 0,
                    logarithmic: false,
                    strictMinMax: false,
                    fillRule: function (dataItem) {
                        var axisFill = dataItem.get("axisFill");
                        if (axisFill) {
                            var axis = dataItem.component;
                            var value = dataItem.get("value");
                            var step = axis.getPrivate("step");
                            if (isNumber(value) && isNumber(step)) {
                                if (round$1(value / step / 2, 5) == Math.round(value / step / 2)) {
                                    axisFill.setPrivate("visible", false);
                                }
                                else {
                                    axisFill.setPrivate("visible", true);
                                }
                            }
                        }
                    }
                });
                r("DurationAxis").setAll({
                    baseUnit: "second"
                });
                /**
                 * ------------------------------------------------------------------------
                 * charts/xy: Series
                 * ------------------------------------------------------------------------
                 */
                r("XYSeries").setAll({
                    maskBullets: true,
                    stackToNegative: true,
                    locationX: 0.5,
                    locationY: 0.5,
                    snapTooltip: false,
                    openValueXGrouped: "open",
                    openValueYGrouped: "open",
                    valueXGrouped: "close",
                    valueYGrouped: "close",
                    seriesTooltipTarget: "series"
                });
                r("BaseColumnSeries").setAll({
                    adjustBulletPosition: true
                });
                r("ColumnSeries").setAll({
                    clustered: true
                });
                r("RoundedRectangle", ["series", "column"]).setAll({
                    position: "absolute",
                    isMeasured: false,
                    width: percent(70),
                    height: percent(70),
                    strokeWidth: 1,
                    strokeOpacity: 1,
                    cornerRadiusBL: 0,
                    cornerRadiusTL: 0,
                    cornerRadiusBR: 0,
                    cornerRadiusTR: 0,
                    fillOpacity: 1,
                    role: "figure"
                });
                r("LineSeries").setAll({
                    connect: true,
                    autoGapCount: 1.1,
                    stackToNegative: false
                });
                r("Graphics", ["series", "stroke"]).setAll({
                    position: "absolute",
                    strokeWidth: 1,
                    strokeOpacity: 1,
                    isMeasured: false
                });
                r("Graphics", ["series", "fill"]).setAll({
                    visible: false,
                    fillOpacity: 0,
                    position: "absolute",
                    strokeWidth: 0,
                    strokeOpacity: 0,
                    isMeasured: false
                });
                r("Graphics", ["line", "series", "legend", "marker", "stroke"]).setAll({
                    draw: function (display, sprite) {
                        var parent = sprite.parent;
                        if (parent) {
                            var h = parent.height();
                            var w = parent.width();
                            display.moveTo(0, h / 2);
                            display.lineTo(w, h / 2);
                        }
                    }
                });
                {
                    var rule = r("Graphics", ["line", "series", "legend", "marker", "stroke"]).states.create("disabled", {});
                    setColor(rule, "stroke", ic, "disabled");
                }
                r("Graphics", ["line", "series", "legend", "marker", "fill"]).setAll({
                    draw: function (display, sprite) {
                        var parent = sprite.parent;
                        if (parent) {
                            var h = parent.height();
                            var w = parent.width();
                            display.moveTo(0, 0);
                            display.lineTo(w, 0);
                            display.lineTo(w, h);
                            display.lineTo(0, h);
                            display.lineTo(0, 0);
                        }
                    }
                });
                {
                    var rule = r("Graphics", ["line", "series", "legend", "marker", "fill"]).states.create("disabled", {});
                    setColor(rule, "stroke", ic, "disabled");
                }
                r("SmoothedXYLineSeries").setAll({
                    tension: 0.5
                });
                r("SmoothedXLineSeries").setAll({
                    tension: 0.5
                });
                r("SmoothedYLineSeries").setAll({
                    tension: 0.5
                });
                r("Candlestick").setAll({
                    position: "absolute",
                    isMeasured: false,
                    width: percent(50),
                    height: percent(50),
                    strokeWidth: 1,
                    strokeOpacity: 1,
                    cornerRadiusBL: 0,
                    cornerRadiusTL: 0,
                    cornerRadiusBR: 0,
                    cornerRadiusTR: 0,
                    fillOpacity: 1,
                    role: "figure"
                });
                r("OHLC").setAll({
                    width: percent(80),
                    height: percent(80)
                });
                r("CandlestickSeries").setAll({
                    lowValueXGrouped: "low",
                    lowValueYGrouped: "low",
                    highValueXGrouped: "high",
                    highValueYGrouped: "high",
                    openValueXGrouped: "open",
                    openValueYGrouped: "open",
                    valueXGrouped: "close",
                    valueYGrouped: "close"
                });
                // These rules can be used for regular columns, too
                {
                    var rule = r("Rectangle", ["column", "autocolor"]).states.create("riseFromOpen", {});
                    setColor(rule, "fill", ic, "positive");
                    setColor(rule, "stroke", ic, "positive");
                }
                {
                    var rule = r("Rectangle", ["column", "autocolor"]).states.create("dropFromOpen", {});
                    setColor(rule, "fill", ic, "negative");
                    setColor(rule, "stroke", ic, "negative");
                }
                r("Rectangle", ["column", "autocolor", "pro"]).states.create("riseFromPrevious", { fillOpacity: 1 });
                r("Rectangle", ["column", "autocolor", "pro"]).states.create("dropFromPrevious", { fillOpacity: 0 });
            }
        });
        return XYChartDefaultTheme;
    }(Theme));

    /**
     * Creates an XY chart.
     *
     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/} for more info
     * @important
     */
    var XYChart = /** @class */ (function (_super) {
        __extends(XYChart, _super);
        function XYChart() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            /**
             * A list of horizontal axes.
             */
            Object.defineProperty(_this, "xAxes", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new ListAutoDispose()
            });
            /**
             * A list of vertical axes.
             */
            Object.defineProperty(_this, "yAxes", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new ListAutoDispose()
            });
            /**
             * A [[Container]] located on top of the chart, used to store top horizontal
             * axes.
             *
             * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info
             * @default Container.new()
             */
            Object.defineProperty(_this, "topAxesContainer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this.chartContainer.children.push(Container.new(_this._root, { width: p100, layout: _this._root.verticalLayout }))
            });
            /**
             * A [[Container]] located in the middle the chart, used to store vertical axes
             * and plot area container.
             *
             * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info
             * @default Container.new()
             */
            Object.defineProperty(_this, "yAxesAndPlotContainer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this.chartContainer.children.push(Container.new(_this._root, { width: p100, height: p100, layout: _this._root.horizontalLayout }))
            });
            /**
             * A [[Container]] located on bottom of the chart, used to store bottom
             * horizontal axes.
             *
             * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info
             * @default Container.new()
             */
            Object.defineProperty(_this, "bottomAxesContainer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this.chartContainer.children.push(Container.new(_this._root, { width: p100, layout: _this._root.verticalLayout }))
            });
            /**
             * A [[Container]] located on left of the chart, used to store left-hand
             * vertical axes.
             *
             * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info
             * @default Container.new()
             */
            Object.defineProperty(_this, "leftAxesContainer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this.yAxesAndPlotContainer.children.push(Container.new(_this._root, { height: p100, layout: _this._root.horizontalLayout }))
            });
            /**
             * A [[Container]] located in the middle of the chart, used to store plotContainer and topPlotContainer
             *
             * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info
             * @default Container.new()
             */
            Object.defineProperty(_this, "plotsContainer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this.yAxesAndPlotContainer.children.push(Container.new(_this._root, { width: p100, height: p100, maskContent: false }))
            });
            /**
             * A [[Container]] located in the middle of the chart, used to store actual
             * plots (series).
             *
             * NOTE: `plotContainer` will automatically have its `background` preset. If
             * you need to modify background or outline for chart's plot area, you can
             * use `plotContainer.get("background")` for that.*
             *
             * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info
             * @default Container.new()
             */
            Object.defineProperty(_this, "plotContainer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this.plotsContainer.children.push(Container.new(_this._root, { width: p100, height: p100 }))
            });
            /**
             * A [[Container]] used for any elements that need to be displayed over
             * regular `plotContainer`.
             *
             * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info
             * @default Container.new()
             */
            Object.defineProperty(_this, "topPlotContainer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this.plotsContainer.children.push(Container.new(_this._root, { width: p100, height: p100 }))
            });
            /**
             * A [[Container]] axis grid elements are stored in.
             *
             * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info
             * @default Container.new()
             */
            Object.defineProperty(_this, "gridContainer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this.plotContainer.children.push(Container.new(_this._root, { width: p100, height: p100, isMeasured: false }))
            });
            /**
             * A [[Container]] axis background grid elements are stored in.
             *
             * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info
             * @default Container.new()
             */
            Object.defineProperty(_this, "topGridContainer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: Container.new(_this._root, { width: p100, height: p100, isMeasured: false })
            });
            /**
             * A [[Container]] located on right of the chart, used to store right-hand
             * vertical axes.
             *
             * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info
             * @default Container.new()
             */
            Object.defineProperty(_this, "rightAxesContainer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this.yAxesAndPlotContainer.children.push(Container.new(_this._root, { height: p100, layout: _this._root.horizontalLayout }))
            });
            /**
             * A [[Container]] axis headers are stored in.
             *
             * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-headers/} for more info
             * @default Container.new()
             */
            Object.defineProperty(_this, "axisHeadersContainer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this.plotContainer.children.push(Container.new(_this._root, {}))
            });
            /**
             * A button that is shown when chart is not fully zoomed out.
             *
             * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/zoom-and-pan/#Zoom_out_button} for more info
             * @default Button.new()
             */
            Object.defineProperty(_this, "zoomOutButton", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this.topPlotContainer.children.push(Button.new(_this._root, {
                    themeTags: ["zoom"],
                    icon: Graphics.new(_this._root, {
                        themeTags: ["button", "icon"]
                    })
                }))
            });
            Object.defineProperty(_this, "_movePoint", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: { x: 0, y: 0 }
            });
            Object.defineProperty(_this, "_wheelDp", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_otherCharts", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_movePoints", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(_this, "_downStartX", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_downEndX", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_downStartY", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_downEndY", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            return _this;
        }
        Object.defineProperty(XYChart.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                this._defaultThemes.push(XYChartDefaultTheme.new(this._root));
                _super.prototype._afterNew.call(this);
                this._disposers.push(this.xAxes);
                this._disposers.push(this.yAxes);
                var root = this._root;
                var verticalLayout = this._root.verticalLayout;
                var zoomOutButton = this.zoomOutButton;
                zoomOutButton.events.on("click", function () {
                    _this.zoomOut();
                });
                zoomOutButton.set("opacity", 0);
                zoomOutButton.states.lookup("default").set("opacity", 1);
                this.chartContainer.set("layout", verticalLayout);
                var plotContainer = this.plotContainer;
                plotContainer.children.push(this.seriesContainer);
                this._disposers.push(this._processAxis(this.xAxes, this.bottomAxesContainer));
                this._disposers.push(this._processAxis(this.yAxes, this.leftAxesContainer));
                plotContainer.children.push(this.topGridContainer);
                plotContainer.children.push(this.bulletsContainer);
                // Setting trasnparent background so that full body of the plot container
                // is interactive
                plotContainer.set("interactive", true);
                plotContainer.set("interactiveChildren", false);
                plotContainer.set("background", Rectangle.new(root, {
                    themeTags: ["xy", "background"],
                    fill: Color.fromHex(0x000000),
                    fillOpacity: 0
                }));
                this._disposers.push(plotContainer.events.on("pointerdown", function (event) {
                    _this._handlePlotDown(event.originalEvent);
                }));
                this._disposers.push(plotContainer.events.on("globalpointerup", function (event) {
                    _this._handlePlotUp(event.originalEvent);
                }));
                this._disposers.push(plotContainer.events.on("globalpointermove", function (event) {
                    _this._handlePlotMove(event.originalEvent);
                }));
                this._maskGrid();
                this._setUpTouch();
            }
        });
        Object.defineProperty(XYChart.prototype, "_beforeChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._beforeChanged.call(this);
                if (this.isDirty("pinchZoomX") || this.isDirty("pinchZoomY") || this.get("panX") || this.get("panY")) {
                    this._setUpTouch();
                }
            }
        });
        Object.defineProperty(XYChart.prototype, "_setUpTouch", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (!this.plotContainer._display.cancelTouch) {
                    this.plotContainer._display.cancelTouch = (this.get("pinchZoomX") || this.get("pinchZoomY") || this.get("panX") || this.get("panY")) ? true : false;
                }
            }
        });
        Object.defineProperty(XYChart.prototype, "_maskGrid", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.gridContainer.set("maskContent", true);
                this.topGridContainer.set("maskContent", true);
            }
        });
        Object.defineProperty(XYChart.prototype, "_removeSeries", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (series) {
                var xAxis = series.get("xAxis");
                if (xAxis) {
                    remove(xAxis.series, series);
                }
                var yAxis = series.get("yAxis");
                if (yAxis) {
                    remove(yAxis.series, series);
                }
                var cursor = this.get("cursor");
                if (cursor) {
                    var snapToSeries = cursor.get("snapToSeries");
                    if (snapToSeries) {
                        remove(snapToSeries, series);
                    }
                }
                _super.prototype._removeSeries.call(this, series);
            }
        });
        /**
         * This method is invoked when mouse wheel is used over chart's plot
         * container, and handles zooming/pan.
         *
         * You can invoke this method manually, if you need to mimic chart's wheel
         * behavior over other elements of the chart.
         */
        Object.defineProperty(XYChart.prototype, "handleWheel", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (event) {
                var _this = this;
                var wheelX = this.get("wheelX");
                var wheelY = this.get("wheelY");
                var plotContainer = this.plotContainer;
                var wheelEvent = event.originalEvent;
                // Ignore wheel event if it is happening on a non-chart element, e.g. if
                // some page element is over the chart.
                if (isLocalEvent(wheelEvent, this)) {
                    wheelEvent.preventDefault();
                }
                else {
                    return;
                }
                var plotPoint = plotContainer.toLocal(this._root.documentPointToRoot({ x: wheelEvent.clientX, y: wheelEvent.clientY }));
                var wheelStep = this.get("wheelStep", 0.2);
                var shiftY = wheelEvent.deltaY / 100;
                var shiftX = wheelEvent.deltaX / 100;
                if ((wheelX === "zoomX" || wheelX === "zoomXY") && shiftX != 0) {
                    this.xAxes.each(function (axis) {
                        if (axis.get("zoomX")) {
                            var start = axis.get("start");
                            var end = axis.get("end");
                            var position = axis.fixPosition(plotPoint.x / plotContainer.width());
                            var newStart = start - wheelStep * (end - start) * shiftX * position;
                            var newEnd = end + wheelStep * (end - start) * shiftX * (1 - position);
                            if (1 / (newEnd - newStart) < axis.get("maxZoomFactor", Infinity) / axis.get("minZoomCount", 1)) {
                                _this._handleWheelAnimation(axis.zoom(newStart, newEnd));
                            }
                        }
                    });
                }
                if ((wheelY === "zoomX" || wheelY === "zoomXY") && shiftY != 0) {
                    this.xAxes.each(function (axis) {
                        if (axis.get("zoomX")) {
                            var start = axis.get("start");
                            var end = axis.get("end");
                            var position = axis.fixPosition(plotPoint.x / plotContainer.width());
                            var newStart = start - wheelStep * (end - start) * shiftY * position;
                            var newEnd = end + wheelStep * (end - start) * shiftY * (1 - position);
                            if (1 / (newEnd - newStart) < axis.getPrivate("maxZoomFactor", Infinity) / axis.get("minZoomCount", 1)) {
                                _this._handleWheelAnimation(axis.zoom(newStart, newEnd));
                            }
                        }
                    });
                }
                if ((wheelX === "zoomY" || wheelX === "zoomXY") && shiftX != 0) {
                    this.yAxes.each(function (axis) {
                        if (axis.get("zoomY")) {
                            var start = axis.get("start");
                            var end = axis.get("end");
                            var position = axis.fixPosition(plotPoint.y / plotContainer.height());
                            var newStart = start - wheelStep * (end - start) * shiftX * position;
                            var newEnd = end + wheelStep * (end - start) * shiftX * (1 - position);
                            if (1 / (newEnd - newStart) < axis.get("maxZoomFactor", Infinity) / axis.get("minZoomCount", 1)) {
                                _this._handleWheelAnimation(axis.zoom(newStart, newEnd));
                            }
                        }
                    });
                }
                if ((wheelY === "zoomY" || wheelY === "zoomXY") && shiftY != 0) {
                    this.yAxes.each(function (axis) {
                        if (axis.get("zoomY")) {
                            var start = axis.get("start");
                            var end = axis.get("end");
                            var position = axis.fixPosition(plotPoint.y / plotContainer.height());
                            var newStart = start - wheelStep * (end - start) * shiftY * position;
                            var newEnd = end + wheelStep * (end - start) * shiftY * (1 - position);
                            if (1 / (newEnd - newStart) < axis.get("maxZoomFactor", Infinity) / axis.get("minZoomCount", 1)) {
                                _this._handleWheelAnimation(axis.zoom(newStart, newEnd));
                            }
                        }
                    });
                }
                if ((wheelX === "panX" || wheelX === "panXY") && shiftX != 0) {
                    this.xAxes.each(function (axis) {
                        if (axis.get("panX")) {
                            var start = axis.get("start");
                            var end = axis.get("end");
                            var delta = _this._getWheelSign(axis) * wheelStep * (end - start) * shiftX;
                            var newStart = start + delta;
                            var newEnd = end + delta;
                            var se = _this._fixWheel(newStart, newEnd);
                            newStart = se[0];
                            newEnd = se[1];
                            _this._handleWheelAnimation(axis.zoom(newStart, newEnd));
                        }
                    });
                }
                if ((wheelY === "panX" || wheelY === "panXY") && shiftY != 0) {
                    this.xAxes.each(function (axis) {
                        if (axis.get("panX")) {
                            var start = axis.get("start");
                            var end = axis.get("end");
                            var delta = _this._getWheelSign(axis) * wheelStep * (end - start) * shiftY;
                            var newStart = start + delta;
                            var newEnd = end + delta;
                            var se = _this._fixWheel(newStart, newEnd);
                            newStart = se[0];
                            newEnd = se[1];
                            _this._handleWheelAnimation(axis.zoom(newStart, newEnd));
                        }
                    });
                }
                if ((wheelX === "panY" || wheelX === "panXY") && shiftX != 0) {
                    this.yAxes.each(function (axis) {
                        if (axis.get("panY")) {
                            var start = axis.get("start");
                            var end = axis.get("end");
                            var delta = _this._getWheelSign(axis) * wheelStep * (end - start) * shiftX;
                            var newStart = start + delta;
                            var newEnd = end + delta;
                            var se = _this._fixWheel(newStart, newEnd);
                            newStart = se[0];
                            newEnd = se[1];
                            _this._handleWheelAnimation(axis.zoom(newStart, newEnd));
                        }
                    });
                }
                if ((wheelY === "panY" || wheelY === "panXY") && shiftY != 0) {
                    this.yAxes.each(function (axis) {
                        if (axis.get("panY")) {
                            var start = axis.get("start");
                            var end = axis.get("end");
                            var delta = _this._getWheelSign(axis) * wheelStep * (end - start) * shiftY;
                            var newStart = start - delta;
                            var newEnd = end - delta;
                            var se = _this._fixWheel(newStart, newEnd);
                            newStart = se[0];
                            newEnd = se[1];
                            _this._handleWheelAnimation(axis.zoom(newStart, newEnd));
                        }
                    });
                }
            }
        });
        Object.defineProperty(XYChart.prototype, "_handleSetWheel", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                var wheelX = this.get("wheelX");
                var wheelY = this.get("wheelY");
                var plotContainer = this.plotContainer;
                if (wheelX !== "none" || wheelY !== "none") {
                    this._wheelDp = plotContainer.events.on("wheel", function (event) {
                        _this.handleWheel(event);
                    });
                    this._disposers.push(this._wheelDp);
                }
                else {
                    if (this._wheelDp) {
                        this._wheelDp.dispose();
                    }
                }
            }
        });
        Object.defineProperty(XYChart.prototype, "_getWheelSign", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (axis) {
                var sign = 1;
                if (axis.get("renderer").get("inversed")) {
                    sign = -1;
                }
                return sign;
            }
        });
        Object.defineProperty(XYChart.prototype, "_fixWheel", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (start, end) {
                var diff = end - start;
                if (start < 0) {
                    start = 0;
                    end = start + diff;
                }
                if (end > 1) {
                    end = 1;
                    start = end - diff;
                }
                return [start, end];
            }
        });
        Object.defineProperty(XYChart.prototype, "_handlePlotDown", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (event) {
                var plotContainer = this.plotContainer;
                var local = plotContainer.toLocal(this._root.documentPointToRoot({ x: event.clientX, y: event.clientY }));
                if (this.get("pinchZoomX") || this.get("pinchZoomY")) {
                    var touchEvent = event;
                    var pointerId = touchEvent.pointerId;
                    if (pointerId) {
                        if (keys(plotContainer._downPoints).length > 0) {
                            var xAxis = this.xAxes.getIndex(0);
                            var yAxis = this.yAxes.getIndex(0);
                            if (xAxis) {
                                this._downStartX = xAxis.get("start", 0);
                                this._downEndX = xAxis.get("end", 1);
                            }
                            if (yAxis) {
                                this._downStartY = yAxis.get("start", 0);
                                this._downEndY = yAxis.get("end", 1);
                            }
                        }
                    }
                }
                if (this.get("panX") || this.get("panY")) {
                    if (local.x >= 0 && local.y >= 0 && local.x <= plotContainer.width() && local.y <= this.height()) {
                        //this._downPoint = local;
                        this._downPoint = { x: event.clientX, y: event.clientY };
                        var panX = this.get("panX");
                        var panY = this.get("panY");
                        if (panX) {
                            this.xAxes.each(function (axis) {
                                axis._panStart = axis.get("start");
                                axis._panEnd = axis.get("end");
                            });
                        }
                        if (panY) {
                            this.yAxes.each(function (axis) {
                                axis._panStart = axis.get("start");
                                axis._panEnd = axis.get("end");
                            });
                        }
                        var eventType = "panstarted";
                        if (this.events.isEnabled(eventType)) {
                            this.events.dispatch(eventType, { type: eventType, target: this });
                        }
                    }
                }
            }
        });
        Object.defineProperty(XYChart.prototype, "_handleWheelAnimation", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (animation) {
                var _this = this;
                if (animation) {
                    animation.events.on("stopped", function () {
                        _this._dispatchWheelAnimation();
                    });
                }
                else {
                    this._dispatchWheelAnimation();
                }
            }
        });
        Object.defineProperty(XYChart.prototype, "_dispatchWheelAnimation", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var eventType = "wheelended";
                if (this.events.isEnabled(eventType)) {
                    this.events.dispatch(eventType, { type: eventType, target: this });
                }
            }
        });
        Object.defineProperty(XYChart.prototype, "_handlePlotUp", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_event) {
                if (this._downPoint) {
                    if (this.get("panX") || this.get("panY")) {
                        var eventType = "panended";
                        if (this.events.isEnabled(eventType)) {
                            this.events.dispatch(eventType, { type: eventType, target: this });
                        }
                    }
                }
                // TODO: handle multitouch
                this._downPoint = undefined;
                this.xAxes.each(function (xAxis) {
                    xAxis._isPanning = false;
                });
                this.yAxes.each(function (yAxis) {
                    yAxis._isPanning = false;
                });
            }
        });
        Object.defineProperty(XYChart.prototype, "_handlePlotMove", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (event) {
                var plotContainer = this.plotContainer;
                if (this.get("pinchZoomX") || this.get("pinchZoomY")) {
                    var touchEvent = event;
                    var pointerId = touchEvent.pointerId;
                    if (pointerId) {
                        this._movePoints[pointerId] = this._root.documentPointToRoot({ x: event.clientX, y: event.clientY });
                        if (keys(plotContainer._downPoints).length > 1) {
                            this._handlePinch();
                            return;
                        }
                    }
                }
                var downPoint = this._downPoint;
                if (downPoint) {
                    downPoint = plotContainer.toLocal(this._root.documentPointToRoot(downPoint));
                    var local_1 = plotContainer.toLocal(this._root.documentPointToRoot({ x: event.clientX, y: event.clientY }));
                    var panX = this.get("panX");
                    var panY = this.get("panY");
                    if (panX) {
                        var scrollbarX = this.get("scrollbarX");
                        if (scrollbarX) {
                            scrollbarX.events.disableType("rangechanged");
                        }
                        this.xAxes.each(function (axis) {
                            if (axis.get("panX")) {
                                axis._isPanning = true;
                                //const maxDeviation = axis.get("maxDeviation", 0);
                                var panStart = axis._panStart;
                                var panEnd = axis._panEnd;
                                var difference = (panEnd - panStart);
                                var deltaX = difference * (downPoint.x - local_1.x) / plotContainer.width();
                                if (axis.get("renderer").get("inversed")) {
                                    deltaX *= -1;
                                }
                                var start = panStart + deltaX;
                                var end = panEnd + deltaX;
                                if (end - start < 1 + axis.get("maxDeviation", 1) * 2) {
                                    axis.set("start", start);
                                    axis.set("end", end);
                                }
                            }
                        });
                        if (scrollbarX) {
                            scrollbarX.events.enableType("rangechanged");
                        }
                    }
                    if (panY) {
                        var scrollbarY = this.get("scrollbarY");
                        if (scrollbarY) {
                            scrollbarY.events.disableType("rangechanged");
                        }
                        this.yAxes.each(function (axis) {
                            if (axis.get("panY")) {
                                axis._isPanning = true;
                                //const maxDeviation = axis.get("maxDeviation", 0);
                                var panStart = axis._panStart;
                                var panEnd = axis._panEnd;
                                var difference = (panEnd - panStart);
                                var deltaY = difference * (downPoint.y - local_1.y) / plotContainer.height();
                                if (axis.get("renderer").get("inversed")) {
                                    deltaY *= -1;
                                }
                                var start = panStart - deltaY;
                                var end = panEnd - deltaY;
                                if (end - start < 1 + axis.get("maxDeviation", 1) * 2) {
                                    axis.set("start", start);
                                    axis.set("end", end);
                                }
                            }
                        });
                        if (scrollbarY) {
                            scrollbarY.events.enableType("rangechanged");
                        }
                    }
                }
            }
        });
        Object.defineProperty(XYChart.prototype, "_handlePinch", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _a, _b, _c, _d;
                var _this = this;
                var plotContainer = this.plotContainer;
                var i = 0;
                var downPoints = [];
                var movePoints = [];
                each(plotContainer._downPoints, function (k, point) {
                    downPoints[i] = point;
                    var movePoint = _this._movePoints[k];
                    if (movePoint) {
                        movePoints[i] = movePoint;
                    }
                    i++;
                });
                if (downPoints.length > 1 && movePoints.length > 1) {
                    var w = plotContainer.width();
                    var h = plotContainer.height();
                    var downPoint0 = downPoints[0];
                    var downPoint1 = downPoints[1];
                    var movePoint0 = movePoints[0];
                    var movePoint1 = movePoints[1];
                    if (downPoint0 && downPoint1 && movePoint0 && movePoint1) {
                        movePoint0 = plotContainer.toLocal(movePoint0);
                        movePoint1 = plotContainer.toLocal(movePoint1);
                        downPoint0 = plotContainer.toLocal(downPoint0);
                        downPoint1 = plotContainer.toLocal(downPoint1);
                        if (this.get("pinchZoomX")) {
                            var downStartX = this._downStartX;
                            var downEndX = this._downEndX;
                            if (downStartX != null && downEndX != null) {
                                if (downPoint0.x > downPoint1.x) {
                                    _a = __read([downPoint1, downPoint0], 2), downPoint0 = _a[0], downPoint1 = _a[1];
                                    _b = __read([movePoint1, movePoint0], 2), movePoint0 = _b[0], movePoint1 = _b[1];
                                }
                                var downPos0 = downStartX + (downPoint0.x / w) * (downEndX - downStartX);
                                var downPos1 = downStartX + (downPoint1.x / w) * (downEndX - downStartX);
                                var movePos0 = downStartX + (movePoint0.x / w) * (downEndX - downStartX);
                                var movePos1 = downStartX + (movePoint1.x / w) * (downEndX - downStartX);
                                var initialDistance = Math.max(0.001, downPos1 - downPos0);
                                var currentDistance = Math.max(0.001, movePos1 - movePos0);
                                var d = initialDistance / currentDistance;
                                var s_1 = downStartX * d + downPos0 - movePos0 * d;
                                var e_1 = downEndX * d + downPos1 - movePos1 * d;
                                this.xAxes.each(function (xAxis) {
                                    var sa = xAxis.fixPosition(s_1);
                                    var ea = xAxis.fixPosition(e_1);
                                    xAxis.zoom(sa, ea, 0);
                                });
                            }
                        }
                        if (this.get("pinchZoomY")) {
                            var downStartY = this._downStartY;
                            var downEndY = this._downEndY;
                            if (downStartY != null && downEndY != null) {
                                if (downPoint0.y < downPoint1.y) {
                                    _c = __read([downPoint1, downPoint0], 2), downPoint0 = _c[0], downPoint1 = _c[1];
                                    _d = __read([movePoint1, movePoint0], 2), movePoint0 = _d[0], movePoint1 = _d[1];
                                }
                                var downPos0 = downStartY + (1 - downPoint0.y / h) * (downEndY - downStartY);
                                var downPos1 = downStartY + (1 - downPoint1.y / h) * (downEndY - downStartY);
                                var movePos0 = downStartY + (1 - movePoint0.y / h) * (downEndY - downStartY);
                                var movePos1 = downStartY + (1 - movePoint1.y / h) * (downEndY - downStartY);
                                var initialDistance = Math.max(0.001, downPos1 - downPos0);
                                var currentDistance = Math.max(0.001, movePos1 - movePos0);
                                var d = initialDistance / currentDistance;
                                var s_2 = downStartY * d + downPos0 - movePos0 * d;
                                var e_2 = downEndY * d + downPos1 - movePos1 * d;
                                this.yAxes.each(function (yAxis) {
                                    var sa = yAxis.fixPosition(s_2);
                                    var ea = yAxis.fixPosition(e_2);
                                    yAxis.zoom(sa, ea, 0);
                                });
                            }
                        }
                    }
                }
            }
        });
        Object.defineProperty(XYChart.prototype, "_handleCursorPosition", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var cursor = this.get("cursor");
                if (cursor) {
                    var cursorPoint_1 = cursor.getPrivate("point");
                    var snapToSeries = cursor.get("snapToSeries");
                    if (snapToSeries && cursorPoint_1) {
                        var snapToSeriesBy_1 = cursor.get("snapToSeriesBy");
                        var dataItems_1 = [];
                        each$1(snapToSeries, function (series) {
                            if (!series.isHidden() && !series.isHiding()) {
                                if (snapToSeriesBy_1 != "x!" && snapToSeriesBy_1 != "y!") {
                                    var startIndex = series.startIndex();
                                    var endIndex = series.endIndex();
                                    for (var i = startIndex; i < endIndex; i++) {
                                        var dataItem = series.dataItems[i];
                                        if (dataItem && !dataItem.isHidden()) {
                                            dataItems_1.push(dataItem);
                                        }
                                    }
                                }
                                else {
                                    var tooltipDataItem = series.get("tooltipDataItem");
                                    if (tooltipDataItem) {
                                        dataItems_1.push(tooltipDataItem);
                                    }
                                }
                            }
                        });
                        var minDistance_1 = Infinity;
                        var closestItem_1;
                        each$1(dataItems_1, function (dataItem) {
                            var point = dataItem.get("point");
                            if (point) {
                                var distance = 0;
                                if (snapToSeriesBy_1 == "x" || snapToSeriesBy_1 == "x!") {
                                    distance = Math.abs(cursorPoint_1.x - point.x);
                                }
                                else if (snapToSeriesBy_1 == "y" || snapToSeriesBy_1 == "y!") {
                                    distance = Math.abs(cursorPoint_1.y - point.y);
                                }
                                else {
                                    distance = Math.hypot(cursorPoint_1.x - point.x, cursorPoint_1.y - point.y);
                                }
                                if (distance < minDistance_1) {
                                    minDistance_1 = distance;
                                    closestItem_1 = dataItem;
                                }
                            }
                        });
                        each$1(snapToSeries, function (series) {
                            var tooltip = series.get("tooltip");
                            if (tooltip) {
                                tooltip._setDataItem(undefined);
                            }
                        });
                        if (closestItem_1) {
                            var series = closestItem_1.component;
                            series.showDataItemTooltip(closestItem_1);
                            var point = closestItem_1.get("point");
                            if (point) {
                                cursor.handleMove(series.toGlobal(point), true);
                            }
                        }
                    }
                }
            }
        });
        Object.defineProperty(XYChart.prototype, "_updateCursor", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var cursor = this.get("cursor");
                if (cursor) {
                    cursor.handleMove();
                }
            }
        });
        Object.defineProperty(XYChart.prototype, "_addCursor", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (cursor) {
                this.plotContainer.children.push(cursor);
            }
        });
        Object.defineProperty(XYChart.prototype, "_prepareChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                _super.prototype._prepareChildren.call(this);
                this.series.each(function (series) {
                    _this._colorize(series);
                });
                if (this.isDirty("wheelX") || this.isDirty("wheelY")) {
                    this._handleSetWheel();
                }
                if (this.isDirty("cursor")) {
                    var previous = this._prevSettings.cursor;
                    var cursor = this.get("cursor");
                    if (cursor !== previous) {
                        this._disposeProperty("cursor");
                        if (previous) {
                            previous.dispose();
                        }
                        if (cursor) {
                            cursor._setChart(this);
                            this._addCursor(cursor);
                            this._pushPropertyDisposer("cursor", cursor.events.on("selectended", function () {
                                _this._handleCursorSelectEnd();
                            }));
                        }
                        //this.setRaw("cursor", cursor) // to reset previous value
                        this._prevSettings.cursor = cursor;
                    }
                }
                if (this.isDirty("scrollbarX")) {
                    var previous = this._prevSettings.scrollbarX;
                    var scrollbarX = this.get("scrollbarX");
                    if (scrollbarX !== previous) {
                        this._disposeProperty("scrollbarX");
                        if (previous) {
                            previous.dispose();
                        }
                        if (scrollbarX) {
                            if (!scrollbarX.parent) {
                                this.topAxesContainer.children.push(scrollbarX);
                            }
                            this._pushPropertyDisposer("scrollbarX", scrollbarX.events.on("rangechanged", function (e) {
                                _this._handleScrollbar(_this.xAxes, e.start, e.end, e.grip);
                            }));
                            // Used to populate `ariaLabel` with meaningful values
                            scrollbarX.setPrivate("positionTextFunction", function (position) {
                                var axis = _this.xAxes.getIndex(0);
                                return axis ? axis.getTooltipText(position) || "" : "";
                            });
                        }
                        this._prevSettings.scrollbarX = scrollbarX;
                    }
                }
                if (this.isDirty("scrollbarY")) {
                    var previous = this._prevSettings.scrollbarY;
                    var scrollbarY = this.get("scrollbarY");
                    if (scrollbarY !== previous) {
                        this._disposeProperty("scrollbarY");
                        if (previous) {
                            previous.dispose();
                        }
                        if (scrollbarY) {
                            if (!scrollbarY.parent) {
                                this.rightAxesContainer.children.push(scrollbarY);
                            }
                            this._pushPropertyDisposer("scrollbarY", scrollbarY.events.on("rangechanged", function (e) {
                                _this._handleScrollbar(_this.yAxes, e.start, e.end, e.grip);
                            }));
                            // Used to populate `ariaLabel` with meaningful values
                            scrollbarY.setPrivate("positionTextFunction", function (position) {
                                var axis = _this.yAxes.getIndex(0);
                                return axis ? axis.getTooltipText(position) || "" : "";
                            });
                        }
                        this._prevSettings.scrollbarY = scrollbarY;
                    }
                }
                this._handleZoomOut();
            }
        });
        Object.defineProperty(XYChart.prototype, "_processSeries", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (series) {
                _super.prototype._processSeries.call(this, series);
                this._colorize(series);
            }
        });
        Object.defineProperty(XYChart.prototype, "_colorize", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (series) {
                var colorSet = this.get("colors");
                if (colorSet) {
                    if (series.get("fill") == null) {
                        var color = colorSet.next();
                        series._setSoft("stroke", color);
                        series._setSoft("fill", color);
                    }
                }
            }
        });
        Object.defineProperty(XYChart.prototype, "_handleCursorSelectEnd", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var cursor = this.get("cursor");
                var behavior = cursor.get("behavior");
                var downPositionX = cursor.getPrivate("downPositionX", 0);
                var downPositionY = cursor.getPrivate("downPositionY", 0);
                var positionX = cursor.getPrivate("positionX", 0.5);
                var positionY = cursor.getPrivate("positionY", 0.5);
                this.xAxes.each(function (axis) {
                    if (behavior === "zoomX" || behavior === "zoomXY") {
                        var position0 = axis.toAxisPosition(downPositionX);
                        var position1 = axis.toAxisPosition(positionX);
                        axis.zoom(position0, position1);
                    }
                    axis.setPrivate("updateScrollbar", true);
                });
                this.yAxes.each(function (axis) {
                    if (behavior === "zoomY" || behavior === "zoomXY") {
                        var position0 = axis.toAxisPosition(downPositionY);
                        var position1 = axis.toAxisPosition(positionY);
                        axis.zoom(position0, position1);
                    }
                    axis.setPrivate("updateScrollbar", true);
                });
            }
        });
        Object.defineProperty(XYChart.prototype, "_handleScrollbar", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (axes, start, end, priority) {
                axes.each(function (axis) {
                    var axisStart = axis.fixPosition(start);
                    var axisEnd = axis.fixPosition(end);
                    var zoomAnimation = axis.zoom(axisStart, axisEnd, undefined, priority);
                    var updateScrollbar = "updateScrollbar";
                    axis.setPrivateRaw(updateScrollbar, false);
                    if (zoomAnimation) {
                        zoomAnimation.events.on("stopped", function () {
                            axis.setPrivateRaw(updateScrollbar, true);
                        });
                    }
                    else {
                        axis.setPrivateRaw(updateScrollbar, true);
                    }
                });
            }
        });
        Object.defineProperty(XYChart.prototype, "_processAxis", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (axes, container) {
                var _this = this;
                return axes.events.onAll(function (change) {
                    if (change.type === "clear") {
                        each$1(change.oldValues, function (axis) {
                            _this._removeAxis(axis);
                        });
                    }
                    else if (change.type === "push") {
                        container.children.push(change.newValue);
                        change.newValue.processChart(_this);
                    }
                    else if (change.type === "setIndex") {
                        container.children.setIndex(change.index, change.newValue);
                        change.newValue.processChart(_this);
                    }
                    else if (change.type === "insertIndex") {
                        container.children.insertIndex(change.index, change.newValue);
                        change.newValue.processChart(_this);
                    }
                    else if (change.type === "removeIndex") {
                        _this._removeAxis(change.oldValue);
                    }
                    else if (change.type === "moveIndex") {
                        container.children.moveValue(change.value, change.newIndex);
                        change.value.processChart(_this);
                    }
                    else {
                        throw new Error("Unknown IListEvent type");
                    }
                });
            }
        });
        Object.defineProperty(XYChart.prototype, "_removeAxis", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (axis) {
                if (!axis.isDisposed()) {
                    var axisParent = axis.parent;
                    if (axisParent) {
                        axisParent.children.removeValue(axis);
                    }
                    var gridContainer = axis.gridContainer;
                    var gridParent = gridContainer.parent;
                    if (gridParent) {
                        gridParent.children.removeValue(gridContainer);
                    }
                    var topGridContainer = axis.topGridContainer;
                    var topGridParent = topGridContainer.parent;
                    if (topGridParent) {
                        topGridParent.children.removeValue(topGridContainer);
                    }
                }
            }
        });
        Object.defineProperty(XYChart.prototype, "_updateChartLayout", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var left = this.leftAxesContainer.width();
                var right = this.rightAxesContainer.width();
                var bottomAxesContainer = this.bottomAxesContainer;
                bottomAxesContainer.set("paddingLeft", left);
                bottomAxesContainer.set("paddingRight", right);
                var topAxesContainer = this.topAxesContainer;
                topAxesContainer.set("paddingLeft", left);
                topAxesContainer.set("paddingRight", right);
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(XYChart.prototype, "processAxis", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_axis) { }
        });
        Object.defineProperty(XYChart.prototype, "_handleAxisSelection", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (axis, force) {
                var _a;
                var start = axis.fixPosition(axis.get("start", 0));
                var end = axis.fixPosition(axis.get("end", 1));
                if (start > end) {
                    _a = __read([end, start], 2), start = _a[0], end = _a[1];
                }
                if (this.xAxes.indexOf(axis) != -1) {
                    if (force || axis.getPrivate("updateScrollbar")) {
                        var scrollbarX = this.get("scrollbarX");
                        if (scrollbarX && (!scrollbarX.getPrivate("isBusy") || force)) {
                            scrollbarX.setRaw("start", start);
                            scrollbarX.setRaw("end", end);
                            scrollbarX.updateGrips();
                        }
                    }
                }
                else if (this.yAxes.indexOf(axis) != -1) {
                    if (force || axis.getPrivate("updateScrollbar")) {
                        var scrollbarY = this.get("scrollbarY");
                        if (scrollbarY && (!scrollbarY.getPrivate("isBusy") || force)) {
                            scrollbarY.setRaw("start", start);
                            scrollbarY.setRaw("end", end);
                            scrollbarY.updateGrips();
                        }
                    }
                }
                this._handleZoomOut();
            }
        });
        Object.defineProperty(XYChart.prototype, "_handleZoomOut", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var zoomOutButton = this.zoomOutButton;
                if (zoomOutButton && zoomOutButton.parent) {
                    var visible_1 = false;
                    this.xAxes.each(function (axis) {
                        if (axis.get("start") != 0 || axis.get("end") != 1) {
                            visible_1 = true;
                        }
                    });
                    this.yAxes.each(function (axis) {
                        if (axis.get("start") != 0 || axis.get("end") != 1) {
                            visible_1 = true;
                        }
                    });
                    if (visible_1) {
                        if (zoomOutButton.isHidden()) {
                            zoomOutButton.show();
                        }
                    }
                    else {
                        zoomOutButton.hide();
                    }
                }
            }
        });
        /**
         * Checks if point is within plot area.
         *
         * @param   point  Reference point
         * @return         Is within plot area?
         */
        Object.defineProperty(XYChart.prototype, "inPlot", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (point) {
                var plotContainer = this.plotContainer;
                var otherCharts = this.getPrivate("otherCharts", this._otherCharts);
                var global = plotContainer.toGlobal(point);
                if (point.x >= -0.1 && point.y >= -0.1 && point.x <= plotContainer.width() + 0.1 && point.y <= plotContainer.height() + 0.1) {
                    return true;
                }
                if (otherCharts) {
                    for (var i = otherCharts.length - 1; i >= 0; i--) {
                        var chart = otherCharts[i];
                        if (chart != this) {
                            var chartPlotContainer = chart.plotContainer;
                            var documentPoint = this._root.rootPointToDocument(global);
                            var chartRoot = chart._root.documentPointToRoot(documentPoint);
                            var local = chartPlotContainer.toLocal(chartRoot);
                            if (local.x >= -0.1 && local.y >= -0.1 && local.x <= chartPlotContainer.width() + 0.1 && local.y <= chartPlotContainer.height() + 0.1) {
                                return true;
                            }
                        }
                    }
                }
                return false;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(XYChart.prototype, "arrangeTooltips", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                var plotContainer = this.plotContainer;
                var w = plotContainer.width();
                var h = plotContainer.height();
                var plotT = plotContainer._display.toGlobal({ x: 0, y: 0 });
                var plotB = plotContainer._display.toGlobal({ x: w, y: h });
                var tooltips = [];
                var sum = 0;
                var minDistance = Infinity;
                var movePoint = this._movePoint;
                var maxTooltipDistance = this.get("maxTooltipDistance");
                var maxTooltipDistanceBy = this.get("maxTooltipDistanceBy", "xy");
                var closest;
                var closestPoint;
                if (isNumber(maxTooltipDistance)) {
                    this.series.each(function (series) {
                        var tooltip = series.get("tooltip");
                        if (tooltip) {
                            var point = tooltip.get("pointTo");
                            if (point) {
                                var distance = Math.hypot(movePoint.x - point.x, movePoint.y - point.y);
                                if (maxTooltipDistanceBy == "x") {
                                    distance = Math.abs(movePoint.x - point.x);
                                }
                                else if (maxTooltipDistanceBy == "y") {
                                    distance = Math.abs(movePoint.y - point.y);
                                }
                                if (distance < minDistance) {
                                    minDistance = distance;
                                    closest = series;
                                    closestPoint = point;
                                }
                            }
                        }
                    });
                }
                var tooltipSeries = [];
                this.series.each(function (series) {
                    var tooltip = series.get("tooltip");
                    if (tooltip) {
                        var hidden = false;
                        var point = tooltip.get("pointTo");
                        if (point) {
                            if (maxTooltipDistance >= 0) {
                                var point_1 = tooltip.get("pointTo");
                                if (point_1) {
                                    if (series != closest) {
                                        var distance = Math.hypot(closestPoint.x - point_1.x, closestPoint.y - point_1.y);
                                        if (maxTooltipDistanceBy == "x") {
                                            distance = Math.abs(closestPoint.x - point_1.x);
                                        }
                                        else if (maxTooltipDistanceBy == "y") {
                                            distance = Math.abs(closestPoint.y - point_1.y);
                                        }
                                        if (distance > maxTooltipDistance) {
                                            hidden = true;
                                        }
                                    }
                                }
                            }
                            else if (maxTooltipDistance == -1) {
                                if (series != closest) {
                                    hidden = true;
                                }
                            }
                            if (!_this.inPlot(_this._tooltipToLocal(point)) || !tooltip.dataItem) {
                                hidden = true;
                            }
                            else {
                                if (!hidden) {
                                    sum += point.y;
                                }
                            }
                            if (hidden || series.isHidden() || series.isHiding()) {
                                tooltip.hide(0);
                            }
                            else {
                                tooltip.show();
                                tooltips.push(tooltip);
                                tooltipSeries.push(series);
                            }
                        }
                    }
                });
                this.setPrivate("tooltipSeries", tooltipSeries);
                if (this.get("arrangeTooltips")) {
                    var tooltipContainer_1 = this._root.tooltipContainer;
                    var count = tooltips.length;
                    var average = sum / count;
                    if (average > h / 2 + plotT.y) {
                        tooltips.sort(function (a, b) { return compareNumber(b.get("pointTo").y, a.get("pointTo").y); });
                        var prevY_1 = plotB.y;
                        each$1(tooltips, function (tooltip) {
                            var height = tooltip.height();
                            var centerY = tooltip.get("centerY");
                            if (centerY instanceof Percent) {
                                height *= centerY.value;
                            }
                            height += tooltip.get("marginBottom", 0);
                            tooltip.set("bounds", { left: plotT.x, top: plotT.y, right: plotB.x, bottom: prevY_1 });
                            prevY_1 = Math.min(prevY_1 - height, tooltip._fy - height);
                            tooltipContainer_1.children.moveValue(tooltip, 0);
                        });
                    }
                    else {
                        tooltips.reverse();
                        tooltips.sort(function (a, b) { return compareNumber(a.get("pointTo").y, b.get("pointTo").y); });
                        var prevY_2 = 0;
                        each$1(tooltips, function (tooltip) {
                            var height = tooltip.height();
                            var centerY = tooltip.get("centerY");
                            if (centerY instanceof Percent) {
                                height *= centerY.value;
                            }
                            height += tooltip.get("marginBottom", 0);
                            tooltip.set("bounds", { left: plotT.x, top: prevY_2, right: plotB.x, bottom: Math.max(plotT.y + h, prevY_2 + height) });
                            tooltipContainer_1.children.moveValue(tooltip, 0);
                            prevY_2 = Math.max(prevY_2 + height, tooltip._fy + height);
                        });
                    }
                }
            }
        });
        Object.defineProperty(XYChart.prototype, "_tooltipToLocal", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (point) {
                return this.plotContainer.toLocal(point);
            }
        });
        /**
         * Fully zooms out the chart.
         */
        Object.defineProperty(XYChart.prototype, "zoomOut", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.xAxes.each(function (axis) {
                    axis.setPrivate("updateScrollbar", true);
                    axis.zoom(0, 1);
                });
                this.yAxes.each(function (axis) {
                    axis.setPrivate("updateScrollbar", true);
                    axis.zoom(0, 1);
                });
            }
        });
        Object.defineProperty(XYChart, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "XYChart"
        });
        Object.defineProperty(XYChart, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: SerialChart.classNames.concat([XYChart.className])
        });
        return XYChart;
    }(SerialChart));

    /**
     * Creates a scrollbar with chart preview in it.
     *
     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/scrollbars/#Scrollbar_with_chart_preview} for more info
     * @important
     */
    var XYChartScrollbar = /** @class */ (function (_super) {
        __extends(XYChartScrollbar, _super);
        function XYChartScrollbar() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            /**
             * An instance of an [[XYChart]] that is used to plot chart preview in
             * scrollbar.
             */
            Object.defineProperty(_this, "chart", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this.children.push(XYChart.new(_this._root, {
                    themeTags: ["chart"],
                    interactive: false,
                    interactiveChildren: false,
                    panX: false,
                    panY: false,
                    wheelX: "none",
                    wheelY: "none"
                }))
            });
            /**
             * A graphics element that is displayed over inactive portion of the
             * scrollbarpreview, to dim it down.
             */
            Object.defineProperty(_this, "overlay", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this.children.push(Graphics.new(_this._root, {
                    themeTags: ["overlay"],
                    interactive: false
                }))
            });
            return _this;
        }
        Object.defineProperty(XYChartScrollbar.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._addOrientationClass();
                this._settings.themeTags = mergeTags(this._settings.themeTags, ["scrollbar", "xy", "chart", this._settings.orientation]);
                var children = this.children;
                children.moveValue(this.thumb);
                children.moveValue(this.startGrip);
                children.moveValue(this.endGrip);
                this.thumb.set("opacity", 0);
                this.thumb.states.create("hover", { opacity: 0.2 });
                var plotContainer = this.chart.plotContainer;
                plotContainer.set("interactive", false);
                plotContainer.remove("background");
                plotContainer.children.removeValue(this.chart.zoomOutButton);
                _super.prototype._afterNew.call(this);
            }
        });
        Object.defineProperty(XYChartScrollbar.prototype, "_updateThumb", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                _super.prototype._updateThumb.call(this);
                this.overlay.set("draw", function (display) {
                    var _a, _b;
                    var startGrip = _this.startGrip;
                    var endGrip = _this.endGrip;
                    var x0 = startGrip.x();
                    var y0 = startGrip.y();
                    var x1 = endGrip.x();
                    var y1 = endGrip.y();
                    var h = _this.height();
                    var w = _this.width();
                    if (x0 > x1) {
                        _a = __read([x1, x0], 2), x0 = _a[0], x1 = _a[1];
                    }
                    if (y0 > y1) {
                        _b = __read([y1, y0], 2), y0 = _b[0], y1 = _b[1];
                    }
                    if (_this.get("orientation") === "horizontal") {
                        display.moveTo(0, 0);
                        display.lineTo(x0, 0);
                        display.lineTo(x0, h);
                        display.lineTo(0, h);
                        display.lineTo(0, 0);
                        display.moveTo(x1, 0);
                        display.lineTo(w, 0);
                        display.lineTo(w, h);
                        display.lineTo(x1, h);
                        display.lineTo(x1, 0);
                    }
                    else {
                        display.moveTo(0, 0);
                        display.lineTo(0, y0);
                        display.lineTo(w, y0);
                        display.lineTo(w, 0);
                        display.lineTo(0, 0);
                        display.moveTo(0, y1);
                        display.lineTo(0, h);
                        display.lineTo(w, h);
                        display.lineTo(w, y1);
                        display.lineTo(0, y1);
                    }
                });
            }
        });
        Object.defineProperty(XYChartScrollbar, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "XYChartScrollbar"
        });
        Object.defineProperty(XYChartScrollbar, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Scrollbar.classNames.concat([XYChartScrollbar.className])
        });
        return XYChartScrollbar;
    }(Scrollbar));

    /**
     * Creates an axis grid line.
     *
     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/#Grid} for more info
     * @important
     */
    var Grid = /** @class */ (function (_super) {
        __extends(Grid, _super);
        function Grid() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Grid.prototype, "_beforeChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._beforeChanged.call(this);
                if (this.isPrivateDirty("width") || this.isPrivateDirty("height")) {
                    this._clear = true;
                }
            }
        });
        Object.defineProperty(Grid, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Grid"
        });
        Object.defineProperty(Grid, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Graphics.classNames.concat([Grid.className])
        });
        return Grid;
    }(Graphics));

    /**
     * Creates a chart cursor for an [[XYChart]].
     *
     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/cursor/} for more info
     * @important
     */
    var XYCursor = /** @class */ (function (_super) {
        __extends(XYCursor, _super);
        function XYCursor() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            /**
             * A [[Grid]] elment that used for horizontal line of the cursor crosshair.
             *
             * @default Grid.new()
             */
            Object.defineProperty(_this, "lineX", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this.children.push(Grid.new(_this._root, {
                    themeTags: ["x"]
                }))
            });
            /**
             * A [[Grid]] elment that used for horizontal line of the cursor crosshair.
             *
             * @default Grid.new()
             */
            Object.defineProperty(_this, "lineY", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this.children.push(Grid.new(_this._root, {
                    themeTags: ["y"]
                }))
            });
            /**
             * An element that represents current selection.
             *
             * @default Graphics.new()
             */
            Object.defineProperty(_this, "selection", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this.children.push(Graphics.new(_this._root, {
                    themeTags: ["selection", "cursor"], layer: 30
                }))
            });
            Object.defineProperty(_this, "_movePoint", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_lastPoint", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: { x: 0, y: 0 }
            });
            Object.defineProperty(_this, "_tooltipX", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_tooltipY", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            /**
             * A chart cursor is attached to.
             */
            Object.defineProperty(_this, "chart", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_toX", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_toY", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            return _this;
        }
        Object.defineProperty(XYCursor.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                this._settings.themeTags = mergeTags(this._settings.themeTags, ["xy", "cursor"]);
                _super.prototype._afterNew.call(this);
                this.setAll({ "width": p100, height: p100, isMeasured: true, position: "absolute" });
                this.states.create("hidden", { visible: true, opacity: 0 });
                this._drawLines();
                this.setPrivateRaw("visible", false);
                this._disposers.push(this.setTimeout(function () {
                    _this.setPrivate("visible", true);
                }, 500));
                this.lineX.events.on("positionchanged", function () {
                    _this._handleXLine();
                });
                this.lineY.events.on("positionchanged", function () {
                    _this._handleYLine();
                });
            }
        });
        Object.defineProperty(XYCursor.prototype, "_setUpTouch", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var chart = this.chart;
                if (chart) {
                    chart.plotContainer._display.cancelTouch = this.get("behavior") != "none" ? true : false;
                }
            }
        });
        Object.defineProperty(XYCursor.prototype, "_handleXLine", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var x = this.lineX.x();
                var visible = true;
                if (x < 0 || x > this.width()) {
                    visible = false;
                }
                this.lineX.setPrivate("visible", visible);
            }
        });
        Object.defineProperty(XYCursor.prototype, "_handleYLine", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var y = this.lineY.y();
                var visible = true;
                if (y < 0 || y > this.height()) {
                    visible = false;
                }
                this.lineY.setPrivate("visible", visible);
            }
        });
        Object.defineProperty(XYCursor.prototype, "_prepareChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                _super.prototype._prepareChildren.call(this);
                if (this.isDirty("xAxis")) {
                    this._tooltipX = false;
                    var xAxis = this.get("xAxis");
                    if (xAxis) {
                        var tooltip_1 = xAxis.get("tooltip");
                        if (tooltip_1) {
                            this._tooltipX = true;
                            tooltip_1.on("pointTo", function () {
                                _this._updateXLine(tooltip_1);
                            });
                        }
                    }
                }
                if (this.isDirty("yAxis")) {
                    this._tooltipY = false;
                    var yAxis = this.get("yAxis");
                    if (yAxis) {
                        var tooltip_2 = yAxis.get("tooltip");
                        if (tooltip_2) {
                            this._tooltipY = true;
                            tooltip_2.on("pointTo", function () {
                                _this._updateYLine(tooltip_2);
                            });
                        }
                    }
                }
            }
        });
        Object.defineProperty(XYCursor.prototype, "_handleSyncWith", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var chart = this.chart;
                if (chart) {
                    var syncWith = this.get("syncWith");
                    var otherCharts_1 = [];
                    if (syncWith) {
                        each$1(syncWith, function (cursor) {
                            var chart = cursor.chart;
                            if (chart) {
                                otherCharts_1.push(chart);
                            }
                        });
                    }
                    chart._otherCharts = otherCharts_1;
                }
            }
        });
        Object.defineProperty(XYCursor.prototype, "_updateChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._updateChildren.call(this);
                this._handleSyncWith();
                if (this.isDirty("positionX") || this.isDirty("positionY")) {
                    var positionX = this.get("positionX");
                    var positionY = this.get("positionY");
                    if (positionX == null && positionY == null) {
                        this.hide(0);
                    }
                    else {
                        this._movePoint = this.toGlobal(this._getPoint(this.get("positionX", 0), this.get("positionY", 0)));
                        this.handleMove();
                    }
                }
            }
        });
        Object.defineProperty(XYCursor.prototype, "_updateXLine", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (tooltip) {
                var x = round$1(this._display.toLocal(tooltip.get("pointTo", { x: 0, y: 0 })).x, 2);
                if (this._toX != x) {
                    this.lineX.animate({ key: "x", to: x, duration: tooltip.get("animationDuration", 0), easing: tooltip.get("animationEasing") });
                    this._toX = x;
                }
            }
        });
        Object.defineProperty(XYCursor.prototype, "_updateYLine", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (tooltip) {
                var y = round$1(this._display.toLocal(tooltip.get("pointTo", { x: 0, y: 0 })).y, 2);
                if (this._toY != y) {
                    this.lineY.animate({ key: "y", to: y, duration: tooltip.get("animationDuration", 0), easing: tooltip.get("animationEasing") });
                    this._toY = y;
                }
            }
        });
        Object.defineProperty(XYCursor.prototype, "_drawLines", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                this.lineX.set("draw", function (display) {
                    display.moveTo(0, 0);
                    display.lineTo(0, _this.height());
                });
                this.lineY.set("draw", function (display) {
                    display.moveTo(0, 0);
                    display.lineTo(_this.width(), 0);
                });
            }
        });
        Object.defineProperty(XYCursor.prototype, "_setChart", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (chart) {
                var _this = this;
                this.chart = chart;
                this._handleSyncWith();
                var plotContainer = chart.plotContainer;
                this.events.on("boundschanged", function () {
                    _this._disposers.push(_this.setTimeout(function () {
                        if (_this.get("alwaysShow")) {
                            _this._movePoint = _this.toGlobal(_this._getPoint(_this.get("positionX", 0), _this.get("positionY", 0)));
                            _this.handleMove();
                        }
                    }, 50));
                });
                //this._display.interactive = true;
                if (supports("touchevents")) {
                    this._disposers.push(plotContainer.events.on("click", function (event) {
                        if (isTouchEvent(event.originalEvent)) {
                            _this._handleMove(event.originalEvent);
                        }
                    }));
                    this._setUpTouch();
                }
                this._disposers.push(plotContainer.events.on("pointerdown", function (event) {
                    _this._handleCursorDown(event.originalEvent);
                }));
                this._disposers.push(plotContainer.events.on("globalpointerup", function (event) {
                    _this._handleCursorUp(event.originalEvent);
                    if (!event.native && !_this.isHidden()) {
                        _this._handleMove(event.originalEvent);
                    }
                }));
                this._disposers.push(plotContainer.events.on("globalpointermove", function (event) {
                    if (!_this.get("syncWith")) {
                        if (keys(plotContainer._downPoints).length == 0 && !event.native && _this.isHidden()) {
                            // Ignore mouse movement if it originates on outside element and
                            // we're not dragging.
                            return;
                        }
                    }
                    _this._handleMove(event.originalEvent);
                }));
                var parent = this.parent;
                if (parent) {
                    parent.children.moveValue(this.selection);
                }
            }
        });
        Object.defineProperty(XYCursor.prototype, "_inPlot", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (point) {
                var chart = this.chart;
                if (chart) {
                    return chart.inPlot(point);
                }
                return false;
            }
        });
        Object.defineProperty(XYCursor.prototype, "_handleCursorDown", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (event) {
                var rootPoint = this._root.documentPointToRoot({ x: event.clientX, y: event.clientY });
                var local = this._display.toLocal(rootPoint);
                var chart = this.chart;
                this.selection.set("draw", function () { });
                if (chart && this._inPlot(local)) {
                    this._downPoint = local;
                    if (this.get("behavior") != "none") {
                        this.selection.show();
                        var type = "selectstarted";
                        if (this.events.isEnabled(type)) {
                            this.events.dispatch(type, { type: type, target: this });
                        }
                    }
                    var positionX = this._getPosition(local).x;
                    var positionY = this._getPosition(local).y;
                    this.setPrivate("downPositionX", positionX);
                    this.setPrivate("downPositionY", positionY);
                }
            }
        });
        Object.defineProperty(XYCursor.prototype, "_handleCursorUp", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_event) {
                // TODO: handle multitouch
                if (this._downPoint) {
                    var behavior = this.get("behavior", "none");
                    if (behavior != "none") {
                        if (behavior.charAt(0) === "z") {
                            this.selection.hide();
                        }
                        var userPositionX = this.get("positionX");
                        var positionX = this.getPrivate("positionX", 0);
                        if (isNumber(userPositionX)) {
                            positionX = userPositionX;
                        }
                        var userPositionY = this.get("positionY");
                        var positionY = this.getPrivate("positionY", 0);
                        if (isNumber(userPositionY)) {
                            positionY = userPositionY;
                        }
                        var dispatch = false;
                        if (behavior === "zoomX" || behavior === "zoomXY" || behavior === "selectX" || behavior === "selectXY") {
                            if (Math.abs(positionX - this.getPrivate("downPositionX", 0)) > 0.003) {
                                dispatch = true;
                            }
                        }
                        if (behavior === "zoomY" || behavior === "zoomXY" || behavior === "selectY" || behavior === "selectXY") {
                            if (Math.abs(positionY - this.getPrivate("downPositionY", 0)) > 0.003) {
                                dispatch = true;
                            }
                        }
                        if (dispatch) {
                            var type = "selectended";
                            if (this.events.isEnabled(type)) {
                                this.events.dispatch(type, { type: type, target: this });
                            }
                        }
                    }
                }
                this._downPoint = undefined;
            }
        });
        Object.defineProperty(XYCursor.prototype, "_handleMove", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (event) {
                if (this.getPrivate("visible")) {
                    var chart = this.chart;
                    if (chart && keys(chart.plotContainer._downPoints).length > 1) {
                        this.set("forceHidden", true);
                        return;
                    }
                    else {
                        this.set("forceHidden", false);
                    }
                    // TODO: handle multitouch
                    var rootPoint = this._root.documentPointToRoot({ x: event.clientX, y: event.clientY });
                    var lastPoint = this._lastPoint;
                    if (Math.round(lastPoint.x) === Math.round(rootPoint.x) && Math.round(lastPoint.y) === Math.round(rootPoint.y)) {
                        return;
                    }
                    this._lastPoint = rootPoint;
                    this.handleMove({ x: rootPoint.x, y: rootPoint.y });
                }
            }
        });
        Object.defineProperty(XYCursor.prototype, "_getPosition", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (point) {
                return { x: point.x / this.width(), y: point.y / this.height() };
            }
        });
        /**
         * Moves the cursor to X/Y coordinates within chart container (`point`).
         *
         * If `skipEvent` parameter is set to `true`, the move will not invoke
         * the `"cursormoved"` event.
         *
         * @param  point      X/Y to move cursor to
         * @param  skipEvent  Do not fire "cursormoved" event
         */
        Object.defineProperty(XYCursor.prototype, "handleMove", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (point, skipEvent) {
                if (!point) {
                    point = this._movePoint;
                }
                var alwaysShow = this.get("alwaysShow");
                if (!point) {
                    this.hide(0);
                    return;
                }
                this._movePoint = point;
                var local = this._display.toLocal(point);
                var chart = this.chart;
                if (chart && this._inPlot(local)) {
                    chart._movePoint = point;
                    if (this.isHidden()) {
                        this.show();
                        var behavior = this.get("behavior", "");
                        if (behavior.charAt(0) == "z") {
                            this.selection.set("draw", function () { });
                        }
                    }
                    var x = local.x;
                    var y = local.y;
                    var xyPos = this._getPosition(local);
                    this.setPrivate("point", local);
                    var snapToSeries_1 = this.get("snapToSeries");
                    var userPositionX = this.get("positionX");
                    var positionX_1 = xyPos.x;
                    if (isNumber(userPositionX)) {
                        positionX_1 = userPositionX;
                    }
                    var userPositionY = this.get("positionY");
                    var positionY_1 = xyPos.y;
                    if (isNumber(userPositionY)) {
                        positionY_1 = userPositionY;
                    }
                    this.setPrivate("positionX", positionX_1);
                    this.setPrivate("positionY", positionY_1);
                    var xy = this._getPoint(positionX_1, positionY_1);
                    x = xy.x;
                    y = xy.y;
                    chart.xAxes.each(function (axis) {
                        axis._handleCursorPosition(positionX_1, snapToSeries_1);
                        if (alwaysShow) {
                            axis.handleCursorShow();
                        }
                    });
                    chart.yAxes.each(function (axis) {
                        axis._handleCursorPosition(positionY_1, snapToSeries_1);
                        if (alwaysShow) {
                            axis.handleCursorShow();
                        }
                    });
                    if (!skipEvent) {
                        chart._handleCursorPosition();
                        var type = "cursormoved";
                        if (this.events.isEnabled(type)) {
                            this.events.dispatch(type, { type: type, target: this });
                        }
                    }
                    this._updateLines(x, y);
                    chart.arrangeTooltips();
                }
                else if (!this._downPoint) {
                    if (!alwaysShow) {
                        this.hide(0);
                        var type = "cursorhidden";
                        if (this.events.isEnabled(type)) {
                            this.events.dispatch(type, { type: type, target: this });
                        }
                    }
                }
                if (this._downPoint && this.get("behavior") != "none") {
                    this._updateSelection(local);
                }
            }
        });
        Object.defineProperty(XYCursor.prototype, "_getPoint", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (positionX, positionY) {
                return { x: this.width() * positionX, y: this.height() * positionY };
            }
        });
        Object.defineProperty(XYCursor.prototype, "_updateLines", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (x, y) {
                if (!this._tooltipX) {
                    this.lineX.set("x", x);
                }
                if (!this._tooltipY) {
                    this.lineY.set("y", y);
                }
                this._drawLines();
            }
        });
        Object.defineProperty(XYCursor.prototype, "_updateSelection", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (point) {
                var _this = this;
                var selection = this.selection;
                var behavior = this.get("behavior");
                var w = this.width();
                var h = this.height();
                if (point.x < 0) {
                    point.x = 0;
                }
                if (point.x > w) {
                    point.x = w;
                }
                if (point.y < 0) {
                    point.y = 0;
                }
                if (point.y > h) {
                    point.y = h;
                }
                selection.set("draw", function (display) {
                    var downPoint = _this._downPoint;
                    if (downPoint) {
                        if (behavior === "zoomXY" || behavior === "selectXY") {
                            display.moveTo(downPoint.x, downPoint.y);
                            display.lineTo(downPoint.x, point.y);
                            display.lineTo(point.x, point.y);
                            display.lineTo(point.x, downPoint.y);
                            display.lineTo(downPoint.x, downPoint.y);
                        }
                        else if (behavior === "zoomX" || behavior === "selectX") {
                            display.moveTo(downPoint.x, 0);
                            display.lineTo(downPoint.x, h);
                            display.lineTo(point.x, h);
                            display.lineTo(point.x, 0);
                            display.lineTo(downPoint.x, 0);
                        }
                        else if (behavior === "zoomY" || behavior === "selectY") {
                            display.moveTo(0, downPoint.y);
                            display.lineTo(w, downPoint.y);
                            display.lineTo(w, point.y);
                            display.lineTo(0, point.y);
                            display.lineTo(0, downPoint.y);
                        }
                    }
                });
            }
        });
        Object.defineProperty(XYCursor.prototype, "_onHide", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (this.isHidden()) {
                    var chart = this.chart;
                    if (chart) {
                        chart.xAxes.each(function (axis) {
                            axis.handleCursorHide();
                        });
                        chart.yAxes.each(function (axis) {
                            axis.handleCursorHide();
                        });
                        chart.series.each(function (series) {
                            series.handleCursorHide();
                        });
                    }
                }
                _super.prototype._onHide.call(this);
            }
        });
        Object.defineProperty(XYCursor.prototype, "_onShow", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (!this.isHidden()) {
                    var chart = this.chart;
                    if (chart) {
                        chart.xAxes.each(function (axis) {
                            axis.handleCursorShow();
                        });
                        chart.yAxes.each(function (axis) {
                            axis.handleCursorShow();
                        });
                    }
                }
                _super.prototype._onShow.call(this);
            }
        });
        Object.defineProperty(XYCursor.prototype, "_dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._dispose.call(this);
                this.selection.dispose();
            }
        });
        Object.defineProperty(XYCursor, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "XYCursor"
        });
        Object.defineProperty(XYCursor, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Container.classNames.concat([XYCursor.className])
        });
        return XYCursor;
    }(Container));

    /**
     * @ignore
     */
    function min(left, right) {
        if (left == null) {
            return right;
        }
        else if (right == null) {
            return left;
        }
        else if (right < left) {
            return right;
        }
        else {
            return left;
        }
    }
    /**
     * @ignore
     */
    function max(left, right) {
        if (left == null) {
            return right;
        }
        else if (right == null) {
            return left;
        }
        else if (right > left) {
            return right;
        }
        else {
            return left;
        }
    }
    /**
     * A base class for all XY chart series.
     *
     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/series/} for more info
     */
    var XYSeries = /** @class */ (function (_super) {
        __extends(XYSeries, _super);
        function XYSeries() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_xField", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_yField", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_xOpenField", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_yOpenField", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_xLowField", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_xHighField", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_yLowField", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_yHighField", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_axesDirty", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_stackDirty", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_selectionProcessed", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_dataSets", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(_this, "_mainContainerMask", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_x", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(_this, "_y", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            /**
             * A [[Container]] that us used to put series' elements in.
             *
             * @default Container.new()
             */
            Object.defineProperty(_this, "mainContainer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this.children.push(Container.new(_this._root, {}))
            });
            /**
             * A list of axis ranges that affect the series.
             *
             * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-ranges/} for more info
             */
            Object.defineProperty(_this, "axisRanges", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new List()
            });
            Object.defineProperty(_this, "_skipped", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_couldStackTo", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            Object.defineProperty(_this, "_reallyStackedTo", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(_this, "_stackedSeries", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(_this, "_aLocationX0", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(_this, "_aLocationX1", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 1
            });
            Object.defineProperty(_this, "_aLocationY0", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(_this, "_aLocationY1", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 1
            });
            Object.defineProperty(_this, "_showBullets", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: true
            });
            Object.defineProperty(_this, "valueXFields", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: [
                    "valueX",
                    "openValueX",
                    "lowValueX",
                    "highValueX"
                ]
            });
            Object.defineProperty(_this, "valueYFields", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: [
                    "valueY",
                    "openValueY",
                    "lowValueY",
                    "highValueY"
                ]
            });
            Object.defineProperty(_this, "_valueXFields", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_valueYFields", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            // used for full min/max
            Object.defineProperty(_this, "_valueXShowFields", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_valueYShowFields", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            // used for selection (uses working)
            Object.defineProperty(_this, "__valueXShowFields", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "__valueYShowFields", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_emptyDataItem", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new DataItem(_this, undefined, {})
            });
            Object.defineProperty(_this, "_dataSetId", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_tooltipFieldX", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_tooltipFieldY", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            return _this;
        }
        Object.defineProperty(XYSeries.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                this.fields.push("categoryX", "categoryY", "openCategoryX", "openCategoryY");
                this.valueFields.push("valueX", "valueY", "openValueX", "openValueY", "lowValueX", "lowValueY", "highValueX", "highValueY");
                this._setRawDefault("vcx", 1);
                this._setRawDefault("vcy", 1);
                // this can't go to themes, as data might be parsed before theme
                this._setRawDefault("valueXShow", "valueXWorking");
                this._setRawDefault("valueYShow", "valueYWorking");
                this._setRawDefault("openValueXShow", "openValueXWorking");
                this._setRawDefault("openValueYShow", "openValueYWorking");
                this._setRawDefault("lowValueXShow", "lowValueXWorking");
                this._setRawDefault("lowValueYShow", "lowValueYWorking");
                this._setRawDefault("highValueXShow", "highValueXWorking");
                this._setRawDefault("highValueYShow", "highValueYWorking");
                this._setRawDefault("lowValueXGrouped", "low");
                this._setRawDefault("lowValueYGrouped", "low");
                this._setRawDefault("highValueXGrouped", "high");
                this._setRawDefault("highValueYGrouped", "high");
                _super.prototype._afterNew.call(this);
                this._settings.xAxis.series.push(this);
                this._settings.yAxis.series.push(this);
                this.set("maskContent", true);
                this._disposers.push(this.axisRanges.events.onAll(function (change) {
                    if (change.type === "clear") {
                        each$1(change.oldValues, function (axisRange) {
                            _this._removeAxisRange(axisRange);
                        });
                    }
                    else if (change.type === "push") {
                        _this._processAxisRange(change.newValue);
                    }
                    else if (change.type === "setIndex") {
                        _this._processAxisRange(change.newValue);
                    }
                    else if (change.type === "insertIndex") {
                        _this._processAxisRange(change.newValue);
                    }
                    else if (change.type === "removeIndex") {
                        _this._removeAxisRange(change.oldValue);
                    }
                    else if (change.type === "moveIndex") {
                        _this._processAxisRange(change.value);
                    }
                    else {
                        throw new Error("Unknown IStreamEvent type");
                    }
                }));
                if (!this.get("baseAxis")) {
                    var xAxis = this.get("xAxis");
                    var yAxis = this.get("yAxis");
                    if (yAxis.isType("CategoryAxis") || yAxis.isType("DateAxis")) {
                        this.set("baseAxis", yAxis);
                    }
                    else {
                        this.set("baseAxis", xAxis);
                    }
                }
                this.states.create("hidden", { opacity: 1, visible: false });
                this._makeFieldNames();
            }
        });
        Object.defineProperty(XYSeries.prototype, "_processAxisRange", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (axisRange) {
                var container = Container.new(this._root, {});
                axisRange.container = container;
                this.children.push(container);
                axisRange.series = this;
                var axisDataItem = axisRange.axisDataItem;
                axisDataItem.setRaw("isRange", true);
                var axis = axisDataItem.component;
                if (axis) {
                    axis._processAxisRange(axisDataItem, ["range", "series"]);
                    var bullet = axisDataItem.get("bullet");
                    if (bullet) {
                        var sprite = bullet.get("sprite");
                        if (sprite) {
                            sprite.setPrivate("visible", false);
                        }
                    }
                    var axisFill = axisDataItem.get("axisFill");
                    if (axisFill) {
                        container.set("mask", axisFill);
                    }
                    axis._seriesAxisRanges.push(axisDataItem);
                }
            }
        });
        Object.defineProperty(XYSeries.prototype, "_removeAxisRange", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (axisRange) {
                var axisDataItem = axisRange.axisDataItem;
                var axis = axisDataItem.component;
                axis.disposeDataItem(axisDataItem);
                remove(axis._seriesAxisRanges, axisDataItem);
                var container = axisRange.container;
                if (container) {
                    container.dispose();
                }
            }
        });
        Object.defineProperty(XYSeries.prototype, "_updateFields", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                _super.prototype._updateFields.call(this);
                this._valueXFields = [];
                this._valueYFields = [];
                this._valueXShowFields = [];
                this._valueYShowFields = [];
                this.__valueXShowFields = [];
                this.__valueYShowFields = [];
                if (this.valueXFields) {
                    each$1(this.valueXFields, function (key) {
                        var field = _this.get((key + "Field"));
                        if (field) {
                            _this._valueXFields.push(key);
                            var field_1 = _this.get((key + "Show"));
                            _this.__valueXShowFields.push(field_1);
                            if (field_1.indexOf("Working") != -1) {
                                _this._valueXShowFields.push(field_1.split("Working")[0]);
                            }
                            else {
                                _this._valueYShowFields.push(field_1);
                            }
                        }
                    });
                }
                if (this.valueYFields) {
                    each$1(this.valueYFields, function (key) {
                        var field = _this.get((key + "Field"));
                        if (field) {
                            _this._valueYFields.push(key);
                            var field_2 = _this.get((key + "Show"));
                            _this.__valueYShowFields.push(field_2);
                            if (field_2.indexOf("Working") != -1) {
                                _this._valueYShowFields.push(field_2.split("Working")[0]);
                            }
                            else {
                                _this._valueYShowFields.push(field_2);
                            }
                        }
                    });
                }
            }
        });
        Object.defineProperty(XYSeries.prototype, "_dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._dispose.call(this);
                var chart = this.chart;
                if (chart) {
                    chart.series.removeValue(this);
                }
                removeFirst(this.get("xAxis").series, this);
                removeFirst(this.get("yAxis").series, this);
            }
        });
        // TODO use  SelectKeys<this["_privateSettings"], number | undefined>
        Object.defineProperty(XYSeries.prototype, "_min", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, value) {
                var newValue = min(this.getPrivate(key), value);
                this.setPrivate(key, newValue);
            }
        });
        // TODO use  SelectKeys<this["_privateSettings"], number | undefined>
        Object.defineProperty(XYSeries.prototype, "_max", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (key, value) {
                var newValue = max(this.getPrivate(key), value);
                this.setPrivate(key, newValue);
            }
        });
        Object.defineProperty(XYSeries.prototype, "_shouldMakeBullet", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem) {
                if (!this.get("xAxis").inited || !this.get("yAxis").inited) {
                    return false;
                }
                if (dataItem.get(this._xField) != null && dataItem.get(this._yField) != null) {
                    return true;
                }
                return false;
            }
        });
        Object.defineProperty(XYSeries.prototype, "_makeFieldNames", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var xAxis = this.get("xAxis");
                var yAxis = this.get("yAxis");
                var xName = xAxis.getPrivate("name");
                var xCapName = capitalizeFirst(xName);
                var yName = yAxis.getPrivate("name");
                var yCapName = capitalizeFirst(yName);
                var xLetter = xAxis.get("renderer").getPrivate("letter");
                var yLetter = yAxis.get("renderer").getPrivate("letter");
                var open = "open";
                var low = "low";
                var high = "high";
                var show = "Show";
                if (xAxis.className === "ValueAxis") {
                    this._xField = this.get((xName + xLetter + show));
                    this._xOpenField = this.get((open + xCapName + xLetter + show));
                    this._xLowField = this.get((low + xCapName + xLetter + show));
                    this._xHighField = this.get((high + xCapName + xLetter + show));
                }
                else {
                    this._xField = (xName + xLetter);
                    this._xOpenField = (open + xCapName + xLetter);
                    this._xLowField = (low + xCapName + xLetter);
                    this._xHighField = (high + xCapName + xLetter);
                }
                if (yAxis.className === "ValueAxis") {
                    this._yField = this.get((yName + yLetter + show));
                    this._yOpenField = this.get((open + yCapName + yLetter + show));
                    this._yLowField = this.get((low + yCapName + yLetter + show));
                    this._yHighField = this.get((high + yCapName + yLetter + show));
                }
                else {
                    this._yField = (yName + yLetter);
                    this._yOpenField = (open + yCapName + yLetter);
                    this._yLowField = (low + yCapName + yLetter);
                    this._yHighField = (high + yCapName + yLetter);
                }
            }
        });
        Object.defineProperty(XYSeries.prototype, "_fixVC", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var xAxis = this.get("xAxis");
                var yAxis = this.get("yAxis");
                var baseAxis = this.get("baseAxis");
                var hiddenState = this.states.lookup("hidden");
                var sequencedInterpolation = this.get("sequencedInterpolation");
                if (hiddenState) {
                    var value = 0;
                    if (sequencedInterpolation) {
                        value = 0.999999999999; // makes animate, good for stacked
                    }
                    if (xAxis === baseAxis) {
                        hiddenState.set("vcy", value);
                    }
                    else if (yAxis === baseAxis) {
                        hiddenState.set("vcx", value);
                    }
                    else {
                        hiddenState.set("vcy", value);
                        hiddenState.set("vcx", value);
                    }
                }
            }
        });
        Object.defineProperty(XYSeries.prototype, "_handleMaskBullets", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (this.isDirty("maskBullets")) {
                    this.bulletsContainer.set("maskContent", this.get("maskBullets"));
                }
            }
        });
        Object.defineProperty(XYSeries.prototype, "_prepareChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                _super.prototype._prepareChildren.call(this);
                if (this.isDirty("valueYShow") || this.isDirty("valueXShow"      )) {
                    this._updateFields();
                    this._makeFieldNames();
                    this._valuesDirty = true;
                }
                this.set("width", this.get("xAxis").width());
                this.set("height", this.get("yAxis").height());
                this._handleMaskBullets();
                var xAxis = this.get("xAxis");
                var yAxis = this.get("yAxis");
                var baseAxis = this.get("baseAxis");
                var tooltipPositionX = this.get("tooltipPositionX");
                var tooltipFieldX;
                switch (tooltipPositionX) {
                    case "open":
                        tooltipFieldX = this._xOpenField;
                        break;
                    case "low":
                        tooltipFieldX = this._xLowField;
                        break;
                    case "high":
                        tooltipFieldX = this._xHighField;
                        break;
                    default:
                        tooltipFieldX = this._xField;
                }
                this._tooltipFieldX = tooltipFieldX;
                var tooltipPositionY = this.get("tooltipPositionY");
                var tooltipFieldY;
                switch (tooltipPositionY) {
                    case "open":
                        tooltipFieldY = this._yOpenField;
                        break;
                    case "low":
                        tooltipFieldY = this._yLowField;
                        break;
                    case "high":
                        tooltipFieldY = this._yHighField;
                        break;
                    default:
                        tooltipFieldY = this._yField;
                }
                this._tooltipFieldY = tooltipFieldY;
                if (this.isDirty("baseAxis")) {
                    this._fixVC();
                }
                this.set("x", xAxis.x() - relativeToValue(xAxis.get("centerX", 0), xAxis.width()) - xAxis.parent.get("paddingLeft", 0));
                this.set("y", yAxis.y() - relativeToValue(yAxis.get("centerY", 0), yAxis.height()) - yAxis.parent.get("paddingTop", 0));
                this.bulletsContainer.set("y", this.y());
                this.bulletsContainer.set("x", this.x());
                var stacked = this.get("stacked");
                if (this.isDirty("stacked")) {
                    if (stacked) {
                        if (this._valuesDirty && !this._dataProcessed) ;
                        else {
                            this._stack();
                        }
                    }
                    else {
                        this._unstack();
                    }
                }
                if (this._valuesDirty && !this._dataProcessed) {
                    this._dataProcessed = true;
                    if (stacked) {
                        this._stack();
                    }
                    each$1(this.dataItems, function (dataItem) {
                        each$1(_this._valueXShowFields, function (key) {
                            var value = dataItem.get(key);
                            if (value != null) {
                                if (stacked) {
                                    value += _this.getStackedXValue(dataItem, key);
                                }
                                _this._min("minX", value);
                                _this._max("maxX", value);
                            }
                        });
                        each$1(_this._valueYShowFields, function (key) {
                            var value = dataItem.get(key);
                            if (value != null) {
                                if (stacked) {
                                    value += _this.getStackedYValue(dataItem, key);
                                }
                                _this._min("minY", value);
                                _this._max("maxY", value);
                            }
                        });
                        xAxis.processSeriesDataItem(dataItem, _this._valueXFields);
                        yAxis.processSeriesDataItem(dataItem, _this._valueYFields);
                    });
                    xAxis._seriesValuesDirty = true;
                    yAxis._seriesValuesDirty = true;
                    if (!this.get("ignoreMinMax")) {
                        if (this.isPrivateDirty("minX") || this.isPrivateDirty("maxX")) {
                            xAxis.markDirtyExtremes();
                        }
                        if (this.isPrivateDirty("minY") || this.isPrivateDirty("maxY")) {
                            yAxis.markDirtyExtremes();
                        }
                    }
                    this._markStakedDirtyStack();
                    //this.updateLegendMarker(undefined); // causes legend marker to change color instantly when on
                    this.updateLegendValue(undefined);
                }
                if (this.isDirty("vcx") || this.isDirty("vcy")) {
                    this._markStakedDirtyStack();
                }
                if (!this._dataGrouped) {
                    xAxis._groupSeriesData(this);
                    yAxis._groupSeriesData(this);
                    this._dataGrouped = true;
                }
                if (this._valuesDirty || this.isPrivateDirty("startIndex") || this.isPrivateDirty("endIndex") || this.isDirty("vcx") || this.isDirty("vcy") || this._stackDirty) {
                    var startIndex = this.startIndex();
                    var endIndex = this.endIndex();
                    var minBulletDistance = this.get("minBulletDistance", 0);
                    if (minBulletDistance > 0 && baseAxis) {
                        if (baseAxis.get("renderer").axisLength() / (endIndex - startIndex) > minBulletDistance) {
                            this._showBullets = true;
                        }
                        else {
                            this._showBullets = false;
                        }
                    }
                    if ((this._psi != startIndex || this._pei != endIndex || this.isDirty("vcx") || this.isDirty("vcy") || this._stackDirty || this._valuesDirty) && !this._selectionProcessed) {
                        this._selectionProcessed = true;
                        var vcx = this.get("vcx", 1);
                        var vcy = this.get("vcy", 1);
                        var stacked_1 = this.get("stacked", false);
                        var outOfSelection = this.getPrivate("outOfSelection");
                        if (baseAxis === xAxis) {
                            yAxis._calculateTotals();
                            this.setPrivateRaw("selectionMinY", undefined);
                            this.setPrivateRaw("selectionMaxY", undefined);
                            if (!outOfSelection) {
                                for (var i = startIndex; i < endIndex; i++) {
                                    this.processYSelectionDataItem(this.dataItems[i], vcy, stacked_1);
                                }
                            }
                            else {
                                yAxis.markDirtySelectionExtremes();
                            }
                        }
                        else if (baseAxis === yAxis) {
                            xAxis._calculateTotals();
                            this.setPrivateRaw("selectionMinX", undefined);
                            this.setPrivateRaw("selectionMaxX", undefined);
                            if (!outOfSelection) {
                                for (var i = startIndex; i < endIndex; i++) {
                                    this.processXSelectionDataItem(this.dataItems[i], vcx, stacked_1);
                                }
                            }
                            else {
                                yAxis.markDirtySelectionExtremes();
                            }
                        }
                        if (baseAxis === xAxis) {
                            if (this.get("valueYShow") !== "valueYWorking") {
                                var selectionMinY = this.getPrivate("selectionMinY");
                                if (selectionMinY != null) {
                                    this.setPrivateRaw("minY", selectionMinY);
                                    yAxis.markDirtyExtremes();
                                }
                                var selectionMaxY = this.getPrivate("selectionMaxY");
                                if (selectionMaxY != null) {
                                    this.setPrivateRaw("maxY", selectionMaxY);
                                    yAxis.markDirtyExtremes();
                                }
                            }
                        }
                        else if (baseAxis === yAxis) {
                            if (this.get("valueXShow") !== "valueXWorking") {
                                var selectionMinX = this.getPrivate("selectionMinX");
                                if (selectionMinX != null) {
                                    this.setPrivateRaw("minX", selectionMinX);
                                    yAxis.markDirtyExtremes();
                                }
                                var selectionMaxX = this.getPrivate("selectionMaxX");
                                if (selectionMaxX != null) {
                                    this.setPrivateRaw("maxX", selectionMaxX);
                                    xAxis.markDirtyExtremes();
                                }
                            }
                        }
                        if (this.isPrivateDirty("selectionMinX") || this.isPrivateDirty("selectionMaxX")) {
                            xAxis.markDirtySelectionExtremes();
                        }
                        if (this.isPrivateDirty("selectionMinY") || this.isPrivateDirty("selectionMaxY")) {
                            yAxis.markDirtySelectionExtremes();
                        }
                        // this.updateLegendValue(undefined); flickers while panning
                    }
                }
            }
        });
        Object.defineProperty(XYSeries.prototype, "_makeRangeMask", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                if (this.axisRanges.length > 0) {
                    var mainContainerMask_1 = this._mainContainerMask;
                    if (mainContainerMask_1 == null) {
                        mainContainerMask_1 = this.children.push(Graphics.new(this._root, {}));
                        this._mainContainerMask = mainContainerMask_1;
                        mainContainerMask_1.set("draw", function (display, target) {
                            var parent = _this.parent;
                            if (parent) {
                                var w = _this._root.container.width();
                                var h = _this._root.container.height();
                                display.moveTo(-w, -h);
                                display.lineTo(-w, h * 2);
                                display.lineTo(w * 2, h * 2);
                                display.lineTo(w * 2, -h);
                                display.lineTo(-w, -h);
                                _this.axisRanges.each(function (axisRange) {
                                    var fill = axisRange.axisDataItem.get("axisFill");
                                    if (parent) {
                                        if (fill) {
                                            var draw = fill.get("draw");
                                            if (draw) {
                                                draw(display, target);
                                            }
                                        }
                                    }
                                });
                            }
                            _this.mainContainer._display.mask = mainContainerMask_1._display;
                        });
                    }
                    mainContainerMask_1.markDirty();
                    mainContainerMask_1._markDirtyKey("fill");
                }
                else {
                    this.mainContainer._display.mask = null;
                }
            }
        });
        Object.defineProperty(XYSeries.prototype, "_updateChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._updateChildren.call(this);
                // save for performance
                this._x = this.x();
                this._y = this.y();
                this._makeRangeMask();
            }
        });
        Object.defineProperty(XYSeries.prototype, "_stack", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var chart = this.chart;
                if (chart) {
                    var seriesIndex = chart.series.indexOf(this);
                    this._couldStackTo = [];
                    if (seriesIndex > 0) {
                        var series = void 0;
                        for (var i = seriesIndex - 1; i >= 0; i--) {
                            series = chart.series.getIndex(i);
                            if (series.get("xAxis") === this.get("xAxis") && series.get("yAxis") === this.get("yAxis") && series.className === this.className) {
                                this._couldStackTo.push(series);
                                if (!series.get("stacked")) {
                                    break;
                                }
                            }
                        }
                    }
                    this._stackDataItems();
                }
            }
        });
        Object.defineProperty(XYSeries.prototype, "_unstack", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                each(this._reallyStackedTo, function (_key, value) {
                    delete (value._stackedSeries[_this.uid]);
                });
                this._reallyStackedTo = {};
                each$1(this.dataItems, function (dataItem) {
                    dataItem.setRaw("stackToItemY", undefined);
                    dataItem.setRaw("stackToItemX", undefined);
                });
            }
        });
        Object.defineProperty(XYSeries.prototype, "_stackDataItems", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                // this works only with the same number of data @todo: search by date/category?
                var baseAxis = this.get("baseAxis");
                var xAxis = this.get("xAxis");
                var yAxis = this.get("yAxis");
                var field;
                var stackToItemKey;
                if (baseAxis === xAxis) {
                    field = "valueY";
                    stackToItemKey = "stackToItemY";
                }
                else if (baseAxis === yAxis) {
                    field = "valueX";
                    stackToItemKey = "stackToItemX";
                }
                var len = this._couldStackTo.length;
                var index = 0;
                var stackToNegative = this.get("stackToNegative");
                this._reallyStackedTo = {};
                each$1(this.dataItems, function (dataItem) {
                    for (var s = 0; s < len; s++) {
                        var stackToSeries = _this._couldStackTo[s];
                        var stackToItem = stackToSeries.dataItems[index];
                        var value = dataItem.get(field);
                        if (stackToItem) {
                            var stackValue = stackToItem.get(field);
                            if (stackToNegative) {
                                if (isNumber(value)) {
                                    if (isNumber(stackValue)) {
                                        if (value >= 0 && stackValue >= 0) {
                                            dataItem.setRaw(stackToItemKey, stackToItem);
                                            _this._reallyStackedTo[stackToSeries.uid] = stackToSeries;
                                            stackToSeries._stackedSeries[_this.uid] = _this;
                                            break;
                                        }
                                        if (value < 0 && stackValue < 0) {
                                            dataItem.setRaw(stackToItemKey, stackToItem);
                                            _this._reallyStackedTo[stackToSeries.uid] = stackToSeries;
                                            stackToSeries._stackedSeries[_this.uid] = _this;
                                            break;
                                        }
                                    }
                                }
                                else {
                                    break;
                                }
                            }
                            else {
                                if (isNumber(value) && isNumber(stackValue)) {
                                    dataItem.setRaw(stackToItemKey, stackToItem);
                                    _this._reallyStackedTo[stackToSeries.uid] = stackToSeries;
                                    stackToSeries._stackedSeries[_this.uid] = _this;
                                    break;
                                }
                            }
                        }
                    }
                    index++;
                });
            }
        });
        Object.defineProperty(XYSeries.prototype, "processXSelectionDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, vcx, stacked) {
                var _this = this;
                each$1(this.__valueXShowFields, function (key) {
                    var value = dataItem.get(key);
                    if (value != null) {
                        if (stacked) {
                            value += _this.getStackedXValueWorking(dataItem, key);
                        }
                        _this._min("selectionMinX", value);
                        _this._max("selectionMaxX", value * vcx);
                    }
                });
            }
        });
        Object.defineProperty(XYSeries.prototype, "processYSelectionDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, vcy, stacked) {
                var _this = this;
                each$1(this.__valueYShowFields, function (key) {
                    var value = dataItem.get(key);
                    if (value != null) {
                        if (stacked) {
                            value += _this.getStackedYValueWorking(dataItem, key);
                        }
                        _this._min("selectionMinY", value);
                        _this._max("selectionMaxY", value * vcy);
                    }
                });
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(XYSeries.prototype, "getStackedYValueWorking", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, key) {
                var stackToItem = dataItem.get("stackToItemY");
                if (stackToItem) {
                    var stackedToSeries = stackToItem.component;
                    return stackToItem.get(key, 0) * stackedToSeries.get("vcy", 1) + this.getStackedYValueWorking(stackToItem, key);
                }
                return 0;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(XYSeries.prototype, "getStackedXValueWorking", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, key) {
                var stackToItem = dataItem.get("stackToItemX");
                if (stackToItem) {
                    var stackedToSeries = stackToItem.component;
                    return stackToItem.get(key, 0) * stackedToSeries.get("vcx", 1) + this.getStackedXValueWorking(stackToItem, key);
                }
                return 0;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(XYSeries.prototype, "getStackedYValue", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, key) {
                var stackToItem = dataItem.get("stackToItemY");
                if (stackToItem) {
                    return stackToItem.get(key, 0) + this.getStackedYValue(stackToItem, key);
                }
                return 0;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(XYSeries.prototype, "getStackedXValue", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, key) {
                var stackToItem = dataItem.get("stackToItemX");
                if (stackToItem) {
                    return stackToItem.get(key, 0) + this.getStackedXValue(stackToItem, key);
                }
                return 0;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(XYSeries.prototype, "createLegendMarker", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_dataItem) {
                this.updateLegendMarker();
            }
        });
        Object.defineProperty(XYSeries.prototype, "_markDirtyAxes", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._axesDirty = true;
                this.markDirty();
            }
        });
        Object.defineProperty(XYSeries.prototype, "_markDataSetDirty", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._afterDataChange();
                this._valuesDirty = true;
                this._dataProcessed = false;
                this._aggregatesCalculated = false;
                this.markDirty();
            }
        });
        Object.defineProperty(XYSeries.prototype, "_clearDirty", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._clearDirty.call(this);
                this._axesDirty = false;
                this._selectionProcessed = false;
                this._stackDirty = false;
                this._dataProcessed = false;
            }
        });
        Object.defineProperty(XYSeries.prototype, "_positionBullet", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (bullet) {
                var sprite = bullet.get("sprite");
                if (sprite) {
                    var dataItem = sprite.dataItem;
                    var locationX = bullet.get("locationX", dataItem.get("locationX", 0.5));
                    var locationY = bullet.get("locationY", dataItem.get("locationY", 0.5));
                    var xAxis = this.get("xAxis");
                    var yAxis = this.get("yAxis");
                    var positionX = xAxis.getDataItemPositionX(dataItem, this._xField, locationX, this.get("vcx", 1));
                    var positionY = yAxis.getDataItemPositionY(dataItem, this._yField, locationY, this.get("vcy", 1));
                    var point = this.getPoint(positionX, positionY);
                    var left = dataItem.get("left", point.x);
                    var right = dataItem.get("right", point.x);
                    var top_1 = dataItem.get("top", point.y);
                    var bottom = dataItem.get("bottom", point.y);
                    if (this._shouldShowBullet(positionX, positionY)) {
                        if (!bullet.getPrivate("hidden")) {
                            sprite.setPrivate("visible", true);
                        }
                        else {
                            sprite.setPrivate("visible", false);
                        }
                        var w = right - left;
                        var h = bottom - top_1;
                        if (sprite.isType("Label")) {
                            sprite.setPrivate("maxWidth", Math.abs(w));
                            sprite.setPrivate("maxHeight", Math.abs(h));
                        }
                        var x = left + w * locationX;
                        var y = bottom - h * locationY;
                        sprite.set("x", x);
                        sprite.set("y", y);
                    }
                    else {
                        sprite.setPrivate("visible", false);
                    }
                }
            }
        });
        Object.defineProperty(XYSeries.prototype, "_shouldShowBullet", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_positionX, _positionY) {
                return this._showBullets;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(XYSeries.prototype, "setDataSet", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (id) {
                if (this._dataSets[id]) {
                    this._handleDataSetChange();
                    this._dataItems = this._dataSets[id];
                    this._markDataSetDirty();
                    this._dataSetId = id;
                    var type = "datasetchanged";
                    if (this.events.isEnabled(type)) {
                        this.events.dispatch(type, { type: type, target: this, id: id });
                    }
                }
            }
        });
        Object.defineProperty(XYSeries.prototype, "_handleDataSetChange", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (this.bullets.length > 0) {
                    each$1(this._dataItems, function (dataItem) {
                        var bullets = dataItem.bullets;
                        if (bullets) {
                            each$1(bullets, function (bullet) {
                                var sprite = bullet.get("sprite");
                                if (sprite) {
                                    sprite.setPrivate("visible", false);
                                }
                            });
                        }
                    });
                }
                this._selectionProcessed = false; // for totals to be calculated
            }
        });
        /**
         * Shows hidden series.
         *
         * @param   duration  Duration of animation in milliseconds
         * @return            Animation promise
         */
        Object.defineProperty(XYSeries.prototype, "show", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (duration) {
                return __awaiter(this, void 0, void 0, function () {
                    var promises;
                    var _this = this;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                this._fixVC();
                                promises = [];
                                promises.push(_super.prototype.show.call(this, duration).then(function () {
                                    _this._isShowing = false;
                                    var xAxis = _this.get("xAxis");
                                    var yAxis = _this.get("yAxis");
                                    var baseAxis = _this.get("baseAxis");
                                    if (yAxis !== baseAxis) {
                                        yAxis.markDirtySelectionExtremes();
                                    }
                                    if (xAxis !== baseAxis) {
                                        xAxis.markDirtySelectionExtremes();
                                    }
                                }));
                                promises.push(this.bulletsContainer.show(duration));
                                promises.push(this._sequencedShowHide(true, duration));
                                return [4 /*yield*/, Promise.all(promises)];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                });
            }
        });
        /**
         * Hides series.
         *
         * @param   duration  Duration of animation in milliseconds
         * @return            Animation promise
         */
        Object.defineProperty(XYSeries.prototype, "hide", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (duration) {
                return __awaiter(this, void 0, void 0, function () {
                    var promises;
                    var _this = this;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                this._fixVC();
                                promises = [];
                                promises.push(_super.prototype.hide.call(this, duration).then(function () {
                                    _this._isHiding = false;
                                }));
                                promises.push(this.bulletsContainer.hide(duration));
                                promises.push(this._sequencedShowHide(false, duration));
                                return [4 /*yield*/, Promise.all(promises)];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                });
            }
        });
        /**
         * Shows series's data item.
         *
         * @param   dataItem  Data item
         * @param   duration  Animation duration in milliseconds
         * @return            Promise
         */
        Object.defineProperty(XYSeries.prototype, "showDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, duration) {
                return __awaiter(this, void 0, void 0, function () {
                    var promises, easing;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                promises = [_super.prototype.showDataItem.call(this, dataItem, duration)];
                                if (!isNumber(duration)) {
                                    duration = this.get("stateAnimationDuration", 0);
                                }
                                easing = this.get("stateAnimationEasing");
                                each$1(this._valueFields, function (key) {
                                    promises.push(dataItem.animate({ key: key + "Working", to: dataItem.get(key), duration: duration, easing: easing }).waitForStop());
                                });
                                return [4 /*yield*/, Promise.all(promises)];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                });
            }
        });
        /**
         * Hides series's data item.
         *
         * @param   dataItem  Data item
         * @param   duration  Animation duration in milliseconds
         * @return            Promise
         */
        Object.defineProperty(XYSeries.prototype, "hideDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, duration) {
                return __awaiter(this, void 0, void 0, function () {
                    var promises, hiddenState, easing, xAxis, yAxis, baseAxis, stacked, min_1, baseValue_1;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                promises = [_super.prototype.hideDataItem.call(this, dataItem, duration)];
                                hiddenState = this.states.create("hidden", {});
                                if (!isNumber(duration)) {
                                    duration = hiddenState.get("stateAnimationDuration", this.get("stateAnimationDuration", 0));
                                }
                                easing = hiddenState.get("stateAnimationEasing", this.get("stateAnimationEasing"));
                                xAxis = this.get("xAxis");
                                yAxis = this.get("yAxis");
                                baseAxis = this.get("baseAxis");
                                stacked = this.get("stacked");
                                if (baseAxis === xAxis || !baseAxis) {
                                    each$1(this._valueYFields, function (key) {
                                        var min = yAxis.getPrivate("min");
                                        var baseValue = yAxis.baseValue();
                                        if (isNumber(min) && min > baseValue) {
                                            baseValue = min;
                                        }
                                        if (stacked) {
                                            baseValue = 0;
                                        }
                                        promises.push(dataItem.animate({ key: key + "Working", to: baseValue, duration: duration, easing: easing }).waitForStop());
                                    });
                                }
                                if (baseAxis === yAxis || !baseAxis) {
                                    min_1 = xAxis.getPrivate("min");
                                    baseValue_1 = xAxis.baseValue();
                                    if (isNumber(min_1) && min_1 > baseValue_1) {
                                        baseValue_1 = min_1;
                                    }
                                    if (stacked) {
                                        baseValue_1 = 0;
                                    }
                                    each$1(this._valueXFields, function (key) {
                                        promises.push(dataItem.animate({ key: key + "Working", to: baseValue_1, duration: duration, easing: easing }).waitForStop());
                                    });
                                }
                                return [4 /*yield*/, Promise.all(promises)];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                });
            }
        });
        Object.defineProperty(XYSeries.prototype, "_markDirtyStack", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._stackDirty = true;
                this.markDirty();
                this._markStakedDirtyStack();
            }
        });
        Object.defineProperty(XYSeries.prototype, "_markStakedDirtyStack", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var stackedSeries = this._stackedSeries;
                if (stackedSeries) {
                    each(stackedSeries, function (_key, value) {
                        if (!value._stackDirty) {
                            value._markDirtyStack();
                        }
                    });
                }
            }
        });
        Object.defineProperty(XYSeries.prototype, "_afterChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._afterChanged.call(this);
                if (this._skipped) {
                    this._markDirtyAxes();
                    this._skipped = false;
                }
            }
        });
        /**
         * Shows a tooltip for specific data item.
         *
         * @param  dataItem  Data item
         */
        Object.defineProperty(XYSeries.prototype, "showDataItemTooltip", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem) {
                this.updateLegendMarker(dataItem);
                this.updateLegendValue(dataItem);
                if (this.get("tooltip")) {
                    if (!this.isHidden()) {
                        var tooltip = this.get("tooltip");
                        if (tooltip) {
                            tooltip._setDataItem(dataItem);
                            if (dataItem) {
                                var locationX = this.get("locationX", 0);
                                var locationY = this.get("locationY", 1);
                                var itemLocationX = dataItem.get("locationX", locationX);
                                var itemLocationY = dataItem.get("locationY", locationY);
                                var xAxis = this.get("xAxis");
                                var yAxis = this.get("yAxis");
                                var vcx = this.get("vcx", 1);
                                var vcy = this.get("vcy", 1);
                                var xPos = xAxis.getDataItemPositionX(dataItem, this._tooltipFieldX, this._aLocationX0 + (this._aLocationX1 - this._aLocationX0) * itemLocationX, vcx);
                                var yPos = yAxis.getDataItemPositionY(dataItem, this._tooltipFieldY, this._aLocationY0 + (this._aLocationY1 - this._aLocationY0) * itemLocationY, vcy);
                                var point = this.getPoint(xPos, yPos);
                                var show_1 = true;
                                each$1(this._valueFields, function (field) {
                                    if (dataItem.get(field) == null) {
                                        show_1 = false;
                                    }
                                });
                                if (show_1) {
                                    var chart = this.chart;
                                    if (chart && chart.inPlot(point)) {
                                        tooltip.label.text.markDirtyText();
                                        tooltip.set("tooltipTarget", this._getTooltipTarget(dataItem));
                                        tooltip.set("pointTo", this._display.toGlobal({ x: point.x, y: point.y }));
                                    }
                                    else {
                                        tooltip._setDataItem(undefined);
                                    }
                                }
                                else {
                                    tooltip._setDataItem(undefined);
                                }
                            }
                        }
                    }
                    else {
                        this.hideTooltip();
                    }
                }
            }
        });
        Object.defineProperty(XYSeries.prototype, "_getTooltipTarget", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem) {
                if (this.get("seriesTooltipTarget") == "bullet") {
                    var bullets = dataItem.bullets;
                    if (bullets && bullets.length > 0) {
                        var bullet = bullets[0];
                        var sprite = bullet.get("sprite");
                        if (sprite) {
                            return sprite;
                        }
                    }
                }
                return this;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(XYSeries.prototype, "updateLegendValue", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem) {
                var legendDataItem = this.get("legendDataItem");
                if (legendDataItem) {
                    var label = legendDataItem.get("label");
                    if (label) {
                        var txt = "";
                        if (dataItem) {
                            label._setDataItem(dataItem);
                            txt = this.get("legendLabelText", label.get("text", this.get("name", "")));
                        }
                        else {
                            label._setDataItem(this._emptyDataItem);
                            txt = this.get("legendRangeLabelText", this.get("legendLabelText", label.get("text", this.get("name", ""))));
                        }
                        label.set("text", txt);
                    }
                    var valueLabel = legendDataItem.get("valueLabel");
                    if (valueLabel) {
                        var txt = "";
                        if (dataItem) {
                            valueLabel._setDataItem(dataItem);
                            txt = this.get("legendValueText", valueLabel.get("text", ""));
                        }
                        else {
                            valueLabel._setDataItem(this._emptyDataItem);
                            txt = this.get("legendRangeValueText", valueLabel.get("text", ""));
                        }
                        valueLabel.set("text", txt);
                    }
                }
            }
        });
        Object.defineProperty(XYSeries.prototype, "_getItemReaderLabel", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var text = "X: {" + this._xField;
                if (this.get("xAxis").isType("DateAxis")) {
                    text += ".formatDate()";
                }
                text += "}; Y: {" + this._yField;
                if (this.get("yAxis").isType("DateAxis")) {
                    text += ".formatDate()";
                }
                text += "}";
                return text;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(XYSeries.prototype, "getPoint", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (positionX, positionY) {
                var x = this.get("xAxis").get("renderer").positionToCoordinate(positionX);
                var y = this.get("yAxis").get("renderer").positionToCoordinate(positionY);
                return { x: x, y: y };
            }
        });
        Object.defineProperty(XYSeries.prototype, "_shouldInclude", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_position) {
                return true;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(XYSeries.prototype, "handleCursorHide", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.hideTooltip();
                this.updateLegendValue(undefined);
                this.updateLegendMarker(undefined);
            }
        });
        Object.defineProperty(XYSeries.prototype, "_afterDataChange", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._afterDataChange.call(this);
                this.resetExtremes();
            }
        });
        // todo description
        Object.defineProperty(XYSeries.prototype, "resetExtremes", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.setPrivate("selectionMinX", undefined);
                this.setPrivate("selectionMaxX", undefined);
                this.setPrivate("selectionMinY", undefined);
                this.setPrivate("selectionMaxY", undefined);
                this.setPrivate("minX", undefined);
                this.setPrivate("minY", undefined);
                this.setPrivate("maxX", undefined);
                this.setPrivate("maxY", undefined);
            }
        });
        /**
         * Creates and returns an axis range object.
         *
         * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-ranges/} for more info
         * @param   axisDataItem  Axis data item
         * @return                Axis range
         */
        Object.defineProperty(XYSeries.prototype, "createAxisRange", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (axisDataItem) {
                return this.axisRanges.push({
                    axisDataItem: axisDataItem
                });
            }
        });
        Object.defineProperty(XYSeries, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "XYSeries"
        });
        Object.defineProperty(XYSeries, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Series.classNames.concat([XYSeries.className])
        });
        return XYSeries;
    }(Series));

    /**
     * Base class for all "column-based" series
     */
    var BaseColumnSeries = /** @class */ (function (_super) {
        __extends(BaseColumnSeries, _super);
        function BaseColumnSeries() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_ph", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(_this, "_pw", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            return _this;
        }
        Object.defineProperty(BaseColumnSeries.prototype, "_makeGraphics", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (listTemplate, dataItem) {
                return this.makeColumn(dataItem, listTemplate);
            }
        });
        Object.defineProperty(BaseColumnSeries.prototype, "_makeFieldNames", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._makeFieldNames.call(this);
                var xAxis = this.get("xAxis");
                var yAxis = this.get("yAxis");
                var categoryAxis = "CategoryAxis";
                var valueAxis = "ValueAxis";
                if (xAxis.isType(categoryAxis)) {
                    if (!this.get("openCategoryXField")) {
                        this._xOpenField = this._xField;
                    }
                }
                if (xAxis.isType(valueAxis)) {
                    if (!this.get("openValueXField")) {
                        this._xOpenField = this._xField;
                    }
                }
                if (yAxis.isType(categoryAxis)) {
                    if (!this.get("openCategoryYField")) {
                        this._yOpenField = this._yField;
                    }
                }
                if (yAxis.isType(valueAxis)) {
                    if (!this.get("openValueYField")) {
                        this._yOpenField = this._yField;
                    }
                }
            }
        });
        Object.defineProperty(BaseColumnSeries.prototype, "_prepareChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._prepareChildren.call(this);
                var xAxis = this.get("xAxis");
                var yAxis = this.get("yAxis");
                var len = this.dataItems.length;
                var startIndex = Math.max(0, this.startIndex() - 2);
                var endIndex = Math.min(this.endIndex() + 2, len - 1);
                if (xAxis.inited && yAxis.inited) {
                    for (var i = startIndex; i <= endIndex; i++) {
                        var dataItem = this.dataItems[i];
                        this._createGraphics(dataItem);
                    }
                }
            }
        });
        Object.defineProperty(BaseColumnSeries.prototype, "_updateChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                var chart = this.chart;
                if (chart) {
                    this._ph = chart.plotContainer.height();
                    this._pw = chart.plotContainer.width();
                }
                var xAxis = this.get("xAxis");
                var yAxis = this.get("yAxis");
                var baseAxis = this.get("baseAxis");
                var columnsTemplate = this.columns.template;
                if (this.isDirty("fill")) {
                    if (columnsTemplate.get("fill") == null) {
                        columnsTemplate.set("fill", this.get("fill"));
                    }
                }
                if (this.isDirty("stroke")) {
                    if (columnsTemplate.get("stroke") == null) {
                        columnsTemplate.set("stroke", this.get("stroke"));
                    }
                }
                var index = 0;
                var clusterCount = 0;
                var i = 0;
                each$1(baseAxis.series, function (series) {
                    if (series instanceof BaseColumnSeries) {
                        var stacked = series.get("stacked");
                        if (stacked && i == 0) {
                            clusterCount++;
                        }
                        if (!stacked && series.get("clustered")) {
                            clusterCount++;
                        }
                    }
                    if (series === _this) {
                        index = clusterCount - 1;
                    }
                    i++;
                });
                if (!this.get("clustered")) {
                    index = 0;
                    clusterCount = 1;
                }
                if (clusterCount === 0) {
                    clusterCount = 1;
                    index = 0;
                }
                var xRenderer = xAxis.get("renderer");
                var yRenderer = yAxis.get("renderer");
                var cellStartLocation = "cellStartLocation";
                var cellEndLocation = "cellEndLocation";
                var cellLocationX0 = xRenderer.get(cellStartLocation, 0);
                var cellLocationX1 = xRenderer.get(cellEndLocation, 1);
                var cellLocationY0 = yRenderer.get(cellStartLocation, 0);
                var cellLocationY1 = yRenderer.get(cellEndLocation, 1);
                this._aLocationX0 = cellLocationX0 + (index / clusterCount) * (cellLocationX1 - cellLocationX0);
                this._aLocationX1 = cellLocationX0 + (index + 1) / clusterCount * (cellLocationX1 - cellLocationX0);
                this._aLocationY0 = cellLocationY0 + (index / clusterCount) * (cellLocationY1 - cellLocationY0);
                this._aLocationY1 = cellLocationY0 + (index + 1) / clusterCount * (cellLocationY1 - cellLocationY0);
                if (xAxis.inited && yAxis.inited) {
                    if (this._axesDirty || this._valuesDirty || this._stackDirty || this.isDirty("vcx") || this.isDirty("vcy") || this._sizeDirty) {
                        var len = this.dataItems.length;
                        var startIndex = Math.max(0, this.startIndex() - 2);
                        var endIndex = Math.min(this.endIndex() + 2, len - 1);
                        for (var i_1 = 0; i_1 < startIndex; i_1++) {
                            this._toggleColumn(this.dataItems[i_1], false);
                        }
                        var previous = this.dataItems[startIndex];
                        for (var i_2 = startIndex; i_2 <= endIndex; i_2++) {
                            var dataItem = this.dataItems[i_2];
                            if (dataItem.get("valueX") != null && dataItem.get("valueY") != null) {
                                previous = dataItem;
                                if (i_2 > 0 && startIndex > 0) {
                                    for (var j = i_2 - 1; j >= 0; j--) {
                                        var dataItem_1 = this.dataItems[j];
                                        if (dataItem_1.get("valueX") != null && dataItem_1.get("valueY") != null) {
                                            previous = dataItem_1;
                                            break;
                                        }
                                    }
                                }
                                break;
                            }
                        }
                        for (var i_3 = startIndex; i_3 <= endIndex; i_3++) {
                            var dataItem = this.dataItems[i_3];
                            this._updateGraphics(dataItem, previous);
                            if (dataItem.get("valueX") != null && dataItem.get("valueY") != null) {
                                previous = dataItem;
                            }
                        }
                        for (var i_4 = endIndex + 1; i_4 < len; i_4++) {
                            this._toggleColumn(this.dataItems[i_4], false);
                        }
                    }
                }
                else {
                    this._skipped = true;
                }
                this.updateLegendMarker();
                _super.prototype._updateChildren.call(this);
            }
        });
        Object.defineProperty(BaseColumnSeries.prototype, "_createGraphics", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem) {
                var _this = this;
                var graphics = dataItem.get("graphics");
                if (!graphics) {
                    graphics = this._makeGraphics(this.columns, dataItem);
                    dataItem.set("graphics", graphics);
                    graphics._setDataItem(dataItem);
                    var legendDataItem = dataItem.get("legendDataItem");
                    if (legendDataItem) {
                        var markerRectangle = legendDataItem.get("markerRectangle");
                        if (markerRectangle) {
                            markerRectangle.setAll({ fill: graphics.get("fill"), stroke: graphics.get("stroke") });
                        }
                    }
                    this.axisRanges.each(function (axisRange) {
                        var container = axisRange.container;
                        var graphicsArray = dataItem.get("rangeGraphics", []);
                        dataItem.set("rangeGraphics", graphicsArray);
                        var rangeGraphics = _this._makeGraphics(axisRange.columns, dataItem);
                        graphicsArray.push(rangeGraphics);
                        rangeGraphics.setPrivate("list", axisRange.columns);
                        container.children.push(rangeGraphics);
                    });
                }
            }
        });
        Object.defineProperty(BaseColumnSeries.prototype, "_updateGraphics", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, previousDataItem) {
                var _this = this;
                var graphics = dataItem.get("graphics");
                //if (!graphics) {
                //	this._createGraphics(dataItem);
                //	graphics = dataItem.get("graphics")!;
                //}
                var xField = this._xField;
                var yField = this._yField;
                var valueX = dataItem.get(xField);
                var valueY = dataItem.get(yField);
                if (valueX != null && valueY != null) {
                    var xOpenField = this._xOpenField;
                    var yOpenField = this._yOpenField;
                    var locationX = this.get("locationX", dataItem.get("locationX", 0.5));
                    var locationY = this.get("locationY", dataItem.get("locationY", 0.5));
                    var openLocationX = this.get("openLocationX", dataItem.get("openLocationX", locationX));
                    var openLocationY = this.get("openLocationY", dataItem.get("openLocationY", locationY));
                    var width = graphics.get("width");
                    var height = graphics.get("height");
                    var stacked = this.get("stacked");
                    var xAxis = this.get("xAxis");
                    var yAxis = this.get("yAxis");
                    var baseAxis = this.get("baseAxis");
                    var xStart = xAxis.get("start");
                    var xEnd = xAxis.get("end");
                    var yStart = yAxis.get("start");
                    var yEnd = yAxis.get("end");
                    var l_1;
                    var r_1;
                    var t_1;
                    var b_1;
                    var vcy = this.get("vcy", 1);
                    var vcx = this.get("vcx", 1);
                    var fitW_1 = false;
                    var fitH_1 = false;
                    if (yAxis.isType("CategoryAxis") && xAxis.isType("CategoryAxis")) {
                        var startLocation = this._aLocationX0 + openLocationX - 0.5;
                        var endLocation = this._aLocationX1 + locationX - 0.5;
                        if (width instanceof Percent) {
                            var offset = (endLocation - startLocation) * (1 - width.value) / 2;
                            startLocation += offset;
                            endLocation -= offset;
                        }
                        l_1 = xAxis.getDataItemPositionX(dataItem, xOpenField, startLocation, vcx);
                        r_1 = xAxis.getDataItemPositionX(dataItem, xField, endLocation, vcx);
                        startLocation = this._aLocationY0 + openLocationY - 0.5;
                        endLocation = this._aLocationY1 + locationY - 0.5;
                        if (height instanceof Percent) {
                            var offset = (endLocation - startLocation) * (1 - height.value) / 2;
                            startLocation += offset;
                            endLocation -= offset;
                        }
                        t_1 = yAxis.getDataItemPositionY(dataItem, yOpenField, startLocation, vcy);
                        b_1 = yAxis.getDataItemPositionY(dataItem, yField, endLocation, vcy);
                        dataItem.setRaw("point", { x: l_1 + (r_1 - l_1) / 2, y: t_1 + (b_1 - t_1) / 2 });
                    }
                    else if (xAxis === baseAxis) {
                        var startLocation = this._aLocationX0 + openLocationX - 0.5;
                        var endLocation = this._aLocationX1 + locationX - 0.5;
                        if (width instanceof Percent) {
                            var offset = (endLocation - startLocation) * (1 - width.value) / 2;
                            startLocation += offset;
                            endLocation -= offset;
                        }
                        l_1 = xAxis.getDataItemPositionX(dataItem, xOpenField, startLocation, vcx);
                        r_1 = xAxis.getDataItemPositionX(dataItem, xField, endLocation, vcx);
                        t_1 = yAxis.getDataItemPositionY(dataItem, yField, locationY, vcy);
                        if (this._yOpenField !== this._yField) {
                            b_1 = yAxis.getDataItemPositionY(dataItem, yOpenField, openLocationY, vcy);
                        }
                        else {
                            if (stacked) {
                                var stackToItemY = dataItem.get("stackToItemY");
                                if (stackToItemY) {
                                    b_1 = yAxis.getDataItemPositionY(stackToItemY, yField, openLocationY, stackToItemY.component.get("vcy"));
                                }
                                else {
                                    b_1 = yAxis.basePosition();
                                }
                            }
                            else {
                                b_1 = yAxis.basePosition();
                            }
                        }
                        dataItem.setRaw("point", { x: l_1 + (r_1 - l_1) / 2, y: t_1 });
                        fitH_1 = true;
                    }
                    else if (yAxis === baseAxis) {
                        var startLocation = this._aLocationY0 + openLocationY - 0.5;
                        var endLocation = this._aLocationY1 + locationY - 0.5;
                        if (height instanceof Percent) {
                            var offset = (endLocation - startLocation) * (1 - height.value) / 2;
                            startLocation += offset;
                            endLocation -= offset;
                        }
                        t_1 = yAxis.getDataItemPositionY(dataItem, yOpenField, startLocation, vcy);
                        b_1 = yAxis.getDataItemPositionY(dataItem, yField, endLocation, vcy);
                        r_1 = xAxis.getDataItemPositionX(dataItem, xField, locationX, vcx);
                        if (this._xOpenField !== this._xField) {
                            l_1 = xAxis.getDataItemPositionX(dataItem, xOpenField, openLocationX, vcx);
                        }
                        else {
                            if (stacked) {
                                var stackToItemX = dataItem.get("stackToItemX");
                                if (stackToItemX) {
                                    l_1 = xAxis.getDataItemPositionX(stackToItemX, xField, openLocationX, stackToItemX.component.get("vcx"));
                                }
                                else {
                                    l_1 = xAxis.basePosition();
                                }
                            }
                            else {
                                l_1 = xAxis.basePosition();
                            }
                        }
                        fitW_1 = true;
                        dataItem.setRaw("point", { x: r_1, y: t_1 + (b_1 - t_1) / 2 });
                    }
                    this._updateSeriesGraphics(dataItem, graphics, l_1, r_1, t_1, b_1, fitW_1, fitH_1);
                    if ((l_1 < xStart && r_1 < xStart) || (l_1 > xEnd && r_1 > xEnd) || (t_1 < yStart && b_1 < yStart) || (t_1 > yEnd && b_1 > yEnd)) {
                        this._toggleColumn(dataItem, false);
                    }
                    else {
                        this._toggleColumn(dataItem, true);
                    }
                    var rangeGraphics = dataItem.get("rangeGraphics");
                    if (rangeGraphics) {
                        each$1(rangeGraphics, function (graphics) {
                            _this._updateSeriesGraphics(dataItem, graphics, l_1, r_1, t_1, b_1, fitW_1, fitH_1);
                        });
                    }
                    this._applyGraphicsStates(dataItem, previousDataItem);
                }
            }
        });
        Object.defineProperty(BaseColumnSeries.prototype, "_updateSeriesGraphics", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, graphics, l, r, t, b, fitW, fitH) {
                var width = graphics.get("width");
                var height = graphics.get("height");
                var maxWidth = graphics.get("maxWidth");
                var maxHeight = graphics.get("maxHeight");
                var ptl = this.getPoint(l, t);
                var pbr = this.getPoint(r, b);
                var tooltipPoint = dataItem.get("point");
                if (tooltipPoint) {
                    var point = this.getPoint(tooltipPoint.x, tooltipPoint.y);
                    tooltipPoint.x = point.x + this._x;
                    tooltipPoint.y = point.y + this._y;
                }
                l = ptl.x;
                r = pbr.x;
                t = ptl.y;
                b = pbr.y;
                if (isNumber(width)) {
                    var offset = ((r - l) - width) / 2;
                    l += offset;
                    r -= offset;
                }
                if (isNumber(maxWidth) && maxWidth < Math.abs(r - l)) {
                    var offset = ((r - l) - maxWidth) / 2;
                    l += offset;
                    r -= offset;
                }
                if (isNumber(height)) {
                    var offset = ((b - t) - height) / 2;
                    t += offset;
                    b -= offset;
                }
                if (isNumber(maxHeight) && maxHeight < Math.abs(b - t)) {
                    var offset = ((b - t) - maxHeight) / 2;
                    t += offset;
                    b -= offset;
                }
                if (this.get("adjustBulletPosition")) {
                    if (fitW) {
                        r = Math.min(Math.max(0, r), this._pw);
                        l = Math.min(Math.max(0, l), this._pw);
                    }
                    if (fitH) {
                        t = Math.min(Math.max(0, t), this._ph);
                        b = Math.min(Math.max(0, b), this._ph);
                    }
                }
                dataItem.setRaw("left", l);
                dataItem.setRaw("right", r);
                dataItem.setRaw("top", t);
                dataItem.setRaw("bottom", b);
                graphics.setPrivate("width", r - l);
                graphics.setPrivate("height", b - t);
                graphics.set("x", l);
                graphics.set("y", b - (b - t));
            }
        });
        Object.defineProperty(BaseColumnSeries.prototype, "_handleDataSetChange", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                _super.prototype._handleDataSetChange.call(this);
                each$1(this._dataItems, function (dataItem) {
                    _this._toggleColumn(dataItem, false);
                });
            }
        });
        Object.defineProperty(BaseColumnSeries.prototype, "_applyGraphicsStates", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, previousDataItem) {
                var graphics = dataItem.get("graphics");
                var dropFromOpen = graphics.states.lookup("dropFromOpen");
                var riseFromOpen = graphics.states.lookup("riseFromOpen");
                var dropFromPrevious = graphics.states.lookup("dropFromPrevious");
                var riseFromPrevious = graphics.states.lookup("riseFromPrevious");
                if (dropFromOpen || dropFromPrevious || riseFromOpen || riseFromPrevious) {
                    var xAxis = this.get("xAxis");
                    var yAxis = this.get("yAxis");
                    var baseAxis = this.get("baseAxis");
                    var open_1;
                    var close_1;
                    var previousClose = void 0;
                    if (baseAxis === xAxis && yAxis.isType("ValueAxis")) {
                        open_1 = dataItem.get(this._yOpenField);
                        close_1 = dataItem.get(this._yField);
                        previousClose = previousDataItem.get(this._yField);
                    }
                    else if (baseAxis === yAxis && xAxis.isType("ValueAxis")) {
                        open_1 = dataItem.get(this._xOpenField);
                        close_1 = dataItem.get(this._xField);
                        previousClose = previousDataItem.get(this._xField);
                    }
                    if (isNumber(open_1) && isNumber(close_1)) {
                        if (close_1 < open_1) {
                            if (dropFromOpen) {
                                dropFromOpen.apply();
                            }
                        }
                        else {
                            if (riseFromOpen) {
                                riseFromOpen.apply();
                            }
                        }
                        if (isNumber(previousClose)) {
                            if (close_1 < previousClose) {
                                if (dropFromPrevious) {
                                    dropFromPrevious.apply();
                                }
                            }
                            else {
                                if (riseFromPrevious) {
                                    riseFromPrevious.apply();
                                }
                            }
                        }
                    }
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(BaseColumnSeries.prototype, "disposeDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem) {
                _super.prototype.disposeDataItem.call(this, dataItem);
                var graphics = dataItem.get("graphics");
                if (graphics) {
                    this.columns.removeValue(graphics);
                    graphics.dispose();
                }
                var rangeGraphics = dataItem.get("rangeGraphics");
                if (rangeGraphics) {
                    each$1(rangeGraphics, function (graphics) {
                        var list = graphics.getPrivate("list");
                        if (list) {
                            list.removeValue(graphics);
                        }
                        graphics.dispose();
                    });
                }
            }
        });
        /**
         * Hides series's data item.
         *
         * @param   dataItem  Data item
         * @param   duration  Animation duration in milliseconds
         * @return            Promise
         */
        Object.defineProperty(BaseColumnSeries.prototype, "hideDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, duration) {
                return __awaiter(this, void 0, void 0, function () {
                    var promises, graphics, rangeGraphics;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                promises = [_super.prototype.hideDataItem.call(this, dataItem, duration)];
                                graphics = dataItem.get("graphics");
                                if (graphics) {
                                    promises.push(graphics.hide(duration));
                                }
                                rangeGraphics = dataItem.get("rangeGraphics");
                                if (rangeGraphics) {
                                    each$1(rangeGraphics, function (graphics) {
                                        promises.push(graphics.hide(duration));
                                    });
                                }
                                return [4 /*yield*/, Promise.all(promises)];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                });
            }
        });
        Object.defineProperty(BaseColumnSeries.prototype, "_toggleColumn", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, visible) {
                var graphics = dataItem.get("graphics");
                if (graphics) {
                    graphics.setPrivate("visible", visible);
                }
                var rangeGraphics = dataItem.get("rangeGraphics");
                if (rangeGraphics) {
                    each$1(rangeGraphics, function (graphics) {
                        graphics.setPrivate("visible", visible);
                    });
                }
                var bullets = dataItem.bullets;
                if (bullets) {
                    each$1(bullets, function (bullet) {
                        bullet.setPrivate("hidden", !visible);
                    });
                }
            }
        });
        /**
         * Shows series's data item.
         *
         * @param   dataItem  Data item
         * @param   duration  Animation duration in milliseconds
         * @return            Promise
         */
        Object.defineProperty(BaseColumnSeries.prototype, "showDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, duration) {
                return __awaiter(this, void 0, void 0, function () {
                    var promises, graphics, rangeGraphics;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                promises = [_super.prototype.showDataItem.call(this, dataItem, duration)];
                                graphics = dataItem.get("graphics");
                                if (graphics) {
                                    promises.push(graphics.show(duration));
                                }
                                rangeGraphics = dataItem.get("rangeGraphics");
                                if (rangeGraphics) {
                                    each$1(rangeGraphics, function (graphics) {
                                        promises.push(graphics.show(duration));
                                    });
                                }
                                return [4 /*yield*/, Promise.all(promises)];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                });
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(BaseColumnSeries.prototype, "updateLegendMarker", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem) {
                var _this = this;
                var legendDataItem = this.get("legendDataItem");
                if (this.get("useLastColorForLegendMarker")) {
                    if (!dataItem) {
                        var lastDataItem = this.dataItems[this.endIndex() - 1];
                        if (lastDataItem) {
                            dataItem = lastDataItem;
                        }
                    }
                }
                if (legendDataItem) {
                    var graphics_1 = this.columns.template;
                    if (dataItem) {
                        var column = dataItem.get("graphics");
                        if (column) {
                            graphics_1 = column;
                        }
                    }
                    var markerRectangle_1 = legendDataItem.get("markerRectangle");
                    if (markerRectangle_1) {
                        if (!legendDataItem.get("itemContainer").get("disabled")) {
                            each$1(visualSettings, function (setting) {
                                markerRectangle_1.set(setting, graphics_1.get(setting, _this.get(setting)));
                            });
                        }
                    }
                }
            }
        });
        Object.defineProperty(BaseColumnSeries.prototype, "_getTooltipTarget", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem) {
                if (this.get("seriesTooltipTarget") == "bullet") {
                    return _super.prototype._getTooltipTarget.call(this, dataItem);
                }
                var column = dataItem.get("graphics");
                if (column) {
                    return column;
                }
                return this;
            }
        });
        Object.defineProperty(BaseColumnSeries, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "BaseColumnSeries"
        });
        Object.defineProperty(BaseColumnSeries, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: XYSeries.classNames.concat([BaseColumnSeries.className])
        });
        return BaseColumnSeries;
    }(XYSeries));

    /**
     * A base class for all axes.
     *
     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/#Adding_axes} for more info
     */
    var Axis = /** @class */ (function (_super) {
        __extends(Axis, _super);
        function Axis() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_series", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            Object.defineProperty(_this, "_isPanning", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            /**
             * A [[Container]] that holds all the axis label elements.
             *
             * @default Container.new()
             */
            Object.defineProperty(_this, "labelsContainer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this.children.push(Container.new(_this._root, {}))
            });
            /**
             * A [[Container]] that holds all the axis grid and fill elements.
             *
             * @default Container.new()
             */
            Object.defineProperty(_this, "gridContainer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: Container.new(_this._root, { width: p100, height: p100 })
            });
            /**
             * A [[Container]] that holds axis grid elements which goes above the series.
             *
             * @default Container.new()
             */
            Object.defineProperty(_this, "topGridContainer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: Container.new(_this._root, { width: p100, height: p100 })
            });
            /**
             * A [[Container]] that holds all the axis bullet elements.
             *
             * @default new Container
             */
            Object.defineProperty(_this, "bulletsContainer", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this.children.push(Container.new(_this._root, { isMeasured: false, width: p100, height: p100, position: "absolute" }))
            });
            /**
             * A referenece to the the chart the axis belongs to.
             */
            Object.defineProperty(_this, "chart", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_rangesDirty", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_panStart", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(_this, "_panEnd", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 1
            });
            Object.defineProperty(_this, "_sAnimation", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_eAnimation", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_skipSync", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            /**
             * A list of axis ranges.
             *
             * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-ranges/} for more info
             * @default new List()
             */
            Object.defineProperty(_this, "axisRanges", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new List()
            });
            Object.defineProperty(_this, "_seriesAxisRanges", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            /**
             * A control label that is invisible but is used to keep width the width of
             * the axis constant.
             *
             * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/#Ghost_label} for more info
             */
            Object.defineProperty(_this, "ghostLabel", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_cursorPosition", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: -1
            });
            Object.defineProperty(_this, "_snapToSeries", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_seriesValuesDirty", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            /**
             * A container above the axis that can be used to add additional stuff into
             * it. For example a legend, label, or an icon.
             *
             * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-headers/} for more info
             * @default new Container
             */
            Object.defineProperty(_this, "axisHeader", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: _this.children.push(Container.new(_this._root, {
                    themeTags: ["axis", "header"],
                    position: "absolute",
                    background: Rectangle.new(_this._root, {
                        themeTags: ["header", "background"],
                        fill: _this._root.interfaceColors.get("background")
                    })
                }))
            });
            return _this;
        }
        Object.defineProperty(Axis.prototype, "_dispose", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                // these could be in other parents, so disposing just in case
                this.gridContainer.dispose();
                this.topGridContainer.dispose();
                this.bulletsContainer.dispose();
                this.labelsContainer.dispose();
                this.axisHeader.dispose();
                _super.prototype._dispose.call(this);
            }
        });
        Object.defineProperty(Axis.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                _super.prototype._afterNew.call(this);
                this.setPrivate("updateScrollbar", true);
                this._disposers.push(this.axisRanges.events.onAll(function (change) {
                    if (change.type === "clear") {
                        each$1(change.oldValues, function (dataItem) {
                            _this.disposeDataItem(dataItem);
                        });
                    }
                    else if (change.type === "push") {
                        _this._processAxisRange(change.newValue, ["range"]);
                    }
                    else if (change.type === "setIndex") {
                        _this._processAxisRange(change.newValue, ["range"]);
                    }
                    else if (change.type === "insertIndex") {
                        _this._processAxisRange(change.newValue, ["range"]);
                    }
                    else if (change.type === "removeIndex") {
                        _this.disposeDataItem(change.oldValue);
                    }
                    else if (change.type === "moveIndex") {
                        _this._processAxisRange(change.value, ["range"]);
                    }
                    else {
                        throw new Error("Unknown IStreamEvent type");
                    }
                }));
                var renderer = this.get("renderer");
                if (renderer) {
                    renderer.axis = this;
                    renderer.processAxis();
                }
                this.children.push(renderer);
                this.ghostLabel = renderer.makeLabel(new DataItem(this, undefined, {}), []);
                this.ghostLabel.set("opacity", 0);
            }
        });
        /**
         * Zooms the axis to relative locations.
         *
         * Both `start` and `end` are relative: 0 means start of the axis, 1 - end.
         *
         * @param   start     Relative start
         * @param   end       Relative end
         * @param   duration  Duration of the zoom animation in milliseconds
         * @return            Zoom animation
         */
        Object.defineProperty(Axis.prototype, "zoom", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (start, end, duration, priority) {
                var _a;
                var _this = this;
                if (this.get("start") !== start || this.get("end") != end) {
                    var sAnimation = this._sAnimation;
                    var eAnimation = this._eAnimation;
                    var maxDeviation = this.get("maxDeviation", 0.5) * Math.min(1, (end - start));
                    if (start < -maxDeviation) {
                        start = -maxDeviation;
                    }
                    if (end > 1 + maxDeviation) {
                        end = 1 + maxDeviation;
                    }
                    if (start > end) {
                        _a = __read([end, start], 2), start = _a[0], end = _a[1];
                    }
                    if (!isNumber(duration)) {
                        duration = this.get("interpolationDuration", 0);
                    }
                    if (!priority) {
                        priority = "end";
                    }
                    var maxZoomFactor = this.getPrivate("maxZoomFactor", this.get("maxZoomFactor", 100));
                    var maxZoomFactorReal = maxZoomFactor;
                    if (end === 1 && start !== 0) {
                        if (start < this.get("start")) {
                            priority = "start";
                        }
                        else {
                            priority = "end";
                        }
                    }
                    if (start === 0 && end !== 1) {
                        if (end > this.get("end")) {
                            priority = "end";
                        }
                        else {
                            priority = "start";
                        }
                    }
                    var minZoomCount = this.get("minZoomCount");
                    var maxZoomCount = this.get("maxZoomCount");
                    if (isNumber(minZoomCount)) {
                        maxZoomFactor = maxZoomFactorReal / minZoomCount;
                    }
                    var minZoomFactor = 1;
                    if (isNumber(maxZoomCount)) {
                        minZoomFactor = maxZoomFactorReal / maxZoomCount;
                    }
                    // most likely we are dragging left scrollbar grip here, so we tend to modify end
                    if (priority === "start") {
                        if (maxZoomCount > 0) {
                            // add to the end
                            if (1 / (end - start) < minZoomFactor) {
                                end = start + 1 / minZoomFactor;
                            }
                        }
                        // add to the end
                        if (1 / (end - start) > maxZoomFactor) {
                            end = start + 1 / maxZoomFactor;
                        }
                        //unless end is > 0
                        if (end > 1 && end - start < 1 / maxZoomFactor) {
                            //end = 1;
                            start = end - 1 / maxZoomFactor;
                        }
                    }
                    // most likely we are dragging right, so we modify left
                    else {
                        if (maxZoomCount > 0) {
                            // add to the end
                            if (1 / (end - start) < minZoomFactor) {
                                start = end - 1 / minZoomFactor;
                            }
                        }
                        // remove from start
                        if (1 / (end - start) > maxZoomFactor) {
                            start = end - 1 / maxZoomFactor;
                        }
                        if (start < 0 && end - start < 1 / maxZoomFactor) {
                            //start = 0;
                            end = start + 1 / maxZoomFactor;
                        }
                    }
                    if (1 / (end - start) > maxZoomFactor) {
                        end = start + 1 / maxZoomFactor;
                    }
                    if (1 / (end - start) > maxZoomFactor) {
                        start = end - 1 / maxZoomFactor;
                    }
                    if (maxZoomCount != null && minZoomCount != null && (start == this.get("start") && end == this.get("end"))) {
                        var chart = this.chart;
                        if (chart) {
                            chart._handleAxisSelection(this, true);
                        }
                    }
                    if (((sAnimation && sAnimation.playing && sAnimation.to == start) || this.get("start") == start) && ((eAnimation && eAnimation.playing && eAnimation.to == end) || this.get("end") == end)) {
                        return;
                    }
                    if (duration > 0) {
                        var easing = this.get("interpolationEasing");
                        var sAnimation_1, eAnimation_1;
                        if (this.get("start") != start) {
                            sAnimation_1 = this.animate({ key: "start", to: start, duration: duration, easing: easing });
                        }
                        if (this.get("end") != end) {
                            eAnimation_1 = this.animate({ key: "end", to: end, duration: duration, easing: easing });
                        }
                        this._sAnimation = sAnimation_1;
                        this._eAnimation = eAnimation_1;
                        if (sAnimation_1) {
                            return sAnimation_1;
                        }
                        else if (eAnimation_1) {
                            return eAnimation_1;
                        }
                    }
                    else {
                        this.set("start", start);
                        this.set("end", end);
                        // otherwise bullets and line out of sync, as series is not redrawn
                        this._root.events.once("frameended", function () {
                            _this._markDirtyKey("start");
                            _this._root._markDirty();
                        });
                    }
                }
                else {
                    if (this._sAnimation) {
                        this._sAnimation.stop();
                    }
                    if (this._eAnimation) {
                        this._eAnimation.stop();
                    }
                }
            }
        });
        Object.defineProperty(Axis.prototype, "series", {
            /**
             * A list of series using this axis.
             *
             * @return Series
             */
            get: function () {
                return this._series;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Axis.prototype, "_processAxisRange", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, themeTags) {
                dataItem.setRaw("isRange", true);
                this._createAssets(dataItem, themeTags);
                this._rangesDirty = true;
                this._prepareDataItem(dataItem);
                var above = dataItem.get("above");
                var container = this.topGridContainer;
                var grid = dataItem.get("grid");
                if (above && grid) {
                    container.children.moveValue(grid);
                }
                var fill = dataItem.get("axisFill");
                if (above && fill) {
                    container.children.moveValue(fill);
                }
            }
        });
        Object.defineProperty(Axis.prototype, "_prepareDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_dataItem, _index) { }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Axis.prototype, "markDirtyExtremes", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Axis.prototype, "markDirtySelectionExtremes", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
            }
        });
        Object.defineProperty(Axis.prototype, "_calculateTotals", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
            }
        });
        Object.defineProperty(Axis.prototype, "_updateAxisRanges", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                this.axisRanges.each(function (axisRange) {
                    _this._prepareDataItem(axisRange);
                });
                each$1(this._seriesAxisRanges, function (axisRange) {
                    _this._prepareDataItem(axisRange);
                });
            }
        });
        Object.defineProperty(Axis.prototype, "_prepareChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._prepareChildren.call(this);
                if (this.get("fixAxisSize")) {
                    this.ghostLabel.set("visible", true);
                }
                else {
                    this.ghostLabel.set("visible", false);
                }
                if (this.isDirty("start") || this.isDirty("end")) {
                    this.chart._updateCursor();
                    var start = this.get("start", 0);
                    var end = this.get("end", 1);
                    var maxDeviation = this.get("maxDeviation", 0.5) * Math.min(1, (end - start));
                    if (start < -maxDeviation) {
                        var delta = start + maxDeviation;
                        start = -maxDeviation;
                        this.setRaw("start", start);
                        if (this.isDirty("end")) {
                            this.setRaw("end", end - delta);
                        }
                    }
                    if (end > 1 + maxDeviation) {
                        var delta = end - 1 - maxDeviation;
                        end = 1 + maxDeviation;
                        this.setRaw("end", end);
                        if (this.isDirty("start")) {
                            this.setRaw("start", start - delta);
                        }
                    }
                }
                var renderer = this.get("renderer");
                renderer._start = this.get("start");
                renderer._end = this.get("end");
                renderer._inversed = renderer.get("inversed", false);
                renderer._axisLength = renderer.axisLength() / (renderer._end - renderer._start);
                renderer._updateLC();
                if (this.isDirty("tooltip")) {
                    var tooltip = this.get("tooltip");
                    if (tooltip) {
                        var rendererTags = renderer.get("themeTags");
                        tooltip.addTag("axis");
                        tooltip.addTag(this.className.toLowerCase());
                        tooltip._applyThemes();
                        if (rendererTags) {
                            tooltip.set("themeTags", mergeTags(tooltip.get("themeTags"), rendererTags));
                            tooltip.label._applyThemes();
                        }
                    }
                }
            }
        });
        Object.defineProperty(Axis.prototype, "_updateTooltipBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var tooltip = this.get("tooltip");
                if (tooltip) {
                    this.get("renderer").updateTooltipBounds(tooltip);
                }
            }
        });
        Object.defineProperty(Axis.prototype, "_updateBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._updateBounds.call(this);
                this._updateTooltipBounds();
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Axis.prototype, "processChart", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (chart) {
                var _this = this;
                this.chart = chart;
                var renderer = this.get("renderer");
                renderer.chart = chart;
                chart.gridContainer.children.push(this.gridContainer);
                chart.topGridContainer.children.push(this.topGridContainer);
                chart.axisHeadersContainer.children.push(this.axisHeader);
                this.on("start", function () {
                    chart._handleAxisSelection(_this);
                });
                this.on("end", function () {
                    chart._handleAxisSelection(_this);
                });
                chart.plotContainer.onPrivate("width", function () {
                    _this.markDirtySize();
                });
                chart.plotContainer.onPrivate("height", function () {
                    _this.markDirtySize();
                });
                chart.processAxis(this);
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Axis.prototype, "hideDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem) {
                this._toggleDataItem(dataItem, false);
                return _super.prototype.hideDataItem.call(this, dataItem);
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Axis.prototype, "showDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem) {
                this._toggleDataItem(dataItem, true);
                return _super.prototype.showDataItem.call(this, dataItem);
            }
        });
        Object.defineProperty(Axis.prototype, "_toggleDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, visible) {
                var label = dataItem.get("label");
                if (label) {
                    label.setPrivate("visible", visible);
                }
                var grid = dataItem.get("grid");
                if (grid) {
                    grid.setPrivate("visible", visible);
                }
                var tick = dataItem.get("tick");
                if (tick) {
                    tick.setPrivate("visible", visible);
                }
                var axisFill = dataItem.get("axisFill");
                if (axisFill) {
                    axisFill.setPrivate("visible", visible);
                }
                var bullet = dataItem.get("bullet");
                if (bullet) {
                    var sprite = bullet.get("sprite");
                    if (sprite) {
                        sprite.setPrivate("visible", visible);
                    }
                }
            }
        });
        Object.defineProperty(Axis.prototype, "_createAssets", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, tags) {
                var renderer = this.get("renderer");
                if (!dataItem.get("label")) {
                    renderer.makeLabel(dataItem, tags);
                }
                if (!dataItem.get("grid")) {
                    renderer.makeGrid(dataItem, tags);
                }
                if (!dataItem.get("tick")) {
                    renderer.makeTick(dataItem, tags);
                }
                if (!dataItem.get("axisFill")) {
                    renderer.makeAxisFill(dataItem, tags);
                }
                this._processBullet(dataItem);
            }
        });
        Object.defineProperty(Axis.prototype, "_processBullet", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem) {
                var bullet = dataItem.get("bullet");
                var axisBullet = this.get("bullet");
                if (!bullet && axisBullet && !dataItem.get("isRange")) {
                    bullet = axisBullet(this._root, this, dataItem);
                }
                if (bullet) {
                    bullet.axis = this;
                    var sprite = bullet.get("sprite");
                    if (sprite) {
                        sprite._setDataItem(dataItem);
                        dataItem.setRaw("bullet", bullet);
                        if (!sprite.parent) {
                            this.bulletsContainer.children.push(sprite);
                        }
                    }
                }
            }
        });
        Object.defineProperty(Axis.prototype, "_afterChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._afterChanged.call(this);
                var chart = this.chart;
                if (chart) {
                    chart._updateChartLayout();
                    chart.axisHeadersContainer.markDirtySize();
                }
                this.get("renderer")._updatePositions();
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Axis.prototype, "disposeDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem) {
                _super.prototype.disposeDataItem.call(this, dataItem);
                var renderer = this.get("renderer");
                var label = dataItem.get("label");
                if (label) {
                    renderer.labels.removeValue(label);
                    label.dispose();
                }
                var tick = dataItem.get("tick");
                if (tick) {
                    renderer.ticks.removeValue(tick);
                    tick.dispose();
                }
                var grid = dataItem.get("grid");
                if (grid) {
                    renderer.grid.removeValue(grid);
                    grid.dispose();
                }
                var axisFill = dataItem.get("axisFill");
                if (axisFill) {
                    renderer.axisFills.removeValue(axisFill);
                    axisFill.dispose();
                }
                var bullet = dataItem.get("bullet");
                if (bullet) {
                    bullet.dispose();
                }
            }
        });
        Object.defineProperty(Axis.prototype, "_updateGhost", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var ghostLabel = this.ghostLabel;
                if (!ghostLabel.isHidden()) {
                    var bounds = ghostLabel.localBounds();
                    var gWidth_1 = bounds.right - bounds.left;
                    each$1(this.dataItems, function (dataItem) {
                        var label = dataItem.get("label");
                        if (label && !label.isHidden()) {
                            var bounds_1 = label.localBounds();
                            var w = bounds_1.right - bounds_1.left;
                            if (w > gWidth_1) {
                                ghostLabel.set("text", label.text._getText());
                            }
                        }
                    });
                }
                var start = this.get("start", 0);
                var end = this.get("end", 1);
                this.get("renderer").updateLabel(ghostLabel, start + (end - start) * 0.5);
            }
        });
        Object.defineProperty(Axis.prototype, "_handleCursorPosition", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (position, snapToSeries) {
                var renderer = this.get("renderer");
                position = renderer.toAxisPosition(position);
                this._cursorPosition = position;
                this._snapToSeries = snapToSeries;
                this.updateTooltip();
            }
        });
        /**
         * Can be called when axis zoom changes and you need to update tooltip
         * position.
         */
        Object.defineProperty(Axis.prototype, "updateTooltip", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                var snapToSeries = this._snapToSeries;
                var position = this._cursorPosition;
                var tooltip = this.get("tooltip");
                var renderer = this.get("renderer");
                if (isNumber(position)) {
                    each$1(this.series, function (series) {
                        if (series.get("baseAxis") === _this) {
                            var dataItem = _this.getSeriesItem(series, position);
                            series.setRaw("tooltipDataItem", dataItem);
                            if (snapToSeries && snapToSeries.indexOf(series) != -1) {
                                series.updateLegendMarker(dataItem);
                                series.updateLegendValue(dataItem);
                            }
                            else {
                                series.showDataItemTooltip(dataItem);
                            }
                        }
                    });
                    if (tooltip) {
                        renderer.updateTooltipBounds(tooltip);
                        if (this.get("snapTooltip")) {
                            position = this.roundAxisPosition(position, this.get("tooltipLocation", 0.5));
                        }
                        if (!isNaN$1(position)) {
                            this.setPrivateRaw("tooltipPosition", position);
                            this._updateTooltipText(tooltip, position);
                            renderer.positionTooltip(tooltip, position);
                            if (position < this.get("start") || position > this.get("end")) {
                                tooltip.hide(0);
                            }
                            else {
                                tooltip.show(0);
                            }
                        }
                        else {
                            tooltip.hide(0);
                        }
                    }
                }
            }
        });
        Object.defineProperty(Axis.prototype, "_updateTooltipText", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (tooltip, position) {
                tooltip.label.set("text", this.getTooltipText(position));
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Axis.prototype, "roundAxisPosition", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (position, _location) {
                return position;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Axis.prototype, "handleCursorShow", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var tooltip = this.get("tooltip");
                if (tooltip) {
                    tooltip.show();
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Axis.prototype, "handleCursorHide", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var tooltip = this.get("tooltip");
                if (tooltip) {
                    tooltip.hide();
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Axis.prototype, "processSeriesDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_dataItem, _fields) {
            }
        });
        Object.defineProperty(Axis.prototype, "_clearDirty", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._clearDirty.call(this);
                this._sizeDirty = false;
                this._rangesDirty = false;
            }
        });
        /**
         * Converts pixel coordinate to a relative position on axis.
         *
         * @param   coordinate  Coordinate
         * @return              Relative position
         */
        Object.defineProperty(Axis.prototype, "coordinateToPosition", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (coordinate) {
                var renderer = this.get("renderer");
                return renderer.toAxisPosition(coordinate / renderer.axisLength());
            }
        });
        /**
         * Converts relative position of the plot area to relative position of the
         * axis with zoom taken into account.
         *
         * @param position Position
         * @return Relative position
         */
        Object.defineProperty(Axis.prototype, "toAxisPosition", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (position) {
                return this.get("renderer").toAxisPosition(position);
            }
        });
        /**
         * Adjusts position with inversed taken into account.
         *
         * @ignore
         */
        Object.defineProperty(Axis.prototype, "fixPosition", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (position) {
                return this.get("renderer").fixPosition(position);
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Axis.prototype, "shouldGap", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_dataItem, _nextItem, _autoGapCount, _fieldName) {
                return false;
            }
        });
        /**
         * Creates and returns an axis range object.
         *
         * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-ranges/} for more info
         * @param   axisDataItem  Axis data item
         * @return                Axis range
         */
        Object.defineProperty(Axis.prototype, "createAxisRange", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (axisDataItem) {
                return this.axisRanges.push(axisDataItem);
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(Axis.prototype, "_groupSeriesData", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_series) { }
        });
        Object.defineProperty(Axis, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Axis"
        });
        Object.defineProperty(Axis, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Component.classNames.concat([Axis.className])
        });
        return Axis;
    }(Component));

    /**
     * Creates a category axis.
     *
     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/category-axis/} for more info
     * @important
     */
    var CategoryAxis = /** @class */ (function (_super) {
        __extends(CategoryAxis, _super);
        function CategoryAxis() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_frequency", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 1
            });
            Object.defineProperty(_this, "_itemMap", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            return _this;
        }
        Object.defineProperty(CategoryAxis.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._settings.themeTags = mergeTags(this._settings.themeTags, ["axis"]);
                this.fields.push("category");
                this.setPrivateRaw("name", "category");
                this.addTag("category");
                _super.prototype._afterNew.call(this);
            }
        });
        Object.defineProperty(CategoryAxis.prototype, "_prepareChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                _super.prototype._prepareChildren.call(this);
                var len = this.dataItems.length;
                var i = 0;
                if (this._valuesDirty) {
                    each$1(this.dataItems, function (dataItem) {
                        dataItem.setRaw("index", i);
                        _this._itemMap[dataItem.get("category")] = dataItem;
                        i++;
                    });
                    this.setPrivateRaw("maxZoomFactor", len);
                }
                this.setPrivateRaw("startIndex", Math.max(Math.round(this.get("start", 0) * len), 0));
                this.setPrivateRaw("endIndex", Math.min(Math.round(this.get("end", 1) * len), len));
                if (this._sizeDirty || this._valuesDirty || (this.isDirty("start") || this.isDirty("end") || this.isPrivateDirty("endIndex") || this.isPrivateDirty("startIndex") || this.isPrivateDirty("width") || this.isPrivateDirty("height"))) {
                    if (this.dataItems.length > 0) {
                        this._handleRangeChange();
                        this._prepareAxisItems();
                        this._updateAxisRanges();
                    }
                }
            }
        });
        Object.defineProperty(CategoryAxis.prototype, "_handleRangeChange", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                each$1(this.series, function (series) {
                    var startCategory = _this.dataItems[_this.startIndex()].get("category");
                    var endCategory = _this.dataItems[_this.endIndex() - 1].get("category");
                    var baseAxis = series.get("baseAxis");
                    var xAxis = series.get("xAxis");
                    var yAxis = series.get("yAxis");
                    if (xAxis instanceof CategoryAxis && yAxis instanceof CategoryAxis) {
                        series._markDirtyAxes();
                    }
                    else if (baseAxis === _this) {
                        var key = void 0;
                        var openKey = void 0;
                        var otherAxis = yAxis;
                        if (xAxis === baseAxis) {
                            if (series.get("categoryXField")) {
                                key = "categoryX";
                            }
                            if (series.get("openCategoryXField")) {
                                openKey = "openCategoryX";
                            }
                        }
                        else if (yAxis === baseAxis) {
                            if (series.get("categoryYField")) {
                                key = "categoryY";
                            }
                            if (series.get("openCategoryYField")) {
                                openKey = "openCategoryY";
                            }
                            otherAxis = xAxis;
                        }
                        if (otherAxis.className == "ValueAxis") {
                            if (key || openKey) {
                                var startDataItem = void 0;
                                var endDataItem = void 0;
                                for (var i = 0, len = series.dataItems.length; i < len; i++) {
                                    var dataItem = series.dataItems[i];
                                    if (key) {
                                        if (dataItem.get(key) === startCategory) {
                                            startDataItem = dataItem;
                                            break;
                                        }
                                    }
                                    if (openKey) {
                                        if (dataItem.get(openKey) === startCategory) {
                                            startDataItem = dataItem;
                                            break;
                                        }
                                    }
                                }
                                for (var i = series.dataItems.length - 1; i >= 0; i--) {
                                    var dataItem = series.dataItems[i];
                                    if (key) {
                                        if (dataItem.get(key) === endCategory) {
                                            endDataItem = dataItem;
                                            break;
                                        }
                                    }
                                    if (openKey) {
                                        if (dataItem.get(openKey) === endCategory) {
                                            endDataItem = dataItem;
                                            break;
                                        }
                                    }
                                }
                                if (startDataItem) {
                                    series.setPrivate("startIndex", series.dataItems.indexOf(startDataItem));
                                }
                                if (endDataItem) {
                                    series.setPrivate("endIndex", series.dataItems.indexOf(endDataItem) + 1);
                                }
                            }
                        }
                        series._markDirtyAxes(); // must be outside
                    }
                });
            }
        });
        Object.defineProperty(CategoryAxis.prototype, "_prepareAxisItems", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var renderer = this.get("renderer");
                var len = this.dataItems.length;
                var startIndex = this.startIndex();
                if (startIndex > 0) {
                    startIndex--;
                }
                var endIndex = this.endIndex();
                if (endIndex < len) {
                    endIndex++;
                }
                var maxCount = renderer.axisLength() / Math.max(renderer.get("minGridDistance"), 1 / Number.MAX_SAFE_INTEGER);
                var frequency = Math.max(1, Math.min(len, Math.ceil((endIndex - startIndex) / maxCount)));
                startIndex = Math.floor(startIndex / frequency) * frequency;
                this._frequency = frequency;
                for (var j = 0; j < len; j++) {
                    this.dataItems[j].hide();
                }
                var f = this.dataItems[startIndex].get("index", 0);
                for (var i = startIndex; i < endIndex; i = i + frequency) {
                    var dataItem = this.dataItems[i];
                    this._createAssets(dataItem, []);
                    if (dataItem.isHidden()) {
                        dataItem.show();
                    }
                    this._prepareDataItem(dataItem, f, frequency);
                    f++;
                }
                this._updateGhost();
            }
        });
        Object.defineProperty(CategoryAxis.prototype, "_prepareDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, fillIndex, count) {
                var renderer = this.get("renderer");
                var categoryLocation = dataItem.get("categoryLocation", 0);
                var endCategoryLocation = dataItem.get("endCategoryLocation", 1);
                var index = dataItem.get("index");
                if (!isNumber(index)) {
                    index = this.categoryToIndex(dataItem.get("category"));
                }
                var position = this.indexToPosition(index, categoryLocation);
                var endCategory = dataItem.get("endCategory");
                var endIndex;
                if (endCategory) {
                    endIndex = this.categoryToIndex(endCategory);
                    if (!isNumber(endIndex)) {
                        endIndex = index;
                    }
                }
                else {
                    endIndex = index;
                }
                var endPosition = this.indexToPosition(endIndex, endCategoryLocation);
                var fillEndIndex;
                var fillEndPosition;
                if (dataItem.get("isRange")) {
                    fillEndIndex = endIndex;
                }
                else {
                    fillEndIndex = index + this._frequency - 1;
                }
                fillEndPosition = this.indexToPosition(fillEndIndex, endCategoryLocation);
                renderer.updateLabel(dataItem.get("label"), position, endPosition, count);
                renderer.updateGrid(dataItem.get("grid"), position, endPosition);
                renderer.updateTick(dataItem.get("tick"), position, endPosition, count);
                renderer.updateFill(dataItem.get("axisFill"), position, fillEndPosition);
                this._processBullet(dataItem);
                renderer.updateBullet(dataItem.get("bullet"), position, endPosition);
                var fillRule = this.get("fillRule");
                if (fillRule) {
                    fillRule(dataItem, fillIndex);
                }
            }
        });
        Object.defineProperty(CategoryAxis.prototype, "startIndex", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var len = this.dataItems.length;
                return Math.min(Math.max(this.getPrivate("startIndex", 0), 0), len - 1);
            }
        });
        Object.defineProperty(CategoryAxis.prototype, "endIndex", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var len = this.dataItems.length;
                return Math.max(1, Math.min(this.getPrivate("endIndex", len), len));
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(CategoryAxis.prototype, "baseValue", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(CategoryAxis.prototype, "basePosition", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return 0;
            }
        });
        /**
         * Returns X coordinate in pixels corresponding to specific category index.
         *
         * @param   value  Index
         * @return         X coordinate
         */
        Object.defineProperty(CategoryAxis.prototype, "getX", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value) {
                var axisDataItem = this._itemMap[value];
                if (axisDataItem) {
                    return this._settings.renderer.positionToCoordinate(this.indexToPosition(axisDataItem.get("index", 0)));
                }
                return NaN;
            }
        });
        /**
         * Returns Y coordinate in pixels corresponding to specific category index.
         *
         * @param   value  Index
         * @return         Y coordinate
         */
        Object.defineProperty(CategoryAxis.prototype, "getY", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value) {
                var axisDataItem = this._itemMap[value];
                if (axisDataItem) {
                    return this._settings.renderer.positionToCoordinate(this.indexToPosition(axisDataItem.get("index", 0)));
                }
                return NaN;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(CategoryAxis.prototype, "getDataItemPositionX", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, field, cellLocation, _axisLocation) {
                var category = dataItem.get(field);
                var axisDataItem = this._itemMap[category];
                if (axisDataItem) {
                    return this.indexToPosition(axisDataItem.get("index", 0), cellLocation);
                }
                return NaN;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(CategoryAxis.prototype, "getDataItemCoordinateX", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, field, cellLocation, _axisLocation) {
                return this._settings.renderer.positionToCoordinate(this.getDataItemPositionX(dataItem, field, cellLocation, _axisLocation));
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(CategoryAxis.prototype, "getDataItemPositionY", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, field, cellLocation, _axisLocation) {
                var category = dataItem.get(field);
                var axisDataItem = this._itemMap[category];
                if (axisDataItem) {
                    return this.indexToPosition(axisDataItem.get("index", 0), cellLocation);
                }
                return NaN;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(CategoryAxis.prototype, "getDataItemCoordinateY", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, field, cellLocation, _axisLocation) {
                return this._settings.renderer.positionToCoordinate(this.getDataItemPositionY(dataItem, field, cellLocation, _axisLocation));
            }
        });
        /**
         * Converts category index to a relative position.
         *
         * `location` indicates relative position within category: 0 - start, 1 - end.
         *
         * If not set, will use middle (0.5) of the category.
         *
         * @param   index     Index
         * @param   location  Location
         * @return            Index
         */
        Object.defineProperty(CategoryAxis.prototype, "indexToPosition", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (index, location) {
                if (!isNumber(location)) {
                    location = 0.5;
                }
                var len = this.dataItems.length;
                var startLocation = this.get("startLocation", 0);
                var endLocation = this.get("endLocation", 1);
                len -= startLocation;
                len -= (1 - endLocation);
                var position = (index + location - startLocation) / len;
                var dataItem = this.dataItems[index];
                if (dataItem) {
                    position += dataItem.get("deltaPosition", 0);
                }
                return position;
            }
        });
        /**
         * Returns an index of a category.
         *
         * @param   category  Category to look up
         * @return            Index
         */
        Object.defineProperty(CategoryAxis.prototype, "categoryToIndex", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (category) {
                var dataItem = this._itemMap[category];
                if (dataItem) {
                    return dataItem.get("index");
                }
                return NaN;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(CategoryAxis.prototype, "dataItemToPosition", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem) {
                return this.indexToPosition(dataItem.get("index"));
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(CategoryAxis.prototype, "roundAxisPosition", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (position, location) {
                return this.indexToPosition(this.axisPositionToIndex(position), location);
            }
        });
        /**
         * Returns an index of the category that corresponds to specific pixel
         * position within axis.
         *
         * @param position  Position (px)
         * @return Category index
         */
        Object.defineProperty(CategoryAxis.prototype, "axisPositionToIndex", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (position) {
                var len = this.dataItems.length;
                return fitToRange(Math.floor(position * len), 0, len - 1); //$math.fitToRange(Math.floor((end - start) * len * position + len * start), 0, len - 1);
            }
        });
        /**
         * Returns text to be used in an axis tooltip for specific relative position.
         *
         * @param   position  Position
         * @return            Tooltip text
         */
        Object.defineProperty(CategoryAxis.prototype, "getTooltipText", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (position) {
                //@todo number formatter + tag
                var dataItem = this.dataItems[this.axisPositionToIndex(position)];
                if (dataItem) {
                    var label = dataItem.get("label");
                    if (label) {
                        return populateString(label, this.get("tooltipText", ""));
                    }
                }
            }
        });
        Object.defineProperty(CategoryAxis.prototype, "_updateTooltipText", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (tooltip, position) {
                tooltip._setDataItem(this.dataItems[this.axisPositionToIndex(position)]);
                tooltip.label.text.markDirtyText();
            }
        });
        /**
         * Returns a data item from series that is closest to the `position`.
         *
         * @param   series    Series
         * @param   position  Relative position
         * @return            Data item
         */
        Object.defineProperty(CategoryAxis.prototype, "getSeriesItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (series, position) {
                if (this.dataItems.length > 0) {
                    var fieldName = (this.getPrivate("name") + this.get("renderer").getPrivate("letter"));
                    var index = this.axisPositionToIndex(position);
                    // try simple first
                    var seriesDataItem = series.dataItems[index];
                    var axisDataItem = this.dataItems[index];
                    var category = axisDataItem.get("category");
                    if (seriesDataItem && axisDataItem) {
                        if (seriesDataItem.get(fieldName) === category) {
                            return seriesDataItem;
                        }
                    }
                    // if not found, try looking
                    for (var i = 0, len = series.dataItems.length; i < len; i++) {
                        var dataItem = series.dataItems[i];
                        if (dataItem.get(fieldName) === category) {
                            return dataItem;
                        }
                    }
                }
            }
        });
        /**
         * Zooms the axis to specific `start` and `end` indexes.
         *
         * Optional `duration` specifies duration of zoom animation in milliseconds.
         *
         * @param  start     Start index
         * @param  end       End index
         * @param  duration  Duration in milliseconds
         */
        Object.defineProperty(CategoryAxis.prototype, "zoomToIndexes", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (start, end, duration) {
                var len = this.dataItems.length;
                this.zoom(start / len, end / len, duration);
            }
        });
        Object.defineProperty(CategoryAxis.prototype, "zoomToCategories", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (startCategory, endCategory, duration) {
                this.zoomToIndexes(this.categoryToIndex(startCategory), this.categoryToIndex(endCategory) + 1, duration);
            }
        });
        Object.defineProperty(CategoryAxis, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "CategoryAxis"
        });
        Object.defineProperty(CategoryAxis, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Axis.classNames.concat([CategoryAxis.className])
        });
        return CategoryAxis;
    }(Axis));

    /**
     * Category-based date axis.
     *
     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/category-date-axis/} for more info
     * @important
     */
    var CategoryDateAxis = /** @class */ (function (_super) {
        __extends(CategoryDateAxis, _super);
        function CategoryDateAxis() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_frequency", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 1
            });
            Object.defineProperty(_this, "_itemMap", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            return _this;
        }
        Object.defineProperty(CategoryDateAxis.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._settings.themeTags = mergeTags(this._settings.themeTags, ["axis"]);
                this.fields.push("category");
                _super.prototype._afterNew.call(this);
            }
        });
        Object.defineProperty(CategoryDateAxis.prototype, "_prepareAxisItems", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                // temp
                this.setPrivateRaw("baseInterval", this.get("baseInterval"));
                var renderer = this.get("renderer");
                var len = this.dataItems.length;
                var startIndex = this.startIndex();
                if (startIndex > 0) {
                    startIndex--;
                }
                var endIndex = this.endIndex();
                if (endIndex < len) {
                    endIndex++;
                }
                var maxCount = renderer.axisLength() / Math.max(renderer.get("minGridDistance"), 1 / Number.MAX_SAFE_INTEGER);
                var frequency = Math.min(len, Math.ceil((endIndex - startIndex) / maxCount));
                startIndex = Math.floor(startIndex / frequency) * frequency;
                this._frequency = frequency;
                for (var j = 0; j < len; j++) {
                    this.dataItems[j].hide();
                }
                var startTime = Number(this.dataItems[startIndex].get("category"));
                var endTime = Number(this.dataItems[endIndex - 1].get("category"));
                var realDuration = (endTime - startTime);
                if (endIndex - startIndex < maxCount) {
                    realDuration = (endTime - startTime) - ((endTime - startTime) / this.baseDuration() - (endIndex - startIndex)) * this.baseDuration();
                }
                // if all items are on axis
                var gridInterval = chooseInterval(0, realDuration, maxCount, this.get("gridIntervals"));
                var nextGridUnit = getNextUnit(gridInterval.timeUnit);
                var baseInterval = this.getPrivate("baseInterval");
                if (getIntervalDuration(gridInterval) < this.baseDuration()) {
                    gridInterval = __assign({}, baseInterval);
                }
                var formats = this.get("dateFormats");
                var previousValue = -Infinity;
                var previousIndex = -Infinity;
                var previousUnitValue = -Infinity;
                var format;
                var selectedItems = [];
                var changed = false;
                for (var i = startIndex; i < endIndex; i++) {
                    var dataItem = this.dataItems[i];
                    var index = dataItem.get("index");
                    var skip = false;
                    var value = Number(dataItem.get("category"));
                    var date = new Date(value);
                    var unitValue = getUnitValue(date, gridInterval.timeUnit);
                    format = formats[gridInterval.timeUnit];
                    var added = false;
                    if (gridInterval.timeUnit != "year" && gridInterval.timeUnit != "week") {
                        if (nextGridUnit && this.get("markUnitChange") && isNumber(previousValue)) {
                            if (checkChange(value, previousValue, nextGridUnit, this._root.utc)) {
                                format = this.get("periodChangeDateFormats")[gridInterval.timeUnit];
                                if (index - frequency * 0.5 < previousIndex) {
                                    selectedItems.pop();
                                }
                                selectedItems.push({ format: format, dataItem: dataItem });
                                changed = true;
                                added = true;
                                previousIndex = index;
                                previousUnitValue = unitValue;
                            }
                        }
                    }
                    var shouldAdd = false;
                    if (gridInterval.timeUnit === "day" || gridInterval.timeUnit === "week") {
                        if (index - previousIndex >= frequency) {
                            shouldAdd = true;
                        }
                    }
                    else {
                        if (unitValue % gridInterval.count === 0) {
                            if (unitValue != previousUnitValue) {
                                shouldAdd = true;
                            }
                        }
                    }
                    if (!added && shouldAdd) {
                        if (index - frequency * 0.7 < previousIndex) {
                            if (changed) {
                                skip = true;
                            }
                        }
                        if (!skip) {
                            selectedItems.push({ format: format, dataItem: dataItem });
                            previousIndex = index;
                            previousUnitValue = unitValue;
                        }
                        changed = false;
                    }
                    previousValue = value;
                }
                if (selectedItems.length > 0) {
                    var f_1 = selectedItems[0].dataItem.get("index", 0);
                    each$1(selectedItems, function (item) {
                        var dataItem = item.dataItem;
                        var format = item.format;
                        _this._createAssets(dataItem, []);
                        if (dataItem.isHidden()) {
                            dataItem.show();
                        }
                        var value = Number(dataItem.get("category"));
                        var date = new Date(value);
                        var label = dataItem.get("label");
                        if (label) {
                            label.set("text", _this._root.dateFormatter.format(date, format));
                        }
                        f_1++;
                        _this._prepareDataItem(dataItem, f_1, frequency);
                    });
                }
            }
        });
        /**
         * Returns a duration of currently active `baseInterval` in milliseconds.
         *
         * @return Duration
         */
        Object.defineProperty(CategoryDateAxis.prototype, "baseDuration", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return getIntervalDuration(this.getPrivate("baseInterval"));
            }
        });
        /**
         * Returns text to be used in an axis tooltip for specific relative position.
         *
         * @param   position  Position
         * @return            Tooltip text
         */
        Object.defineProperty(CategoryDateAxis.prototype, "getTooltipText", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (position) {
                //@todo number formatter + tag
                var dataItem = this.dataItems[this.axisPositionToIndex(position)];
                if (dataItem) {
                    var format = this.get("dateFormats")[this.getPrivate("baseInterval").timeUnit];
                    return this._root.dateFormatter.format(new Date(dataItem.get("category", 0)), this.get("tooltipDateFormat", format));
                }
            }
        });
        Object.defineProperty(CategoryDateAxis.prototype, "_updateTooltipText", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (tooltip, position) {
                tooltip.label.set("text", this.getTooltipText(position));
            }
        });
        Object.defineProperty(CategoryDateAxis, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "CategoryDateAxis"
        });
        Object.defineProperty(CategoryDateAxis, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: CategoryAxis.classNames.concat([CategoryDateAxis.className])
        });
        return CategoryDateAxis;
    }(CategoryAxis));

    /**
     * Creates a value axis.
     *
     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/} for more info
     * @important
     */
    var ValueAxis = /** @class */ (function (_super) {
        __extends(ValueAxis, _super);
        function ValueAxis() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_dirtyExtremes", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_dirtySelectionExtremes", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_deltaMinMax", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 1
            });
            Object.defineProperty(_this, "_minReal", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_maxReal", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_baseValue", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(_this, "_syncDp", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_minLogAdjusted", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 1
            });
            return _this;
        }
        /**
         * @ignore
         */
        Object.defineProperty(ValueAxis.prototype, "markDirtyExtremes", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._dirtyExtremes = true;
                this.markDirty();
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(ValueAxis.prototype, "markDirtySelectionExtremes", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._dirtySelectionExtremes = true;
                this.markDirty();
            }
        });
        Object.defineProperty(ValueAxis.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._settings.themeTags = mergeTags(this._settings.themeTags, ["axis"]);
                this.setPrivateRaw("name", "value");
                this.addTag("value");
                _super.prototype._afterNew.call(this);
            }
        });
        Object.defineProperty(ValueAxis.prototype, "_prepareChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                _super.prototype._prepareChildren.call(this);
                if (this.isDirty("syncWithAxis")) {
                    var previousValue = this._prevSettings.syncWithAxis;
                    if (previousValue) {
                        if (this._syncDp) {
                            this._syncDp.dispose();
                        }
                    }
                    var syncWithAxis = this.get("syncWithAxis");
                    if (syncWithAxis) {
                        this._syncDp = new MultiDisposer([
                            syncWithAxis.onPrivate("selectionMinFinal", function () {
                                _this._dirtySelectionExtremes = true;
                            }),
                            syncWithAxis.onPrivate("selectionMaxFinal", function () {
                                _this._dirtySelectionExtremes = true;
                            })
                        ]);
                    }
                }
                //if (this._dirtyExtremes || this.isPrivateDirty("width") || this.isPrivateDirty("height") || this.isDirty("min") || this.isDirty("max") || this.isDirty("extraMin") || this.isDirty("extraMax") || this.isDirty("logarithmic") || this.isDirty("treatZeroAs") || this.isDirty("baseValue") || this.isDirty("strictMinMax") || this.isDirty("maxPrecision")) {
                if (this._sizeDirty || this._dirtyExtremes || this._valuesDirty || this.isPrivateDirty("width") || this.isPrivateDirty("height") || this.isDirty("min") || this.isDirty("max") || this.isDirty("extraMin") || this.isDirty("extraMax") || this.isDirty("logarithmic") || this.isDirty("treatZeroAs") || this.isDirty("baseValue") || this.isDirty("strictMinMax") || this.isDirty("strictMinMaxSelection") || this.isDirty("maxPrecision") || this.isDirty("numberFormat")) {
                    this._getMinMax();
                    this.ghostLabel.set("text", "");
                    this._dirtyExtremes = false;
                }
                if (this._dirtySelectionExtremes && !this._isPanning) {
                    this._getSelectionMinMax();
                    this._dirtySelectionExtremes = false;
                }
                this._groupData();
                if (this._sizeDirty || this._valuesDirty || this.isDirty("start") || this.isDirty("end") || this.isPrivateDirty("min") || this.isPrivateDirty("selectionMax") || this.isPrivateDirty("selectionMin") || this.isPrivateDirty("max") || this.isPrivateDirty("step") || this.isPrivateDirty("width") || this.isPrivateDirty("height") || this.isDirty("logarithmic")) {
                    this._handleRangeChange();
                    this._prepareAxisItems();
                    this._updateAxisRanges();
                }
                this._baseValue = this.baseValue();
            }
        });
        Object.defineProperty(ValueAxis.prototype, "_groupData", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
            }
        });
        Object.defineProperty(ValueAxis.prototype, "_formatText", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value) {
                var numberFormat = this.get("numberFormat");
                var formatter = this.getNumberFormatter();
                var text = "";
                if (numberFormat) {
                    text = formatter.format(value, numberFormat);
                }
                else {
                    text = formatter.format(value, undefined, this.getPrivate("stepDecimalPlaces"));
                }
                return text;
            }
        });
        Object.defineProperty(ValueAxis.prototype, "_prepareAxisItems", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var min = this.getPrivate("min");
                var max = this.getPrivate("max");
                if (isNumber(min) && isNumber(max)) {
                    var logarithmic = this.get("logarithmic");
                    var step = this.getPrivate("step");
                    var selectionMin = this.getPrivate("selectionMin");
                    var selectionMax = this.getPrivate("selectionMax") + step;
                    var value = selectionMin - step;
                    var i = 0;
                    var differencePower = 1;
                    var minLog = min;
                    if (logarithmic) {
                        value = this._minLogAdjusted;
                        if (value < selectionMin) {
                            while (value < selectionMin) {
                                value += step;
                            }
                        }
                        minLog = value;
                        if (minLog <= 0) {
                            minLog = 1;
                            if (step < 1) {
                                minLog = step;
                            }
                        }
                        differencePower = Math.log(selectionMax - step) * Math.LOG10E - Math.log(minLog) * Math.LOG10E;
                        if (differencePower > 2) {
                            value = Math.pow(10, Math.log(minLog) * Math.LOG10E - 5);
                        }
                    }
                    while (value < selectionMax) {
                        var dataItem = void 0;
                        if (this.dataItems.length < i + 1) {
                            dataItem = new DataItem(this, undefined, {});
                            this._dataItems.push(dataItem);
                            this.processDataItem(dataItem);
                        }
                        else {
                            dataItem = this.dataItems[i];
                        }
                        this._createAssets(dataItem, []);
                        if (dataItem.isHidden()) {
                            dataItem.show();
                        }
                        dataItem.setRaw("value", value);
                        var label = dataItem.get("label");
                        if (label) {
                            label.set("text", this._formatText(value));
                        }
                        this._prepareDataItem(dataItem);
                        if (!logarithmic) {
                            value += step;
                        }
                        else {
                            if (differencePower > 2) {
                                value = Math.pow(10, Math.log(minLog) * Math.LOG10E + i - 5);
                            }
                            else {
                                value += step;
                            }
                        }
                        var stepPower = Math.pow(10, Math.floor(Math.log(Math.abs(step)) * Math.LOG10E));
                        if (stepPower < 1) {
                            // exponent is less then 1 too. Count decimals of exponent
                            var decCount = Math.round(Math.abs(Math.log(Math.abs(stepPower)) * Math.LOG10E)) + 2;
                            // round value to avoid floating point issues
                            value = round$1(value, decCount);
                        }
                        i++;
                    }
                    for (var j = i; j < this.dataItems.length; j++) {
                        this.dataItems[j].hide();
                    }
                    each$1(this.series, function (series) {
                        if (series.inited) {
                            series._markDirtyAxes();
                        }
                    });
                    this._updateGhost();
                }
            }
        });
        Object.defineProperty(ValueAxis.prototype, "_prepareDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, count) {
                var renderer = this.get("renderer");
                var value = dataItem.get("value");
                var endValue = dataItem.get("endValue");
                var position = this.valueToPosition(value);
                var endPosition = position;
                var fillEndPosition = this.valueToPosition(value + this.getPrivate("step"));
                if (isNumber(endValue)) {
                    endPosition = this.valueToPosition(endValue);
                    fillEndPosition = endPosition;
                }
                renderer.updateLabel(dataItem.get("label"), position, endPosition, count);
                var grid = dataItem.get("grid");
                renderer.updateGrid(grid, position, endPosition);
                if (grid) {
                    if (value == this.get("baseValue", 0)) {
                        grid.addTag("base");
                        grid._applyThemes();
                    }
                    else if (grid.hasTag("base")) {
                        grid.removeTag("base");
                        grid._applyThemes();
                    }
                }
                renderer.updateTick(dataItem.get("tick"), position, endPosition, count);
                renderer.updateFill(dataItem.get("axisFill"), position, fillEndPosition);
                this._processBullet(dataItem);
                renderer.updateBullet(dataItem.get("bullet"), position, endPosition);
                if (!dataItem.get("isRange")) {
                    var fillRule = this.get("fillRule");
                    if (fillRule) {
                        fillRule(dataItem);
                    }
                }
            }
        });
        Object.defineProperty(ValueAxis.prototype, "_handleRangeChange", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var selectionMin = this.positionToValue(this.get("start", 0));
                var selectionMax = this.positionToValue(this.get("end", 1));
                var gridCount = this.get("renderer").gridCount();
                var minMaxStep = this._adjustMinMax(selectionMin, selectionMax, gridCount, true);
                var stepDecimalPlaces = decimalPlaces(minMaxStep.step);
                this.setPrivateRaw("stepDecimalPlaces", stepDecimalPlaces);
                selectionMin = round$1(selectionMin, stepDecimalPlaces);
                selectionMax = round$1(selectionMax, stepDecimalPlaces);
                minMaxStep = this._adjustMinMax(selectionMin, selectionMax, gridCount, true);
                var step = minMaxStep.step;
                selectionMin = minMaxStep.min;
                selectionMax = minMaxStep.max;
                if (this.getPrivate("selectionMin") !== selectionMin || this.getPrivate("selectionMax") !== selectionMax || this.getPrivate("step") !== step) {
                    // do not change to setPrivate, will cause SO
                    this.setPrivateRaw("selectionMin", selectionMin);
                    this.setPrivateRaw("selectionMax", selectionMax);
                    this.setPrivateRaw("step", step);
                }
            }
        });
        /**
         * Converts a relative position to a corresponding numeric value from axis
         * scale.
         *
         * @param   position  Relative position
         * @return            Value
         */
        Object.defineProperty(ValueAxis.prototype, "positionToValue", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (position) {
                var min = this.getPrivate("min");
                var max = this.getPrivate("max");
                if (!this.get("logarithmic")) {
                    return position * (max - min) + min;
                }
                else {
                    return Math.pow(Math.E, (position * ((Math.log(max) * Math.LOG10E - Math.log(min) * Math.LOG10E)) + Math.log(min) * Math.LOG10E) / Math.LOG10E);
                }
            }
        });
        /**
         * Convers value to a relative position on axis.
         *
         * @param   value  Value
         * @return         Relative position
         */
        Object.defineProperty(ValueAxis.prototype, "valueToPosition", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value) {
                var min = this.getPrivate("min");
                var max = this.getPrivate("max");
                if (!this.get("logarithmic")) {
                    return (value - min) / (max - min);
                }
                else {
                    if (value <= 0) {
                        var treatZeroAs = this.get("treatZeroAs");
                        if (isNumber(treatZeroAs)) {
                            value = treatZeroAs;
                        }
                    }
                    return (Math.log(value) * Math.LOG10E - Math.log(min) * Math.LOG10E) / ((Math.log(max) * Math.LOG10E - Math.log(min) * Math.LOG10E));
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(ValueAxis.prototype, "valueToFinalPosition", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value) {
                var min = this.getPrivate("minFinal");
                var max = this.getPrivate("maxFinal");
                if (!this.get("logarithmic")) {
                    return (value - min) / (max - min);
                }
                else {
                    if (value <= 0) {
                        var treatZeroAs = this.get("treatZeroAs");
                        if (isNumber(treatZeroAs)) {
                            value = treatZeroAs;
                        }
                    }
                    return (Math.log(value) * Math.LOG10E - Math.log(min) * Math.LOG10E) / ((Math.log(max) * Math.LOG10E - Math.log(min) * Math.LOG10E));
                }
            }
        });
        /**
         * Returns X coordinate in pixels corresponding to specific value.
         *
         * @param   value     Numeric value
         * @param   location  Location
         * @param   baseValue Base value
         * @return            X coordinate
         */
        Object.defineProperty(ValueAxis.prototype, "getX", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value, location, baseValue) {
                value = baseValue + (value - baseValue) * location;
                var position = this.valueToPosition(value);
                return this._settings.renderer.positionToCoordinate(position);
            }
        });
        /**
         * Returns X coordinate in pixels corresponding to specific value.
         *
         * @param   value     Numeric value
         * @param   location  Location
         * @param   baseValue Base value
         * @return            X coordinate
         */
        Object.defineProperty(ValueAxis.prototype, "getY", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value, location, baseValue) {
                value = baseValue + (value - baseValue) * location;
                var position = this.valueToPosition(value);
                return this._settings.renderer.positionToCoordinate(position);
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(ValueAxis.prototype, "getDataItemCoordinateX", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, field, _cellLocation, axisLocation) {
                return this._settings.renderer.positionToCoordinate(this.getDataItemPositionX(dataItem, field, _cellLocation, axisLocation));
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(ValueAxis.prototype, "getDataItemPositionX", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, field, _cellLocation, axisLocation) {
                var value = dataItem.get(field);
                var stackToItem = dataItem.get("stackToItemX");
                if (stackToItem) {
                    var series = dataItem.component;
                    value = value * axisLocation + series.getStackedXValueWorking(dataItem, field);
                }
                else {
                    value = this._baseValue + (value - this._baseValue) * axisLocation;
                }
                return this.valueToPosition(value);
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(ValueAxis.prototype, "getDataItemCoordinateY", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, field, _cellLocation, axisLocation) {
                return this._settings.renderer.positionToCoordinate(this.getDataItemPositionY(dataItem, field, _cellLocation, axisLocation));
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(ValueAxis.prototype, "getDataItemPositionY", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, field, _cellLocation, axisLocation) {
                var value = dataItem.get(field);
                var stackToItem = dataItem.get("stackToItemY");
                if (stackToItem) {
                    var series = dataItem.component;
                    value = value * axisLocation + series.getStackedYValueWorking(dataItem, field);
                }
                else {
                    value = this._baseValue + (value - this._baseValue) * axisLocation;
                }
                return this.valueToPosition(value);
            }
        });
        /**
         * Returns relative position of axis' `baseValue`.
         *
         * @return  Base value position
         */
        Object.defineProperty(ValueAxis.prototype, "basePosition", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this.valueToPosition(this.baseValue());
            }
        });
        /**
         * Base value of the [[ValueAxis]], which determines positive and negative
         * values.
         *
         * @return Base value
         */
        Object.defineProperty(ValueAxis.prototype, "baseValue", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var min = Math.min(this.getPrivate("minFinal", -Infinity), this.getPrivate("selectionMin", -Infinity));
                var max = Math.max(this.getPrivate("maxFinal", Infinity), this.getPrivate("selectionMax", Infinity));
                var baseValue = this.get("baseValue", 0);
                if (baseValue < min) {
                    baseValue = min;
                }
                if (baseValue > max) {
                    baseValue = max;
                }
                return baseValue;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(ValueAxis.prototype, "cellEndValue", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value) {
                return value;
            }
        });
        Object.defineProperty(ValueAxis.prototype, "fixSmallStep", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (step) {
                // happens because of floating point error
                if (1 + step === 1) {
                    step *= 2;
                    return this.fixSmallStep(step);
                }
                return step;
            }
        });
        Object.defineProperty(ValueAxis.prototype, "_fixMin", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (min) {
                return min;
            }
        });
        Object.defineProperty(ValueAxis.prototype, "_fixMax", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (max) {
                return max;
            }
        });
        Object.defineProperty(ValueAxis.prototype, "_calculateTotals", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (this.get("calculateTotals")) {
                    var series = this.series[0];
                    if (series) {
                        var startIndex = series.startIndex();
                        if (series.dataItems.length > 0) {
                            if (startIndex > 0) {
                                startIndex--;
                            }
                            var endIndex = series.endIndex();
                            if (endIndex < series.dataItems.length) {
                                endIndex++;
                            }
                            var field_1;
                            var vc_1;
                            if (series.get("yAxis") == this) {
                                field_1 = "valueY";
                                vc_1 = "vcy";
                            }
                            else if (series.get("xAxis") == this) {
                                field_1 = "valueX";
                                vc_1 = "vcx";
                            }
                            var fieldWorking_1 = field_1 + "Working";
                            if (field_1) {
                                var _loop_1 = function (i) {
                                    var sum = 0;
                                    var total = 0;
                                    each$1(this_1.series, function (series) {
                                        if (!series.get("excludeFromTotal")) {
                                            var dataItem = series.dataItems[i];
                                            if (dataItem) {
                                                var value = dataItem.get(fieldWorking_1) * series.get(vc_1);
                                                if (!isNaN$1(value)) {
                                                    sum += value;
                                                    total += Math.abs(value);
                                                }
                                            }
                                        }
                                    });
                                    each$1(this_1.series, function (series) {
                                        if (!series.get("excludeFromTotal")) {
                                            var dataItem = series.dataItems[i];
                                            if (dataItem) {
                                                var value = dataItem.get(fieldWorking_1) * series.get(vc_1);
                                                if (!isNaN$1(value)) {
                                                    dataItem.set((field_1 + "Total"), total);
                                                    dataItem.set((field_1 + "Sum"), sum);
                                                    dataItem.set((field_1 + "TotalPercent"), value / total * 100);
                                                }
                                            }
                                        }
                                    });
                                };
                                var this_1 = this;
                                for (var i = startIndex; i < endIndex; i++) {
                                    _loop_1(i);
                                }
                            }
                        }
                    }
                }
            }
        });
        Object.defineProperty(ValueAxis.prototype, "_getSelectionMinMax", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _a;
                var _this = this;
                var min = this.getPrivate("minFinal");
                var max = this.getPrivate("maxFinal");
                var minDefined = this.get("min");
                var maxDefined = this.get("max");
                var extraMin = this.get("extraMin", 0);
                var extraMax = this.get("extraMax", 0);
                if (this.get("logarithmic")) {
                    if (this.get("extraMin") == null) {
                        extraMin = 0.1;
                    }
                    if (this.get("extraMax") == null) {
                        extraMax = 0.2;
                    }
                }
                var gridCount = this.get("renderer").gridCount();
                var selectionStrictMinMax = this.get("strictMinMaxSelection");
                var strictMinMax = this.get("strictMinMax");
                if (isNumber(min) && isNumber(max)) {
                    var selectionMin_1 = max;
                    var selectionMax_1 = min;
                    each$1(this.series, function (series) {
                        if (!series.get("ignoreMinMax")) {
                            var seriesMin = void 0;
                            var seriesMax = void 0;
                            var outOfSelection = series.getPrivate("outOfSelection");
                            if (series.get("xAxis") === _this) {
                                if (!outOfSelection) {
                                    seriesMin = series.getPrivate("selectionMinX", series.getPrivate("minX"));
                                    seriesMax = series.getPrivate("selectionMaxX", series.getPrivate("maxX"));
                                }
                            }
                            else if (series.get("yAxis") === _this) {
                                if (!outOfSelection) {
                                    seriesMin = series.getPrivate("selectionMinY", series.getPrivate("minY"));
                                    seriesMax = series.getPrivate("selectionMaxY", series.getPrivate("maxY"));
                                }
                            }
                            if (!series.isHidden() && !series.isShowing()) {
                                if (isNumber(seriesMin)) {
                                    selectionMin_1 = Math.min(selectionMin_1, seriesMin);
                                }
                                if (isNumber(seriesMax)) {
                                    selectionMax_1 = Math.max(selectionMax_1, seriesMax);
                                }
                            }
                        }
                    });
                    this.axisRanges.each(function (range) {
                        if (range.get("affectsMinMax")) {
                            var value = range.get("value");
                            if (value != null) {
                                selectionMin_1 = Math.min(selectionMin_1, value);
                                selectionMax_1 = Math.max(selectionMax_1, value);
                            }
                            value = range.get("endValue");
                            if (value != null) {
                                selectionMin_1 = Math.min(selectionMin_1, value);
                                selectionMax_1 = Math.max(selectionMax_1, value);
                            }
                        }
                    });
                    if (selectionMin_1 > selectionMax_1) {
                        _a = __read([selectionMax_1, selectionMin_1], 2), selectionMin_1 = _a[0], selectionMax_1 = _a[1];
                    }
                    if (isNumber(minDefined)) {
                        if (strictMinMax) {
                            selectionMin_1 = minDefined;
                        }
                        else {
                            selectionMin_1 = min;
                        }
                    }
                    else if (strictMinMax) {
                        if (isNumber(this._minReal)) {
                            selectionMin_1 = this._minReal;
                        }
                    }
                    if (isNumber(maxDefined)) {
                        if (strictMinMax) {
                            selectionMax_1 = maxDefined;
                        }
                        else {
                            selectionMax_1 = max;
                        }
                    }
                    else if (strictMinMax) {
                        if (isNumber(this._maxReal)) {
                            selectionMax_1 = this._maxReal;
                        }
                    }
                    if (selectionMin_1 === selectionMax_1) {
                        selectionMin_1 -= this._deltaMinMax;
                        selectionMax_1 += this._deltaMinMax;
                        var minMaxStep2 = this._adjustMinMax(selectionMin_1, selectionMax_1, gridCount, strictMinMax);
                        selectionMin_1 = minMaxStep2.min;
                        selectionMax_1 = minMaxStep2.max;
                    }
                    var selectionMinReal = selectionMin_1;
                    var selectionMaxReal = selectionMax_1;
                    selectionMin_1 -= (selectionMax_1 - selectionMin_1) * extraMin;
                    selectionMax_1 += (selectionMax_1 - selectionMin_1) * extraMax;
                    var minMaxStep = this._adjustMinMax(selectionMin_1, selectionMax_1, gridCount);
                    selectionMin_1 = minMaxStep.min;
                    selectionMax_1 = minMaxStep.max;
                    selectionMin_1 = fitToRange(selectionMin_1, min, max);
                    selectionMax_1 = fitToRange(selectionMax_1, min, max);
                    // do it for the second time !important			
                    minMaxStep = this._adjustMinMax(selectionMin_1, selectionMax_1, gridCount, true);
                    if (!strictMinMax) {
                        selectionMin_1 = minMaxStep.min;
                        selectionMax_1 = minMaxStep.max;
                    }
                    var syncWithAxis = this.get("syncWithAxis");
                    if (syncWithAxis) {
                        minMaxStep = this._syncAxes(selectionMin_1, selectionMax_1, minMaxStep.step, syncWithAxis.getPrivate("selectionMinFinal", syncWithAxis.getPrivate("minFinal", 0)), syncWithAxis.getPrivate("selectionMaxFinal", syncWithAxis.getPrivate("maxFinal", 1)), syncWithAxis.getPrivate("selectionStepFinal", syncWithAxis.getPrivate("step", 1)));
                        selectionMin_1 = minMaxStep.min;
                        selectionMax_1 = minMaxStep.max;
                    }
                    if (strictMinMax) {
                        if (isNumber(minDefined)) {
                            selectionMin_1 = Math.max(selectionMin_1, minDefined);
                        }
                        if (isNumber(maxDefined)) {
                            selectionMax_1 = Math.min(selectionMax_1, maxDefined);
                        }
                    }
                    if (selectionStrictMinMax) {
                        selectionMin_1 = selectionMinReal - (selectionMax_1 - selectionMin_1) * extraMin;
                        selectionMax_1 = selectionMaxReal + (selectionMax_1 - selectionMin_1) * extraMax;
                    }
                    if (this.get("logarithmic")) {
                        if (selectionMin_1 <= 0) {
                            selectionMin_1 = selectionMinReal * (1 - Math.min(extraMin, 0.99));
                        }
                        if (selectionMin_1 < min) {
                            selectionMin_1 = min;
                        }
                        if (selectionMax_1 > max) {
                            selectionMax_1 = max;
                        }
                    }
                    var start = this.valueToFinalPosition(selectionMin_1);
                    var end = this.valueToFinalPosition(selectionMax_1);
                    this.setPrivateRaw("selectionMinFinal", selectionMin_1);
                    this.setPrivateRaw("selectionMaxFinal", selectionMax_1);
                    this.setPrivateRaw("selectionStepFinal", minMaxStep.step);
                    this.zoom(start, end);
                }
            }
        });
        Object.defineProperty(ValueAxis.prototype, "_getMinMax", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                var minDefined = this.get("min");
                var maxDefined = this.get("max");
                var min = Infinity;
                var max = -Infinity;
                var extraMin = this.get("extraMin", 0);
                var extraMax = this.get("extraMax", 0);
                if (this.get("logarithmic")) {
                    if (this.get("extraMin") == null) {
                        extraMin = 0.1;
                    }
                    if (this.get("extraMax") == null) {
                        extraMax = 0.2;
                    }
                }
                var minDiff = Infinity;
                each$1(this.series, function (series) {
                    if (!series.get("ignoreMinMax")) {
                        var seriesMin = void 0;
                        var seriesMax = void 0;
                        if (series.get("xAxis") === _this) {
                            seriesMin = series.getPrivate("minX");
                            seriesMax = series.getPrivate("maxX");
                        }
                        else if (series.get("yAxis") === _this) {
                            seriesMin = series.getPrivate("minY");
                            seriesMax = series.getPrivate("maxY");
                        }
                        if (isNumber(seriesMin) && isNumber(seriesMax)) {
                            min = Math.min(min, seriesMin);
                            max = Math.max(max, seriesMax);
                            var diff = seriesMax - seriesMin;
                            if (diff <= 0) {
                                diff = Math.abs(seriesMax / 100);
                            }
                            if (diff < minDiff) {
                                minDiff = diff;
                            }
                        }
                    }
                });
                this.axisRanges.each(function (range) {
                    if (range.get("affectsMinMax")) {
                        var value = range.get("value");
                        if (value != null) {
                            min = Math.min(min, value);
                            max = Math.max(max, value);
                        }
                        value = range.get("endValue");
                        if (value != null) {
                            min = Math.min(min, value);
                            max = Math.max(max, value);
                        }
                    }
                });
                if (this.get("logarithmic")) {
                    var treatZeroAs = this.get("treatZeroAs");
                    if (isNumber(treatZeroAs)) {
                        if (min <= 0) {
                            min = treatZeroAs;
                        }
                    }
                }
                if (min === 0 && max === 0) {
                    max = 0.9;
                    min = -0.9;
                }
                if (isNumber(minDefined)) {
                    min = minDefined;
                }
                if (isNumber(maxDefined)) {
                    max = maxDefined;
                }
                // meaning no min/max found on series/ranges and no min/max was defined
                if (min === Infinity || max === -Infinity) {
                    return;
                }
                var initialMin = min;
                var initialMax = max;
                // adapter
                var minAdapted = this.adapters.fold("min", min);
                var maxAdapted = this.adapters.fold("max", max);
                if (isNumber(minAdapted)) {
                    min = minAdapted;
                }
                if (isNumber(maxAdapted)) {
                    max = maxAdapted;
                }
                // DateAxis does some magic here
                min = this._fixMin(min);
                max = this._fixMax(max);
                // this happens if starLocation and endLocation are 0.5 and DateAxis has only one date
                if (max - min <= 1 / Math.pow(10, 15)) {
                    if (max - min !== 0) {
                        this._deltaMinMax = (max - min) / 2;
                    }
                    else {
                        // the number by which we need to raise 10 to get difference
                        var exponent = Math.log(Math.abs(max)) * Math.LOG10E;
                        // here we find a number which is power of 10 and has the same count of numbers as difference has
                        var power = Math.pow(10, Math.floor(exponent));
                        // reduce this number by 10 times
                        power = power / 10;
                        this._deltaMinMax = power;
                    }
                    min -= this._deltaMinMax;
                    max += this._deltaMinMax;
                }
                // add extras
                min -= (max - min) * extraMin;
                max += (max - min) * extraMax;
                if (this.get("logarithmic")) {
                    // don't let min go below 0 if real min is >= 0
                    if (min < 0 && initialMin >= 0) {
                        min = 0;
                    }
                    // don't let max go above 0 if real max is <= 0
                    if (max > 0 && initialMax <= 0) {
                        max = 0;
                    }
                }
                this._minReal = min;
                this._maxReal = max;
                var strictMinMax = this.get("strictMinMax");
                var strictMinMaxSelection = this.get("strictMinMaxSelection", false);
                if (strictMinMaxSelection) {
                    strictMinMax = strictMinMaxSelection;
                }
                var strict = strictMinMax;
                if (isNumber(maxDefined)) {
                    strict = true;
                }
                var gridCount = this.get("renderer").gridCount();
                var minMaxStep = this._adjustMinMax(min, max, gridCount, strict);
                min = minMaxStep.min;
                max = minMaxStep.max;
                // do it for the second time with strict true (importat!)
                minMaxStep = this._adjustMinMax(min, max, gridCount, true);
                min = minMaxStep.min;
                max = minMaxStep.max;
                // return min max if strict
                if (strictMinMax) {
                    if (isNumber(minDefined)) {
                        min = minDefined;
                    }
                    else {
                        min = this._minReal;
                    }
                    if (isNumber(maxDefined)) {
                        max = maxDefined;
                    }
                    else {
                        max = this._maxReal;
                    }
                    if (max - min <= 0.00000001) {
                        min -= this._deltaMinMax;
                        max += this._deltaMinMax;
                    }
                    min -= (max - min) * extraMin;
                    max += (max - min) * extraMax;
                }
                minAdapted = this.adapters.fold("min", min);
                maxAdapted = this.adapters.fold("max", max);
                if (isNumber(minAdapted)) {
                    min = minAdapted;
                }
                if (isNumber(maxAdapted)) {
                    max = maxAdapted;
                }
                if (minDiff == Infinity) {
                    minDiff = (max - min);
                }
                var syncWithAxis = this.get("syncWithAxis");
                if (syncWithAxis) {
                    minMaxStep = this._syncAxes(min, max, minMaxStep.step, syncWithAxis.getPrivate("minFinal", syncWithAxis.getPrivate("min", 0)), syncWithAxis.getPrivate("maxFinal", syncWithAxis.getPrivate("max", 1)), syncWithAxis.getPrivate("step", 1));
                    min = minMaxStep.min;
                    max = minMaxStep.max;
                }
                this.setPrivateRaw("maxZoomFactor", (max - min) / minDiff * this.get("maxZoomFactor", 100));
                if (this.get("logarithmic")) {
                    this._minLogAdjusted = min;
                    min = this._minReal;
                    max = this._maxReal;
                    if (min <= 0) {
                        min = initialMin * (1 - Math.min(extraMin, 0.99));
                    }
                }
                if (isNumber(min) && isNumber(max)) {
                    if (this.getPrivate("minFinal") !== min || this.getPrivate("maxFinal") !== max) {
                        this.setPrivate("minFinal", min);
                        this.setPrivate("maxFinal", max);
                        this._saveMinMax(min, max);
                        var duration = this.get("interpolationDuration", 0);
                        var easing = this.get("interpolationEasing");
                        this.animatePrivate({ key: "min", to: min, duration: duration, easing: easing });
                        this.animatePrivate({ key: "max", to: max, duration: duration, easing: easing });
                    }
                }
            }
        });
        Object.defineProperty(ValueAxis.prototype, "_saveMinMax", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_min, _max) {
            }
        });
        Object.defineProperty(ValueAxis.prototype, "_adjustMinMax", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (min, max, gridCount, strictMode) {
                // will fail if 0
                if (gridCount <= 1) {
                    gridCount = 1;
                }
                gridCount = Math.round(gridCount);
                var initialMin = min;
                var initialMax = max;
                var difference = max - min;
                // in case min and max is the same, use max
                if (difference === 0) {
                    difference = Math.abs(max);
                }
                // the number by which we need to raise 10 to get difference
                var exponent = Math.log(Math.abs(difference)) * Math.LOG10E;
                // here we find a number which is power of 10 and has the same count of numbers as difference has
                var power = Math.pow(10, Math.floor(exponent));
                // reduce this number by 10 times
                power = power / 10;
                var extra = power;
                if (strictMode) {
                    extra = 0;
                }
                // round down min
                if (strictMode) {
                    min = Math.floor(min / power) * power;
                    // round up max
                    max = Math.ceil(max / power) * power;
                }
                else {
                    min = Math.ceil(min / power) * power - extra;
                    // round up max
                    max = Math.floor(max / power) * power + extra;
                }
                // don't let min go below 0 if real min is >= 0
                if (min < 0 && initialMin >= 0) {
                    min = 0;
                }
                // don't let max go above 0 if real max is <= 0
                if (max > 0 && initialMax <= 0) {
                    max = 0;
                }
                exponent = Math.log(Math.abs(difference)) * Math.LOG10E;
                power = Math.pow(10, Math.floor(exponent));
                power = power / 100; // used to be 10 in v4, but this caused issue that there could be limited number of grids with even very small minGridDistance
                // approximate difference between two grid lines
                var step = Math.ceil((difference / gridCount) / power) * power;
                var stepPower = Math.pow(10, Math.floor(Math.log(Math.abs(step)) * Math.LOG10E));
                // the step should divide by  2, 5, and 10.
                var stepDivisor = Math.ceil(step / stepPower); // number 0 - 10
                if (stepDivisor > 5) {
                    stepDivisor = 10;
                }
                else if (stepDivisor <= 5 && stepDivisor > 2) {
                    stepDivisor = 5;
                }
                // now get real step
                step = Math.ceil(step / (stepPower * stepDivisor)) * stepPower * stepDivisor;
                var maxPrecision = this.get("maxPrecision");
                if (isNumber(maxPrecision)) {
                    var ceiledStep = ceil(step, maxPrecision);
                    if (maxPrecision < Number.MAX_VALUE && step !== ceiledStep) {
                        step = ceiledStep;
                    }
                }
                var decCount = 0;
                // in case numbers are smaller than 1
                if (stepPower < 1) {
                    // exponent is less then 1 too. Count decimals of exponent
                    decCount = Math.round(Math.abs(Math.log(Math.abs(stepPower)) * Math.LOG10E)) + 1;
                    // round step
                    step = round$1(step, decCount);
                }
                // final min and max
                var minCount = Math.floor(min / step);
                min = round$1(step * minCount, decCount);
                var maxCount;
                if (!strictMode) {
                    maxCount = Math.ceil(max / step);
                }
                else {
                    maxCount = Math.floor(max / step);
                }
                if (maxCount === minCount) {
                    maxCount++;
                }
                max = round$1(step * maxCount, decCount);
                if (max < initialMax) {
                    max = max + step;
                }
                if (min > initialMin) {
                    min = min - step;
                }
                step = this.fixSmallStep(step);
                return { min: min, max: max, step: step };
            }
        });
        /**
         * Returns text to be used in an axis tooltip for specific relative position.
         *
         * @param   position  Position
         * @return            Tooltip text
         */
        Object.defineProperty(ValueAxis.prototype, "getTooltipText", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (position) {
                var numberFormat = this.get("tooltipNumberFormat", this.get("numberFormat"));
                var formatter = this.getNumberFormatter();
                var extraDecimals = this.get("extraTooltipPrecision", 0);
                var decimals = this.getPrivate("stepDecimalPlaces", 0) + extraDecimals;
                var value = round$1(this.positionToValue(position), decimals);
                if (numberFormat) {
                    return formatter.format(value, numberFormat);
                }
                else {
                    return formatter.format(value, undefined, decimals);
                    //label.set("text", this.getNumberFormatter().format(value, undefined, this.getPrivate("stepDecimalPlaces")));
                }
                // //@todo number formatter + tag
                // return $math.round(this.positionToValue(position), this.getPrivate("stepDecimalPlaces")).toString();
            }
        });
        /**
         * Returns a data item from series that is closest to the `position`.
         *
         * @param   series    Series
         * @param   position  Relative position
         * @return            Data item
         */
        Object.defineProperty(ValueAxis.prototype, "getSeriesItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (series, position) {
                var fieldName = (this.getPrivate("name") + this.get("renderer").getPrivate("letter"));
                var value = this.positionToValue(position);
                var index = undefined;
                var oldDiff;
                each$1(series.dataItems, function (dataItem, i) {
                    var diff = Math.abs(dataItem.get(fieldName) - value);
                    if (index === undefined || diff < oldDiff) {
                        index = i;
                        oldDiff = diff;
                    }
                });
                if (index != null) {
                    return series.dataItems[index];
                }
            }
        });
        /**
         * Zooms the axis to specific `start` and `end` values.
         *
         * Optional `duration` specifies duration of zoom animation in milliseconds.
         *
         * @param  start     Start value
         * @param  end       End value
         * @param  duration  Duration in milliseconds
         */
        Object.defineProperty(ValueAxis.prototype, "zoomToValues", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (start, end, duration) {
                var min = this.getPrivate("minFinal", 0);
                var max = this.getPrivate("maxFinal", 0);
                if (this.getPrivate("min") != null && this.getPrivate("max") != null) {
                    this.zoom((start - min) / (max - min), (end - min) / (max - min), duration);
                }
            }
        });
        /**
         * Syncs with a target axis.
         *
         * @param  min  Min
         * @param  max  Max
         * @param  step Step
         */
        Object.defineProperty(ValueAxis.prototype, "_syncAxes", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (min, max, step, syncMin, syncMax, syncStep) {
                var axis = this.get("syncWithAxis");
                if (axis) {
                    var count = Math.round(syncMax - syncMin) / syncStep;
                    var currentCount = Math.round((max - min) / step);
                    var gridCount = this.get("renderer").gridCount();
                    if (isNumber(count) && isNumber(currentCount)) {
                        var synced = false;
                        var c = 0;
                        var diff = (max - min) * 0.01;
                        var omin = min;
                        var omax = max;
                        var ostep = step;
                        while (synced != true) {
                            synced = this._checkSync(omin, omax, ostep, count);
                            c++;
                            if (c > 500) {
                                synced = true;
                            }
                            if (!synced) {
                                if (c / 3 == Math.round(c / 3)) {
                                    omin = min - diff * c;
                                    if (min >= 0 && omin < 0) {
                                        omin = 0;
                                    }
                                }
                                else {
                                    omax = max + diff * c;
                                    if (omax <= 0 && omax > 0) {
                                        omax = 0;
                                    }
                                }
                                var minMaxStep = this._adjustMinMax(omin, omax, gridCount, true);
                                omin = minMaxStep.min;
                                omax = minMaxStep.max;
                                ostep = minMaxStep.step;
                            }
                            else {
                                min = omin;
                                max = omax;
                                step = ostep;
                            }
                        }
                    }
                }
                return { min: min, max: max, step: step };
            }
        });
        /**
         * Returns `true` if axis needs to be resunced with some other axis.
         */
        Object.defineProperty(ValueAxis.prototype, "_checkSync", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (min, max, step, count) {
                var currentCount = (max - min) / step;
                for (var i = 1; i < count; i++) {
                    if (round$1(currentCount / i, 1) == count || currentCount * i == count) {
                        return true;
                    }
                }
                return false;
            }
        });
        Object.defineProperty(ValueAxis, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "ValueAxis"
        });
        Object.defineProperty(ValueAxis, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Axis.classNames.concat([ValueAxis.className])
        });
        return ValueAxis;
    }(Axis));

    /**
     * Creates a date axis.
     *
     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/date-axis/} for more info
     * @important
     */
    var DateAxis = /** @class */ (function (_super) {
        __extends(DateAxis, _super);
        function DateAxis() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_dataGrouped", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_seriesDataGrouped", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_groupingCalculated", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_intervalDuration", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 1
            });
            Object.defineProperty(_this, "_baseDuration", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 1
            });
            Object.defineProperty(_this, "_intervalMax", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            Object.defineProperty(_this, "_intervalMin", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: {}
            });
            return _this;
        }
        Object.defineProperty(DateAxis.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                this._settings.themeTags = mergeTags(this._settings.themeTags, ["axis"]);
                _super.prototype._afterNew.call(this);
                this._setBaseInterval(this.get("baseInterval"));
                this.on("baseInterval", function () {
                    _this._setBaseInterval(_this.get("baseInterval"));
                });
            }
        });
        Object.defineProperty(DateAxis.prototype, "_setBaseInterval", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (interval) {
                this.setPrivateRaw("baseInterval", interval);
                this._baseDuration = getIntervalDuration(interval);
            }
        });
        Object.defineProperty(DateAxis.prototype, "_fixZoomFactor", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.setPrivateRaw("maxZoomFactor", Math.round((this.getPrivate("max", 0) - this.getPrivate("min", 0)) / this.baseMainDuration()));
            }
        });
        Object.defineProperty(DateAxis.prototype, "_groupData", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                var min = this.getPrivate("min");
                var max = this.getPrivate("max");
                if ((isNumber(min) && isNumber(max))) {
                    this._fixZoomFactor();
                    var groupInterval = this.getPrivate("groupInterval");
                    if (groupInterval) {
                        this._setBaseInterval(groupInterval);
                    }
                    else {
                        this._setBaseInterval(this.get("baseInterval"));
                    }
                    if (this.isDirty("groupInterval")) {
                        var groupInterval_1 = this.get("groupInterval");
                        if (groupInterval_1) {
                            this.setRaw("groupIntervals", [groupInterval_1]);
                        }
                    }
                    if (this.isDirty("groupData")) {
                        if (!this._dataGrouped) {
                            if (this.get("groupData")) {
                                each$1(this.series, function (series) {
                                    _this._groupSeriesData(series);
                                });
                                this._handleRangeChange();
                            }
                            else {
                                var baseInterval = this.get("baseInterval");
                                var mainDataSetId_1 = baseInterval.timeUnit + baseInterval.count;
                                each$1(this.series, function (series) {
                                    series.setDataSet(mainDataSetId_1);
                                });
                                this._setBaseInterval(baseInterval);
                                this.setPrivateRaw("groupInterval", undefined);
                                this.markDirtyExtremes();
                            }
                            this._dataGrouped = true;
                        }
                    }
                }
            }
        });
        Object.defineProperty(DateAxis.prototype, "_groupSeriesData", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (series) {
                var _this = this;
                if (this.get("groupData") && !series.get("groupDataDisabled")) {
                    this._dataGrouped = true; // helps to avoid double grouping
                    this._seriesDataGrouped = true;
                    // make array of intervals which will be used;
                    var intervals_1 = [];
                    var baseDuration_1 = this.baseMainDuration();
                    var groupIntervals = this.get("groupIntervals");
                    each$1(groupIntervals, function (interval) {
                        var intervalDuration = getIntervalDuration(interval);
                        if (intervalDuration > baseDuration_1) {
                            intervals_1.push(interval);
                        }
                    });
                    series._dataSets = {};
                    var key_1 = this.getPrivate("name") + this.get("renderer").getPrivate("letter");
                    var fields_1;
                    var baseAxis = series.get("baseAxis");
                    if (series.get("xAxis") === baseAxis) {
                        fields_1 = series._valueYFields;
                    }
                    else if (series.get("yAxis") === baseAxis) {
                        fields_1 = series._valueXFields;
                    }
                    var dataItems_1 = series._mainDataItems;
                    var baseInterval = this.get("baseInterval");
                    var mainDataSetId = baseInterval.timeUnit + baseInterval.count;
                    series._dataSets[mainDataSetId] = dataItems_1;
                    var groupCallback_1 = series.get("groupDataCallback");
                    var groupOriginals_1 = series.get("groupDataWithOriginals", false);
                    if (groupCallback_1) {
                        groupOriginals_1 = true;
                    }
                    each$1(intervals_1, function (interval) {
                        var previousTime = -Infinity;
                        var dataSetId = interval.timeUnit + interval.count;
                        series._dataSets[dataSetId] = [];
                        var newDataItem;
                        var sum = {};
                        var count = {};
                        var groupFieldValues = {};
                        var workingFields = {};
                        each$1(fields_1, function (field) {
                            sum[field] = 0;
                            count[field] = 0;
                            groupFieldValues[field] = series.get((field + "Grouped"));
                            workingFields[field] = field + "Working";
                        });
                        var intervalDuration = getDuration(interval.timeUnit);
                        var firstItem = dataItems_1[0];
                        var firstDate;
                        if (firstItem) {
                            firstDate = new Date(dataItems_1[0].get(key_1));
                        }
                        var prevNewDataItem;
                        each$1(dataItems_1, function (dataItem) {
                            var time = dataItem.get(key_1);
                            var roundedTime = round(new Date(time), interval.timeUnit, interval.count, _this._root.locale.firstDayOfWeek, _this._root.utc, firstDate, _this._root.timezone).getTime();
                            var dataContext;
                            if (previousTime < roundedTime - intervalDuration / 24) {
                                dataContext = copy$1(dataItem.dataContext);
                                newDataItem = new DataItem(series, dataContext, series._makeDataItem(dataContext));
                                newDataItem.setRaw(key_1, roundedTime);
                                series._dataSets[dataSetId].push(newDataItem);
                                each$1(fields_1, function (field) {
                                    var value = dataItem.get(field);
                                    if (isNumber(value)) {
                                        newDataItem.setRaw(field, value);
                                        newDataItem.setRaw(workingFields[field], value);
                                        count[field]++;
                                        sum[field] += value;
                                    }
                                });
                                if (groupOriginals_1) {
                                    newDataItem.set("originals", [dataItem]);
                                }
                                if (groupCallback_1 && prevNewDataItem) {
                                    groupCallback_1(prevNewDataItem, interval);
                                }
                                prevNewDataItem = newDataItem;
                            }
                            else {
                                each$1(fields_1, function (field) {
                                    var groupKey = groupFieldValues[field];
                                    var value = dataItem.get(field);
                                    if (value !== undefined) {
                                        var currentValue = newDataItem.get(field);
                                        switch (groupKey) {
                                            case "close":
                                                newDataItem.setRaw(field, value);
                                                break;
                                            case "sum":
                                                newDataItem.setRaw(field, currentValue + value);
                                                break;
                                            case "open":
                                                break;
                                            case "low":
                                                if (value < currentValue) {
                                                    newDataItem.setRaw(field, value);
                                                }
                                                break;
                                            case "high":
                                                if (value > currentValue) {
                                                    newDataItem.setRaw(field, value);
                                                }
                                                break;
                                            case "average":
                                                count[field]++;
                                                sum[field] += value;
                                                var average = sum[field] / count[field];
                                                newDataItem.setRaw(field, average);
                                                break;
                                            case "extreme":
                                                if (Math.abs(value) > Math.abs(currentValue)) {
                                                    newDataItem.setRaw(field, value);
                                                }
                                                break;
                                        }
                                        newDataItem.setRaw(workingFields[field], newDataItem.get(field));
                                        var dataContext_1 = copy$1(dataItem.dataContext);
                                        dataContext_1[key_1] = roundedTime;
                                        newDataItem.dataContext = dataContext_1;
                                    }
                                });
                                if (groupOriginals_1) {
                                    newDataItem.get("originals").push(dataItem);
                                }
                            }
                            previousTime = roundedTime;
                        });
                        if (groupCallback_1 && prevNewDataItem) {
                            groupCallback_1(prevNewDataItem, interval);
                        }
                    });
                    if (series._dataSetId) {
                        series.setDataSet(series._dataSetId);
                    }
                    this.markDirtySize();
                }
            }
        });
        Object.defineProperty(DateAxis.prototype, "_clearDirty", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._clearDirty.call(this);
                this._groupingCalculated = false;
                this._dataGrouped = false;
            }
        });
        /**
         * Returns a time interval axis would group data to for a specified duration.
         *
         * @since 5.2.1
         */
        Object.defineProperty(DateAxis.prototype, "getGroupInterval", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (duration) {
                var baseInterval = this.get("baseInterval");
                var groupInterval = chooseInterval(0, duration, this.get("groupCount", Infinity), this.get("groupIntervals"));
                if (getIntervalDuration(groupInterval) < getIntervalDuration(baseInterval)) {
                    groupInterval = __assign({}, baseInterval);
                }
                return groupInterval;
            }
        });
        /**
         * Return `max` of a specified time interval.
         *
         * Will work only if the axis was grouped to this interval at least once.
         *
         * @since 5.2.1
         * @param   interval  Interval
         * @return            Max
         */
        Object.defineProperty(DateAxis.prototype, "getIntervalMax", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (interval) {
                return this._intervalMax[interval.timeUnit + interval.count];
            }
        });
        /**
         * Return `min` of a specified time interval.
         *
         * Will work only if the axis was grouped to this interval at least once.
         *
         * @since 5.2.1
         * @param   interval  Interval
         * @return            Min
         */
        Object.defineProperty(DateAxis.prototype, "getIntervalMin", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (interval) {
                return this._intervalMin[interval.timeUnit + interval.count];
            }
        });
        Object.defineProperty(DateAxis.prototype, "_handleRangeChange", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                _super.prototype._handleRangeChange.call(this);
                var selectionMin = this.getPrivate("selectionMin");
                var selectionMax = this.getPrivate("selectionMax");
                if (isNumber(selectionMin) && isNumber(selectionMax)) {
                    if (this.get("groupData") && !this._groupingCalculated) {
                        this._groupingCalculated = true;
                        var modifiedDifference = (selectionMax - selectionMin) + (this.get("startLocation", 0) + (1 - this.get("endLocation", 1)) * this.baseDuration());
                        var groupInterval = this.get("groupInterval");
                        if (!groupInterval) {
                            groupInterval = this.getGroupInterval(modifiedDifference);
                        }
                        var current = this.getPrivate("groupInterval");
                        if (groupInterval && (!current || (current.timeUnit !== groupInterval.timeUnit || current.count !== groupInterval.count) || this._seriesDataGrouped)) {
                            this._seriesDataGrouped = false;
                            this.setPrivateRaw("groupInterval", groupInterval);
                            this._setBaseInterval(groupInterval);
                            if (groupInterval) {
                                var newId_1 = groupInterval.timeUnit + groupInterval.count;
                                each$1(this.series, function (series) {
                                    if (series.get("baseAxis") === _this) {
                                        series.setDataSet(newId_1);
                                    }
                                });
                                this.markDirtyExtremes();
                            }
                        }
                    }
                    each$1(this.series, function (series) {
                        if (series.get("baseAxis") === _this) {
                            var fieldName_1 = (_this.getPrivate("name") + _this.get("renderer").getPrivate("letter"));
                            var start = getSortedIndex(series.dataItems, function (dataItem) {
                                return compare(dataItem.get(fieldName_1), selectionMin);
                            });
                            var startIndex = start.index;
                            if (startIndex > 0) {
                                startIndex -= 1;
                            }
                            var end = getSortedIndex(series.dataItems, function (dataItem) {
                                return compare(dataItem.get(fieldName_1), selectionMax);
                            });
                            var endIndex = end.index;
                            var endIndex2 = endIndex;
                            if (endIndex2 > 0) {
                                endIndex2--;
                            }
                            var firstDataItem = series.dataItems[startIndex];
                            var lastDataItem = series.dataItems[endIndex2];
                            var lastDate = void 0;
                            var firstDate = void 0;
                            if (firstDataItem) {
                                firstDate = firstDataItem.get(fieldName_1);
                            }
                            if (lastDataItem) {
                                lastDate = lastDataItem.get(fieldName_1);
                            }
                            var outOfSelection = false;
                            if (lastDate != null && firstDate != null) {
                                if (lastDate < selectionMin || firstDate > selectionMax) {
                                    outOfSelection = true;
                                }
                            }
                            series.setPrivate("outOfSelection", outOfSelection);
                            series.setPrivate("startIndex", startIndex);
                            series.setPrivate("endIndex", endIndex);
                        }
                    });
                }
            }
        });
        Object.defineProperty(DateAxis.prototype, "_adjustMinMax", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (min, max, gridCount, _strictMode) {
                return { min: min, max: max, step: (max - min) / gridCount };
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(DateAxis.prototype, "intervalDuration", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this._intervalDuration;
            }
        });
        Object.defineProperty(DateAxis.prototype, "_saveMinMax", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (min, max) {
                var groupInterval = this.getPrivate("groupInterval");
                if (!groupInterval) {
                    groupInterval = this.get("baseInterval");
                }
                var id = groupInterval.timeUnit + groupInterval.count;
                this._intervalMin[id] = min;
                this._intervalMax[id] = max;
            }
        });
        Object.defineProperty(DateAxis.prototype, "_prepareAxisItems", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var min = this.getPrivate("min");
                var max = this.getPrivate("max");
                if (isNumber(min) && isNumber(max)) {
                    var selectionMin = this.getPrivate("selectionMin");
                    var selectionMax = this.getPrivate("selectionMax");
                    var renderer = this.get("renderer");
                    var baseInterval = this.getPrivate("baseInterval");
                    var value = selectionMin;
                    var i = 0;
                    var intervals = this.get("gridIntervals");
                    var gridInterval = chooseInterval(0, selectionMax - selectionMin, renderer.gridCount(), intervals);
                    if (getIntervalDuration(gridInterval) < this.baseDuration()) {
                        gridInterval = __assign({}, baseInterval);
                    }
                    var intervalDuration = getIntervalDuration(gridInterval);
                    this._intervalDuration = intervalDuration;
                    var nextGridUnit = getNextUnit(gridInterval.timeUnit);
                    value = round(new Date(selectionMin - intervalDuration), gridInterval.timeUnit, gridInterval.count, this._root.locale.firstDayOfWeek, this._root.utc, new Date(min), this._root.timezone).getTime();
                    var previousValue = value - intervalDuration;
                    var format = void 0;
                    var formats = this.get("dateFormats");
                    this.setPrivateRaw("gridInterval", gridInterval);
                    while (value < selectionMax + intervalDuration) {
                        var dataItem = void 0;
                        if (this.dataItems.length < i + 1) {
                            dataItem = new DataItem(this, undefined, {});
                            this._dataItems.push(dataItem);
                            this.processDataItem(dataItem);
                        }
                        else {
                            dataItem = this.dataItems[i];
                        }
                        this._createAssets(dataItem, []);
                        if (dataItem.isHidden()) {
                            dataItem.show();
                        }
                        dataItem.setRaw("value", value);
                        dataItem.setRaw("endValue", add(new Date(value), gridInterval.timeUnit, gridInterval.count, this._root.utc).getTime()); //$time.round(new Date(value + intervalDuration * 1.1), gridInterval.timeUnit, gridInterval.count).getTime());
                        var date = new Date(value);
                        format = formats[gridInterval.timeUnit];
                        if (nextGridUnit && this.get("markUnitChange") && isNumber(previousValue)) {
                            if (gridInterval.timeUnit != "year") {
                                if (checkChange(value, previousValue, nextGridUnit, this._root.utc, this._root.timezone)) {
                                    format = this.get("periodChangeDateFormats")[gridInterval.timeUnit];
                                }
                            }
                        }
                        var label = dataItem.get("label");
                        if (label) {
                            label.set("text", this._root.dateFormatter.format(date, format));
                        }
                        this._prepareDataItem(dataItem, gridInterval.count);
                        previousValue = value;
                        value = add(new Date(value), gridInterval.timeUnit, gridInterval.count, this._root.utc).getTime();
                        i++;
                    }
                    for (var j = i; j < this.dataItems.length; j++) {
                        this.dataItems[j].hide();
                    }
                    each$1(this.series, function (series) {
                        if (series.inited) {
                            series._markDirtyAxes();
                        }
                    });
                }
                this._updateGhost();
            }
        });
        Object.defineProperty(DateAxis.prototype, "_fixMin", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (min) {
                var baseInterval = this.getPrivate("baseInterval");
                var startTime = round(new Date(min), baseInterval.timeUnit, baseInterval.count, this._root.locale.firstDayOfWeek, this._root.utc, undefined, this._root.timezone).getTime();
                var endTime = add(new Date(startTime), baseInterval.timeUnit, baseInterval.count, this._root.utc).getTime();
                return startTime + (endTime - startTime) * this.get("startLocation", 0);
            }
        });
        /* goes up to the year
        protected _getFormat(timeUnit: TimeUnit, value: number, previousValue: number) {
            const formats = this.get("dateFormats")!;
            let format = formats[timeUnit];

            if (this.get("markUnitChange")) {
                let nextGridUnit = $time.getNextUnit(timeUnit);

                while (nextGridUnit != undefined) {

                    if (nextGridUnit) {
                        if (timeUnit != "year") {
                            if ($time.checkChange(value, previousValue, nextGridUnit, this._root.utc, this._root.timezone)) {
                                format = this.get("periodChangeDateFormats")![timeUnit];
                                timeUnit = nextGridUnit;
                                nextGridUnit = $time.getNextUnit(nextGridUnit);
                            }
                            else {
                                nextGridUnit = undefined;
                            }
                        }
                        else {
                            nextGridUnit = undefined;
                        }
                    }
                }
            }
            return format;
        }
        */
        Object.defineProperty(DateAxis.prototype, "_fixMax", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (max) {
                var baseInterval = this.getPrivate("baseInterval");
                var startTime = round(new Date(max), baseInterval.timeUnit, baseInterval.count, this._root.locale.firstDayOfWeek, this._root.utc, undefined, this._root.timezone).getTime();
                var endTime = add(new Date(startTime), baseInterval.timeUnit, baseInterval.count, this._root.utc).getTime();
                return startTime + (endTime - startTime) * this.get("endLocation", 1);
            }
        });
        Object.defineProperty(DateAxis.prototype, "_updateDates", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_date) {
            }
        });
        /**
         * Returns a duration of currently active `baseInterval` in milliseconds.
         *
         * @return Duration
         */
        Object.defineProperty(DateAxis.prototype, "baseDuration", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this._baseDuration;
                //return $time.getIntervalDuration(this.getPrivate("baseInterval"));
            }
        });
        /**
         * Returns a duration of user-defined `baseInterval` in milliseconds.
         *
         * @return Duration
         */
        Object.defineProperty(DateAxis.prototype, "baseMainDuration", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return getIntervalDuration(this.get("baseInterval"));
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(DateAxis.prototype, "processSeriesDataItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, fields) {
                var _this = this;
                var baseInterval = this.getPrivate("baseInterval");
                if (!dataItem.open) {
                    dataItem.open = {};
                }
                if (!dataItem.close) {
                    dataItem.close = {};
                }
                each$1(fields, function (field) {
                    var value = dataItem.get(field);
                    if (isNumber(value)) {
                        var startTime = dataItem.open[field];
                        var endTime = dataItem.close[field];
                        // this is done to save cpu, as rounding is quite expensive, especially with timezone set. 
                        // if value is between prev start and end, it means it didn't change, all is fine.
                        if (value >= startTime && value <= endTime) ;
                        else {
                            startTime = round(new Date(value), baseInterval.timeUnit, baseInterval.count, _this._root.locale.firstDayOfWeek, _this._root.utc, undefined, _this._root.timezone).getTime();
                            endTime = add(new Date(startTime), baseInterval.timeUnit, baseInterval.count, _this._root.utc).getTime();
                            dataItem.open[field] = startTime;
                            dataItem.close[field] = endTime;
                        }
                        _this._updateDates(startTime);
                    }
                });
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(DateAxis.prototype, "getDataItemPositionX", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, field, cellLocation, axisLocation) {
                var openValue;
                var closeValue;
                if (dataItem.open && dataItem.close) {
                    openValue = dataItem.open[field];
                    closeValue = dataItem.close[field];
                }
                else {
                    openValue = dataItem.get(field);
                    closeValue = openValue;
                }
                var value = openValue + (closeValue - openValue) * cellLocation;
                value = this._baseValue + (value - this._baseValue) * axisLocation;
                return this.valueToPosition(value);
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(DateAxis.prototype, "getDataItemCoordinateX", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, field, cellLocation, axisLocation) {
                return this._settings.renderer.positionToCoordinate(this.getDataItemPositionX(dataItem, field, cellLocation, axisLocation));
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(DateAxis.prototype, "getDataItemPositionY", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, field, cellLocation, axisLocation) {
                var openValue;
                var closeValue;
                if (dataItem.open && dataItem.close) {
                    openValue = dataItem.open[field];
                    closeValue = dataItem.close[field];
                }
                else {
                    openValue = dataItem.get(field);
                    closeValue = openValue;
                }
                var value = openValue + (closeValue - openValue) * cellLocation;
                value = this._baseValue + (value - this._baseValue) * axisLocation;
                return this.valueToPosition(value);
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(DateAxis.prototype, "getDataItemCoordinateY", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, field, cellLocation, axisLocation) {
                return this._settings.renderer.positionToCoordinate(this.getDataItemPositionY(dataItem, field, cellLocation, axisLocation));
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(DateAxis.prototype, "roundAxisPosition", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (position, location) {
                var value = this.positionToValue(position);
                var baseInterval = this.getPrivate("baseInterval");
                if (!isNaN$1(value)) {
                    value = round(new Date(value), baseInterval.timeUnit, baseInterval.count, this._root.locale.firstDayOfWeek, this._root.utc, new Date(this.getPrivate("min", 0)), this._root.timezone).getTime();
                    var endValue = value;
                    if (location > 0) {
                        endValue = add(new Date(value), baseInterval.timeUnit, baseInterval.count, this._root.utc).getTime();
                    }
                    return this.valueToPosition(value + (endValue - value) * location);
                }
                return NaN;
            }
        });
        /**
         * Returns text to be used in an axis tooltip for specific relative position.
         *
         * @param   position  Position
         * @return            Tooltip text
         */
        Object.defineProperty(DateAxis.prototype, "getTooltipText", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (position) {
                //@todo number formatter + tag
                if (this.getPrivate("min") != null) {
                    var format = this.get("tooltipDateFormats")[this.getPrivate("baseInterval").timeUnit];
                    var date = new Date(this.positionToValue(position));
                    var baseInterval = this.getPrivate("baseInterval");
                    var duration = getDateIntervalDuration(baseInterval, date, this._root.locale.firstDayOfWeek, this._root.utc, this._root.timezone);
                    return this._root.dateFormatter.format(new Date(this.positionToValue(position) + this.get("tooltipIntervalOffset", -this.get("tooltipLocation", 0.5)) * duration), this.get("tooltipDateFormat", format));
                }
                return "";
            }
        });
        /**
         * Returns a data item from series that is closest to the `position`.
         *
         * @param   series    Series
         * @param   position  Relative position
         * @return            Data item
         */
        Object.defineProperty(DateAxis.prototype, "getSeriesItem", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (series, position) {
                var fieldName = (this.getPrivate("name") + this.get("renderer").getPrivate("letter"));
                var value = this.positionToValue(position);
                var result = getSortedIndex(series.dataItems, function (dataItem) {
                    var diValue = 0;
                    if (dataItem.open) {
                        diValue = dataItem.open[fieldName];
                    }
                    return compare(diValue, value);
                });
                if (series.get("snapTooltip")) {
                    var first = series.dataItems[result.index - 1];
                    var second = series.dataItems[result.index];
                    if (first && second) {
                        if (first.open && second.close) {
                            var open_1 = first.open[fieldName];
                            var close_1 = second.close[fieldName];
                            if (Math.abs(value - open_1) > Math.abs(value - close_1)) {
                                return second;
                            }
                        }
                    }
                    return first;
                }
                else {
                    // @todo check if is in range
                    var dataItem = series.dataItems[result.index - 1];
                    if (dataItem) {
                        if (dataItem.open && dataItem.close) {
                            var open_2 = dataItem.open[fieldName];
                            var close_2 = dataItem.close[fieldName];
                            if (value >= open_2 && value <= close_2) {
                                return dataItem;
                            }
                        }
                    }
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(DateAxis.prototype, "shouldGap", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, nextItem, autoGapCount, fieldName) {
                var value1 = dataItem.get(fieldName);
                var value2 = nextItem.get(fieldName);
                if (value2 - value1 > this.baseDuration() * autoGapCount) {
                    return true;
                }
                return false;
            }
        });
        /**
         * Zooms the axis to specific `start` and `end` dates.
         *
         * Optional `duration` specifies duration of zoom animation in milliseconds.
         *
         * @param  start     Start Date
         * @param  end       End Date
         * @param  duration  Duration in milliseconds
         */
        Object.defineProperty(DateAxis.prototype, "zoomToDates", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (start, end, duration) {
                this.zoomToValues(start.getTime(), end.getTime(), duration);
            }
        });
        /**
         * Returns a `Date` object corresponding to specific position within plot
         * area.
         *
         * @param   position  Pposition
         * @return            Date
         */
        Object.defineProperty(DateAxis.prototype, "positionToDate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (position) {
                return new Date(this.positionToValue(position));
            }
        });
        /**
         * Returns a relative position within plot area that corresponds to specific
         * date.
         *
         * @param   date  Date
         * @return        Position
         */
        Object.defineProperty(DateAxis.prototype, "dateToPosition", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (date) {
                return this.valueToPosition(date.getTime());
            }
        });
        Object.defineProperty(DateAxis, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "DateAxis"
        });
        Object.defineProperty(DateAxis, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ValueAxis.classNames.concat([DateAxis.className])
        });
        return DateAxis;
    }(ValueAxis));

    /**
     * A version of a [[DateAxis]] which removes intervals that don't have any data
     * items in them.
     *
     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/gapless-date-axis/} for more info
     * @important
     */
    var GaplessDateAxis = /** @class */ (function (_super) {
        __extends(GaplessDateAxis, _super);
        function GaplessDateAxis() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_frequency", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 1
            });
            Object.defineProperty(_this, "_dates", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            return _this;
        }
        Object.defineProperty(GaplessDateAxis.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.valueFields.push("date");
                _super.prototype._afterNew.call(this);
            }
        });
        Object.defineProperty(GaplessDateAxis.prototype, "_updateDates", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (date) {
                var dates = this._dates;
                var result = getSortedIndex(dates, function (x) { return compare(x, date); });
                if (!result.found) {
                    insertIndex(dates, result.index, date);
                }
            }
        });
        Object.defineProperty(GaplessDateAxis.prototype, "_updateAllDates", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                this._dates.length = 0;
                each$1(this.series, function (series) {
                    var field = "valueX";
                    if (series.get("yAxis") == _this) {
                        field = "valueY";
                    }
                    each$1(series.dataItems, function (dataItem) {
                        var value = dataItem.get(field);
                        if (isNumber(value)) {
                            if (dataItem.open) {
                                _this._updateDates(dataItem.open[field]);
                            }
                        }
                    });
                });
            }
        });
        /**
         * Convers value to a relative position on axis.
         *
         * @param   value  Value
         * @return         Relative position
         */
        Object.defineProperty(GaplessDateAxis.prototype, "valueToPosition", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value) {
                var dates = this._dates;
                var len = dates.length;
                var result = getSortedIndex(dates, function (x) { return compare(x, value); });
                var index = result.index;
                if (result.found) {
                    return index / len;
                }
                else {
                    if (index > 0) {
                        index -= 1;
                    }
                    var itemValue = dates[index];
                    var d = 0;
                    if (itemValue > value) {
                        d = itemValue - value;
                    }
                    else {
                        d = value - itemValue;
                    }
                    return index / len + d / this.baseDuration() / len;
                }
            }
        });
        /**
         * Converts numeric value from axis scale to index.
         *
         * @param  value  Value
         * @return        Index
         */
        Object.defineProperty(GaplessDateAxis.prototype, "valueToIndex", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value) {
                var dates = this._dates;
                var result = getSortedIndex(dates, function (x) { return compare(x, value); });
                var index = result.index;
                if (result.found) {
                    return index;
                }
                else {
                    if (index > 0) {
                        index -= 1;
                    }
                    return index;
                }
            }
        });
        /**
         * Converts a relative position to a corresponding numeric value from axis
         * scale.
         *
         * @param   position  Relative position
         * @return            Value
         */
        Object.defineProperty(GaplessDateAxis.prototype, "positionToValue", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (position) {
                var len = this._dates.length;
                var index = position * len;
                var findex = Math.floor(index);
                if (findex < 0) {
                    findex = 0;
                }
                if (findex > len - 1) {
                    findex = len - 1;
                }
                return this._dates[findex] + (index - findex) * this.baseDuration();
            }
        });
        Object.defineProperty(GaplessDateAxis.prototype, "_fixZoomFactor", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.setPrivateRaw("maxZoomFactor", this._dates.length);
            }
        });
        Object.defineProperty(GaplessDateAxis.prototype, "_prepareAxisItems", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                var startTime = this.getPrivate("selectionMin", 0);
                var endTime = this.getPrivate("selectionMax", 0);
                if (isNumber(startTime) && isNumber(endTime)) {
                    if (this._seriesValuesDirty) {
                        this._seriesValuesDirty = false;
                        this._updateAllDates();
                    }
                    var dates_1 = this._dates;
                    var renderer = this.get("renderer");
                    var len = dates_1.length;
                    var startIndex_1 = this.valueToIndex(startTime);
                    if (startIndex_1 > 0) {
                        startIndex_1--;
                    }
                    var endIndex_1 = this.valueToIndex(endTime);
                    if (endIndex_1 < len - 1) {
                        endIndex_1++;
                    }
                    var maxCount = renderer.axisLength() / Math.max(renderer.get("minGridDistance"), 1 / Number.MAX_SAFE_INTEGER);
                    var frequency = Math.min(len, Math.ceil((endIndex_1 - startIndex_1) / maxCount));
                    frequency = Math.max(1, frequency);
                    startIndex_1 = Math.floor(startIndex_1 / frequency) * frequency;
                    this._frequency = frequency;
                    for (var j = 0, length_1 = this.dataItems.length; j < length_1; j++) {
                        this.dataItems[j].hide();
                    }
                    var realDuration = (endTime - startTime) - ((endTime - startTime) / this.baseDuration() - (endIndex_1 - startIndex_1)) * this.baseDuration();
                    // if all items are on axis
                    var gridInterval_1 = chooseInterval(0, realDuration, maxCount, this.get("gridIntervals"));
                    var baseInterval = this.getPrivate("baseInterval");
                    var intervalDuration_1 = getIntervalDuration(gridInterval_1);
                    if (intervalDuration_1 < this.baseDuration()) {
                        gridInterval_1 = __assign({}, baseInterval);
                        intervalDuration_1 = getIntervalDuration(gridInterval_1);
                    }
                    this._intervalDuration = intervalDuration_1;
                    var formats_1 = this.get("dateFormats");
                    var selectedItems_1 = [];
                    var firstDate = new Date();
                    if (this._dates[0]) {
                        firstDate = new Date(this._dates[0]);
                    }
                    var startDate = round(new Date(this.getPrivate("min", 0)), gridInterval_1.timeUnit, gridInterval_1.count, this._root.locale.firstDayOfWeek, this._root.utc, firstDate, this._root.timezone);
                    var value = add(startDate, gridInterval_1.timeUnit, -1, this._root.utc).getTime();
                    var selectionMax = this.getPrivate("selectionMax");
                    var previousPosition = -Infinity;
                    var minDifference = (this.get("end", 1) - this.get("start", 0)) / maxCount;
                    while (value <= selectionMax) {
                        var index = this.valueToIndex(value);
                        var realValue = this._dates[index];
                        if (realValue < value) {
                            for (var i = index, len_1 = this._dates.length; i < len_1; i++) {
                                var realValue_1 = this._dates[i];
                                if (realValue_1 >= value) {
                                    index = i;
                                    break;
                                }
                            }
                        }
                        var position = this.valueToPosition(realValue);
                        if (position - previousPosition >= minDifference * 0.95) {
                            move(selectedItems_1, index);
                            previousPosition = position;
                        }
                        value = add(new Date(value), gridInterval_1.timeUnit, gridInterval_1.count, this._root.utc).getTime();
                    }
                    if (selectedItems_1.length > 0) {
                        var i_1 = 0;
                        var previousValue_1 = -Infinity;
                        var nextGridUnit_1 = getNextUnit(gridInterval_1.timeUnit);
                        each$1(selectedItems_1, function (index) {
                            var dataItem;
                            if (_this.dataItems.length < i_1 + 1) {
                                dataItem = new DataItem(_this, undefined, {});
                                _this._dataItems.push(dataItem);
                                _this.processDataItem(dataItem);
                            }
                            else {
                                dataItem = _this.dataItems[i_1];
                            }
                            var value = dates_1[index];
                            var date = new Date(value);
                            var endValue = value;
                            if (i_1 < selectedItems_1.length - 1) {
                                endValue = dates_1[selectedItems_1[i_1 + 1]];
                            }
                            else {
                                endValue += intervalDuration_1;
                            }
                            dataItem.setRaw("value", value);
                            dataItem.setRaw("endValue", endValue);
                            dataItem.setRaw("index", i_1);
                            if (index > startIndex_1 - 100 && index < endIndex_1 + 100) {
                                var format = formats_1[gridInterval_1.timeUnit];
                                format = formats_1[gridInterval_1.timeUnit];
                                if (nextGridUnit_1 && _this.get("markUnitChange") && isNumber(previousValue_1)) {
                                    if (gridInterval_1.timeUnit != "year") {
                                        if (checkChange(value, previousValue_1, nextGridUnit_1, _this._root.utc, _this._root.timezone)) {
                                            format = _this.get("periodChangeDateFormats")[gridInterval_1.timeUnit];
                                        }
                                    }
                                }
                                _this._createAssets(dataItem, []);
                                var label = dataItem.get("label");
                                if (label) {
                                    label.set("text", _this._root.dateFormatter.format(date, format));
                                }
                                if (dataItem.isHidden()) {
                                    dataItem.show();
                                }
                                _this._prepareDataItem(dataItem, gridInterval_1.count);
                            }
                            i_1++;
                            previousValue_1 = value;
                        });
                    }
                    each$1(this.series, function (series) {
                        if (series.inited) {
                            series._markDirtyAxes();
                        }
                    });
                }
                this._updateGhost();
            }
        });
        Object.defineProperty(GaplessDateAxis, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "GaplessDateAxis"
        });
        Object.defineProperty(GaplessDateAxis, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: DateAxis.classNames.concat([GaplessDateAxis.className])
        });
        return GaplessDateAxis;
    }(DateAxis));

    /**
     * Creates a duration axis.
     *
     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/duration-axis/} for more info
     * @important
     */
    var DurationAxis = /** @class */ (function (_super) {
        __extends(DurationAxis, _super);
        function DurationAxis() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_dataGrouped", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_groupingCalculated", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_intervalDuration", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 1
            });
            return _this;
        }
        Object.defineProperty(DurationAxis.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._settings.themeTags = mergeTags(this._settings.themeTags, ["axis"]);
                _super.prototype._afterNew.call(this);
            }
        });
        Object.defineProperty(DurationAxis.prototype, "_adjustMinMax", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (min, max, gridCount, strictMode) {
                var e_1, _a;
                var minMaxStep;
                var durationFormatter = this.getDurationFormatter();
                var baseUnit = this.get("baseUnit");
                // we don't allow to go to smaller units, setting so to avoid invalidation
                this.setRaw("maxPrecision", 0);
                if (baseUnit == "millisecond" || baseUnit == "second" || baseUnit == "minute" || baseUnit == "hour") {
                    // will fail if 0
                    if (gridCount <= 1) {
                        gridCount = 1;
                    }
                    gridCount = Math.round(gridCount);
                    //let initialMin: number = min;
                    //let initialMax: number = max;
                    var difference = max - min;
                    // in case min and max is the same, use max
                    if (difference === 0) {
                        difference = Math.abs(max);
                    }
                    var step = difference / gridCount;
                    var divisors = [60, 30, 20, 15, 10, 2, 1];
                    var realDivisor = 1;
                    if (baseUnit == "hour") {
                        divisors = [24, 12, 6, 4, 2, 1];
                    }
                    try {
                        for (var divisors_1 = __values(divisors), divisors_1_1 = divisors_1.next(); !divisors_1_1.done; divisors_1_1 = divisors_1.next()) {
                            var divisor = divisors_1_1.value;
                            if (difference / divisor > gridCount) {
                                realDivisor = divisor;
                                break;
                            }
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (divisors_1_1 && !divisors_1_1.done && (_a = divisors_1.return)) _a.call(divisors_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                    var count = Math.ceil(((max - min) / realDivisor) / gridCount);
                    var exponent = Math.log(Math.abs(count)) * Math.LOG10E;
                    var power = Math.pow(10, Math.floor(exponent)) / 10;
                    var reducedCount = count / power;
                    // find closest to divisor
                    var closest$1 = closest(divisors, reducedCount);
                    count = closest$1 * power;
                    step = realDivisor * count;
                    min = Math.floor(min / step) * step;
                    max = Math.ceil(max / step) * step;
                    /*
                    causese SO with seconds
                    if (strictMode) {
                        min -= step;
                        if (min < 0 && initialMin >= 0) {
                            min = 0;
                        }
                        max += step;
        
                        if (max > 0 && initialMax <= 0) {
                            max = 0;
                        }
                    }*/
                    minMaxStep = { min: min, max: max, step: step };
                }
                else {
                    minMaxStep = _super.prototype._adjustMinMax.call(this, min, max, gridCount, strictMode);
                }
                // choose duration formatter based on step
                this.setPrivate("durationFormat", durationFormatter.getFormat(minMaxStep.step, minMaxStep.max, baseUnit));
                return minMaxStep;
            }
        });
        Object.defineProperty(DurationAxis.prototype, "_formatText", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (value) {
                var formatter = this.getDurationFormatter();
                return formatter.format(value, this.getPrivate("durationFormat"), this.get("baseUnit"));
            }
        });
        /**
         * Returns text to be used in an axis tooltip for specific relative position.
         *
         * @param   position  Position
         * @return            Tooltip text
         */
        Object.defineProperty(DurationAxis.prototype, "getTooltipText", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (position) {
                var formatter = this.getDurationFormatter();
                var extraDecimals = this.get("extraTooltipPrecision", 0);
                var decimals = this.getPrivate("stepDecimalPlaces", 0) + extraDecimals;
                var value = round$1(this.positionToValue(position), decimals);
                return formatter.format(value, this.getPrivate("durationFormat"), this.get("baseUnit"));
            }
        });
        Object.defineProperty(DurationAxis, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "DurationAxis"
        });
        Object.defineProperty(DurationAxis, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ValueAxis.classNames.concat([DurationAxis.className])
        });
        return DurationAxis;
    }(ValueAxis));

    /**
     * Draws a bullet on an axis.
     *
     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/#Axis_bullets} for more info
     */
    var AxisBullet = /** @class */ (function (_super) {
        __extends(AxisBullet, _super);
        function AxisBullet() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            /**
             * Target axis object.
             */
            Object.defineProperty(_this, "axis", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            return _this;
        }
        Object.defineProperty(AxisBullet.prototype, "_beforeChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._beforeChanged.call(this);
                var sprite = this.get("sprite");
                if (this.isDirty("sprite")) {
                    if (sprite) {
                        sprite.setAll({ position: "absolute", role: "figure" });
                        this._disposers.push(sprite);
                    }
                }
                if (this.isDirty("location")) {
                    var dataItem = sprite.dataItem;
                    if (this.axis && sprite && dataItem) {
                        this.axis._prepareDataItem(dataItem);
                    }
                }
            }
        });
        Object.defineProperty(AxisBullet, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "AxisBullet"
        });
        Object.defineProperty(AxisBullet, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Entity.classNames.concat([AxisBullet.className])
        });
        return AxisBullet;
    }(Entity));

    /**
     * Draws an axis label.
     *
     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/#Labels} for more info
     * @important
     */
    var AxisLabel = /** @class */ (function (_super) {
        __extends(AxisLabel, _super);
        function AxisLabel() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_tickPoints", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            return _this;
        }
        Object.defineProperty(AxisLabel, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "AxisLabel"
        });
        Object.defineProperty(AxisLabel, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Label.classNames.concat([AxisLabel.className])
        });
        return AxisLabel;
    }(Label));

    /**
     * Draws a label on a circular axis.
     *
     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/#Labels} for more info
     */
    var AxisLabelRadial = /** @class */ (function (_super) {
        __extends(AxisLabelRadial, _super);
        function AxisLabelRadial() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_tickPoints", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            return _this;
        }
        Object.defineProperty(AxisLabelRadial, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "AxisLabelRadial"
        });
        Object.defineProperty(AxisLabelRadial, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: RadialLabel.classNames.concat([AxisLabelRadial.className])
        });
        return AxisLabelRadial;
    }(RadialLabel));

    /**
     * Draws an axis tick.
     *
     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/#Ticks} for more info
     * @important
     */
    var AxisTick = /** @class */ (function (_super) {
        __extends(AxisTick, _super);
        function AxisTick() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_tickPoints", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: []
            });
            return _this;
        }
        Object.defineProperty(AxisTick, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "AxisTick"
        });
        Object.defineProperty(AxisTick, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Tick.classNames.concat([AxisTick.className])
        });
        return AxisTick;
    }(Tick));

    /**
     * Base class for an axis renderer.
     *
     * Should not be used on its own.
     *
     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/#Axis_renderer} for more info
     */
    var AxisRenderer = /** @class */ (function (_super) {
        __extends(AxisRenderer, _super);
        function AxisRenderer() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            // save for quick access
            Object.defineProperty(_this, "_axisLength", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 100
            });
            Object.defineProperty(_this, "_start", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(_this, "_end", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 1
            });
            Object.defineProperty(_this, "_inversed", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: false
            });
            Object.defineProperty(_this, "_minSize", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            /**
             * Chart the renderer is used in.
             */
            Object.defineProperty(_this, "chart", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_lc", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 1
            });
            Object.defineProperty(_this, "_ls", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(_this, "_thumbDownPoint", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_downStart", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_downEnd", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            /**
             * A list of ticks in the axis.
             *
             * `ticks.template` can be used to configure ticks.
             *
             * @default new ListTemplate<AxisTick>
             */
            Object.defineProperty(_this, "ticks", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new ListTemplate(Template.new({}), function () { return AxisTick._new(_this._root, {
                    themeTags: mergeTags(_this.ticks.template.get("themeTags", []), _this.get("themeTags", []))
                }, [_this.ticks.template]); })
            });
            /**
             * A list of grid elements in the axis.
             *
             * `grid.template` can be used to configure grid.
             *
             * @default new ListTemplate<Grid>
             */
            Object.defineProperty(_this, "grid", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new ListTemplate(Template.new({}), function () { return Grid._new(_this._root, {
                    themeTags: mergeTags(_this.grid.template.get("themeTags", []), _this.get("themeTags", []))
                }, [_this.grid.template]); })
            });
            /**
             * A list of fills in the axis.
             *
             * `axisFills.template` can be used to configure axis fills.
             *
             * @default new ListTemplate<Graphics>
             */
            Object.defineProperty(_this, "axisFills", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new ListTemplate(Template.new({}), function () { return Graphics._new(_this._root, {
                    themeTags: mergeTags(_this.axisFills.template.get("themeTags", ["axis", "fill"]), _this.get("themeTags", []))
                }, [_this.axisFills.template]); })
            });
            /**
             * A list of labels in the axis.
             *
             * `labels.template` can be used to configure axis labels.
             *
             * @default new ListTemplate<AxisLabel>
             */
            Object.defineProperty(_this, "labels", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new ListTemplate(Template.new({}), function () { return AxisLabel._new(_this._root, {
                    themeTags: mergeTags(_this.labels.template.get("themeTags", []), _this.get("themeTags", []))
                }, [_this.labels.template]); })
            });
            /**
             * An [[Axis]] renderer is for.
             */
            Object.defineProperty(_this, "axis", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "thumb", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            return _this;
        }
        /**
         * @ignore
         */
        Object.defineProperty(AxisRenderer.prototype, "makeTick", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, themeTags) {
                var tick = this.ticks.make();
                tick._setDataItem(dataItem);
                dataItem.setRaw("tick", tick);
                tick.set("themeTags", mergeTags(tick.get("themeTags"), themeTags));
                this.axis.labelsContainer.children.push(tick);
                this.ticks.push(tick);
                return tick;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(AxisRenderer.prototype, "makeGrid", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, themeTags) {
                var grid = this.grid.make();
                grid._setDataItem(dataItem);
                dataItem.setRaw("grid", grid);
                grid.set("themeTags", mergeTags(grid.get("themeTags"), themeTags));
                this.axis.gridContainer.children.push(grid);
                this.grid.push(grid);
                return grid;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(AxisRenderer.prototype, "makeAxisFill", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, themeTags) {
                var axisFill = this.axisFills.make();
                axisFill._setDataItem(dataItem);
                axisFill.set("themeTags", mergeTags(axisFill.get("themeTags"), themeTags));
                this.axis.gridContainer.children.push(axisFill);
                dataItem.setRaw("axisFill", axisFill);
                this.axisFills.push(axisFill);
                return axisFill;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(AxisRenderer.prototype, "makeLabel", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, themeTags) {
                var label = this.labels.make();
                label.set("themeTags", mergeTags(label.get("themeTags"), themeTags));
                this.axis.labelsContainer.children.moveValue(label, 0);
                label._setDataItem(dataItem);
                dataItem.setRaw("label", label);
                this.labels.push(label);
                return label;
            }
        });
        Object.defineProperty(AxisRenderer.prototype, "axisLength", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return 0;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(AxisRenderer.prototype, "gridCount", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this.axisLength() / this.get("minGridDistance", 50);
            }
        });
        Object.defineProperty(AxisRenderer.prototype, "_updatePositions", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
            }
        });
        Object.defineProperty(AxisRenderer.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var _this = this;
                _super.prototype._afterNew.call(this);
                this.set("isMeasured", false);
                var thumb = this.thumb;
                if (thumb) {
                    this._disposers.push(thumb.events.on("pointerdown", function (event) {
                        _this._handleThumbDown(event.originalEvent);
                    }));
                    this._disposers.push(thumb.events.on("globalpointerup", function (event) {
                        _this._handleThumbUp(event.originalEvent);
                    }));
                    this._disposers.push(thumb.events.on("globalpointermove", function (event) {
                        _this._handleThumbMove(event.originalEvent);
                    }));
                }
            }
        });
        Object.defineProperty(AxisRenderer.prototype, "_changed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._changed.call(this);
                if (this.isDirty("pan")) {
                    var thumb = this.thumb;
                    if (thumb) {
                        var labelsContainer = this.axis.labelsContainer;
                        var pan = this.get("pan");
                        if (pan == "zoom") {
                            labelsContainer.children.push(thumb);
                        }
                        else if (pan == "none") {
                            labelsContainer.children.removeValue(thumb);
                        }
                    }
                }
            }
        });
        Object.defineProperty(AxisRenderer.prototype, "_handleThumbDown", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (event) {
                this._thumbDownPoint = this.toLocal(this._root.documentPointToRoot({ x: event.clientX, y: event.clientY }));
                var axis = this.axis;
                this._downStart = axis.get("start");
                this._downEnd = axis.get("end");
            }
        });
        Object.defineProperty(AxisRenderer.prototype, "_handleThumbUp", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_event) {
                this._thumbDownPoint = undefined;
            }
        });
        Object.defineProperty(AxisRenderer.prototype, "_handleThumbMove", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (event) {
                var downPoint = this._thumbDownPoint;
                if (downPoint) {
                    var point = this.toLocal(this._root.documentPointToRoot({ x: event.clientX, y: event.clientY }));
                    var downStart = this._downStart;
                    var downEnd = this._downEnd;
                    var extra = this._getPan(point, downPoint) * Math.min(1, (downEnd - downStart)) / 2;
                    this.axis.setAll({ start: downStart - extra, end: downEnd + extra });
                }
            }
        });
        Object.defineProperty(AxisRenderer.prototype, "_getPan", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_point1, _point2) {
                return 0;
            }
        });
        /**
         * Converts relative position (0-1) on axis to a pixel coordinate.
         *
         * @param position  Position (0-1)
         * @return Coordinate (px)
         */
        Object.defineProperty(AxisRenderer.prototype, "positionToCoordinate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (position) {
                if (this._inversed) {
                    return (this._end - position) * this._axisLength;
                }
                else {
                    return (position - this._start) * this._axisLength;
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(AxisRenderer.prototype, "updateTooltipBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_tooltip) { }
        });
        Object.defineProperty(AxisRenderer.prototype, "_updateSize", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.markDirty();
                this._clear = true;
            }
        });
        Object.defineProperty(AxisRenderer.prototype, "toAxisPosition", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (position) {
                var start = this._start || 0;
                var end = this._end || 1;
                position = position * (end - start);
                if (!this.get("inversed")) {
                    position = start + position;
                }
                else {
                    position = end - position;
                }
                return position;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(AxisRenderer.prototype, "fixPosition", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (position) {
                if (this.get("inversed")) {
                    return 1 - position;
                }
                return position;
            }
        });
        Object.defineProperty(AxisRenderer.prototype, "_updateLC", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
            }
        });
        Object.defineProperty(AxisRenderer.prototype, "toggleVisibility", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (sprite, position, minPosition, maxPosition) {
                var axis = this.axis;
                var start = axis.get("start", 0);
                var end = axis.get("end", 1);
                var updatedStart = start + (end - start) * (minPosition - 0.0001);
                var updatedEnd = start + (end - start) * (maxPosition + 0.0001);
                if (position < updatedStart || position > updatedEnd) {
                    sprite.setPrivate("visible", false);
                }
                else {
                    sprite.setPrivate("visible", true);
                }
            }
        });
        Object.defineProperty(AxisRenderer.prototype, "_positionTooltip", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (tooltip, point) {
                var chart = this.chart;
                if (chart) {
                    if (chart.inPlot(point)) {
                        tooltip.set("pointTo", this._display.toGlobal(point));
                    }
                    else {
                        tooltip.hide();
                    }
                }
            }
        });
        Object.defineProperty(AxisRenderer.prototype, "processAxis", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () { }
        });
        Object.defineProperty(AxisRenderer, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "AxisRenderer"
        });
        Object.defineProperty(AxisRenderer, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Graphics.classNames.concat([AxisRenderer.className])
        });
        return AxisRenderer;
    }(Graphics));

    /**
     * Used to render horizontal axis.
     *
     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/#Axis_renderer} for more info
     * @important
     */
    var AxisRendererX = /** @class */ (function (_super) {
        __extends(AxisRendererX, _super);
        function AxisRendererX() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "thumb", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: Rectangle.new(_this._root, { width: p100, isMeasured: false, themeTags: ["axis", "x", "thumb"] })
            });
            return _this;
        }
        Object.defineProperty(AxisRendererX.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._settings.themeTags = mergeTags(this._settings.themeTags, ["renderer", "x"]);
                _super.prototype._afterNew.call(this);
                this.setPrivateRaw("letter", "X");
                var gridTemplate = this.grid.template;
                gridTemplate.set("height", p100);
                gridTemplate.set("width", 0);
                gridTemplate.set("draw", function (display, graphics) {
                    display.moveTo(0, 0);
                    display.lineTo(0, graphics.height());
                });
                this.set("draw", function (display, graphics) {
                    display.moveTo(0, 0);
                    display.lineTo(graphics.width(), 0);
                });
            }
        });
        Object.defineProperty(AxisRendererX.prototype, "_changed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._changed.call(this);
                var axis = this.axis;
                axis.ghostLabel.setPrivate("visible", !this.get("inside"));
                var opposite = "opposite";
                var inside = "inside";
                if (this.isDirty(opposite) || this.isDirty(inside)) {
                    var chart = this.chart;
                    var axisChildren = axis.children;
                    if (this.get(inside)) {
                        axis.addTag(inside);
                    }
                    else {
                        axis.removeTag(inside);
                    }
                    if (chart) {
                        if (this.get(opposite)) {
                            var children = chart.topAxesContainer.children;
                            if (children.indexOf(axis) == -1) {
                                children.insertIndex(0, axis);
                            }
                            axis.addTag(opposite);
                            axisChildren.moveValue(this);
                        }
                        else {
                            var children = chart.bottomAxesContainer.children;
                            if (children.indexOf(axis) == -1) {
                                children.moveValue(axis);
                            }
                            axis.removeTag(opposite);
                            axisChildren.moveValue(this, 0);
                        }
                        axis.ghostLabel._applyThemes();
                        this.labels.each(function (label) {
                            label._applyThemes();
                        });
                        this.root._markDirtyRedraw();
                    }
                    axis.markDirtySize();
                }
                this.thumb.setPrivate("height", axis.labelsContainer.height());
            }
        });
        Object.defineProperty(AxisRendererX.prototype, "_getPan", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (point1, point2) {
                return (point2.x - point1.x) / this.width();
            }
        });
        Object.defineProperty(AxisRendererX.prototype, "toAxisPosition", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (position) {
                var start = this._start || 0;
                var end = this._end || 1;
                position -= this._ls;
                position = position * (end - start) / this._lc;
                if (!this.get("inversed")) {
                    position = start + position;
                }
                else {
                    position = end - position;
                }
                return position;
            }
        });
        Object.defineProperty(AxisRendererX.prototype, "_updateLC", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var axis = this.axis;
                var parent = axis.parent;
                if (parent) {
                    var w = parent.innerWidth();
                    this._lc = this.axisLength() / w;
                    this._ls = (axis.x() - parent.get("paddingLeft", 0)) / w;
                }
            }
        });
        Object.defineProperty(AxisRendererX.prototype, "_updatePositions", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var axis = this.axis;
                axis.gridContainer.set("x", axis.x() - relativeToValue(axis.get("centerX", 0), axis.width()) - axis.parent.get("paddingLeft", 0));
                axis.bulletsContainer.set("y", this.y());
                var chart = axis.chart;
                if (chart) {
                    var plotContainer = chart.plotContainer;
                    var axisHeader = axis.axisHeader;
                    var width = axis.get("marginLeft", 0);
                    var x = axis.x() - width;
                    var parent_1 = axis.parent;
                    if (parent_1) {
                        x -= parent_1.get("paddingLeft", 0);
                    }
                    if (axisHeader.children.length > 0) {
                        width = axis.axisHeader.width();
                        axis.set("marginLeft", width);
                    }
                    else {
                        axisHeader.set("width", width);
                    }
                    axisHeader.setAll({ x: x, y: -1, height: plotContainer.height() + 2 });
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(AxisRendererX.prototype, "processAxis", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype.processAxis.call(this);
                var axis = this.axis;
                axis.set("width", p100);
                var verticalLayout = this._root.verticalLayout;
                axis.set("layout", verticalLayout);
                axis.labelsContainer.set("width", p100);
                axis.axisHeader.setAll({ layout: verticalLayout });
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(AxisRendererX.prototype, "axisLength", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this.axis.width();
            }
        });
        /**
         * Converts axis relative position to actual coordinate in pixels.
         *
         * @param   position  Position
         * @return            Point
         */
        Object.defineProperty(AxisRendererX.prototype, "positionToPoint", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (position) {
                return { x: this.positionToCoordinate(position), y: 0 };
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(AxisRendererX.prototype, "updateTick", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (tick, position, endPosition, count) {
                if (tick) {
                    if (!isNumber(position)) {
                        position = 0;
                    }
                    var location_1 = 0.5;
                    if (isNumber(count) && count > 1) {
                        location_1 = tick.get("multiLocation", location_1);
                    }
                    else {
                        location_1 = tick.get("location", location_1);
                    }
                    if (isNumber(endPosition) && endPosition != position) {
                        position = position + (endPosition - position) * location_1;
                    }
                    tick.set("x", this.positionToCoordinate(position));
                    var length_1 = tick.get("length", 0);
                    var inside = tick.get("inside", this.get("inside", false));
                    if (this.get("opposite")) {
                        tick.set("y", p100);
                        if (!inside) {
                            length_1 *= -1;
                        }
                    }
                    else {
                        tick.set("y", 0);
                        if (inside) {
                            length_1 *= -1;
                        }
                    }
                    tick.set("draw", function (display) {
                        display.moveTo(0, 0);
                        display.lineTo(0, length_1);
                    });
                    this.toggleVisibility(tick, position, tick.get("minPosition", 0), tick.get("maxPosition", 1));
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(AxisRendererX.prototype, "updateLabel", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (label, position, endPosition, count) {
                if (label) {
                    var location_2 = 0.5;
                    if (isNumber(count) && count > 1) {
                        location_2 = label.get("multiLocation", location_2);
                    }
                    else {
                        location_2 = label.get("location", location_2);
                    }
                    if (!isNumber(position)) {
                        position = 0;
                    }
                    var inside = label.get("inside", this.get("inside", false));
                    var opposite = this.get("opposite");
                    if (opposite) {
                        if (!inside) {
                            label.set("position", "relative");
                            label.set("y", p100);
                        }
                        else {
                            label.set("position", "absolute");
                            label.set("y", 0);
                        }
                    }
                    else {
                        if (!inside) {
                            label.set("y", undefined);
                            label.set("position", "relative");
                        }
                        else {
                            label.set("y", 0);
                            label.set("position", "absolute");
                        }
                    }
                    if (isNumber(endPosition) && endPosition != position) {
                        position = position + (endPosition - position) * location_2;
                    }
                    label.set("x", this.positionToCoordinate(position));
                    this.toggleVisibility(label, position, label.get("minPosition", 0), label.get("maxPosition", 1));
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(AxisRendererX.prototype, "updateGrid", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (grid, position, endPosition) {
                if (grid) {
                    if (!isNumber(position)) {
                        position = 0;
                    }
                    var location_3 = grid.get("location", 0.5);
                    if (isNumber(endPosition) && endPosition != position) {
                        position = position + (endPosition - position) * location_3;
                    }
                    grid.set("x", Math.round(this.positionToCoordinate(position)));
                    this.toggleVisibility(grid, position, 0, 1);
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(AxisRendererX.prototype, "updateBullet", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (bullet, position, endPosition) {
                if (bullet) {
                    var sprite = bullet.get("sprite");
                    if (sprite) {
                        if (!isNumber(position)) {
                            position = 0;
                        }
                        var location_4 = bullet.get("location", 0.5);
                        if (isNumber(endPosition) && endPosition != position) {
                            position = position + (endPosition - position) * location_4;
                        }
                        sprite.set("x", this.positionToCoordinate(position));
                        this.toggleVisibility(sprite, position, 0, 1);
                    }
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(AxisRendererX.prototype, "updateFill", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (fill, position, endPosition) {
                if (fill) {
                    if (!isNumber(position)) {
                        position = 0;
                    }
                    if (!isNumber(endPosition)) {
                        endPosition = 1;
                    }
                    var x0 = this.positionToCoordinate(position);
                    var x1 = this.positionToCoordinate(endPosition);
                    this.fillDrawMethod(fill, x0, x1);
                }
            }
        });
        Object.defineProperty(AxisRendererX.prototype, "fillDrawMethod", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (fill, x0, x1) {
                var _this = this;
                fill.set("draw", function (display) {
                    var _a;
                    //display.drawRect(x0, 0, x1 - x0, this.axis!.gridContainer.height());
                    // using for holes, so can not be rectangle
                    var h = _this.axis.gridContainer.height();
                    var w = _this.width();
                    if (x1 < x0) {
                        _a = __read([x0, x1], 2), x1 = _a[0], x0 = _a[1];
                    }
                    if (x0 > w || x1 < 0) {
                        return;
                    }
                    /*
                    const limit = 10000;
        
                    x0 = Math.max(-limit, x0);
                    x1 = Math.min(limit, x1);
                    */
                    display.moveTo(x0, 0);
                    display.lineTo(x1, 0);
                    display.lineTo(x1, h);
                    display.lineTo(x0, h);
                    display.lineTo(x0, 0);
                });
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(AxisRendererX.prototype, "positionTooltip", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (tooltip, position) {
                this._positionTooltip(tooltip, { x: this.positionToCoordinate(position), y: 0 });
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(AxisRendererX.prototype, "updateTooltipBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (tooltip) {
                var inside = this.get("inside");
                var num = 100000;
                var global = this._display.toGlobal({ x: 0, y: 0 });
                var x = global.x;
                var y = 0;
                var w = this.axisLength();
                var h = num;
                var pointerOrientation = "up";
                if (this.get("opposite")) {
                    if (inside) {
                        pointerOrientation = "up";
                        y = global.y;
                        h = num;
                    }
                    else {
                        pointerOrientation = "down";
                        y = global.y - num;
                        h = num;
                    }
                }
                else {
                    if (inside) {
                        pointerOrientation = "down";
                        y = global.y - num;
                        h = num;
                    }
                    else {
                        pointerOrientation = "up";
                        y = global.y;
                        h = num;
                    }
                }
                var bounds = { left: x, right: x + w, top: y, bottom: y + h };
                var oldBounds = tooltip.get("bounds");
                if (!sameBounds(bounds, oldBounds)) {
                    tooltip.set("bounds", bounds);
                    tooltip.set("pointerOrientation", pointerOrientation);
                }
            }
        });
        Object.defineProperty(AxisRendererX, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "AxisRendererX"
        });
        Object.defineProperty(AxisRendererX, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: AxisRenderer.classNames.concat([AxisRendererX.className])
        });
        return AxisRendererX;
    }(AxisRenderer));

    /**
     * Used to render vertical axis.
     *
     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/#Axis_renderer} for more info
     * @important
     */
    var AxisRendererY = /** @class */ (function (_super) {
        __extends(AxisRendererY, _super);
        function AxisRendererY() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_downY", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "thumb", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: Rectangle.new(_this._root, { height: p100, isMeasured: false, themeTags: ["axis", "y", "thumb"] })
            });
            return _this;
        }
        Object.defineProperty(AxisRendererY.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._settings.themeTags = mergeTags(this._settings.themeTags, ["renderer", "y"]);
                if (this._settings.opposite) {
                    this._settings.themeTags.push("opposite");
                }
                _super.prototype._afterNew.call(this);
                this.setPrivateRaw("letter", "Y");
                var gridTemplate = this.grid.template;
                gridTemplate.set("width", p100);
                gridTemplate.set("height", 0);
                gridTemplate.set("draw", function (display, graphics) {
                    display.moveTo(0, 0);
                    display.lineTo(graphics.width(), 0);
                });
                this.set("draw", function (display, renderer) {
                    display.moveTo(0, 0);
                    display.lineTo(0, renderer.height());
                });
            }
        });
        Object.defineProperty(AxisRendererY.prototype, "_getPan", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (point1, point2) {
                return (point1.y - point2.y) / this.height();
            }
        });
        Object.defineProperty(AxisRendererY.prototype, "_changed", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._changed.call(this);
                var axis = this.axis;
                axis.ghostLabel.setPrivate("visible", !this.get("inside"));
                var thumb = this.thumb;
                var opposite = "opposite";
                var inside = "inside";
                if (this.isDirty(opposite) || this.isDirty(inside)) {
                    var chart = this.chart;
                    var axisChildren = axis.children;
                    if (this.get(inside)) {
                        axis.addTag(inside);
                    }
                    else {
                        axis.removeTag(inside);
                    }
                    if (chart) {
                        if (this.get(opposite)) {
                            var children = chart.rightAxesContainer.children;
                            if (children.indexOf(axis) == -1) {
                                children.moveValue(axis, 0);
                            }
                            axis.addTag(opposite);
                            axisChildren.moveValue(this, 0);
                            thumb.set("centerX", 0);
                        }
                        else {
                            var children = chart.leftAxesContainer.children;
                            if (children.indexOf(axis) == -1) {
                                children.moveValue(axis);
                            }
                            axis.removeTag(opposite);
                            axisChildren.moveValue(this);
                            thumb.set("centerX", p100);
                        }
                        axis.ghostLabel._applyThemes();
                        this.labels.each(function (label) {
                            label._applyThemes();
                        });
                        this.root._markDirtyRedraw();
                    }
                    axis.markDirtySize();
                }
                thumb.setPrivate("width", axis.labelsContainer.width());
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(AxisRendererY.prototype, "processAxis", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype.processAxis.call(this);
                var axis = this.axis;
                if (axis.get("height") == null) {
                    axis.set("height", p100);
                }
                var horizontalLayout = this._root.horizontalLayout;
                axis.set("layout", horizontalLayout);
                axis.labelsContainer.set("height", p100);
                axis.axisHeader.set("layout", horizontalLayout);
            }
        });
        Object.defineProperty(AxisRendererY.prototype, "_updatePositions", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var axis = this.axis;
                axis.gridContainer.set("y", axis.y() - relativeToValue(axis.get("centerY", 0), axis.height()));
                axis.bulletsContainer.set("x", this.x());
                var chart = axis.chart;
                if (chart) {
                    var plotContainer = chart.plotContainer;
                    var axisHeader = axis.axisHeader;
                    var height = axis.get("marginTop", 0);
                    if (axisHeader.children.length > 0) {
                        height = axis.axisHeader.height();
                        axis.set("marginTop", height);
                    }
                    else {
                        axisHeader.set("height", height);
                    }
                    axisHeader.setAll({ y: axis.y() - height, x: -1, width: plotContainer.width() + 2 });
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(AxisRendererY.prototype, "axisLength", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                return this.axis.innerHeight();
            }
        });
        /**
         * Converts axis relative position to actual coordinate in pixels.
         *
         * @param   position  Position
         * @return            Point
         */
        Object.defineProperty(AxisRendererY.prototype, "positionToPoint", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (position) {
                return { x: 0, y: this.positionToCoordinate(position) };
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(AxisRendererY.prototype, "updateLabel", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (label, position, endPosition, count) {
                if (label) {
                    if (!isNumber(position)) {
                        position = 0;
                    }
                    var location_1 = 0.5;
                    if (isNumber(count) && count > 1) {
                        location_1 = label.get("multiLocation", location_1);
                    }
                    else {
                        location_1 = label.get("location", location_1);
                    }
                    var opposite = this.get("opposite");
                    var inside = label.get("inside", this.get("inside", false));
                    if (opposite) {
                        label.set("x", 0);
                        if (inside) {
                            label.set("position", "absolute");
                        }
                        else {
                            label.set("position", "relative");
                        }
                    }
                    else {
                        if (inside) {
                            label.set("x", 0);
                            label.set("position", "absolute");
                        }
                        else {
                            label.set("x", undefined);
                            label.set("position", "relative");
                        }
                    }
                    if (isNumber(endPosition) && endPosition != position) {
                        position = position + (endPosition - position) * location_1;
                    }
                    label.set("y", this.positionToCoordinate(position));
                    this.toggleVisibility(label, position, label.get("minPosition", 0), label.get("maxPosition", 1));
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(AxisRendererY.prototype, "updateGrid", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (grid, position, endPosition) {
                if (grid) {
                    if (!isNumber(position)) {
                        position = 0;
                    }
                    var location_2 = grid.get("location", 0.5);
                    if (isNumber(endPosition) && endPosition != position) {
                        position = position + (endPosition - position) * location_2;
                    }
                    var y = this.positionToCoordinate(position);
                    grid.set("y", y);
                    this.toggleVisibility(grid, position, 0, 1);
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(AxisRendererY.prototype, "updateTick", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (tick, position, endPosition, count) {
                if (tick) {
                    if (!isNumber(position)) {
                        position = 0;
                    }
                    var location_3 = 0.5;
                    if (isNumber(count) && count > 1) {
                        location_3 = tick.get("multiLocation", location_3);
                    }
                    else {
                        location_3 = tick.get("location", location_3);
                    }
                    if (isNumber(endPosition) && endPosition != position) {
                        position = position + (endPosition - position) * location_3;
                    }
                    tick.set("y", this.positionToCoordinate(position));
                    var length_1 = tick.get("length", 0);
                    var inside = tick.get("inside", this.get("inside", false));
                    if (this.get("opposite")) {
                        tick.set("x", 0);
                        if (inside) {
                            length_1 *= -1;
                        }
                    }
                    else {
                        if (!inside) {
                            length_1 *= -1;
                        }
                    }
                    tick.set("draw", function (display) {
                        display.moveTo(0, 0);
                        display.lineTo(length_1, 0);
                    });
                    this.toggleVisibility(tick, position, tick.get("minPosition", 0), tick.get("maxPosition", 1));
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(AxisRendererY.prototype, "updateBullet", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (bullet, position, endPosition) {
                if (bullet) {
                    var sprite = bullet.get("sprite");
                    if (sprite) {
                        if (!isNumber(position)) {
                            position = 0;
                        }
                        var location_4 = bullet.get("location", 0.5);
                        if (isNumber(endPosition) && endPosition != position) {
                            position = position + (endPosition - position) * location_4;
                        }
                        sprite.set("y", this.positionToCoordinate(position));
                        this.toggleVisibility(sprite, position, 0, 1);
                    }
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(AxisRendererY.prototype, "updateFill", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (fill, position, endPosition) {
                if (fill) {
                    if (!isNumber(position)) {
                        position = 0;
                    }
                    if (!isNumber(endPosition)) {
                        endPosition = 1;
                    }
                    var y0 = this.positionToCoordinate(position);
                    var y1 = this.positionToCoordinate(endPosition);
                    this.fillDrawMethod(fill, y0, y1);
                }
            }
        });
        Object.defineProperty(AxisRendererY.prototype, "fillDrawMethod", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (fill, y0, y1) {
                var _this = this;
                fill.set("draw", function (display) {
                    var _a;
                    // using for holes, so can not be rectangle
                    var w = _this.axis.gridContainer.width();
                    var h = _this.height();
                    if (y1 < y0) {
                        _a = __read([y0, y1], 2), y1 = _a[0], y0 = _a[1];
                    }
                    if (y0 > h || y1 < 0) {
                        return;
                    }
                    //y0 = Math.max(0, y0);
                    //y1 = Math.min(h, y1);
                    display.moveTo(0, y0);
                    display.lineTo(w, y0);
                    display.lineTo(w, y1);
                    display.lineTo(0, y1);
                    display.lineTo(0, y0);
                });
            }
        });
        /**
         * Converts relative position (0-1) on axis to a pixel coordinate.
         *
         * @param position  Position (0-1)
         * @return Coordinate (px)
         */
        Object.defineProperty(AxisRendererY.prototype, "positionToCoordinate", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (position) {
                if (!this._inversed) {
                    return (this._end - position) * this._axisLength;
                }
                else {
                    return (position - this._start) * this._axisLength;
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(AxisRendererY.prototype, "positionTooltip", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (tooltip, position) {
                this._positionTooltip(tooltip, { x: 0, y: this.positionToCoordinate(position) });
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(AxisRendererY.prototype, "updateTooltipBounds", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (tooltip) {
                var inside = this.get("inside");
                var num = 100000;
                var global = this._display.toGlobal({ x: 0, y: 0 });
                var y = global.y;
                var x = 0;
                var h = this.axisLength();
                var w = num;
                var pointerOrientation = "right";
                if (this.get("opposite")) {
                    if (inside) {
                        pointerOrientation = "right";
                        x = global.x - num;
                        w = num;
                    }
                    else {
                        pointerOrientation = "left";
                        x = global.x;
                        w = num;
                    }
                }
                else {
                    if (inside) {
                        pointerOrientation = "left";
                        x = global.x;
                        w = num;
                    }
                    else {
                        pointerOrientation = "right";
                        x = global.x - num;
                        w = num;
                    }
                }
                var bounds = { left: x, right: x + w, top: y, bottom: y + h };
                var oldBounds = tooltip.get("bounds");
                if (!sameBounds(bounds, oldBounds)) {
                    tooltip.set("bounds", bounds);
                    tooltip.set("pointerOrientation", pointerOrientation);
                }
            }
        });
        Object.defineProperty(AxisRendererY.prototype, "_updateLC", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var axis = this.axis;
                var parent = axis.parent;
                if (parent) {
                    var h = parent.innerHeight();
                    this._lc = this.axisLength() / h;
                    this._ls = axis.y() / h;
                }
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(AxisRendererY.prototype, "toAxisPosition", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (position) {
                var start = this._start || 0;
                var end = this._end || 1;
                position -= this._ls;
                position = position * (end - start) / this._lc;
                if (this.get("inversed")) {
                    position = start + position;
                }
                else {
                    position = end - position;
                }
                return position;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(AxisRendererY.prototype, "fixPosition", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (position) {
                if (!this.get("inversed")) {
                    return 1 - position;
                }
                return position;
            }
        });
        Object.defineProperty(AxisRendererY, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "AxisRendererY"
        });
        Object.defineProperty(AxisRendererY, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: AxisRenderer.classNames.concat([AxisRendererY.className])
        });
        return AxisRendererY;
    }(AxisRenderer));

    /**
     * A candle element used in a [[CandlestickSeries]].
     */
    var Candlestick = /** @class */ (function (_super) {
        __extends(Candlestick, _super);
        function Candlestick() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Candlestick.prototype, "_beforeChanged", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._beforeChanged.call(this);
                if (this.isDirty("lowX0") || this.isDirty("lowY0") || this.isDirty("lowX1") || this.isDirty("lowY1") || this.isDirty("highX0") || this.isDirty("highX1") || this.isDirty("highY0") || this.isDirty("highY1")) {
                    this._clear = true;
                }
            }
        });
        Object.defineProperty(Candlestick.prototype, "_draw", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                _super.prototype._draw.call(this);
                var display = this._display;
                display.moveTo(this.get("lowX0", 0), this.get("lowY0", 0));
                display.lineTo(this.get("lowX1", 0), this.get("lowY1", 0));
                display.moveTo(this.get("highX0", 0), this.get("highY0", 0));
                display.lineTo(this.get("highX1", 0), this.get("highY1", 0));
            }
        });
        Object.defineProperty(Candlestick, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "Candlestick"
        });
        Object.defineProperty(Candlestick, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: RoundedRectangle.classNames.concat([Candlestick.className])
        });
        return Candlestick;
    }(RoundedRectangle));

    var ColumnSeries = /** @class */ (function (_super) {
        __extends(ColumnSeries, _super);
        function ColumnSeries() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            /**
             * A [[TemplateList]] of all columns in series.
             *
             * `columns.template` can be used to set default settings for all columns,
             * or to change on existing ones.
             */
            Object.defineProperty(_this, "columns", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new ListTemplate(Template.new({}), function () { return RoundedRectangle._new(_this._root, {
                    position: "absolute",
                    themeTags: mergeTags(_this.columns.template.get("themeTags", []), ["series", "column"])
                }, [_this.columns.template]); })
            });
            return _this;
        }
        /**
         * @ignore
         */
        Object.defineProperty(ColumnSeries.prototype, "makeColumn", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, listTemplate) {
                var column = this.mainContainer.children.push(listTemplate.make());
                column._setDataItem(dataItem);
                listTemplate.push(column);
                return column;
            }
        });
        Object.defineProperty(ColumnSeries.prototype, "_processAxisRange", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (axisRange) {
                var _this = this;
                _super.prototype._processAxisRange.call(this, axisRange);
                axisRange.columns = new ListTemplate(Template.new({}), function () { return RoundedRectangle._new(_this._root, {
                    position: "absolute",
                    themeTags: mergeTags(axisRange.columns.template.get("themeTags", []), ["series", "column"]),
                }, [_this.columns.template, axisRange.columns.template]); });
            }
        });
        Object.defineProperty(ColumnSeries, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "ColumnSeries"
        });
        Object.defineProperty(ColumnSeries, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: BaseColumnSeries.classNames.concat([ColumnSeries.className])
        });
        return ColumnSeries;
    }(BaseColumnSeries));

    /**
     * Candlestick series.
     *
     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/series/candlestick-series/} for more info
     * @important
     */
    var CandlestickSeries = /** @class */ (function (_super) {
        __extends(CandlestickSeries, _super);
        function CandlestickSeries() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            /**
             * A list of candles in the series.
             *
             * `columns.template` can be used to configure candles.
             *
             * @default new ListTemplate<Candlestick>
             */
            Object.defineProperty(_this, "columns", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new ListTemplate(Template.new({
                    themeTags: ["autocolor"]
                }), function () { return Candlestick._new(_this._root, {
                    themeTags: mergeTags(_this.columns.template.get("themeTags", []), ["candlestick", "series", "column"])
                }, [_this.columns.template]); })
            });
            return _this;
        }
        /**
         * @ignore
         */
        Object.defineProperty(CandlestickSeries.prototype, "makeColumn", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, listTemplate) {
                var column = this.mainContainer.children.push(listTemplate.make());
                column._setDataItem(dataItem);
                listTemplate.push(column);
                return column;
            }
        });
        Object.defineProperty(CandlestickSeries.prototype, "_updateGraphics", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, previousDataItem) {
                _super.prototype._updateGraphics.call(this, dataItem, previousDataItem);
                var xAxis = this.getRaw("xAxis");
                var yAxis = this.getRaw("yAxis");
                var baseAxis = this.getRaw("baseAxis");
                var vcy = this.get("vcy", 1);
                var vcx = this.get("vcx", 1);
                var lx0;
                var lx1;
                var ly0;
                var ly1;
                var hx0;
                var hx1;
                var hy0;
                var hy1;
                var locationX = this.get("locationX", dataItem.get("locationX", 0.5));
                var locationY = this.get("locationY", dataItem.get("locationY", 0.5));
                var openLocationX = this.get("openLocationX", dataItem.get("openLocationX", locationX));
                var openLocationY = this.get("openLocationY", dataItem.get("openLocationY", locationY));
                var orientation;
                if (yAxis === baseAxis) {
                    var open_1 = xAxis.getDataItemPositionX(dataItem, this._xOpenField, 1, vcx);
                    var close_1 = xAxis.getDataItemPositionX(dataItem, this._xField, 1, vcx);
                    lx1 = xAxis.getDataItemPositionX(dataItem, this._xLowField, 1, vcx);
                    hx1 = xAxis.getDataItemPositionX(dataItem, this._xHighField, 1, vcx);
                    hx0 = Math.max(open_1, close_1);
                    lx0 = Math.min(open_1, close_1);
                    var startLocation = this._aLocationY0 + openLocationY - 0.5;
                    var endLocation = this._aLocationY1 + locationY - 0.5;
                    ly0 = yAxis.getDataItemPositionY(dataItem, this._yField, startLocation + (endLocation - startLocation) / 2, vcy);
                    ly1 = ly0;
                    hy0 = ly0;
                    hy1 = ly0;
                    orientation = "horizontal";
                }
                else {
                    var open_2 = yAxis.getDataItemPositionY(dataItem, this._yOpenField, 1, vcy);
                    var close_2 = yAxis.getDataItemPositionY(dataItem, this._yField, 1, vcy);
                    ly1 = yAxis.getDataItemPositionY(dataItem, this._yLowField, 1, vcy);
                    hy1 = yAxis.getDataItemPositionY(dataItem, this._yHighField, 1, vcy);
                    hy0 = Math.max(open_2, close_2);
                    ly0 = Math.min(open_2, close_2);
                    var startLocation = this._aLocationX0 + openLocationX - 0.5;
                    var endLocation = this._aLocationX1 + locationX - 0.5;
                    lx0 = xAxis.getDataItemPositionX(dataItem, this._xField, startLocation + (endLocation - startLocation) / 2, vcx);
                    lx1 = lx0;
                    hx0 = lx0;
                    hx1 = lx0;
                    orientation = "vertical";
                }
                this._updateCandleGraphics(dataItem, lx0, lx1, ly0, ly1, hx0, hx1, hy0, hy1, orientation);
            }
        });
        Object.defineProperty(CandlestickSeries.prototype, "_updateCandleGraphics", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, lx0, lx1, ly0, ly1, hx0, hx1, hy0, hy1, orientation) {
                var column = dataItem.get("graphics");
                if (column) {
                    var pl0_1 = this.getPoint(lx0, ly0);
                    var pl1_1 = this.getPoint(lx1, ly1);
                    var ph0_1 = this.getPoint(hx0, hy0);
                    var ph1_1 = this.getPoint(hx1, hy1);
                    var x_1 = column.x();
                    var y_1 = column.y();
                    column.set("lowX0", pl0_1.x - x_1);
                    column.set("lowY0", pl0_1.y - y_1);
                    column.set("lowX1", pl1_1.x - x_1);
                    column.set("lowY1", pl1_1.y - y_1);
                    column.set("highX0", ph0_1.x - x_1);
                    column.set("highY0", ph0_1.y - y_1);
                    column.set("highX1", ph1_1.x - x_1);
                    column.set("highY1", ph1_1.y - y_1);
                    column.set("orientation", orientation);
                    var rangeGraphics = dataItem.get("rangeGraphics");
                    if (rangeGraphics) {
                        each$1(rangeGraphics, function (column) {
                            column.set("lowX0", pl0_1.x - x_1);
                            column.set("lowY0", pl0_1.y - y_1);
                            column.set("lowX1", pl1_1.x - x_1);
                            column.set("lowY1", pl1_1.y - y_1);
                            column.set("highX0", ph0_1.x - x_1);
                            column.set("highY0", ph0_1.y - y_1);
                            column.set("highX1", ph1_1.x - x_1);
                            column.set("highY1", ph1_1.y - y_1);
                            column.set("orientation", orientation);
                        });
                    }
                }
            }
        });
        Object.defineProperty(CandlestickSeries.prototype, "_processAxisRange", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (axisRange) {
                var _this = this;
                _super.prototype._processAxisRange.call(this, axisRange);
                axisRange.columns = new ListTemplate(Template.new({}), function () { return Candlestick._new(_this._root, {
                    themeTags: mergeTags(axisRange.columns.template.get("themeTags", []), ["candlestick", "series", "column"]),
                }, [_this.columns.template, axisRange.columns.template]); });
            }
        });
        Object.defineProperty(CandlestickSeries, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "CandlestickSeries"
        });
        Object.defineProperty(CandlestickSeries, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ColumnSeries.classNames.concat([CandlestickSeries.className])
        });
        return CandlestickSeries;
    }(ColumnSeries));

    var OHLC = /** @class */ (function (_super) {
        __extends(OHLC, _super);
        function OHLC() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(OHLC.prototype, "_draw", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                var display = this._display;
                display.moveTo(this.get("lowX1", 0), this.get("lowY1", 0));
                display.lineTo(this.get("highX1", 0), this.get("highY1", 0));
                var w = this.width();
                var h = this.height();
                if (this.get("orientation") == "vertical") {
                    var lY = h;
                    var hY = 0;
                    display.moveTo(0, lY);
                    display.lineTo(w / 2, lY);
                    display.moveTo(w / 2, hY);
                    display.lineTo(w, hY);
                }
                else {
                    var lX = 0;
                    var hX = w;
                    display.moveTo(lX, 0);
                    display.lineTo(lX, h / 2);
                    display.moveTo(hX, h / 2);
                    display.lineTo(hX, h);
                }
            }
        });
        Object.defineProperty(OHLC, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "OHLC"
        });
        Object.defineProperty(OHLC, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Candlestick.classNames.concat([OHLC.className])
        });
        return OHLC;
    }(Candlestick));

    /**
     * OHLC series.
     *
     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/series/candlestick-series/} for more info
     * @important
     */
    var OHLCSeries = /** @class */ (function (_super) {
        __extends(OHLCSeries, _super);
        function OHLCSeries() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            /**
             * A list of OHLC bars in the series.
             *
             * `columns.template` can be used to configure OHLC bars.
             *
             * @default new ListTemplate<OHLC>
             */
            Object.defineProperty(_this, "columns", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new ListTemplate(Template.new({
                    themeTags: ["autocolor"]
                }), function () { return OHLC._new(_this._root, {
                    themeTags: mergeTags(_this.columns.template.get("themeTags", []), ["ohlc", "series", "column"])
                }, [_this.columns.template]); })
            });
            return _this;
        }
        /**
         * @ignore
         */
        Object.defineProperty(OHLCSeries.prototype, "makeColumn", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, listTemplate) {
                var column = this.mainContainer.children.push(listTemplate.make());
                column._setDataItem(dataItem);
                listTemplate.push(column);
                return column;
            }
        });
        Object.defineProperty(OHLCSeries.prototype, "_processAxisRange", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (axisRange) {
                var _this = this;
                _super.prototype._processAxisRange.call(this, axisRange);
                axisRange.columns = new ListTemplate(Template.new({}), function () { return OHLC._new(_this._root, {
                    themeTags: mergeTags(axisRange.columns.template.get("themeTags", []), ["ohlc", "series", "column"]),
                }, [_this.columns.template, axisRange.columns.template]); });
            }
        });
        Object.defineProperty(OHLCSeries, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "OHLCSeries"
        });
        Object.defineProperty(OHLCSeries, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: CandlestickSeries.classNames.concat([OHLCSeries.className])
        });
        return OHLCSeries;
    }(CandlestickSeries));

    /**
     * Used to plot line and/or area series.
     *
     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/series/line-series/} for more info
     * @important
     */
    var LineSeries = /** @class */ (function (_super) {
        __extends(LineSeries, _super);
        function LineSeries() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            Object.defineProperty(_this, "_endIndex", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_strokeGenerator", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: line()
            });
            Object.defineProperty(_this, "_fillGenerator", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: area()
            });
            Object.defineProperty(_this, "_legendStroke", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_legendFill", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            /**
             * A [[TemplateList]] of all line segments in series.
             *
             * `strokes.template` can be used to set default settings for all line
             * segments, or to change on existing ones.
             *
             * @default new ListTemplate<Graphics>
             */
            Object.defineProperty(_this, "strokes", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new ListTemplate(Template.new({}), function () { return Graphics._new(_this._root, {
                    themeTags: mergeTags(_this.strokes.template.get("themeTags", []), ["line", "series", "stroke"])
                }, [_this.strokes.template]); })
            });
            /**
             * A [[TemplateList]] of all segment fills in series.
             *
             * `fills.template` can be used to set default settings for all segment
             * fills, or to change on existing ones.
             *
             * @default new ListTemplate<Graphics>
             */
            Object.defineProperty(_this, "fills", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: new ListTemplate(Template.new({}), function () { return Graphics._new(_this._root, {
                    themeTags: mergeTags(_this.strokes.template.get("themeTags", []), ["line", "series", "fill"])
                }, [_this.fills.template]); })
            });
            // custom set from data
            Object.defineProperty(_this, "_fillTemplate", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_strokeTemplate", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(_this, "_previousPoint", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: [0, 0, 0, 0]
            });
            Object.defineProperty(_this, "_dindex", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(_this, "_sindex", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            return _this;
        }
        Object.defineProperty(LineSeries.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._fillGenerator.y0(function (p) {
                    return p[3];
                });
                this._fillGenerator.x0(function (p) {
                    return p[2];
                });
                this._fillGenerator.y1(function (p) {
                    return p[1];
                });
                this._fillGenerator.x1(function (p) {
                    return p[0];
                });
                _super.prototype._afterNew.call(this);
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(LineSeries.prototype, "makeStroke", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (strokes) {
                var stroke = this.mainContainer.children.push(strokes.make());
                strokes.push(stroke);
                return stroke;
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(LineSeries.prototype, "makeFill", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (fills) {
                var fill = this.mainContainer.children.push(fills.make());
                fills.push(fill);
                return fill;
            }
        });
        Object.defineProperty(LineSeries.prototype, "_updateChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._strokeTemplate = undefined;
                this._fillTemplate = undefined;
                var xAxis = this.get("xAxis");
                var yAxis = this.get("yAxis");
                if (this.isDirty("stroke")) {
                    var stroke = this.get("stroke");
                    this.strokes.template.set("stroke", stroke);
                    var legendStroke = this._legendStroke;
                    if (legendStroke) {
                        legendStroke.states.lookup("default").set("stroke", stroke);
                    }
                }
                if (this.isDirty("fill")) {
                    var fill = this.get("fill");
                    this.fills.template.set("fill", fill);
                    var legendFill = this._legendFill;
                    if (legendFill) {
                        legendFill.states.lookup("default").set("fill", fill);
                    }
                }
                if (this.isDirty("curveFactory")) {
                    var curveFactory = this.get("curveFactory");
                    if (curveFactory) {
                        this._strokeGenerator.curve(curveFactory);
                        this._fillGenerator.curve(curveFactory);
                    }
                }
                if (xAxis.inited && yAxis.inited) {
                    if (this._axesDirty || this._valuesDirty || this._stackDirty || this.isDirty("vcx") || this.isDirty("vcy") || this._sizeDirty || this.isDirty("connect") || this.isDirty("curveFactory")) {
                        this.fills.each(function (fill) {
                            fill.setPrivate("visible", false);
                        });
                        this.strokes.each(function (fill) {
                            fill.setPrivate("visible", false);
                        });
                        this.axisRanges.each(function (axisRange) {
                            var fills = axisRange.fills;
                            if (fills) {
                                fills.each(function (fill) {
                                    fill.setPrivate("visible", false);
                                });
                            }
                            var strokes = axisRange.strokes;
                            if (strokes) {
                                strokes.each(function (stroke) {
                                    stroke.setPrivate("visible", false);
                                });
                            }
                        });
                        var startIndex = this.startIndex();
                        var strokeTemplateField = this.strokes.template.get("templateField");
                        var fillTemplateField = this.fills.template.get("templateField");
                        var strokeTemplateFound = true;
                        var fillTemplateFound = true;
                        if (strokeTemplateField) {
                            strokeTemplateFound = false;
                        }
                        if (fillTemplateField) {
                            fillTemplateFound = false;
                        }
                        var _loop_1 = function (i) {
                            var dataItem = this_1.dataItems[i];
                            var hasValues = true;
                            var dataContext = dataItem.dataContext;
                            if (strokeTemplateField) {
                                if (dataContext[strokeTemplateField]) {
                                    strokeTemplateFound = true;
                                }
                            }
                            if (fillTemplateField) {
                                if (dataContext[fillTemplateField]) {
                                    fillTemplateFound = true;
                                }
                            }
                            each$1(this_1._valueFields, function (field) {
                                if (!isNumber(dataItem.get(field))) {
                                    hasValues = false;
                                }
                            });
                            if (hasValues && strokeTemplateFound && fillTemplateFound) {
                                startIndex = i;
                                return "break";
                            }
                        };
                        var this_1 = this;
                        for (var i = startIndex - 1; i >= 0; i--) {
                            var state_1 = _loop_1(i);
                            if (state_1 === "break")
                                break;
                        }
                        var len = this.dataItems.length;
                        var endIndex = this.endIndex();
                        if (endIndex < len) {
                            endIndex++;
                            var _loop_2 = function (i) {
                                var dataItem = this_2.dataItems[i];
                                var hasValues = true;
                                each$1(this_2._valueFields, function (field) {
                                    if (!isNumber(dataItem.get(field))) {
                                        hasValues = false;
                                    }
                                });
                                if (hasValues) {
                                    endIndex = i + 1;
                                    return "break";
                                }
                            };
                            var this_2 = this;
                            for (var i = endIndex; i < len; i++) {
                                var state_2 = _loop_2(i);
                                if (state_2 === "break")
                                    break;
                            }
                        }
                        if (startIndex > 0) {
                            startIndex--;
                        }
                        this._endIndex = endIndex;
                        this._clearGraphics();
                        this._sindex = 0;
                        this._dindex = startIndex;
                        // this is done to avoid recursion with a lot of segments 
                        while (this._dindex < endIndex - 1) {
                            this._startSegment(this._dindex);
                            this._sindex++;
                        }
                    }
                }
                else {
                    this._skipped = true;
                }
                _super.prototype._updateChildren.call(this);
            }
        });
        Object.defineProperty(LineSeries.prototype, "_clearGraphics", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this.strokes.clear();
                this.fills.clear();
            }
        });
        Object.defineProperty(LineSeries.prototype, "_startSegment", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItemIndex) {
                var _this = this;
                var endIndex = this._endIndex;
                var currentEndIndex = endIndex;
                var autoGapCount = this.get("autoGapCount");
                var connect = this.get("connect");
                var fill = this.makeFill(this.fills);
                var fillTemplate = this._fillTemplate;
                var originalTemplate = this.fills.template;
                if (fillTemplate && fillTemplate != originalTemplate) {
                    fill.template = fillTemplate;
                }
                fill.setPrivate("visible", true);
                var stroke = this.makeStroke(this.strokes);
                var strokeTemplate = this._strokeTemplate;
                if (strokeTemplate && strokeTemplate != this.strokes.template) {
                    stroke.template = strokeTemplate;
                }
                stroke.setPrivate("visible", true);
                var xAxis = this.get("xAxis");
                var yAxis = this.get("yAxis");
                var baseAxis = this.get("baseAxis");
                var vcx = this.get("vcx", 1);
                var vcy = this.get("vcy", 1);
                var xField = this._xField;
                var yField = this._yField;
                var xOpenField = this._xOpenField;
                var yOpenField = this._yOpenField;
                var xOpenFieldValue = this.get("openValueXField");
                var yOpenFieldValue = this.get("openValueYField");
                if (!xOpenFieldValue) {
                    xOpenField = this._xField;
                }
                if (!yOpenFieldValue) {
                    yOpenField = this._yField;
                }
                var stacked = this.get("stacked");
                var basePosX = xAxis.basePosition();
                var basePosY = yAxis.basePosition();
                var baseField;
                if (baseAxis === yAxis) {
                    baseField = this._yField;
                }
                else {
                    baseField = this._xField;
                }
                var segments = [];
                var points = [];
                segments.push(points);
                var strokeTemplateField = this.strokes.template.get("templateField");
                var fillTemplateField = this.fills.template.get("templateField");
                var locationX = this.get("locationX", 0.5);
                var locationY = this.get("locationY", 0.5);
                var openLocationX = this.get("openLocationX", locationX);
                var openLocationY = this.get("openLocationY", locationY);
                var minDistance = this.get("minDistance", 0);
                var i;
                var fillVisible = this.fills.template.get("visible");
                if (this.axisRanges.length > 0) {
                    fillVisible = true;
                }
                var getOpen = false;
                if (stacked || xOpenFieldValue || yOpenFieldValue) {
                    getOpen = true;
                }
                var o = {
                    points: points,
                    segments: segments,
                    stacked: stacked,
                    getOpen: getOpen,
                    basePosX: basePosX,
                    basePosY: basePosY,
                    fillVisible: fillVisible,
                    xField: xField,
                    yField: yField,
                    xOpenField: xOpenField,
                    yOpenField: yOpenField,
                    vcx: vcx,
                    vcy: vcy,
                    baseAxis: baseAxis,
                    xAxis: xAxis,
                    yAxis: yAxis,
                    locationX: locationX,
                    locationY: locationY,
                    openLocationX: openLocationX,
                    openLocationY: openLocationY,
                    minDistance: minDistance
                };
                for (i = dataItemIndex; i < currentEndIndex; i++) {
                    this._dindex = i;
                    var dataItem = this._dataItems[i];
                    var valueX = dataItem.get(xField);
                    var valueY = dataItem.get(yField);
                    if (valueX == null || valueY == null) {
                        if (!connect) {
                            points = [];
                            segments.push(points);
                            o.points = points;
                        }
                    }
                    else {
                        this._getPoints(dataItem, o);
                    }
                    if (strokeTemplateField) {
                        var strokeTemplate_1 = dataItem.dataContext[strokeTemplateField];
                        if (strokeTemplate_1) {
                            if (!(strokeTemplate_1 instanceof Template)) {
                                strokeTemplate_1 = Template.new(strokeTemplate_1);
                            }
                            this._strokeTemplate = strokeTemplate_1;
                            if (i > dataItemIndex) {
                                currentEndIndex = i;
                                break;
                            }
                            else {
                                stroke.template = strokeTemplate_1;
                            }
                        }
                    }
                    if (fillTemplateField) {
                        var fillTemplate_1 = dataItem.dataContext[fillTemplateField];
                        if (fillTemplate_1) {
                            if (!(fillTemplate_1 instanceof Template)) {
                                fillTemplate_1 = Template.new(fillTemplate_1);
                            }
                            this._fillTemplate = fillTemplate_1;
                            if (i > dataItemIndex) {
                                currentEndIndex = i;
                                break;
                            }
                            else {
                                fill.template = fillTemplate_1;
                            }
                        }
                    }
                    if (!connect) {
                        var nextItem = this.dataItems[i + 1];
                        if (nextItem) {
                            if (baseAxis.shouldGap(dataItem, nextItem, autoGapCount, baseField)) {
                                points = [];
                                segments.push(points);
                                o.points = points;
                            }
                        }
                    }
                }
                fill.setRaw("userData", [dataItemIndex, i]);
                stroke.setRaw("userData", [dataItemIndex, i]);
                if (i === endIndex) {
                    this._endLine(points, segments[0][0]);
                }
                if (stroke) {
                    this._drawStroke(stroke, segments);
                }
                if (fill) {
                    this._drawFill(fill, segments);
                }
                this.axisRanges.each(function (axisRange) {
                    var container = axisRange.container;
                    var fills = axisRange.fills;
                    var fill = _this.makeFill(fills);
                    if (container) {
                        container.children.push(fill);
                    }
                    fill.setPrivate("visible", true);
                    _this._drawFill(fill, segments);
                    var strokes = axisRange.strokes;
                    var stroke = _this.makeStroke(strokes);
                    if (container) {
                        container.children.push(stroke);
                    }
                    stroke.setPrivate("visible", true);
                    _this._drawStroke(stroke, segments);
                    fill.setRaw("userData", [dataItemIndex, i]);
                    stroke.setRaw("userData", [dataItemIndex, i]);
                });
            }
        });
        Object.defineProperty(LineSeries.prototype, "_getPoints", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, o) {
                var points = o.points;
                var itemLocationX = dataItem.get("locationX", o.locationX);
                var itemLocationY = dataItem.get("locationY", o.locationY);
                var xPos = o.xAxis.getDataItemPositionX(dataItem, o.xField, itemLocationX, o.vcx);
                var yPos = o.yAxis.getDataItemPositionY(dataItem, o.yField, itemLocationY, o.vcy);
                if (this._shouldInclude(xPos)) {
                    var iPoint = this.getPoint(xPos, yPos);
                    var point = [iPoint.x, iPoint.y];
                    iPoint.x += this._x;
                    iPoint.y += this._y;
                    dataItem.set("point", iPoint);
                    if (o.fillVisible) {
                        var xPos0 = xPos;
                        var yPos0 = yPos;
                        if (o.baseAxis === o.xAxis) {
                            yPos0 = o.basePosY;
                        }
                        else if (o.baseAxis === o.yAxis) {
                            xPos0 = o.basePosX;
                        }
                        if (o.getOpen) {
                            var valueX = dataItem.get(o.xOpenField);
                            var valueY = dataItem.get(o.yOpenField);
                            if (valueX != null && valueY != null) {
                                var itemLocationX_1 = dataItem.get("openLocationX", o.openLocationX);
                                var itemLocationY_1 = dataItem.get("openLocationY", o.openLocationY);
                                if (o.stacked) {
                                    var stackToItemX = dataItem.get("stackToItemX");
                                    var stackToItemY = dataItem.get("stackToItemY");
                                    if (stackToItemX) {
                                        xPos0 = o.xAxis.getDataItemPositionX(stackToItemX, o.xField, itemLocationX_1, stackToItemX.component.get("vcx"));
                                        if (isNaN$1(xPos0)) {
                                            xPos0 = o.basePosX;
                                        }
                                    }
                                    else {
                                        if (o.yAxis === o.baseAxis) {
                                            xPos0 = o.basePosX;
                                        }
                                        else {
                                            xPos0 = o.xAxis.getDataItemPositionX(dataItem, o.xOpenField, itemLocationX_1, o.vcx);
                                        }
                                    }
                                    if (stackToItemY) {
                                        yPos0 = o.yAxis.getDataItemPositionY(stackToItemY, o.yField, itemLocationY_1, stackToItemY.component.get("vcy"));
                                        if (isNaN$1(yPos0)) {
                                            yPos0 = o.basePosY;
                                        }
                                    }
                                    else {
                                        if (o.xAxis === o.baseAxis) {
                                            yPos0 = o.basePosY;
                                        }
                                        else {
                                            yPos0 = o.yAxis.getDataItemPositionY(dataItem, o.yOpenField, itemLocationY_1, o.vcy);
                                        }
                                    }
                                }
                                else {
                                    xPos0 = o.xAxis.getDataItemPositionX(dataItem, o.xOpenField, itemLocationX_1, o.vcx);
                                    yPos0 = o.yAxis.getDataItemPositionY(dataItem, o.yOpenField, itemLocationY_1, o.vcy);
                                }
                            }
                        }
                        var closeIPoint = this.getPoint(xPos0, yPos0);
                        point[2] = closeIPoint.x;
                        point[3] = closeIPoint.y;
                    }
                    if (o.minDistance > 0) {
                        var p0 = point[0];
                        var p1 = point[1];
                        var p2 = point[2];
                        var p3 = point[3];
                        var prev = this._previousPoint;
                        var pp0 = prev[0];
                        var pp1 = prev[1];
                        var pp2 = prev[2];
                        var pp3 = prev[3];
                        if (Math.hypot(p0 - pp0, p1 - pp1) > o.minDistance || (p2 && p3 && Math.hypot(p2 - pp2, p3 - pp3) > o.minDistance)) {
                            points.push(point);
                            this._previousPoint = point;
                        }
                    }
                    else {
                        points.push(point);
                    }
                }
            }
        });
        Object.defineProperty(LineSeries.prototype, "_endLine", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_points, _firstPoint) {
            }
        });
        Object.defineProperty(LineSeries.prototype, "_drawStroke", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (graphics, segments) {
                var _this = this;
                if (graphics.get("visible")) {
                    graphics.set("draw", function (display) {
                        each$1(segments, function (segment) {
                            _this._strokeGenerator.context(display);
                            _this._strokeGenerator(segment);
                        });
                    });
                }
            }
        });
        Object.defineProperty(LineSeries.prototype, "_drawFill", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (graphics, segments) {
                var _this = this;
                if (graphics.get("visible")) {
                    graphics.set("draw", function (display) {
                        each$1(segments, function (segment) {
                            _this._fillGenerator.context(display);
                            _this._fillGenerator(segment);
                        });
                    });
                }
            }
        });
        Object.defineProperty(LineSeries.prototype, "_processAxisRange", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (axisRange) {
                var _this = this;
                _super.prototype._processAxisRange.call(this, axisRange);
                axisRange.fills = new ListTemplate(Template.new({}), function () { return Graphics._new(_this._root, {
                    themeTags: mergeTags(axisRange.fills.template.get("themeTags", []), ["line", "series", "fill"]),
                }, [_this.fills.template, axisRange.fills.template]); });
                axisRange.strokes = new ListTemplate(Template.new({}), function () { return Graphics._new(_this._root, {
                    themeTags: mergeTags(axisRange.strokes.template.get("themeTags", []), ["line", "series", "stroke"]),
                }, [_this.strokes.template, axisRange.strokes.template]); });
            }
        });
        /**
         * @ignore
         */
        Object.defineProperty(LineSeries.prototype, "createLegendMarker", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (_dataItem) {
                var legendDataItem = this.get("legendDataItem");
                if (legendDataItem) {
                    var marker = legendDataItem.get("marker");
                    var markerRectangle = legendDataItem.get("markerRectangle");
                    if (markerRectangle) {
                        markerRectangle.setPrivate("visible", false);
                    }
                    marker.set("background", Rectangle.new(marker._root, { fillOpacity: 0, fill: color(0x000000) }));
                    var legendStroke = marker.children.push(Graphics._new(marker._root, {
                        themeTags: ["line", "series", "legend", "marker", "stroke"], interactive: false
                    }, [this.strokes.template]));
                    this._legendStroke = legendStroke;
                    var legendFill = marker.children.push(Graphics._new(marker._root, {
                        themeTags: ["line", "series", "legend", "marker", "fill"]
                    }, [this.fills.template]));
                    this._legendFill = legendFill;
                    var disabledColor = this._root.interfaceColors.get("disabled");
                    legendStroke.states.create("disabled", { fill: disabledColor, stroke: disabledColor });
                    legendFill.states.create("disabled", { fill: disabledColor, stroke: disabledColor });
                    if (this.bullets.length > 0) {
                        var bulletFunction = this.bullets.getIndex(0);
                        if (bulletFunction) {
                            var bullet = bulletFunction(marker._root, this, new DataItem(this, {}, {}));
                            if (bullet) {
                                var sprite = bullet.get("sprite");
                                if (sprite instanceof Graphics) {
                                    sprite.states.create("disabled", { fill: disabledColor, stroke: disabledColor });
                                }
                                if (sprite) {
                                    sprite.set("tooltipText", undefined);
                                    marker.children.push(sprite);
                                    sprite.setAll({ x: marker.width() / 2, y: marker.height() / 2 });
                                }
                            }
                        }
                    }
                }
            }
        });
        Object.defineProperty(LineSeries, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "LineSeries"
        });
        Object.defineProperty(LineSeries, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: XYSeries.classNames.concat([LineSeries.className])
        });
        return LineSeries;
    }(XYSeries));

    /**
     * @ignore
     */
    var MonotoneYTension = /** @class */ (function () {
        function MonotoneYTension(context, tension) {
            Object.defineProperty(this, "_line", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(this, "_point", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(this, "_context", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_x0", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(this, "_x1", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(this, "_y0", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(this, "_y1", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(this, "_t0", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(this, "_tension", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            this._context = context;
            this._tension = tension;
        }
        Object.defineProperty(MonotoneYTension.prototype, "areaStart", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._line = 0;
            }
        });
        Object.defineProperty(MonotoneYTension.prototype, "areaEnd", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._line = NaN;
            }
        });
        Object.defineProperty(MonotoneYTension.prototype, "lineStart", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._x0 = this._x1 =
                    this._y0 = this._y1 =
                        this._t0 = NaN;
                this._point = 0;
            }
        });
        Object.defineProperty(MonotoneYTension.prototype, "lineEnd", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                switch (this._point) {
                    case 2:
                        this._context.lineTo(this._x1, this._y1);
                        break;
                    case 3:
                        point$1(this, this._t0, slope2$1(this, this._t0));
                        break;
                }
                if (this._line || (this._line !== 0 && this._point === 1))
                    this._context.closePath();
                this._line = 1 - this._line;
            }
        });
        Object.defineProperty(MonotoneYTension.prototype, "point", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (x, y) {
                var _a;
                _a = __read([y, x], 2), x = _a[0], y = _a[1];
                var t1 = NaN;
                x = +x, y = +y;
                if (x === this._x1 && y === this._y1)
                    return; // Ignore coincident points.
                switch (this._point) {
                    case 0:
                        this._point = 1;
                        this._line ? this._context.lineTo(y, x) : this._context.moveTo(y, x);
                        break;
                    case 1:
                        this._point = 2;
                        break;
                    case 2:
                        this._point = 3;
                        point$1(this, slope2$1(this, t1 = slope3$1(this, x, y)), t1);
                        break;
                    default:
                        point$1(this, this._t0, t1 = slope3$1(this, x, y));
                        break;
                }
                this._x0 = this._x1, this._x1 = x;
                this._y0 = this._y1, this._y1 = y;
                this._t0 = t1;
            }
        });
        return MonotoneYTension;
    }());
    /**
     * @ignore
     */
    function curveMonotoneYTension(tension) {
        function monotoneYTension(context) {
            return new MonotoneYTension(context, tension);
        }
        monotoneYTension.tension = function (tension) {
            return curveMonotoneYTension(+tension);
        };
        return monotoneYTension;
    }
    /**
     * @ignore
     */
    function sign$1(x) {
        return x < 0 ? -1 : 1;
    }
    /**
     * @ignore
     */
    function slope3$1(that, x2, y2) {
        var h0 = (that._x1 - that._x0);
        var h1 = (x2 - that._x1);
        var s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0);
        var s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0);
        var p = (s0 * h1 + s1 * h0) / (h0 + h1);
        return (sign$1(s0) + sign$1(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
    }
    /**
     * @ignore
     */
    function slope2$1(that, t) {
        var h = that._x1 - that._x0;
        return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
    }
    /**
     * @ignore
     */
    function point$1(that, t0, t1) {
        var x0 = that._x0, y0 = that._y0, x1 = that._x1, y1 = that._y1, dx = (x1 - x0) / 1.5 * (1 - that._tension);
        that._context.bezierCurveTo(y0 + dx * t0, x0 + dx, y1 - dx * t1, x1 - dx, y1, x1);
    }

    /**
     * Smoothed line series suitable for vertical plots.
     *
     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/series/smoothed-series/} for more info
     */
    var SmoothedYLineSeries = /** @class */ (function (_super) {
        __extends(SmoothedYLineSeries, _super);
        function SmoothedYLineSeries() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(SmoothedYLineSeries.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._setDefault("curveFactory", curveMonotoneYTension(this.get("tension", 0.5)));
                _super.prototype._afterNew.call(this);
            }
        });
        Object.defineProperty(SmoothedYLineSeries.prototype, "_updateChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (this.isDirty("tension")) {
                    this.set("curveFactory", curveMonotoneYTension(this.get("tension", 0.5)));
                    this._valuesDirty = true;
                }
                _super.prototype._updateChildren.call(this);
            }
        });
        Object.defineProperty(SmoothedYLineSeries, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "SmoothedYLineSeries"
        });
        Object.defineProperty(SmoothedYLineSeries, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: LineSeries.classNames.concat([SmoothedYLineSeries.className])
        });
        return SmoothedYLineSeries;
    }(LineSeries));

    /**
     * @ignore
     */
    var MonotoneXTension = /** @class */ (function () {
        function MonotoneXTension(context, tension) {
            Object.defineProperty(this, "_line", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(this, "_point", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(this, "_context", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "_x0", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(this, "_x1", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(this, "_y0", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(this, "_y1", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(this, "_t0", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            Object.defineProperty(this, "_tension", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: 0
            });
            this._context = context;
            this._tension = tension;
        }
        Object.defineProperty(MonotoneXTension.prototype, "areaStart", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._line = 0;
            }
        });
        Object.defineProperty(MonotoneXTension.prototype, "areaEnd", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._line = NaN;
            }
        });
        Object.defineProperty(MonotoneXTension.prototype, "lineStart", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._x0 = this._x1 =
                    this._y0 = this._y1 =
                        this._t0 = NaN;
                this._point = 0;
            }
        });
        Object.defineProperty(MonotoneXTension.prototype, "lineEnd", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                switch (this._point) {
                    case 2:
                        this._context.lineTo(this._x1, this._y1);
                        break;
                    case 3:
                        point(this, this._t0, slope2(this, this._t0));
                        break;
                }
                if (this._line || (this._line !== 0 && this._point === 1))
                    this._context.closePath();
                this._line = 1 - this._line;
            }
        });
        Object.defineProperty(MonotoneXTension.prototype, "point", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (x, y) {
                var t1 = NaN;
                x = +x, y = +y;
                if (x === this._x1 && y === this._y1)
                    return; // Ignore coincident points.
                switch (this._point) {
                    case 0:
                        this._point = 1;
                        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
                        break;
                    case 1:
                        this._point = 2;
                        break;
                    case 2:
                        this._point = 3;
                        point(this, slope2(this, t1 = slope3(this, x, y)), t1);
                        break;
                    default:
                        point(this, this._t0, t1 = slope3(this, x, y));
                        break;
                }
                this._x0 = this._x1, this._x1 = x;
                this._y0 = this._y1, this._y1 = y;
                this._t0 = t1;
            }
        });
        return MonotoneXTension;
    }());
    /**
     * @ignore
     */
    function curveMonotoneXTension(tension) {
        function monotoneXTension(context) {
            return new MonotoneXTension(context, tension);
        }
        return monotoneXTension;
    }
    /**
     * @ignore
     */
    function sign(x) {
        return x < 0 ? -1 : 1;
    }
    /**
     * @ignore
     */
    function slope3(that, x2, y2) {
        var h0 = (that._x1 - that._x0);
        var h1 = (x2 - that._x1);
        var s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0);
        var s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0);
        var p = (s0 * h1 + s1 * h0) / (h0 + h1);
        return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
    }
    /**
     * @ignore
     */
    function slope2(that, t) {
        var h = that._x1 - that._x0;
        return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
    }
    /**
     * @ignore
     */
    function point(that, t0, t1) {
        var x0 = that._x0, y0 = that._y0, x1 = that._x1, y1 = that._y1, dx = (x1 - x0) / 1.5 * (1 - that._tension);
        that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);
    }

    /**
     * Smoothed line series suitable for horizontal plots.
     *
     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/series/smoothed-series/} for more info
     */
    var SmoothedXLineSeries = /** @class */ (function (_super) {
        __extends(SmoothedXLineSeries, _super);
        function SmoothedXLineSeries() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(SmoothedXLineSeries.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._setDefault("curveFactory", curveMonotoneXTension(this.get("tension", 0.5)));
                _super.prototype._afterNew.call(this);
            }
        });
        Object.defineProperty(SmoothedXLineSeries.prototype, "_updateChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (this.isDirty("tension")) {
                    this.set("curveFactory", curveMonotoneXTension(this.get("tension", 0.5)));
                    this._valuesDirty = true;
                }
                _super.prototype._updateChildren.call(this);
            }
        });
        Object.defineProperty(SmoothedXLineSeries, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "SmoothedXLineSeries"
        });
        Object.defineProperty(SmoothedXLineSeries, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: LineSeries.classNames.concat([SmoothedXLineSeries.className])
        });
        return SmoothedXLineSeries;
    }(LineSeries));

    /**
     * Smoothed line series suitable for XY (scatter) charts
     *
     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/series/smoothed-series/} for more info
     */
    var SmoothedXYLineSeries = /** @class */ (function (_super) {
        __extends(SmoothedXYLineSeries, _super);
        function SmoothedXYLineSeries() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(SmoothedXYLineSeries.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._setDefault("curveFactory", curveCardinal.tension(this.get("tension", 0.5)));
                _super.prototype._afterNew.call(this);
            }
        });
        Object.defineProperty(SmoothedXYLineSeries.prototype, "_updateChildren", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                if (this.isDirty("tension")) {
                    this.set("curveFactory", curveCardinal.tension(this.get("tension", 0.5)));
                    this._valuesDirty = true;
                }
                _super.prototype._updateChildren.call(this);
            }
        });
        Object.defineProperty(SmoothedXYLineSeries, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "SmoothedXYLineSeries"
        });
        Object.defineProperty(SmoothedXYLineSeries, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: LineSeries.classNames.concat([SmoothedXYLineSeries.className])
        });
        return SmoothedXYLineSeries;
    }(LineSeries));

    var StepLineSeries = /** @class */ (function (_super) {
        __extends(StepLineSeries, _super);
        function StepLineSeries() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(StepLineSeries.prototype, "_afterNew", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function () {
                this._setDefault("curveFactory", stepAfter);
                _super.prototype._afterNew.call(this);
            }
        });
        Object.defineProperty(StepLineSeries.prototype, "_getPoints", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function (dataItem, o) {
                var points = o.points;
                var width = this.get("stepWidth", p100).value / 2;
                var itemLocationX0 = dataItem.get("locationX", o.locationX);
                var itemLocationY0 = dataItem.get("locationY", o.locationY);
                var itemLocationX1 = itemLocationX0;
                var itemLocationY1 = itemLocationY0;
                if (o.baseAxis === o.xAxis) {
                    itemLocationX0 -= width;
                    itemLocationX1 += width;
                }
                else if (o.baseAxis === o.yAxis) {
                    itemLocationY0 -= width;
                    itemLocationY1 += width;
                }
                var xPos0 = o.xAxis.getDataItemPositionX(dataItem, o.xField, itemLocationX0, o.vcx);
                var yPos0 = o.yAxis.getDataItemPositionY(dataItem, o.yField, itemLocationY0, o.vcy);
                var xPos1 = o.xAxis.getDataItemPositionX(dataItem, o.xField, itemLocationX1, o.vcx);
                var yPos1 = o.yAxis.getDataItemPositionY(dataItem, o.yField, itemLocationY1, o.vcy);
                if (this._shouldInclude(xPos0)) {
                    var iPoint0 = this.getPoint(xPos0, yPos0);
                    var point0 = [iPoint0.x, iPoint0.y];
                    var iPoint1 = this.getPoint(xPos1, yPos1);
                    var point1 = [iPoint1.x, iPoint1.y];
                    if (o.fillVisible) {
                        var xOpenPos0 = xPos0;
                        var yOpenPos0 = yPos0;
                        var xOpenPos1 = xPos1;
                        var yOpenPos1 = yPos1;
                        if (o.baseAxis === o.xAxis) {
                            yOpenPos0 = o.basePosY;
                            yOpenPos1 = o.basePosY;
                        }
                        else if (o.baseAxis === o.yAxis) {
                            xOpenPos0 = o.basePosX;
                            xOpenPos1 = o.basePosX;
                        }
                        if (o.getOpen) {
                            var valueX = dataItem.get(o.xOpenField);
                            var valueY = dataItem.get(o.yOpenField);
                            if (valueX != null && valueY != null) {
                                itemLocationX0 = dataItem.get("openLocationX", o.openLocationX);
                                itemLocationY0 = dataItem.get("openLocationY", o.openLocationY);
                                itemLocationX1 = itemLocationX0;
                                itemLocationY1 = itemLocationY0;
                                if (o.baseAxis === o.xAxis) {
                                    itemLocationX0 -= width;
                                    itemLocationX1 += width;
                                }
                                else if (o.baseAxis === o.yAxis) {
                                    itemLocationY0 -= width;
                                    itemLocationY1 += width;
                                }
                                if (o.stacked) {
                                    var stackToItemX = dataItem.get("stackToItemX");
                                    var stackToItemY = dataItem.get("stackToItemY");
                                    if (stackToItemX) {
                                        xOpenPos0 = o.xAxis.getDataItemPositionX(stackToItemX, o.xField, itemLocationX0, stackToItemX.component.get("vcx"));
                                        xOpenPos1 = o.xAxis.getDataItemPositionX(stackToItemX, o.xField, itemLocationX1, stackToItemX.component.get("vcx"));
                                    }
                                    else {
                                        if (o.yAxis === o.baseAxis) {
                                            xOpenPos0 = o.basePosX;
                                            xOpenPos1 = o.basePosX;
                                        }
                                        else if (o.baseAxis === o.yAxis) {
                                            xOpenPos0 = o.xAxis.getDataItemPositionX(dataItem, o.xOpenField, itemLocationX0, o.vcx);
                                            xOpenPos1 = o.xAxis.getDataItemPositionX(dataItem, o.xOpenField, itemLocationX1, o.vcx);
                                        }
                                    }
                                    if (stackToItemY) {
                                        yOpenPos0 = o.yAxis.getDataItemPositionY(stackToItemY, o.yField, itemLocationY0, stackToItemY.component.get("vcy"));
                                        yOpenPos1 = o.yAxis.getDataItemPositionY(stackToItemY, o.yField, itemLocationY1, stackToItemY.component.get("vcy"));
                                    }
                                    else {
                                        if (o.xAxis === o.baseAxis) {
                                            yOpenPos0 = o.basePosY;
                                            yOpenPos1 = o.basePosY;
                                        }
                                        else if (o.baseAxis === o.yAxis) {
                                            yOpenPos0 = o.yAxis.getDataItemPositionY(dataItem, o.yOpenField, itemLocationY0, o.vcy);
                                            yOpenPos1 = o.yAxis.getDataItemPositionY(dataItem, o.yOpenField, itemLocationY1, o.vcy);
                                        }
                                    }
                                }
                                else {
                                    xOpenPos0 = o.xAxis.getDataItemPositionX(dataItem, o.xOpenField, itemLocationX0, o.vcx);
                                    yOpenPos0 = o.yAxis.getDataItemPositionY(dataItem, o.yOpenField, itemLocationY0, o.vcy);
                                    xOpenPos1 = o.xAxis.getDataItemPositionX(dataItem, o.xOpenField, itemLocationX1, o.vcx);
                                    yOpenPos1 = o.yAxis.getDataItemPositionY(dataItem, o.yOpenField, itemLocationY1, o.vcy);
                                }
                            }
                        }
                        var closeIPoint0 = this.getPoint(xOpenPos0, yOpenPos0);
                        var closeIPoint1 = this.getPoint(xOpenPos1, yOpenPos1);
                        point0[2] = closeIPoint0.x;
                        point0[3] = closeIPoint0.y;
                        point1[2] = closeIPoint1.x;
                        point1[3] = closeIPoint1.y;
                    }
                    points.push(point0);
                    points.push(point1);
                    dataItem.set("point", { x: point0[0] + (point1[0] - point0[0]) / 2, y: point0[1] + (point1[1] - point0[1]) / 2 });
                }
                if (this.get("noRisers")) {
                    o.points = [];
                    o.segments.push(points);
                }
            }
        });
        Object.defineProperty(StepLineSeries, "className", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "StepLineSeries"
        });
        Object.defineProperty(StepLineSeries, "classNames", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: LineSeries.classNames.concat([StepLineSeries.className])
        });
        return StepLineSeries;
    }(LineSeries));

    var am5xy = /*#__PURE__*/Object.freeze({
        __proto__: null,
        DefaultTheme: XYChartDefaultTheme,
        XYChart: XYChart,
        XYChartScrollbar: XYChartScrollbar,
        XYCursor: XYCursor,
        BaseColumnSeries: BaseColumnSeries,
        Axis: Axis,
        CategoryAxis: CategoryAxis,
        CategoryDateAxis: CategoryDateAxis,
        DateAxis: DateAxis,
        GaplessDateAxis: GaplessDateAxis,
        DurationAxis: DurationAxis,
        ValueAxis: ValueAxis,
        AxisBullet: AxisBullet,
        AxisLabel: AxisLabel,
        AxisLabelRadial: AxisLabelRadial,
        AxisTick: AxisTick,
        Grid: Grid,
        AxisRenderer: AxisRenderer,
        AxisRendererX: AxisRendererX,
        AxisRendererY: AxisRendererY,
        XYSeries: XYSeries,
        Candlestick: Candlestick,
        CandlestickSeries: CandlestickSeries,
        OHLC: OHLC,
        OHLCSeries: OHLCSeries,
        ColumnSeries: ColumnSeries,
        LineSeries: LineSeries,
        SmoothedYLineSeries: SmoothedYLineSeries,
        SmoothedXLineSeries: SmoothedXLineSeries,
        SmoothedXYLineSeries: SmoothedXYLineSeries,
        StepLineSeries: StepLineSeries
    });

    /* src/components/menu/SpeedChart.svelte generated by Svelte v3.49.0 */
    const file$8 = "src/components/menu/SpeedChart.svelte";

    function get_each_context$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[13] = list[i];
    	child_ctx[15] = i;
    	return child_ctx;
    }

    // (160:3) {#if selectedGPSData.length}
    function create_if_block$5(ctx) {
    	let hr;
    	let t0;
    	let button;
    	let i;
    	let t1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			hr = element("hr");
    			t0 = space();
    			button = element("button");
    			i = element("i");
    			t1 = text("\n\t\t\t\t\tRefresh and only show Selected Trip Data");
    			attr_dev(hr, "class", "my-2");
    			add_location(hr, file$8, 160, 4, 4047);
    			attr_dev(i, "class", "fa-solid fa-refresh");
    			add_location(i, file$8, 163, 5, 4183);
    			attr_dev(button, "class", `card-btn btn-primary mx-1`);
    			add_location(button, file$8, 162, 4, 4072);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, hr, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, button, anchor);
    			append_dev(button, i);
    			append_dev(button, t1);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*click_handler*/ ctx[5], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(hr);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$5.name,
    		type: "if",
    		source: "(160:3) {#if selectedGPSData.length}",
    		ctx
    	});

    	return block;
    }

    // (176:4) {#each speedColors as speedColor, i}
    function create_each_block$3(ctx) {
    	let p;
    	let i_1;
    	let t0;
    	let t1_value = /*i*/ ctx[15] * 10 + "";
    	let t1;
    	let t2;
    	let t3_value = (/*i*/ ctx[15] + 1) * 10 - 1 + "";
    	let t3;

    	const block = {
    		c: function create() {
    			p = element("p");
    			i_1 = element("i");
    			t0 = space();
    			t1 = text(t1_value);
    			t2 = text(" - ");
    			t3 = text(t3_value);
    			attr_dev(i_1, "class", "dot");
    			attr_dev(i_1, "style", `--color:${/*speedColor*/ ctx[13]}`);
    			add_location(i_1, file$8, 176, 31, 4558);
    			attr_dev(p, "class", "list-item my-2");
    			add_location(p, file$8, 176, 5, 4532);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, i_1);
    			append_dev(p, t0);
    			append_dev(p, t1);
    			append_dev(p, t2);
    			append_dev(p, t3);
    		},
    		p: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$3.name,
    		type: "each",
    		source: "(176:4) {#each speedColors as speedColor, i}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$9(ctx) {
    	let div4;
    	let section0;
    	let div1;
    	let p0;
    	let t1;
    	let div0;
    	let t2;
    	let t3;
    	let section1;
    	let div3;
    	let p1;
    	let t5;
    	let div2;
    	let t6;
    	let p2;
    	let i;
    	let t7;
    	let t8;
    	let hr;
    	let t9;
    	let p3;
    	let if_block = /*selectedGPSData*/ ctx[0].length && create_if_block$5(ctx);
    	let each_value = /*speedColors*/ ctx[3];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div4 = element("div");
    			section0 = element("section");
    			div1 = element("div");
    			p0 = element("p");
    			p0.textContent = "Vehicle Speed Chart (Km/h):";
    			t1 = space();
    			div0 = element("div");
    			t2 = space();
    			if (if_block) if_block.c();
    			t3 = space();
    			section1 = element("section");
    			div3 = element("div");
    			p1 = element("p");
    			p1.textContent = "Vehicle Speed Legend (Km/h):";
    			t5 = space();
    			div2 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t6 = space();
    			p2 = element("p");
    			i = element("i");
    			t7 = text(" 100+");
    			t8 = space();
    			hr = element("hr");
    			t9 = space();
    			p3 = element("p");
    			p3.textContent = "Attention! Speed color is not indicative of speeding.";
    			attr_dev(p0, "class", "font-bold my-1");
    			add_location(p0, file$8, 155, 3, 3886);
    			attr_dev(div0, "class", `h-96 w-full rounded-lg`);
    			add_location(div0, file$8, 157, 3, 3948);
    			attr_dev(div1, "class", "p-4");
    			add_location(div1, file$8, 154, 2, 3865);
    			attr_dev(section0, "class", "card h-fit scale-in-center flex-1");
    			add_location(section0, file$8, 153, 1, 3811);
    			attr_dev(p1, "class", "font-bold my-1");
    			add_location(p1, file$8, 172, 3, 4388);
    			attr_dev(i, "class", "dot");
    			attr_dev(i, "style", `--color:${/*speedColors*/ ctx[3][/*speedColors*/ ctx[3].length - 1]}`);
    			add_location(i, file$8, 178, 30, 4684);
    			attr_dev(p2, "class", "list-item my-2");
    			add_location(p2, file$8, 178, 4, 4658);
    			attr_dev(div2, "class", "overflow-auto h-full");
    			add_location(div2, file$8, 174, 3, 4451);
    			attr_dev(hr, "class", "my-2");
    			add_location(hr, file$8, 181, 3, 4782);
    			add_location(p3, file$8, 183, 3, 4806);
    			attr_dev(div3, "class", "p-4");
    			add_location(div3, file$8, 171, 2, 4367);
    			attr_dev(section1, "class", "card h-full scale-in-center flex-none");
    			add_location(section1, file$8, 170, 1, 4309);
    			attr_dev(div4, "class", "flex flex-row gap-4 h-full");
    			add_location(div4, file$8, 152, 0, 3769);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div4, anchor);
    			append_dev(div4, section0);
    			append_dev(section0, div1);
    			append_dev(div1, p0);
    			append_dev(div1, t1);
    			append_dev(div1, div0);
    			/*div0_binding*/ ctx[4](div0);
    			append_dev(div1, t2);
    			if (if_block) if_block.m(div1, null);
    			append_dev(div4, t3);
    			append_dev(div4, section1);
    			append_dev(section1, div3);
    			append_dev(div3, p1);
    			append_dev(div3, t5);
    			append_dev(div3, div2);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div2, null);
    			}

    			append_dev(div2, t6);
    			append_dev(div2, p2);
    			append_dev(p2, i);
    			append_dev(p2, t7);
    			append_dev(div3, t8);
    			append_dev(div3, hr);
    			append_dev(div3, t9);
    			append_dev(div3, p3);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*selectedGPSData*/ ctx[0].length) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$5(ctx);
    					if_block.c();
    					if_block.m(div1, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (dirty & /*speedColors*/ 8) {
    				each_value = /*speedColors*/ ctx[3];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$3(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$3(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div2, t6);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: noop$2,
    		o: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div4);
    			/*div0_binding*/ ctx[4](null);
    			if (if_block) if_block.d();
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$9.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$9($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('SpeedChart', slots, []);
    	let { selectedGPSData } = $$props;
    	let { setGPSDataWithSelectedData } = $$props;

    	let speedColors = [
    		"#fa6e6e",
    		"#fa9b45",
    		"#fbf01c",
    		"#88ed02",
    		"#13c600",
    		"#00ba73",
    		"#00a9d1",
    		"#0093ff",
    		"#0071ff",
    		"#1800ff"
    	];

    	let chartViewObject = null;
    	let chartDiv;
    	let xAxis;
    	let series;

    	const filterGPSData = () => {
    		let data = [];

    		if (selectedGPSData.length) {
    			const coordinates = selectedGPSData[0].features;

    			coordinates.forEach((element, index) => {
    				const speed = element.properties.Speed ? element.properties.Speed : 0;
    				const strokeSettings = { stroke: element.properties.Color };
    				const bulletSettings = { fill: element.properties.Color };
    				const fillSettings = { fill: element.properties.Color };

    				data.push({
    					index,
    					value: speed,
    					strokeSettings,
    					bulletSettings,
    					fillSettings
    				});
    			});
    		} else {
    			const strokeSettings = { stroke: 'Green' };
    			const bulletSettings = { fill: 'Green' };
    			const fillSettings = { fill: 'Green' };

    			data.push({
    				index: 0,
    				value: 0,
    				strokeSettings,
    				bulletSettings,
    				fillSettings
    			});
    		}

    		return data;
    	};

    	const updateChartView = () => {
    		let chartData = filterGPSData();
    		xAxis.data.setAll(chartData);
    		series.data.setAll(chartData);
    	};

    	const initializeChartView = () => {
    		let root = Root.new(chartDiv);

    		let chart = root.container.children.push(XYChart.new(root, {
    			panX: true,
    			panY: true,
    			wheelX: "panX",
    			wheelY: "zoomX",
    			pinchZoomX: true
    		}));

    		// Add cursor
    		// https://www.amcharts.com/docs/v5/charts/xy-chart/cursor/
    		var cursor = chart.set("cursor", XYCursor.new(root, { behavior: "none" }));

    		cursor.lineY.set("visible", false);
    		let xRenderer = AxisRendererX.new(root, { minGridDistance: 30 });

    		xRenderer.labels.template.setAll({
    			rotation: -90,
    			centerY: p50,
    			centerX: p100,
    			paddingRight: 15
    		});

    		xAxis = chart.xAxes.push(CategoryAxis.new(root, {
    			categoryField: "index",
    			renderer: xRenderer,
    			tooltip: Tooltip.new(root, {})
    		}));

    		var yAxis = chart.yAxes.push(ValueAxis.new(root, {
    			renderer: AxisRendererY.new(root, {})
    		}));

    		// Add series
    		// https://www.amcharts.com/docs/v5/charts/xy-chart/series/
    		series = chart.series.push(LineSeries.new(root, {
    			name: "Series",
    			xAxis,
    			yAxis,
    			valueYField: "value",
    			categoryXField: "index"
    		}));

    		var tooltip = series.set("tooltip", Tooltip.new(root, {}));
    		tooltip.label.set("text", "{valueY}");

    		series = chart.series.push(LineSeries.new(root, {
    			name: "Series",
    			xAxis,
    			yAxis,
    			valueYField: "value",
    			sequencedInterpolation: true,
    			categoryXField: "index",
    			tooltip: Tooltip.new(root, { labelText: "{valueY}" })
    		}));

    		series.strokes.template.setAll({
    			templateField: "strokeSettings",
    			strokeWidth: 2
    		});

    		series.bullets.push(function () {
    			return Bullet.new(root, {
    				sprite: Circle.new(root, {
    					templateField: "bulletSettings",
    					radius: 5
    				})
    			});
    		});

    		let chartData = filterGPSData();
    		xAxis.data.setAll(chartData);
    		series.data.setAll(chartData);
    		chartViewObject = true;
    		series.appear(1000);
    		chart.appear(1000, 100);
    	};

    	onMount(() => {
    		initializeChartView();
    	});

    	const onGPSDataChange = () => {
    		if (chartViewObject) {
    			updateChartView();
    		}
    	};

    	onDestroy(() => {
    		chartViewObject = false;
    		$$invalidate(2, chartDiv = null);
    		xAxis = null;
    		series = null;
    	});

    	const writable_props = ['selectedGPSData', 'setGPSDataWithSelectedData'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<SpeedChart> was created with unknown prop '${key}'`);
    	});

    	function div0_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			chartDiv = $$value;
    			$$invalidate(2, chartDiv);
    		});
    	}

    	const click_handler = () => setGPSDataWithSelectedData(selectedGPSData);

    	$$self.$$set = $$props => {
    		if ('selectedGPSData' in $$props) $$invalidate(0, selectedGPSData = $$props.selectedGPSData);
    		if ('setGPSDataWithSelectedData' in $$props) $$invalidate(1, setGPSDataWithSelectedData = $$props.setGPSDataWithSelectedData);
    	};

    	$$self.$capture_state = () => ({
    		am5,
    		am5xy,
    		onMount,
    		onDestroy,
    		selectedGPSData,
    		setGPSDataWithSelectedData,
    		speedColors,
    		chartViewObject,
    		chartDiv,
    		xAxis,
    		series,
    		filterGPSData,
    		updateChartView,
    		initializeChartView,
    		onGPSDataChange
    	});

    	$$self.$inject_state = $$props => {
    		if ('selectedGPSData' in $$props) $$invalidate(0, selectedGPSData = $$props.selectedGPSData);
    		if ('setGPSDataWithSelectedData' in $$props) $$invalidate(1, setGPSDataWithSelectedData = $$props.setGPSDataWithSelectedData);
    		if ('speedColors' in $$props) $$invalidate(3, speedColors = $$props.speedColors);
    		if ('chartViewObject' in $$props) chartViewObject = $$props.chartViewObject;
    		if ('chartDiv' in $$props) $$invalidate(2, chartDiv = $$props.chartDiv);
    		if ('xAxis' in $$props) xAxis = $$props.xAxis;
    		if ('series' in $$props) series = $$props.series;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*selectedGPSData*/ 1) {
    			selectedGPSData && onGPSDataChange();
    		}
    	};

    	return [
    		selectedGPSData,
    		setGPSDataWithSelectedData,
    		chartDiv,
    		speedColors,
    		div0_binding,
    		click_handler
    	];
    }

    class SpeedChart extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$9, create_fragment$9, safe_not_equal, {
    			selectedGPSData: 0,
    			setGPSDataWithSelectedData: 1
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SpeedChart",
    			options,
    			id: create_fragment$9.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*selectedGPSData*/ ctx[0] === undefined && !('selectedGPSData' in props)) {
    			console.warn("<SpeedChart> was created without expected prop 'selectedGPSData'");
    		}

    		if (/*setGPSDataWithSelectedData*/ ctx[1] === undefined && !('setGPSDataWithSelectedData' in props)) {
    			console.warn("<SpeedChart> was created without expected prop 'setGPSDataWithSelectedData'");
    		}
    	}

    	get selectedGPSData() {
    		throw new Error("<SpeedChart>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selectedGPSData(value) {
    		throw new Error("<SpeedChart>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get setGPSDataWithSelectedData() {
    		throw new Error("<SpeedChart>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set setGPSDataWithSelectedData(value) {
    		throw new Error("<SpeedChart>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/menu/TableView.svelte generated by Svelte v3.49.0 */
    const file$7 = "src/components/menu/TableView.svelte";

    function get_each_context$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[21] = list[i];
    	child_ctx[23] = i;
    	return child_ctx;
    }

    function get_each_context_1$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[24] = list[i];
    	return child_ctx;
    }

    function get_each_context_2$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[27] = list[i];
    	return child_ctx;
    }

    // (111:2) {:else}
    function create_else_block$3(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			div.textContent = "No Firebase GPS Data Selected.";
    			attr_dev(div, "class", "alert alert-red my-1");
    			attr_dev(div, "role", "alert");
    			add_location(div, file$7, 111, 3, 3785);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		p: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$3.name,
    		type: "else",
    		source: "(111:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (51:2) {#if selectedFirebaseGPSData.length}
    function create_if_block$4(ctx) {
    	let hr0;
    	let t0;
    	let table;
    	let thead;
    	let tr;
    	let th0;
    	let t2;
    	let th1;
    	let t4;
    	let th2;
    	let t6;
    	let th3;
    	let t8;
    	let tbody;
    	let t9;
    	let hr1;
    	let t10;
    	let p;
    	let t11_value = `${/*paginationFrom*/ ctx[7] + 1}-${/*paginationTo*/ ctx[8]} of ${/*selectedFirebaseGPSData*/ ctx[0].length}` + "";
    	let t11;
    	let t12;
    	let div;
    	let button0;
    	let t14;
    	let each_blocks = [];
    	let each1_lookup = new Map();
    	let t15;
    	let button1;
    	let t17;
    	let hr2;
    	let t18;
    	let button2;
    	let i;
    	let t19;
    	let mounted;
    	let dispose;
    	let each_value_1 = /*paginatedDocuments*/ ctx[4];
    	validate_each_argument(each_value_1);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks_1[i] = create_each_block_1$1(get_each_context_1$1(ctx, each_value_1, i));
    	}

    	let each_value = Array(/*numberOfPages*/ ctx[6]);
    	validate_each_argument(each_value);
    	const get_key = ctx => /*index*/ ctx[23];
    	validate_each_keys(ctx, each_value, get_each_context$2, get_key);

    	for (let i = 0; i < each_value.length; i += 1) {
    		let child_ctx = get_each_context$2(ctx, each_value, i);
    		let key = get_key(child_ctx);
    		each1_lookup.set(key, each_blocks[i] = create_each_block$2(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			hr0 = element("hr");
    			t0 = space();
    			table = element("table");
    			thead = element("thead");
    			tr = element("tr");
    			th0 = element("th");
    			th0.textContent = "Data Name";
    			t2 = space();
    			th1 = element("th");
    			th1.textContent = "Date Time";
    			t4 = space();
    			th2 = element("th");
    			th2.textContent = "Saved On";
    			t6 = space();
    			th3 = element("th");
    			th3.textContent = "Options";
    			t8 = space();
    			tbody = element("tbody");

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t9 = space();
    			hr1 = element("hr");
    			t10 = space();
    			p = element("p");
    			t11 = text(t11_value);
    			t12 = space();
    			div = element("div");
    			button0 = element("button");
    			button0.textContent = "Previous";
    			t14 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t15 = space();
    			button1 = element("button");
    			button1.textContent = "Next";
    			t17 = space();
    			hr2 = element("hr");
    			t18 = space();
    			button2 = element("button");
    			i = element("i");
    			t19 = text("\n\t\t\t\tRefresh and only show All Firebase Data");
    			attr_dev(hr0, "class", "my-2");
    			add_location(hr0, file$7, 51, 3, 1574);
    			add_location(th0, file$7, 56, 6, 1666);
    			add_location(th1, file$7, 57, 6, 1691);
    			add_location(th2, file$7, 58, 6, 1716);
    			add_location(th3, file$7, 59, 6, 1740);
    			add_location(tr, file$7, 55, 5, 1655);
    			add_location(thead, file$7, 54, 4, 1642);
    			add_location(tbody, file$7, 62, 4, 1785);
    			attr_dev(table, "class", "table w-full rounded-lg");
    			add_location(table, file$7, 53, 3, 1598);
    			attr_dev(hr1, "class", "my-4");
    			add_location(hr1, file$7, 92, 3, 2872);
    			add_location(p, file$7, 93, 3, 2895);
    			attr_dev(button0, "class", "px-4 py-2 btn-pagination");
    			add_location(button0, file$7, 95, 4, 3035);
    			attr_dev(button1, "class", "px-4 py-2 btn-pagination ");
    			add_location(button1, file$7, 101, 4, 3411);
    			attr_dev(div, "class", "flex items-center space-x-2 mt-2");
    			add_location(div, file$7, 94, 3, 2984);
    			attr_dev(hr2, "class", "my-4");
    			add_location(hr2, file$7, 104, 3, 3539);
    			attr_dev(i, "class", "fa-solid fa-refresh");
    			add_location(i, file$7, 107, 4, 3681);
    			attr_dev(button2, "class", `card-btn btn-primary mx-1`);
    			add_location(button2, file$7, 106, 3, 3563);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, hr0, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, table, anchor);
    			append_dev(table, thead);
    			append_dev(thead, tr);
    			append_dev(tr, th0);
    			append_dev(tr, t2);
    			append_dev(tr, th1);
    			append_dev(tr, t4);
    			append_dev(tr, th2);
    			append_dev(tr, t6);
    			append_dev(tr, th3);
    			append_dev(table, t8);
    			append_dev(table, tbody);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(tbody, null);
    			}

    			insert_dev(target, t9, anchor);
    			insert_dev(target, hr1, anchor);
    			insert_dev(target, t10, anchor);
    			insert_dev(target, p, anchor);
    			append_dev(p, t11);
    			insert_dev(target, t12, anchor);
    			insert_dev(target, div, anchor);
    			append_dev(div, button0);
    			append_dev(div, t14);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			append_dev(div, t15);
    			append_dev(div, button1);
    			insert_dev(target, t17, anchor);
    			insert_dev(target, hr2, anchor);
    			insert_dev(target, t18, anchor);
    			insert_dev(target, button2, anchor);
    			append_dev(button2, i);
    			append_dev(button2, t19);

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", /*click_handler_2*/ ctx[13], false, false, false),
    					listen_dev(button1, "click", /*click_handler_4*/ ctx[15], false, false, false),
    					listen_dev(button2, "click", /*click_handler_5*/ ctx[16], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*openModel, deleteFirebaseElement, paginatedDocuments, setGPSDataWithSelectedData, PROGRAMMING_TOOLS, returnLinkGivenIfStringContains*/ 542) {
    				each_value_1 = /*paginatedDocuments*/ ctx[4];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$1(ctx, each_value_1, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_1[i] = create_each_block_1$1(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(tbody, null);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}

    				each_blocks_1.length = each_value_1.length;
    			}

    			if (dirty & /*paginationFrom, paginationTo, selectedFirebaseGPSData*/ 385 && t11_value !== (t11_value = `${/*paginationFrom*/ ctx[7] + 1}-${/*paginationTo*/ ctx[8]} of ${/*selectedFirebaseGPSData*/ ctx[0].length}` + "")) set_data_dev(t11, t11_value);

    			if (dirty & /*paginationPage, Array, numberOfPages, setPaginationPage*/ 1120) {
    				each_value = Array(/*numberOfPages*/ ctx[6]);
    				validate_each_argument(each_value);
    				validate_each_keys(ctx, each_value, get_each_context$2, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each1_lookup, div, destroy_block, create_each_block$2, t15, get_each_context$2);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(hr0);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(table);
    			destroy_each(each_blocks_1, detaching);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(hr1);
    			if (detaching) detach_dev(t10);
    			if (detaching) detach_dev(p);
    			if (detaching) detach_dev(t12);
    			if (detaching) detach_dev(div);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}

    			if (detaching) detach_dev(t17);
    			if (detaching) detach_dev(hr2);
    			if (detaching) detach_dev(t18);
    			if (detaching) detach_dev(button2);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$4.name,
    		type: "if",
    		source: "(51:2) {#if selectedFirebaseGPSData.length}",
    		ctx
    	});

    	return block;
    }

    // (70:9) {#each PROGRAMMING_TOOLS as tool}
    function create_each_block_2$1(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			attr_dev(img, "height", "100");
    			attr_dev(img, "width", "auto");
    			attr_dev(img, "title", /*tool*/ ctx[27]);
    			attr_dev(img, "key", /*tool*/ ctx[27]);
    			attr_dev(img, "class", `img-icon w-8 mx-2 py-2`);
    			attr_dev(img, "alt", "");
    			if (!src_url_equal(img.src, img_src_value = returnLinkGivenIfStringContains(/*tool*/ ctx[27]))) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "loading", "lazy");
    			add_location(img, file$7, 70, 10, 2045);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		p: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2$1.name,
    		type: "each",
    		source: "(70:9) {#each PROGRAMMING_TOOLS as tool}",
    		ctx
    	});

    	return block;
    }

    // (64:5) {#each paginatedDocuments as gpsElement}
    function create_each_block_1$1(ctx) {
    	let tr;
    	let td0;
    	let t0_value = /*gpsElement*/ ctx[24].dataName + "";
    	let t0;
    	let t1;
    	let td1;
    	let t2_value = /*gpsElement*/ ctx[24].dateTime + "";
    	let t2;
    	let t3;
    	let td2;
    	let div0;
    	let t4;
    	let td3;
    	let div1;
    	let button0;
    	let i0;
    	let t5;
    	let t6;
    	let button1;
    	let i1;
    	let t7;
    	let t8;
    	let mounted;
    	let dispose;
    	let each_value_2 = /*PROGRAMMING_TOOLS*/ ctx[9];
    	validate_each_argument(each_value_2);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks[i] = create_each_block_2$1(get_each_context_2$1(ctx, each_value_2, i));
    	}

    	function click_handler() {
    		return /*click_handler*/ ctx[11](/*gpsElement*/ ctx[24]);
    	}

    	function click_handler_1() {
    		return /*click_handler_1*/ ctx[12](/*gpsElement*/ ctx[24]);
    	}

    	const block = {
    		c: function create() {
    			tr = element("tr");
    			td0 = element("td");
    			t0 = text(t0_value);
    			t1 = space();
    			td1 = element("td");
    			t2 = text(t2_value);
    			t3 = space();
    			td2 = element("td");
    			div0 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t4 = space();
    			td3 = element("td");
    			div1 = element("div");
    			button0 = element("button");
    			i0 = element("i");
    			t5 = text("\n\t\t\t\t\t\t\t\t\t\tAdd to Map");
    			t6 = space();
    			button1 = element("button");
    			i1 = element("i");
    			t7 = text(" Delete");
    			t8 = space();
    			add_location(td0, file$7, 65, 7, 1857);
    			add_location(td1, file$7, 66, 7, 1895);
    			attr_dev(div0, "class", "flex flex-wrap justify-center ");
    			add_location(div0, file$7, 68, 8, 1946);
    			add_location(td2, file$7, 67, 7, 1933);
    			attr_dev(i0, "class", "fa-solid fa-eye");
    			add_location(i0, file$7, 77, 10, 2417);
    			attr_dev(button0, "class", `card-btn btn-primary my-1`);
    			add_location(button0, file$7, 76, 9, 2304);
    			attr_dev(i1, "class", "fa-solid fa-trash ");
    			add_location(i1, file$7, 83, 53, 2731);
    			attr_dev(button1, "class", `card-btn btn-error-outline my-1 `);
    			add_location(button1, file$7, 81, 9, 2497);
    			attr_dev(div1, "class", "flex flex-col");
    			add_location(div1, file$7, 75, 8, 2267);
    			add_location(td3, file$7, 74, 7, 2254);
    			add_location(tr, file$7, 64, 6, 1845);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);
    			append_dev(tr, td0);
    			append_dev(td0, t0);
    			append_dev(tr, t1);
    			append_dev(tr, td1);
    			append_dev(td1, t2);
    			append_dev(tr, t3);
    			append_dev(tr, td2);
    			append_dev(td2, div0);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div0, null);
    			}

    			append_dev(tr, t4);
    			append_dev(tr, td3);
    			append_dev(td3, div1);
    			append_dev(div1, button0);
    			append_dev(button0, i0);
    			append_dev(button0, t5);
    			append_dev(div1, t6);
    			append_dev(div1, button1);
    			append_dev(button1, i1);
    			append_dev(button1, t7);
    			append_dev(tr, t8);

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", click_handler, false, false, false),
    					listen_dev(button1, "click", click_handler_1, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*paginatedDocuments*/ 16 && t0_value !== (t0_value = /*gpsElement*/ ctx[24].dataName + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*paginatedDocuments*/ 16 && t2_value !== (t2_value = /*gpsElement*/ ctx[24].dateTime + "")) set_data_dev(t2, t2_value);

    			if (dirty & /*PROGRAMMING_TOOLS, returnLinkGivenIfStringContains*/ 512) {
    				each_value_2 = /*PROGRAMMING_TOOLS*/ ctx[9];
    				validate_each_argument(each_value_2);
    				let i;

    				for (i = 0; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2$1(ctx, each_value_2, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_2$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div0, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_2.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$1.name,
    		type: "each",
    		source: "(64:5) {#each paginatedDocuments as gpsElement}",
    		ctx
    	});

    	return block;
    }

    // (97:4) {#each Array(numberOfPages) as _, index (index)}
    function create_each_block$2(key_1, ctx) {
    	let button;
    	let t_value = /*index*/ ctx[23] + "";
    	let t;
    	let button_class_value;
    	let mounted;
    	let dispose;

    	function click_handler_3() {
    		return /*click_handler_3*/ ctx[14](/*index*/ ctx[23]);
    	}

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			button = element("button");
    			t = text(t_value);

    			attr_dev(button, "class", button_class_value = `px-4 py-2 ${/*paginationPage*/ ctx[5] === /*index*/ ctx[23]
			? "btn-pagination-primary font-bold "
			: "btn-pagination"}`);

    			add_location(button, file$7, 97, 5, 3210);
    			this.first = button;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, t);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler_3, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*numberOfPages*/ 64 && t_value !== (t_value = /*index*/ ctx[23] + "")) set_data_dev(t, t_value);

    			if (dirty & /*paginationPage, numberOfPages*/ 96 && button_class_value !== (button_class_value = `px-4 py-2 ${/*paginationPage*/ ctx[5] === /*index*/ ctx[23]
			? "btn-pagination-primary font-bold "
			: "btn-pagination"}`)) {
    				attr_dev(button, "class", button_class_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$2.name,
    		type: "each",
    		source: "(97:4) {#each Array(numberOfPages) as _, index (index)}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$8(ctx) {
    	let section;
    	let div;
    	let p;
    	let t1;

    	function select_block_type(ctx, dirty) {
    		if (/*selectedFirebaseGPSData*/ ctx[0].length) return create_if_block$4;
    		return create_else_block$3;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			section = element("section");
    			div = element("div");
    			p = element("p");
    			p.textContent = "GPS Table View:";
    			t1 = space();
    			if_block.c();
    			attr_dev(p, "class", "font-bold my-1");
    			add_location(p, file$7, 49, 2, 1486);
    			attr_dev(div, "class", "p-4");
    			add_location(div, file$7, 48, 1, 1466);
    			attr_dev(section, "class", "card h-fit scale-in-center");
    			add_location(section, file$7, 47, 0, 1420);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, div);
    			append_dev(div, p);
    			append_dev(div, t1);
    			if_block.m(div, null);
    		},
    		p: function update(ctx, [dirty]) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(div, null);
    				}
    			}
    		},
    		i: noop$2,
    		o: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$8.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$8($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('TableView', slots, []);
    	let { selectedFirebaseGPSData } = $$props;
    	let { openModel } = $$props;
    	let { deleteFirebaseElement } = $$props;
    	let { setGPSDataWithSelectedData } = $$props;
    	const PROGRAMMING_TOOLS = ["firebase-plain"];
    	let firebaseDocuments = [];
    	let paginatedDocuments = [];
    	let paginationPage = 0;
    	const numberOfItemsPerPageList = [5, 10, 20];
    	let numberOfItemsPerPage = numberOfItemsPerPageList[0];
    	let numberOfPages = 0;
    	let paginationFrom = 0;
    	let paginationTo = 0;

    	onMount(() => {
    		updatePaginationFiles();
    	});

    	//* Update the current pagination page
    	const setPaginationPage = page => {
    		if (page < 0) {
    			$$invalidate(5, paginationPage = 0);
    		} else if (page >= numberOfPages) {
    			$$invalidate(5, paginationPage = numberOfPages - 1);
    		} else {
    			$$invalidate(5, paginationPage = page);
    		}

    		updatePaginationFiles();
    	};

    	const updatePaginationFiles = () => {
    		firebaseDocuments = selectedFirebaseGPSData;
    		$$invalidate(6, numberOfPages = Math.ceil(firebaseDocuments.length / numberOfItemsPerPage));
    		$$invalidate(7, paginationFrom = paginationPage * numberOfItemsPerPage);
    		$$invalidate(8, paginationTo = Math.min((paginationPage + 1) * numberOfItemsPerPage, firebaseDocuments.length));
    		$$invalidate(4, paginatedDocuments = firebaseDocuments.slice(paginationPage * numberOfItemsPerPage, paginationPage * numberOfItemsPerPage + numberOfItemsPerPage));
    	};

    	const writable_props = [
    		'selectedFirebaseGPSData',
    		'openModel',
    		'deleteFirebaseElement',
    		'setGPSDataWithSelectedData'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<TableView> was created with unknown prop '${key}'`);
    	});

    	const click_handler = gpsElement => setGPSDataWithSelectedData([gpsElement]);
    	const click_handler_1 = gpsElement => openModel("Delete Firebase Element", "Do you want to delete the Firebase GPS Data?", "Delete GPS Data", deleteFirebaseElement, gpsElement.dataId);
    	const click_handler_2 = () => setPaginationPage(paginationPage - 1);
    	const click_handler_3 = index => setPaginationPage(index);
    	const click_handler_4 = () => setPaginationPage(paginationPage + 1);
    	const click_handler_5 = () => setGPSDataWithSelectedData(selectedFirebaseGPSData);

    	$$self.$$set = $$props => {
    		if ('selectedFirebaseGPSData' in $$props) $$invalidate(0, selectedFirebaseGPSData = $$props.selectedFirebaseGPSData);
    		if ('openModel' in $$props) $$invalidate(1, openModel = $$props.openModel);
    		if ('deleteFirebaseElement' in $$props) $$invalidate(2, deleteFirebaseElement = $$props.deleteFirebaseElement);
    		if ('setGPSDataWithSelectedData' in $$props) $$invalidate(3, setGPSDataWithSelectedData = $$props.setGPSDataWithSelectedData);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		returnLinkGivenIfStringContains,
    		selectedFirebaseGPSData,
    		openModel,
    		deleteFirebaseElement,
    		setGPSDataWithSelectedData,
    		PROGRAMMING_TOOLS,
    		firebaseDocuments,
    		paginatedDocuments,
    		paginationPage,
    		numberOfItemsPerPageList,
    		numberOfItemsPerPage,
    		numberOfPages,
    		paginationFrom,
    		paginationTo,
    		setPaginationPage,
    		updatePaginationFiles
    	});

    	$$self.$inject_state = $$props => {
    		if ('selectedFirebaseGPSData' in $$props) $$invalidate(0, selectedFirebaseGPSData = $$props.selectedFirebaseGPSData);
    		if ('openModel' in $$props) $$invalidate(1, openModel = $$props.openModel);
    		if ('deleteFirebaseElement' in $$props) $$invalidate(2, deleteFirebaseElement = $$props.deleteFirebaseElement);
    		if ('setGPSDataWithSelectedData' in $$props) $$invalidate(3, setGPSDataWithSelectedData = $$props.setGPSDataWithSelectedData);
    		if ('firebaseDocuments' in $$props) firebaseDocuments = $$props.firebaseDocuments;
    		if ('paginatedDocuments' in $$props) $$invalidate(4, paginatedDocuments = $$props.paginatedDocuments);
    		if ('paginationPage' in $$props) $$invalidate(5, paginationPage = $$props.paginationPage);
    		if ('numberOfItemsPerPage' in $$props) numberOfItemsPerPage = $$props.numberOfItemsPerPage;
    		if ('numberOfPages' in $$props) $$invalidate(6, numberOfPages = $$props.numberOfPages);
    		if ('paginationFrom' in $$props) $$invalidate(7, paginationFrom = $$props.paginationFrom);
    		if ('paginationTo' in $$props) $$invalidate(8, paginationTo = $$props.paginationTo);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*selectedFirebaseGPSData*/ 1) {
    			selectedFirebaseGPSData && updatePaginationFiles();
    		}
    	};

    	return [
    		selectedFirebaseGPSData,
    		openModel,
    		deleteFirebaseElement,
    		setGPSDataWithSelectedData,
    		paginatedDocuments,
    		paginationPage,
    		numberOfPages,
    		paginationFrom,
    		paginationTo,
    		PROGRAMMING_TOOLS,
    		setPaginationPage,
    		click_handler,
    		click_handler_1,
    		click_handler_2,
    		click_handler_3,
    		click_handler_4,
    		click_handler_5
    	];
    }

    class TableView extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$8, create_fragment$8, safe_not_equal, {
    			selectedFirebaseGPSData: 0,
    			openModel: 1,
    			deleteFirebaseElement: 2,
    			setGPSDataWithSelectedData: 3
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TableView",
    			options,
    			id: create_fragment$8.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*selectedFirebaseGPSData*/ ctx[0] === undefined && !('selectedFirebaseGPSData' in props)) {
    			console.warn("<TableView> was created without expected prop 'selectedFirebaseGPSData'");
    		}

    		if (/*openModel*/ ctx[1] === undefined && !('openModel' in props)) {
    			console.warn("<TableView> was created without expected prop 'openModel'");
    		}

    		if (/*deleteFirebaseElement*/ ctx[2] === undefined && !('deleteFirebaseElement' in props)) {
    			console.warn("<TableView> was created without expected prop 'deleteFirebaseElement'");
    		}

    		if (/*setGPSDataWithSelectedData*/ ctx[3] === undefined && !('setGPSDataWithSelectedData' in props)) {
    			console.warn("<TableView> was created without expected prop 'setGPSDataWithSelectedData'");
    		}
    	}

    	get selectedFirebaseGPSData() {
    		throw new Error("<TableView>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selectedFirebaseGPSData(value) {
    		throw new Error("<TableView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get openModel() {
    		throw new Error("<TableView>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set openModel(value) {
    		throw new Error("<TableView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get deleteFirebaseElement() {
    		throw new Error("<TableView>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set deleteFirebaseElement(value) {
    		throw new Error("<TableView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get setGPSDataWithSelectedData() {
    		throw new Error("<TableView>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set setGPSDataWithSelectedData(value) {
    		throw new Error("<TableView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/ModalCard.svelte generated by Svelte v3.49.0 */

    const file$6 = "src/components/ModalCard.svelte";

    function create_fragment$7(ctx) {
    	let div2;
    	let div1;
    	let p0;
    	let t0_value = /*modalPayload*/ ctx[0].title + "";
    	let t0;
    	let t1;
    	let p1;
    	let t2_value = /*modalPayload*/ ctx[0].message + "";
    	let t2;
    	let t3;
    	let hr;
    	let t4;
    	let div0;
    	let button0;
    	let t5_value = /*modalPayload*/ ctx[0].successBtnMessage + "";
    	let t5;
    	let t6;
    	let button1;
    	let t7_value = /*modalPayload*/ ctx[0].cancelBtnMessage + "";
    	let t7;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div1 = element("div");
    			p0 = element("p");
    			t0 = text(t0_value);
    			t1 = space();
    			p1 = element("p");
    			t2 = text(t2_value);
    			t3 = space();
    			hr = element("hr");
    			t4 = space();
    			div0 = element("div");
    			button0 = element("button");
    			t5 = text(t5_value);
    			t6 = space();
    			button1 = element("button");
    			t7 = text(t7_value);
    			attr_dev(p0, "class", "font-bold my-1");
    			add_location(p0, file$6, 13, 2, 259);
    			add_location(p1, file$6, 14, 2, 312);
    			attr_dev(hr, "class", "solid my-4");
    			add_location(hr, file$6, 15, 2, 344);
    			attr_dev(button0, "class", "card-btn btn-primary mr-1");
    			add_location(button0, file$6, 17, 3, 394);
    			attr_dev(button1, "class", "ml-1 card-btn btn-black-outline");
    			add_location(button1, file$6, 24, 3, 611);
    			attr_dev(div0, "class", "flex");
    			add_location(div0, file$6, 16, 2, 372);
    			attr_dev(div1, "class", "p-4 modal-content bg-white");
    			add_location(div1, file$6, 12, 1, 216);
    			attr_dev(div2, "class", "modal");
    			add_location(div2, file$6, 11, 0, 195);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div1);
    			append_dev(div1, p0);
    			append_dev(p0, t0);
    			append_dev(div1, t1);
    			append_dev(div1, p1);
    			append_dev(p1, t2);
    			append_dev(div1, t3);
    			append_dev(div1, hr);
    			append_dev(div1, t4);
    			append_dev(div1, div0);
    			append_dev(div0, button0);
    			append_dev(button0, t5);
    			append_dev(div0, t6);
    			append_dev(div0, button1);
    			append_dev(button1, t7);

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", /*click_handler*/ ctx[1], false, false, false),
    					listen_dev(button1, "click", /*click_handler_1*/ ctx[2], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*modalPayload*/ 1 && t0_value !== (t0_value = /*modalPayload*/ ctx[0].title + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*modalPayload*/ 1 && t2_value !== (t2_value = /*modalPayload*/ ctx[0].message + "")) set_data_dev(t2, t2_value);
    			if (dirty & /*modalPayload*/ 1 && t5_value !== (t5_value = /*modalPayload*/ ctx[0].successBtnMessage + "")) set_data_dev(t5, t5_value);
    			if (dirty & /*modalPayload*/ 1 && t7_value !== (t7_value = /*modalPayload*/ ctx[0].cancelBtnMessage + "")) set_data_dev(t7, t7_value);
    		},
    		i: noop$2,
    		o: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$7.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$7($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ModalCard', slots, []);

    	let { modalPayload = {
    		title: "",
    		message: "",
    		cancelBtnMessage: "",
    		successBtnMessage: "",
    		element: null,
    		cancelFunction: null,
    		successFunction: null
    	} } = $$props;

    	const writable_props = ['modalPayload'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ModalCard> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => {
    		modalPayload.successFunction(modalPayload.element);
    		modalPayload.cancelFunction();
    	};

    	const click_handler_1 = () => modalPayload.cancelFunction();

    	$$self.$$set = $$props => {
    		if ('modalPayload' in $$props) $$invalidate(0, modalPayload = $$props.modalPayload);
    	};

    	$$self.$capture_state = () => ({ modalPayload });

    	$$self.$inject_state = $$props => {
    		if ('modalPayload' in $$props) $$invalidate(0, modalPayload = $$props.modalPayload);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [modalPayload, click_handler, click_handler_1];
    }

    class ModalCard extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$7, create_fragment$7, safe_not_equal, { modalPayload: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ModalCard",
    			options,
    			id: create_fragment$7.name
    		});
    	}

    	get modalPayload() {
    		throw new Error("<ModalCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set modalPayload(value) {
    		throw new Error("<ModalCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/map/MapLoadingSpinner.svelte generated by Svelte v3.49.0 */

    const file$5 = "src/components/map/MapLoadingSpinner.svelte";

    function create_fragment$6(ctx) {
    	let div;
    	let svg;
    	let rect0;
    	let animate0;
    	let rect1;
    	let animate1;
    	let rect2;
    	let animate2;
    	let rect3;
    	let animate3;
    	let rect4;
    	let animate4;
    	let rect5;
    	let animate5;
    	let rect6;
    	let animate6;
    	let rect7;
    	let animate7;

    	const block = {
    		c: function create() {
    			div = element("div");
    			svg = svg_element("svg");
    			rect0 = svg_element("rect");
    			animate0 = svg_element("animate");
    			rect1 = svg_element("rect");
    			animate1 = svg_element("animate");
    			rect2 = svg_element("rect");
    			animate2 = svg_element("animate");
    			rect3 = svg_element("rect");
    			animate3 = svg_element("animate");
    			rect4 = svg_element("rect");
    			animate4 = svg_element("animate");
    			rect5 = svg_element("rect");
    			animate5 = svg_element("animate");
    			rect6 = svg_element("rect");
    			animate6 = svg_element("animate");
    			rect7 = svg_element("rect");
    			animate7 = svg_element("animate");
    			attr_dev(animate0, "attributeName", "fill");
    			attr_dev(animate0, "values", "#2948a1;#0a0a0a;#0a0a0a");
    			attr_dev(animate0, "keyTimes", "0;0.125;1");
    			attr_dev(animate0, "dur", "1s");
    			attr_dev(animate0, "repeatCount", "indefinite");
    			attr_dev(animate0, "begin", "0s");
    			attr_dev(animate0, "calcMode", "discrete");
    			add_location(animate0, file$5, 4, 6, 364);
    			attr_dev(rect0, "x", "19");
    			attr_dev(rect0, "y", "19");
    			attr_dev(rect0, "width", "20");
    			attr_dev(rect0, "height", "20");
    			attr_dev(rect0, "fill", "#0a0a0a");
    			add_location(rect0, file$5, 3, 4, 299);
    			attr_dev(animate1, "attributeName", "fill");
    			attr_dev(animate1, "values", "#2948a1;#0a0a0a;#0a0a0a");
    			attr_dev(animate1, "keyTimes", "0;0.125;1");
    			attr_dev(animate1, "dur", "1s");
    			attr_dev(animate1, "repeatCount", "indefinite");
    			attr_dev(animate1, "begin", "0.125s");
    			attr_dev(animate1, "calcMode", "discrete");
    			add_location(animate1, file$5, 6, 6, 600);
    			attr_dev(rect1, "x", "40");
    			attr_dev(rect1, "y", "19");
    			attr_dev(rect1, "width", "20");
    			attr_dev(rect1, "height", "20");
    			attr_dev(rect1, "fill", "#0a0a0a");
    			add_location(rect1, file$5, 5, 11, 535);
    			attr_dev(animate2, "attributeName", "fill");
    			attr_dev(animate2, "values", "#2948a1;#0a0a0a;#0a0a0a");
    			attr_dev(animate2, "keyTimes", "0;0.125;1");
    			attr_dev(animate2, "dur", "1s");
    			attr_dev(animate2, "repeatCount", "indefinite");
    			attr_dev(animate2, "begin", "0.25s");
    			attr_dev(animate2, "calcMode", "discrete");
    			add_location(animate2, file$5, 8, 6, 840);
    			attr_dev(rect2, "x", "61");
    			attr_dev(rect2, "y", "19");
    			attr_dev(rect2, "width", "20");
    			attr_dev(rect2, "height", "20");
    			attr_dev(rect2, "fill", "#0a0a0a");
    			add_location(rect2, file$5, 7, 11, 775);
    			attr_dev(animate3, "attributeName", "fill");
    			attr_dev(animate3, "values", "#2948a1;#0a0a0a;#0a0a0a");
    			attr_dev(animate3, "keyTimes", "0;0.125;1");
    			attr_dev(animate3, "dur", "1s");
    			attr_dev(animate3, "repeatCount", "indefinite");
    			attr_dev(animate3, "begin", "0.875s");
    			attr_dev(animate3, "calcMode", "discrete");
    			add_location(animate3, file$5, 10, 6, 1079);
    			attr_dev(rect3, "x", "19");
    			attr_dev(rect3, "y", "40");
    			attr_dev(rect3, "width", "20");
    			attr_dev(rect3, "height", "20");
    			attr_dev(rect3, "fill", "#0a0a0a");
    			add_location(rect3, file$5, 9, 11, 1014);
    			attr_dev(animate4, "attributeName", "fill");
    			attr_dev(animate4, "values", "#2948a1;#0a0a0a;#0a0a0a");
    			attr_dev(animate4, "keyTimes", "0;0.125;1");
    			attr_dev(animate4, "dur", "1s");
    			attr_dev(animate4, "repeatCount", "indefinite");
    			attr_dev(animate4, "begin", "0.375s");
    			attr_dev(animate4, "calcMode", "discrete");
    			add_location(animate4, file$5, 12, 6, 1319);
    			attr_dev(rect4, "x", "61");
    			attr_dev(rect4, "y", "40");
    			attr_dev(rect4, "width", "20");
    			attr_dev(rect4, "height", "20");
    			attr_dev(rect4, "fill", "#0a0a0a");
    			add_location(rect4, file$5, 11, 11, 1254);
    			attr_dev(animate5, "attributeName", "fill");
    			attr_dev(animate5, "values", "#2948a1;#0a0a0a;#0a0a0a");
    			attr_dev(animate5, "keyTimes", "0;0.125;1");
    			attr_dev(animate5, "dur", "1s");
    			attr_dev(animate5, "repeatCount", "indefinite");
    			attr_dev(animate5, "begin", "0.75s");
    			attr_dev(animate5, "calcMode", "discrete");
    			add_location(animate5, file$5, 14, 6, 1559);
    			attr_dev(rect5, "x", "19");
    			attr_dev(rect5, "y", "61");
    			attr_dev(rect5, "width", "20");
    			attr_dev(rect5, "height", "20");
    			attr_dev(rect5, "fill", "#0a0a0a");
    			add_location(rect5, file$5, 13, 11, 1494);
    			attr_dev(animate6, "attributeName", "fill");
    			attr_dev(animate6, "values", "#2948a1;#0a0a0a;#0a0a0a");
    			attr_dev(animate6, "keyTimes", "0;0.125;1");
    			attr_dev(animate6, "dur", "1s");
    			attr_dev(animate6, "repeatCount", "indefinite");
    			attr_dev(animate6, "begin", "0.625s");
    			attr_dev(animate6, "calcMode", "discrete");
    			add_location(animate6, file$5, 16, 6, 1798);
    			attr_dev(rect6, "x", "40");
    			attr_dev(rect6, "y", "61");
    			attr_dev(rect6, "width", "20");
    			attr_dev(rect6, "height", "20");
    			attr_dev(rect6, "fill", "#0a0a0a");
    			add_location(rect6, file$5, 15, 11, 1733);
    			attr_dev(animate7, "attributeName", "fill");
    			attr_dev(animate7, "values", "#2948a1;#0a0a0a;#0a0a0a");
    			attr_dev(animate7, "keyTimes", "0;0.125;1");
    			attr_dev(animate7, "dur", "1s");
    			attr_dev(animate7, "repeatCount", "indefinite");
    			attr_dev(animate7, "begin", "0.5s");
    			attr_dev(animate7, "calcMode", "discrete");
    			add_location(animate7, file$5, 18, 6, 2038);
    			attr_dev(rect7, "x", "61");
    			attr_dev(rect7, "y", "61");
    			attr_dev(rect7, "width", "20");
    			attr_dev(rect7, "height", "20");
    			attr_dev(rect7, "fill", "#0a0a0a");
    			add_location(rect7, file$5, 17, 11, 1973);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "xmlns:xlink", "http://www.w3.org/1999/xlink");
    			set_style(svg, "margin", "auto");
    			set_style(svg, "background", "rgb(241, 242, 243)");
    			set_style(svg, "display", "block");
    			attr_dev(svg, "width", "200px");
    			attr_dev(svg, "height", "200px");
    			attr_dev(svg, "viewBox", "0 0 100 100");
    			attr_dev(svg, "preserveAspectRatio", "xMidYMid");
    			add_location(svg, file$5, 2, 0, 59);
    			attr_dev(div, "class", "absolute top-0 z-100 map-loading rounded-lg");
    			add_location(div, file$5, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, svg);
    			append_dev(svg, rect0);
    			append_dev(rect0, animate0);
    			append_dev(svg, rect1);
    			append_dev(rect1, animate1);
    			append_dev(svg, rect2);
    			append_dev(rect2, animate2);
    			append_dev(svg, rect3);
    			append_dev(rect3, animate3);
    			append_dev(svg, rect4);
    			append_dev(rect4, animate4);
    			append_dev(svg, rect5);
    			append_dev(rect5, animate5);
    			append_dev(svg, rect6);
    			append_dev(rect6, animate6);
    			append_dev(svg, rect7);
    			append_dev(rect7, animate7);
    		},
    		p: noop$2,
    		i: noop$2,
    		o: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$6.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$6($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MapLoadingSpinner', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<MapLoadingSpinner> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class MapLoadingSpinner extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$6, create_fragment$6, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MapLoadingSpinner",
    			options,
    			id: create_fragment$6.name
    		});
    	}
    }

    /* src/components/map/MapError.svelte generated by Svelte v3.49.0 */

    const file$4 = "src/components/map/MapError.svelte";

    function create_fragment$5(ctx) {
    	let div;
    	let p;

    	const block = {
    		c: function create() {
    			div = element("div");
    			p = element("p");
    			p.textContent = "Error, unable to Fetch Data";
    			attr_dev(p, "class", "align-middle");
    			add_location(p, file$4, 1, 4, 60);
    			attr_dev(div, "class", "absolute top-0 z-100 map-error rounded-lg");
    			add_location(div, file$4, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, p);
    		},
    		p: noop$2,
    		i: noop$2,
    		o: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$5.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$5($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MapError', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<MapError> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class MapError extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$5, create_fragment$5, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MapError",
    			options,
    			id: create_fragment$5.name
    		});
    	}
    }

    /* eslint-disable no-await-in-loop */

    const getGoogleDriveFolders = async (accessToken) => {
      try {
        const config = {
          method: 'get',
          url: GOOGLE_FOLDER_URL,
          headers: {
            Authorization: `Bearer ${accessToken}`,
          },
        };
        const promise = await axios(config);
        return promise;
      } catch (error) {
        if (error.response) {
          return error.response.status;
        } if (error.request) {
          return error.request;
        }
        return error.message;
      }
    };

    const getGoogleDriveFiles = async (accessToken, folderId) => {
      try {
        const customUrl = `${GOOGLE_QUERY_URL}'${folderId}'+in+parents&trashed=false&fields=files(*)`;
        const config = {
          method: 'get',
          url: customUrl,
          headers: {
            Authorization: `Bearer ${accessToken}`,
          },
        };

        const promise = await axios(config);
        return promise;
      } catch (error) {
        if (error.response) {
          return error.response.status;
        } if (error.request) {
          return error.request;
        }
        return error.message;
      }
    };

    const verifyAndAddPermissions = async (accessToken, fileId) => {
      try {
        const url = `${GOOGLE_FILE_URL}/${fileId}/permissions`;
        const data = JSON.stringify({
          role: 'writer',
          type: 'anyone',
        });
        const config = {
          method: 'post',
          url,
          headers: {
            Authorization: `Bearer ${accessToken}`,
            'Content-Type': 'application/json',
          },
          data,
        };
        const promise = await axios(config);
        return promise;
      } catch (error) {
        if (error.response) {
          return error.response.status;
        } if (error.request) {
          return error.request;
        }
        return error.message;
      }
    };

    // Using the access token and file url, delete the file
    const deleteGoogleDriveFile = async (accessToken, fileId) => {
      try {
        const customUrl = `${GOOGLE_FILE_URL}/${fileId}`;
        const config = {
          method: 'delete',
          url: customUrl,
          headers: {
            Authorization: `Bearer ${accessToken}`,
            'Content-Type': 'application/json',
          },
        };

        const promise = await axios(config);
        return promise;
      } catch (error) {
        if (error.response) {
          return error.response.status;
        } if (error.request) {
          return error.request;
        }
        return error.message;
      }
    };

    const getGoogleDriveFile = async (accessToken, fileId) => {
      try {
        const customUrl = `${GOOGLE_FILE_URL}/${fileId}`;
        const config = {
          method: 'get',
          url: customUrl,
          headers: {
            Authorization: `Bearer ${accessToken}`,
            'Content-Type': 'application/json',
          },
        };
        const promise = await axios(config);
        return promise;
      } catch (error) {
        if (error.response) {
          return error.response.status;
        } if (error.request) {
          return error.request;
        }
        return error.message;
      }
    };

    const createDashcamFolder = async (accessToken) => {
      try {
        const config = {
          method: 'POST',
          url: GOOGLE_FILE_URL,
          headers: {
            Authorization: `Bearer ${accessToken}`,
            'Content-Type': 'application/json',
          },
          data: JSON.stringify({
            mimeType: 'application/vnd.google-apps.folder',
            name: 'Dashcam',
          }),
        };

        const promise = await axios(config);
        return promise;
      } catch (error) {
        if (error.response) {
          return error.response.status;
        } if (error.request) {
          return error.request;
        }
        return error.message;
      }
    };

    const getDashcamVideos = async (accessToken) => {
      try {
        const response = await getGoogleDriveFolders(accessToken);
        if (response.status === 200) {
          const cameraFolder = getObjectsWhereKeyEqualsValue(response.data.files, 'name', 'Dashcam')[0];
          if (cameraFolder) {
            const documentsResponse = await getGoogleDriveFiles(accessToken, cameraFolder.id);
            return documentsResponse;
          }
          const createResponse = await createDashcamFolder(accessToken);
          if (createResponse === 200) {
            getDashcamVideos(accessToken);
          } else {
            return createResponse;
          }
        }
        return response;
      } catch (error) {
        console.log(error);
        return error;
      }
    };

    const sortByTimeRecentToOldest = (videoArray) => {
      const sortedArray = videoArray.sort(
        (objA, objB) => new Date(objB.createdTime) - new Date(objA.createdTime),
      );
      return sortedArray;
    };

    const sortByTimeOldestToRecent = (videoArray) => {
      const sortedArray = videoArray.sort(
        (objA, objB) => new Date(objA.createdTime) - new Date(objB.createdTime),
      );
      return sortedArray;
    };

    const sortBySizeSmallToLarge = (videoArray) => {
      const sortedArray = videoArray.sort(
        (objA, objB) => objA.size - objB.size,
      );
      return sortedArray;
    };

    const sortBySizeLargeToSmall = (videoArray) => {
      const sortedArray = videoArray.sort(
        (objA, objB) => objB.size - objA.size,
      );
      return sortedArray;
    };

    /* src/components/recordings/RecordingsMenuBar.svelte generated by Svelte v3.49.0 */

    const file$3 = "src/components/recordings/RecordingsMenuBar.svelte";

    function get_each_context$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[2] = list[i];
    	return child_ctx;
    }

    // (7:2) {#each functionComponents as menuItem}
    function create_each_block$1(ctx) {
    	let button;
    	let i;
    	let i_class_value;
    	let t0;
    	let t1_value = /*menuItem*/ ctx[2].title + "";
    	let t1;
    	let t2;
    	let button_class_value;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[1](/*menuItem*/ ctx[2]);
    	}

    	const block = {
    		c: function create() {
    			button = element("button");
    			i = element("i");
    			t0 = space();
    			t1 = text(t1_value);
    			t2 = space();
    			attr_dev(i, "class", i_class_value = "" + (/*menuItem*/ ctx[2].icon + ""));
    			add_location(i, file$3, 7, 112, 268);
    			attr_dev(button, "class", button_class_value = ` navbar-btn ${/*menuItem*/ ctx[2].id == 0 ? "btn-primary" : ""} `);
    			add_location(button, file$3, 7, 3, 159);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, i);
    			append_dev(button, t0);
    			append_dev(button, t1);
    			append_dev(button, t2);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*functionComponents*/ 1 && i_class_value !== (i_class_value = "" + (/*menuItem*/ ctx[2].icon + ""))) {
    				attr_dev(i, "class", i_class_value);
    			}

    			if (dirty & /*functionComponents*/ 1 && t1_value !== (t1_value = /*menuItem*/ ctx[2].title + "")) set_data_dev(t1, t1_value);

    			if (dirty & /*functionComponents*/ 1 && button_class_value !== (button_class_value = ` navbar-btn ${/*menuItem*/ ctx[2].id == 0 ? "btn-primary" : ""} `)) {
    				attr_dev(button, "class", button_class_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$1.name,
    		type: "each",
    		source: "(7:2) {#each functionComponents as menuItem}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$4(ctx) {
    	let section;
    	let div;
    	let each_value = /*functionComponents*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			section = element("section");
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div, "class", "flex flex-row ");
    			add_location(div, file$3, 5, 1, 86);
    			attr_dev(section, "class", "shadow-xl");
    			add_location(section, file$3, 4, 0, 57);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, div);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*functionComponents*/ 1) {
    				each_value = /*functionComponents*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$1(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: noop$2,
    		o: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$4.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$4($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('RecordingsMenuBar', slots, []);
    	let { functionComponents = [] } = $$props;
    	const writable_props = ['functionComponents'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<RecordingsMenuBar> was created with unknown prop '${key}'`);
    	});

    	const click_handler = menuItem => menuItem.function();

    	$$self.$$set = $$props => {
    		if ('functionComponents' in $$props) $$invalidate(0, functionComponents = $$props.functionComponents);
    	};

    	$$self.$capture_state = () => ({ functionComponents });

    	$$self.$inject_state = $$props => {
    		if ('functionComponents' in $$props) $$invalidate(0, functionComponents = $$props.functionComponents);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [functionComponents, click_handler];
    }

    class RecordingsMenuBar extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$4, create_fragment$4, safe_not_equal, { functionComponents: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "RecordingsMenuBar",
    			options,
    			id: create_fragment$4.name
    		});
    	}

    	get functionComponents() {
    		throw new Error("<RecordingsMenuBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set functionComponents(value) {
    		throw new Error("<RecordingsMenuBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const calculateFileSizeString = (bytes, decimals = 2) => {
      if (!+bytes) return '0 Bytes';
      const k = 1024;
      const dm = decimals < 0 ? 0 : decimals;
      const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
      const i = Math.floor(Math.log(bytes) / Math.log(k));
      return `${parseFloat((bytes / k ** i).toFixed(dm))} ${sizes[i]}`;
    };

    /* src/components/recordings/RecordingsTable.svelte generated by Svelte v3.49.0 */
    const file$2 = "src/components/recordings/RecordingsTable.svelte";

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[22] = list[i];
    	child_ctx[24] = i;
    	return child_ctx;
    }

    function get_each_context_1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[25] = list[i];
    	return child_ctx;
    }

    function get_each_context_2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[28] = list[i];
    	return child_ctx;
    }

    // (154:2) {:else}
    function create_else_block_2(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			div.textContent = "No Google Drive Files Found.";
    			attr_dev(div, "class", "alert alert-red my-1");
    			attr_dev(div, "role", "alert");
    			add_location(div, file$2, 154, 3, 5288);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		p: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_2.name,
    		type: "else",
    		source: "(154:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (53:2) {#if paginatedFiles.length}
    function create_if_block$3(ctx) {
    	let table;
    	let thead;
    	let tr;
    	let th0;
    	let t1;
    	let th1;
    	let t3;
    	let th2;
    	let t5;
    	let th3;
    	let t7;
    	let th4;
    	let t9;
    	let th5;
    	let t11;
    	let th6;
    	let t13;
    	let th7;
    	let t15;
    	let th8;
    	let t17;
    	let tbody;
    	let t18;
    	let hr;
    	let t19;
    	let p;
    	let t20_value = `${/*paginationFrom*/ ctx[8] + 1}-${/*paginationTo*/ ctx[9]} of ${/*videoFiles*/ ctx[4].length}` + "";
    	let t20;
    	let t21;
    	let div;
    	let button0;
    	let t23;
    	let each_blocks = [];
    	let each1_lookup = new Map();
    	let t24;
    	let button1;
    	let mounted;
    	let dispose;
    	let each_value_1 = /*paginatedFiles*/ ctx[5];
    	validate_each_argument(each_value_1);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
    	}

    	let each_value = Array(/*numberOfPages*/ ctx[7]);
    	validate_each_argument(each_value);
    	const get_key = ctx => /*index*/ ctx[24];
    	validate_each_keys(ctx, each_value, get_each_context, get_key);

    	for (let i = 0; i < each_value.length; i += 1) {
    		let child_ctx = get_each_context(ctx, each_value, i);
    		let key = get_key(child_ctx);
    		each1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			table = element("table");
    			thead = element("thead");
    			tr = element("tr");
    			th0 = element("th");
    			th0.textContent = "Video";
    			t1 = space();
    			th1 = element("th");
    			th1.textContent = "Video Name";
    			t3 = space();
    			th2 = element("th");
    			th2.textContent = "Created Time";
    			t5 = space();
    			th3 = element("th");
    			th3.textContent = "Owner";
    			t7 = space();
    			th4 = element("th");
    			th4.textContent = "Saved On";
    			t9 = space();
    			th5 = element("th");
    			th5.textContent = "Size";
    			t11 = space();
    			th6 = element("th");
    			th6.textContent = "Has GPS Data";
    			t13 = space();
    			th7 = element("th");
    			th7.textContent = "Has Permissions";
    			t15 = space();
    			th8 = element("th");
    			th8.textContent = "Options";
    			t17 = space();
    			tbody = element("tbody");

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t18 = space();
    			hr = element("hr");
    			t19 = space();
    			p = element("p");
    			t20 = text(t20_value);
    			t21 = space();
    			div = element("div");
    			button0 = element("button");
    			button0.textContent = "Previous";
    			t23 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t24 = space();
    			button1 = element("button");
    			button1.textContent = "Next";
    			add_location(th0, file$2, 56, 6, 1777);
    			add_location(th1, file$2, 57, 6, 1798);
    			add_location(th2, file$2, 58, 6, 1824);
    			add_location(th3, file$2, 59, 6, 1852);
    			add_location(th4, file$2, 60, 6, 1873);
    			add_location(th5, file$2, 61, 6, 1897);
    			add_location(th6, file$2, 62, 6, 1917);
    			add_location(th7, file$2, 63, 6, 1945);
    			add_location(th8, file$2, 64, 6, 1976);
    			add_location(tr, file$2, 55, 5, 1766);
    			add_location(thead, file$2, 54, 4, 1753);
    			add_location(tbody, file$2, 67, 4, 2021);
    			attr_dev(table, "class", "table w-full rounded-lg");
    			add_location(table, file$2, 53, 3, 1709);
    			attr_dev(hr, "class", "my-4");
    			add_location(hr, file$2, 142, 3, 4625);
    			add_location(p, file$2, 143, 3, 4648);
    			attr_dev(button0, "class", "px-4 py-2 btn-pagination");
    			add_location(button0, file$2, 145, 4, 4775);
    			attr_dev(button1, "class", "px-4 py-2 btn-pagination ");
    			add_location(button1, file$2, 151, 4, 5151);
    			attr_dev(div, "class", "flex items-center space-x-2 mt-2");
    			add_location(div, file$2, 144, 3, 4724);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, table, anchor);
    			append_dev(table, thead);
    			append_dev(thead, tr);
    			append_dev(tr, th0);
    			append_dev(tr, t1);
    			append_dev(tr, th1);
    			append_dev(tr, t3);
    			append_dev(tr, th2);
    			append_dev(tr, t5);
    			append_dev(tr, th3);
    			append_dev(tr, t7);
    			append_dev(tr, th4);
    			append_dev(tr, t9);
    			append_dev(tr, th5);
    			append_dev(tr, t11);
    			append_dev(tr, th6);
    			append_dev(tr, t13);
    			append_dev(tr, th7);
    			append_dev(tr, t15);
    			append_dev(tr, th8);
    			append_dev(table, t17);
    			append_dev(table, tbody);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(tbody, null);
    			}

    			insert_dev(target, t18, anchor);
    			insert_dev(target, hr, anchor);
    			insert_dev(target, t19, anchor);
    			insert_dev(target, p, anchor);
    			append_dev(p, t20);
    			insert_dev(target, t21, anchor);
    			insert_dev(target, div, anchor);
    			append_dev(div, button0);
    			append_dev(div, t23);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			append_dev(div, t24);
    			append_dev(div, button1);

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", /*click_handler_3*/ ctx[16], false, false, false),
    					listen_dev(button1, "click", /*click_handler_5*/ ctx[18], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*openModel, deleteDriveFile, paginatedFiles, fetchGPSDataForFile, getGoogleDriveCoordFile, files, calculateFileSizeString, PROGRAMMING_TOOLS, returnLinkGivenIfStringContains*/ 1071) {
    				each_value_1 = /*paginatedFiles*/ ctx[5];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1(ctx, each_value_1, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_1[i] = create_each_block_1(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(tbody, null);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}

    				each_blocks_1.length = each_value_1.length;
    			}

    			if (dirty & /*paginationFrom, paginationTo, videoFiles*/ 784 && t20_value !== (t20_value = `${/*paginationFrom*/ ctx[8] + 1}-${/*paginationTo*/ ctx[9]} of ${/*videoFiles*/ ctx[4].length}` + "")) set_data_dev(t20, t20_value);

    			if (dirty & /*paginationPage, Array, numberOfPages, setPaginationPage*/ 2240) {
    				each_value = Array(/*numberOfPages*/ ctx[7]);
    				validate_each_argument(each_value);
    				validate_each_keys(ctx, each_value, get_each_context, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each1_lookup, div, destroy_block, create_each_block, t24, get_each_context);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(table);
    			destroy_each(each_blocks_1, detaching);
    			if (detaching) detach_dev(t18);
    			if (detaching) detach_dev(hr);
    			if (detaching) detach_dev(t19);
    			if (detaching) detach_dev(p);
    			if (detaching) detach_dev(t21);
    			if (detaching) detach_dev(div);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}

    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$3.name,
    		type: "if",
    		source: "(53:2) {#if paginatedFiles.length}",
    		ctx
    	});

    	return block;
    }

    // (72:8) {#if videoFile.thumbnailLink}
    function create_if_block_4$1(ctx) {
    	let a;
    	let img;
    	let img_src_value;
    	let a_href_value;

    	const block = {
    		c: function create() {
    			a = element("a");
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = /*videoFile*/ ctx[25].thumbnailLink)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "onerror", "https://i.picsum.photos/id/870/200/300.jpg?blur=2&grayscale&hmac=ujRymp644uYVjdKJM7kyLDSsrqNSMVRPnGU99cKl6Vs");
    			attr_dev(img, "alt", "Dashcam");
    			attr_dev(img, "class", "h-32 w-32 object-cover rounded-lg");
    			add_location(img, file$2, 73, 10, 2254);
    			attr_dev(a, "href", a_href_value = /*videoFile*/ ctx[25].webViewLink);
    			attr_dev(a, "target", "_blank");
    			attr_dev(a, "class", "text-white text-xl borderRounded");
    			add_location(a, file$2, 72, 9, 2153);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    			append_dev(a, img);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*paginatedFiles*/ 32 && !src_url_equal(img.src, img_src_value = /*videoFile*/ ctx[25].thumbnailLink)) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (dirty & /*paginatedFiles*/ 32 && a_href_value !== (a_href_value = /*videoFile*/ ctx[25].webViewLink)) {
    				attr_dev(a, "href", a_href_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$1.name,
    		type: "if",
    		source: "(72:8) {#if videoFile.thumbnailLink}",
    		ctx
    	});

    	return block;
    }

    // (88:9) {#each PROGRAMMING_TOOLS as tool}
    function create_each_block_2(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			attr_dev(img, "height", "100");
    			attr_dev(img, "width", "auto");
    			attr_dev(img, "title", /*tool*/ ctx[28]);
    			attr_dev(img, "key", /*tool*/ ctx[28]);
    			attr_dev(img, "class", `img-icon w-8 mx-2 py-2`);
    			attr_dev(img, "alt", "");
    			if (!src_url_equal(img.src, img_src_value = returnLinkGivenIfStringContains(/*tool*/ ctx[28]))) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "loading", "lazy");
    			add_location(img, file$2, 88, 10, 2804);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		p: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2.name,
    		type: "each",
    		source: "(88:9) {#each PROGRAMMING_TOOLS as tool}",
    		ctx
    	});

    	return block;
    }

    // (98:8) {:else}
    function create_else_block_1(ctx) {
    	let i;

    	const block = {
    		c: function create() {
    			i = element("i");
    			attr_dev(i, "class", "fa-solid fa-x text-error fa-lg");
    			add_location(i, file$2, 98, 9, 3216);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, i, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(i);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1.name,
    		type: "else",
    		source: "(98:8) {:else}",
    		ctx
    	});

    	return block;
    }

    // (96:8) {#if getGoogleDriveCoordFile(videoFile, files)}
    function create_if_block_3$1(ctx) {
    	let i;

    	const block = {
    		c: function create() {
    			i = element("i");
    			attr_dev(i, "class", "fa-solid fa-check text-green fa-lg");
    			add_location(i, file$2, 96, 9, 3142);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, i, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(i);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$1.name,
    		type: "if",
    		source: "(96:8) {#if getGoogleDriveCoordFile(videoFile, files)}",
    		ctx
    	});

    	return block;
    }

    // (106:8) {:else}
    function create_else_block$2(ctx) {
    	let i;

    	const block = {
    		c: function create() {
    			i = element("i");
    			attr_dev(i, "class", "fa-solid fa-x text-error fa-lg");
    			add_location(i, file$2, 106, 9, 3449);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, i, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(i);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$2.name,
    		type: "else",
    		source: "(106:8) {:else}",
    		ctx
    	});

    	return block;
    }

    // (104:8) {#if videoFile.permissionIds.includes("anyoneWithLink")}
    function create_if_block_2$1(ctx) {
    	let i;

    	const block = {
    		c: function create() {
    			i = element("i");
    			attr_dev(i, "class", "fa-solid fa-check text-green fa-lg");
    			add_location(i, file$2, 104, 9, 3375);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, i, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(i);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$1.name,
    		type: "if",
    		source: "(104:8) {#if videoFile.permissionIds.includes(\\\"anyoneWithLink\\\")}",
    		ctx
    	});

    	return block;
    }

    // (121:9) {#if getGoogleDriveCoordFile(videoFile, files)}
    function create_if_block_1$1(ctx) {
    	let button;
    	let i;
    	let t;
    	let mounted;
    	let dispose;

    	function click_handler_1() {
    		return /*click_handler_1*/ ctx[14](/*videoFile*/ ctx[25]);
    	}

    	const block = {
    		c: function create() {
    			button = element("button");
    			i = element("i");
    			t = text("\n\t\t\t\t\t\t\t\t\t\tSave GPS Data to Firebase");
    			attr_dev(i, "class", "fa-solid fa-share");
    			add_location(i, file$2, 122, 10, 4110);
    			attr_dev(button, "class", `card-btn btn-primary-outline my-1`);
    			add_location(button, file$2, 121, 9, 3993);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, i);
    			append_dev(button, t);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler_1, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$1.name,
    		type: "if",
    		source: "(121:9) {#if getGoogleDriveCoordFile(videoFile, files)}",
    		ctx
    	});

    	return block;
    }

    // (69:5) {#each paginatedFiles as videoFile}
    function create_each_block_1(ctx) {
    	let tr;
    	let td0;
    	let t0;
    	let td1;
    	let t1_value = /*videoFile*/ ctx[25].name + "";
    	let t1;
    	let t2;
    	let td2;
    	let t3_value = /*videoFile*/ ctx[25].createdTime + "";
    	let t3;
    	let t4;
    	let td3;
    	let t5_value = /*videoFile*/ ctx[25].owners[0].displayName + "";
    	let t5;
    	let t6;
    	let td4;
    	let div0;
    	let t7;
    	let td5;
    	let t8_value = calculateFileSizeString(/*videoFile*/ ctx[25].size) + "";
    	let t8;
    	let t9;
    	let td6;
    	let show_if_2;
    	let t10;
    	let td7;
    	let show_if_1;
    	let t11;
    	let td8;
    	let div1;
    	let a;
    	let i0;
    	let t12;
    	let a_href_value;
    	let t13;
    	let button0;
    	let i1;
    	let t14;
    	let t15;
    	let show_if = getGoogleDriveCoordFile(/*videoFile*/ ctx[25], /*files*/ ctx[0]);
    	let t16;
    	let button1;
    	let i2;
    	let t17;
    	let t18;
    	let mounted;
    	let dispose;
    	let if_block0 = /*videoFile*/ ctx[25].thumbnailLink && create_if_block_4$1(ctx);
    	let each_value_2 = /*PROGRAMMING_TOOLS*/ ctx[10];
    	validate_each_argument(each_value_2);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
    	}

    	function select_block_type_1(ctx, dirty) {
    		if (dirty & /*paginatedFiles, files*/ 33) show_if_2 = null;
    		if (show_if_2 == null) show_if_2 = !!getGoogleDriveCoordFile(/*videoFile*/ ctx[25], /*files*/ ctx[0]);
    		if (show_if_2) return create_if_block_3$1;
    		return create_else_block_1;
    	}

    	let current_block_type = select_block_type_1(ctx, -1);
    	let if_block1 = current_block_type(ctx);

    	function select_block_type_2(ctx, dirty) {
    		if (dirty & /*paginatedFiles*/ 32) show_if_1 = null;
    		if (show_if_1 == null) show_if_1 = !!/*videoFile*/ ctx[25].permissionIds.includes("anyoneWithLink");
    		if (show_if_1) return create_if_block_2$1;
    		return create_else_block$2;
    	}

    	let current_block_type_1 = select_block_type_2(ctx, -1);
    	let if_block2 = current_block_type_1(ctx);

    	function click_handler() {
    		return /*click_handler*/ ctx[13](/*videoFile*/ ctx[25]);
    	}

    	let if_block3 = show_if && create_if_block_1$1(ctx);

    	function click_handler_2() {
    		return /*click_handler_2*/ ctx[15](/*videoFile*/ ctx[25]);
    	}

    	const block = {
    		c: function create() {
    			tr = element("tr");
    			td0 = element("td");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			td1 = element("td");
    			t1 = text(t1_value);
    			t2 = space();
    			td2 = element("td");
    			t3 = text(t3_value);
    			t4 = space();
    			td3 = element("td");
    			t5 = text(t5_value);
    			t6 = space();
    			td4 = element("td");
    			div0 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t7 = space();
    			td5 = element("td");
    			t8 = text(t8_value);
    			t9 = space();
    			td6 = element("td");
    			if_block1.c();
    			t10 = space();
    			td7 = element("td");
    			if_block2.c();
    			t11 = space();
    			td8 = element("td");
    			div1 = element("div");
    			a = element("a");
    			i0 = element("i");
    			t12 = text("\n\t\t\t\t\t\t\t\t\t\tWatch");
    			t13 = space();
    			button0 = element("button");
    			i1 = element("i");
    			t14 = text("\n\t\t\t\t\t\t\t\t\t\tAdd to Map");
    			t15 = space();
    			if (if_block3) if_block3.c();
    			t16 = space();
    			button1 = element("button");
    			i2 = element("i");
    			t17 = text("\n\t\t\t\t\t\t\t\t\t\tDelete");
    			t18 = space();
    			attr_dev(td0, "class", "w-64");
    			add_location(td0, file$2, 70, 7, 2088);
    			add_location(td1, file$2, 82, 7, 2569);
    			add_location(td2, file$2, 83, 7, 2602);
    			add_location(td3, file$2, 84, 7, 2642);
    			attr_dev(div0, "class", "flex flex-wrap justify-center ");
    			add_location(div0, file$2, 86, 8, 2705);
    			add_location(td4, file$2, 85, 7, 2692);
    			add_location(td5, file$2, 92, 7, 3013);
    			add_location(td6, file$2, 94, 7, 3072);
    			add_location(td7, file$2, 102, 7, 3296);
    			attr_dev(i0, "class", "fa-solid fa-eye");
    			add_location(i0, file$2, 113, 10, 3676);
    			attr_dev(a, "a", "");
    			attr_dev(a, "href", a_href_value = /*videoFile*/ ctx[25].webViewLink);
    			attr_dev(a, "target", "_blank");
    			attr_dev(a, "class", `card-btn btn-primary my-1`);
    			add_location(a, file$2, 112, 9, 3579);
    			attr_dev(i1, "class", "fa-solid fa-share");
    			add_location(i1, file$2, 117, 10, 3855);
    			attr_dev(button0, "class", `card-btn btn-primary my-1`);
    			add_location(button0, file$2, 116, 9, 3745);
    			attr_dev(i2, "class", "fa-solid fa-trash");
    			add_location(i2, file$2, 132, 10, 4475);
    			attr_dev(button1, "class", `card-btn btn-error-outline my-1`);
    			add_location(button1, file$2, 128, 9, 4223);
    			attr_dev(div1, "class", "flex flex-col");
    			add_location(div1, file$2, 111, 8, 3542);
    			add_location(td8, file$2, 110, 7, 3529);
    			add_location(tr, file$2, 69, 6, 2076);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);
    			append_dev(tr, td0);
    			if (if_block0) if_block0.m(td0, null);
    			append_dev(tr, t0);
    			append_dev(tr, td1);
    			append_dev(td1, t1);
    			append_dev(tr, t2);
    			append_dev(tr, td2);
    			append_dev(td2, t3);
    			append_dev(tr, t4);
    			append_dev(tr, td3);
    			append_dev(td3, t5);
    			append_dev(tr, t6);
    			append_dev(tr, td4);
    			append_dev(td4, div0);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div0, null);
    			}

    			append_dev(tr, t7);
    			append_dev(tr, td5);
    			append_dev(td5, t8);
    			append_dev(tr, t9);
    			append_dev(tr, td6);
    			if_block1.m(td6, null);
    			append_dev(tr, t10);
    			append_dev(tr, td7);
    			if_block2.m(td7, null);
    			append_dev(tr, t11);
    			append_dev(tr, td8);
    			append_dev(td8, div1);
    			append_dev(div1, a);
    			append_dev(a, i0);
    			append_dev(a, t12);
    			append_dev(div1, t13);
    			append_dev(div1, button0);
    			append_dev(button0, i1);
    			append_dev(button0, t14);
    			append_dev(div1, t15);
    			if (if_block3) if_block3.m(div1, null);
    			append_dev(div1, t16);
    			append_dev(div1, button1);
    			append_dev(button1, i2);
    			append_dev(button1, t17);
    			append_dev(tr, t18);

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", click_handler, false, false, false),
    					listen_dev(button1, "click", click_handler_2, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (/*videoFile*/ ctx[25].thumbnailLink) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_4$1(ctx);
    					if_block0.c();
    					if_block0.m(td0, null);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (dirty & /*paginatedFiles*/ 32 && t1_value !== (t1_value = /*videoFile*/ ctx[25].name + "")) set_data_dev(t1, t1_value);
    			if (dirty & /*paginatedFiles*/ 32 && t3_value !== (t3_value = /*videoFile*/ ctx[25].createdTime + "")) set_data_dev(t3, t3_value);
    			if (dirty & /*paginatedFiles*/ 32 && t5_value !== (t5_value = /*videoFile*/ ctx[25].owners[0].displayName + "")) set_data_dev(t5, t5_value);

    			if (dirty & /*PROGRAMMING_TOOLS, returnLinkGivenIfStringContains*/ 1024) {
    				each_value_2 = /*PROGRAMMING_TOOLS*/ ctx[10];
    				validate_each_argument(each_value_2);
    				let i;

    				for (i = 0; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2(ctx, each_value_2, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div0, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_2.length;
    			}

    			if (dirty & /*paginatedFiles*/ 32 && t8_value !== (t8_value = calculateFileSizeString(/*videoFile*/ ctx[25].size) + "")) set_data_dev(t8, t8_value);

    			if (current_block_type !== (current_block_type = select_block_type_1(ctx, dirty))) {
    				if_block1.d(1);
    				if_block1 = current_block_type(ctx);

    				if (if_block1) {
    					if_block1.c();
    					if_block1.m(td6, null);
    				}
    			}

    			if (current_block_type_1 !== (current_block_type_1 = select_block_type_2(ctx, dirty))) {
    				if_block2.d(1);
    				if_block2 = current_block_type_1(ctx);

    				if (if_block2) {
    					if_block2.c();
    					if_block2.m(td7, null);
    				}
    			}

    			if (dirty & /*paginatedFiles*/ 32 && a_href_value !== (a_href_value = /*videoFile*/ ctx[25].webViewLink)) {
    				attr_dev(a, "href", a_href_value);
    			}

    			if (dirty & /*paginatedFiles, files*/ 33) show_if = getGoogleDriveCoordFile(/*videoFile*/ ctx[25], /*files*/ ctx[0]);

    			if (show_if) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);
    				} else {
    					if_block3 = create_if_block_1$1(ctx);
    					if_block3.c();
    					if_block3.m(div1, t16);
    				}
    			} else if (if_block3) {
    				if_block3.d(1);
    				if_block3 = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    			if (if_block0) if_block0.d();
    			destroy_each(each_blocks, detaching);
    			if_block1.d();
    			if_block2.d();
    			if (if_block3) if_block3.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1.name,
    		type: "each",
    		source: "(69:5) {#each paginatedFiles as videoFile}",
    		ctx
    	});

    	return block;
    }

    // (147:4) {#each Array(numberOfPages) as _, index (index)}
    function create_each_block(key_1, ctx) {
    	let button;
    	let t_value = /*index*/ ctx[24] + "";
    	let t;
    	let button_class_value;
    	let mounted;
    	let dispose;

    	function click_handler_4() {
    		return /*click_handler_4*/ ctx[17](/*index*/ ctx[24]);
    	}

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			button = element("button");
    			t = text(t_value);

    			attr_dev(button, "class", button_class_value = `px-4 py-2 ${/*paginationPage*/ ctx[6] === /*index*/ ctx[24]
			? "btn-pagination-primary font-bold "
			: "btn-pagination"}`);

    			add_location(button, file$2, 147, 5, 4950);
    			this.first = button;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, t);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler_4, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*numberOfPages*/ 128 && t_value !== (t_value = /*index*/ ctx[24] + "")) set_data_dev(t, t_value);

    			if (dirty & /*paginationPage, numberOfPages*/ 192 && button_class_value !== (button_class_value = `px-4 py-2 ${/*paginationPage*/ ctx[6] === /*index*/ ctx[24]
			? "btn-pagination-primary font-bold "
			: "btn-pagination"}`)) {
    				attr_dev(button, "class", button_class_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block.name,
    		type: "each",
    		source: "(147:4) {#each Array(numberOfPages) as _, index (index)}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$3(ctx) {
    	let section;
    	let div;
    	let p;
    	let t1;

    	function select_block_type(ctx, dirty) {
    		if (/*paginatedFiles*/ ctx[5].length) return create_if_block$3;
    		return create_else_block_2;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			section = element("section");
    			div = element("div");
    			p = element("p");
    			p.textContent = "GPS Table View:";
    			t1 = space();
    			if_block.c();
    			attr_dev(p, "class", "font-bold my-1");
    			add_location(p, file$2, 51, 2, 1630);
    			attr_dev(div, "class", "p-4");
    			add_location(div, file$2, 50, 1, 1610);
    			attr_dev(section, "class", "card h-fit scale-in-center");
    			add_location(section, file$2, 49, 0, 1564);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, div);
    			append_dev(div, p);
    			append_dev(div, t1);
    			if_block.m(div, null);
    		},
    		p: function update(ctx, [dirty]) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(div, null);
    				}
    			}
    		},
    		i: noop$2,
    		o: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$3($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('RecordingsTable', slots, []);
    	let { files = [] } = $$props;
    	let { deleteDriveFile } = $$props;
    	let { startMachineLearning } = $$props;
    	let { fetchGPSDataForFile } = $$props;
    	let { openModel } = $$props;
    	const PROGRAMMING_TOOLS = ["GoogleDrive"];
    	let videoFiles = [];
    	let paginatedFiles = [];
    	let paginationPage = 0;
    	const numberOfItemsPerPageList = [10, 20, 30];
    	let numberOfItemsPerPage = numberOfItemsPerPageList[0];
    	let numberOfPages = 0;
    	let paginationFrom = 0;
    	let paginationTo = 0;

    	onMount(() => {
    		updatePaginationFiles();
    	});

    	//* Update the current pagination page
    	const setPaginationPage = page => {
    		if (page < 0) {
    			$$invalidate(6, paginationPage = 0);
    		} else if (page >= numberOfPages) {
    			$$invalidate(6, paginationPage = numberOfPages - 1);
    		} else {
    			$$invalidate(6, paginationPage = page);
    		}

    		updatePaginationFiles();
    	};

    	const updatePaginationFiles = () => {
    		$$invalidate(4, videoFiles = files.filter(videoFile => videoFile.fileExtension === "MP4" || videoFile.fileExtension === "mp4"));
    		$$invalidate(7, numberOfPages = Math.ceil(videoFiles.length / numberOfItemsPerPage));
    		$$invalidate(8, paginationFrom = paginationPage * numberOfItemsPerPage);
    		$$invalidate(9, paginationTo = Math.min((paginationPage + 1) * numberOfItemsPerPage, videoFiles.length));
    		$$invalidate(5, paginatedFiles = videoFiles.slice(paginationPage * numberOfItemsPerPage, paginationPage * numberOfItemsPerPage + numberOfItemsPerPage));
    	};

    	const writable_props = [
    		'files',
    		'deleteDriveFile',
    		'startMachineLearning',
    		'fetchGPSDataForFile',
    		'openModel'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<RecordingsTable> was created with unknown prop '${key}'`);
    	});

    	const click_handler = videoFile => fetchGPSDataForFile(videoFile, false);
    	const click_handler_1 = videoFile => fetchGPSDataForFile(videoFile, true);
    	const click_handler_2 = videoFile => openModel("Delete Google Drive Recording", "Do you want to delete the Google Drive Recording?", "Delete Recording", deleteDriveFile, videoFile);
    	const click_handler_3 = () => setPaginationPage(paginationPage - 1);
    	const click_handler_4 = index => setPaginationPage(index);
    	const click_handler_5 = () => setPaginationPage(paginationPage + 1);

    	$$self.$$set = $$props => {
    		if ('files' in $$props) $$invalidate(0, files = $$props.files);
    		if ('deleteDriveFile' in $$props) $$invalidate(1, deleteDriveFile = $$props.deleteDriveFile);
    		if ('startMachineLearning' in $$props) $$invalidate(12, startMachineLearning = $$props.startMachineLearning);
    		if ('fetchGPSDataForFile' in $$props) $$invalidate(2, fetchGPSDataForFile = $$props.fetchGPSDataForFile);
    		if ('openModel' in $$props) $$invalidate(3, openModel = $$props.openModel);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		calculateFileSizeString,
    		returnLinkGivenIfStringContains,
    		getGoogleDriveCoordFile,
    		files,
    		deleteDriveFile,
    		startMachineLearning,
    		fetchGPSDataForFile,
    		openModel,
    		PROGRAMMING_TOOLS,
    		videoFiles,
    		paginatedFiles,
    		paginationPage,
    		numberOfItemsPerPageList,
    		numberOfItemsPerPage,
    		numberOfPages,
    		paginationFrom,
    		paginationTo,
    		setPaginationPage,
    		updatePaginationFiles
    	});

    	$$self.$inject_state = $$props => {
    		if ('files' in $$props) $$invalidate(0, files = $$props.files);
    		if ('deleteDriveFile' in $$props) $$invalidate(1, deleteDriveFile = $$props.deleteDriveFile);
    		if ('startMachineLearning' in $$props) $$invalidate(12, startMachineLearning = $$props.startMachineLearning);
    		if ('fetchGPSDataForFile' in $$props) $$invalidate(2, fetchGPSDataForFile = $$props.fetchGPSDataForFile);
    		if ('openModel' in $$props) $$invalidate(3, openModel = $$props.openModel);
    		if ('videoFiles' in $$props) $$invalidate(4, videoFiles = $$props.videoFiles);
    		if ('paginatedFiles' in $$props) $$invalidate(5, paginatedFiles = $$props.paginatedFiles);
    		if ('paginationPage' in $$props) $$invalidate(6, paginationPage = $$props.paginationPage);
    		if ('numberOfItemsPerPage' in $$props) numberOfItemsPerPage = $$props.numberOfItemsPerPage;
    		if ('numberOfPages' in $$props) $$invalidate(7, numberOfPages = $$props.numberOfPages);
    		if ('paginationFrom' in $$props) $$invalidate(8, paginationFrom = $$props.paginationFrom);
    		if ('paginationTo' in $$props) $$invalidate(9, paginationTo = $$props.paginationTo);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*files*/ 1) {
    			files && updatePaginationFiles();
    		}
    	};

    	return [
    		files,
    		deleteDriveFile,
    		fetchGPSDataForFile,
    		openModel,
    		videoFiles,
    		paginatedFiles,
    		paginationPage,
    		numberOfPages,
    		paginationFrom,
    		paginationTo,
    		PROGRAMMING_TOOLS,
    		setPaginationPage,
    		startMachineLearning,
    		click_handler,
    		click_handler_1,
    		click_handler_2,
    		click_handler_3,
    		click_handler_4,
    		click_handler_5
    	];
    }

    class RecordingsTable extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$3, create_fragment$3, safe_not_equal, {
    			files: 0,
    			deleteDriveFile: 1,
    			startMachineLearning: 12,
    			fetchGPSDataForFile: 2,
    			openModel: 3
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "RecordingsTable",
    			options,
    			id: create_fragment$3.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*deleteDriveFile*/ ctx[1] === undefined && !('deleteDriveFile' in props)) {
    			console.warn("<RecordingsTable> was created without expected prop 'deleteDriveFile'");
    		}

    		if (/*startMachineLearning*/ ctx[12] === undefined && !('startMachineLearning' in props)) {
    			console.warn("<RecordingsTable> was created without expected prop 'startMachineLearning'");
    		}

    		if (/*fetchGPSDataForFile*/ ctx[2] === undefined && !('fetchGPSDataForFile' in props)) {
    			console.warn("<RecordingsTable> was created without expected prop 'fetchGPSDataForFile'");
    		}

    		if (/*openModel*/ ctx[3] === undefined && !('openModel' in props)) {
    			console.warn("<RecordingsTable> was created without expected prop 'openModel'");
    		}
    	}

    	get files() {
    		throw new Error("<RecordingsTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set files(value) {
    		throw new Error("<RecordingsTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get deleteDriveFile() {
    		throw new Error("<RecordingsTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set deleteDriveFile(value) {
    		throw new Error("<RecordingsTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get startMachineLearning() {
    		throw new Error("<RecordingsTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set startMachineLearning(value) {
    		throw new Error("<RecordingsTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fetchGPSDataForFile() {
    		throw new Error("<RecordingsTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fetchGPSDataForFile(value) {
    		throw new Error("<RecordingsTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get openModel() {
    		throw new Error("<RecordingsTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set openModel(value) {
    		throw new Error("<RecordingsTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/pages/HomePage.svelte generated by Svelte v3.49.0 */

    const { console: console_1 } = globals;
    const file$1 = "src/pages/HomePage.svelte";

    // (387:0) {#if isModalOpen}
    function create_if_block_6(ctx) {
    	let modalcard;
    	let updating_modalPayload;
    	let current;

    	function modalcard_modalPayload_binding(value) {
    		/*modalcard_modalPayload_binding*/ ctx[28](value);
    	}

    	let modalcard_props = {};

    	if (/*modalPayload*/ ctx[3] !== void 0) {
    		modalcard_props.modalPayload = /*modalPayload*/ ctx[3];
    	}

    	modalcard = new ModalCard({ props: modalcard_props, $$inline: true });
    	binding_callbacks.push(() => bind$2(modalcard, 'modalPayload', modalcard_modalPayload_binding));

    	const block = {
    		c: function create() {
    			create_component(modalcard.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(modalcard, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const modalcard_changes = {};

    			if (!updating_modalPayload && dirty[0] & /*modalPayload*/ 8) {
    				updating_modalPayload = true;
    				modalcard_changes.modalPayload = /*modalPayload*/ ctx[3];
    				add_flush_callback(() => updating_modalPayload = false);
    			}

    			modalcard.$set(modalcard_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(modalcard.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(modalcard.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(modalcard, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6.name,
    		type: "if",
    		source: "(387:0) {#if isModalOpen}",
    		ctx
    	});

    	return block;
    }

    // (411:31) 
    function create_if_block_5(ctx) {
    	let video;
    	let updating_selectedVideoFile;
    	let t;
    	let speedchart;
    	let updating_selectedGPSData;
    	let current;

    	function video_selectedVideoFile_binding(value) {
    		/*video_selectedVideoFile_binding*/ ctx[42](value);
    	}

    	let video_props = {};

    	if (/*selectedVideoFile*/ ctx[17] !== void 0) {
    		video_props.selectedVideoFile = /*selectedVideoFile*/ ctx[17];
    	}

    	video = new Video({ props: video_props, $$inline: true });
    	binding_callbacks.push(() => bind$2(video, 'selectedVideoFile', video_selectedVideoFile_binding));

    	function speedchart_selectedGPSData_binding(value) {
    		/*speedchart_selectedGPSData_binding*/ ctx[43](value);
    	}

    	let speedchart_props = {
    		setGPSDataWithSelectedData: /*setGPSDataWithSelectedData*/ ctx[24]
    	};

    	if (/*selectedGPSData*/ ctx[18] !== void 0) {
    		speedchart_props.selectedGPSData = /*selectedGPSData*/ ctx[18];
    	}

    	speedchart = new SpeedChart({ props: speedchart_props, $$inline: true });
    	binding_callbacks.push(() => bind$2(speedchart, 'selectedGPSData', speedchart_selectedGPSData_binding));

    	const block = {
    		c: function create() {
    			create_component(video.$$.fragment);
    			t = space();
    			create_component(speedchart.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(video, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(speedchart, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const video_changes = {};

    			if (!updating_selectedVideoFile && dirty[0] & /*selectedVideoFile*/ 131072) {
    				updating_selectedVideoFile = true;
    				video_changes.selectedVideoFile = /*selectedVideoFile*/ ctx[17];
    				add_flush_callback(() => updating_selectedVideoFile = false);
    			}

    			video.$set(video_changes);
    			const speedchart_changes = {};

    			if (!updating_selectedGPSData && dirty[0] & /*selectedGPSData*/ 262144) {
    				updating_selectedGPSData = true;
    				speedchart_changes.selectedGPSData = /*selectedGPSData*/ ctx[18];
    				add_flush_callback(() => updating_selectedGPSData = false);
    			}

    			speedchart.$set(speedchart_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(video.$$.fragment, local);
    			transition_in(speedchart.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(video.$$.fragment, local);
    			transition_out(speedchart.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(video, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(speedchart, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5.name,
    		type: "if",
    		source: "(411:31) ",
    		ctx
    	});

    	return block;
    }

    // (408:31) 
    function create_if_block_4(ctx) {
    	let tableview;
    	let updating_selectedFirebaseGPSData;
    	let t;
    	let searchdetails;
    	let updating_dateTimeDictionary;
    	let current;

    	function tableview_selectedFirebaseGPSData_binding(value) {
    		/*tableview_selectedFirebaseGPSData_binding*/ ctx[40](value);
    	}

    	let tableview_props = {
    		openModel: /*openModel*/ ctx[21],
    		deleteFirebaseElement: /*deleteFirebaseElement*/ ctx[22],
    		setGPSDataWithSelectedData: /*setGPSDataWithSelectedData*/ ctx[24],
    		focusOnSelectedGPSData: /*focusOnSelectedGPSData*/ ctx[25]
    	};

    	if (/*selectedFirebaseGPSData*/ ctx[16] !== void 0) {
    		tableview_props.selectedFirebaseGPSData = /*selectedFirebaseGPSData*/ ctx[16];
    	}

    	tableview = new TableView({ props: tableview_props, $$inline: true });
    	binding_callbacks.push(() => bind$2(tableview, 'selectedFirebaseGPSData', tableview_selectedFirebaseGPSData_binding));

    	function searchdetails_dateTimeDictionary_binding(value) {
    		/*searchdetails_dateTimeDictionary_binding*/ ctx[41](value);
    	}

    	let searchdetails_props = {
    		fetchFirebaseData: /*fetchFirebaseData*/ ctx[20]
    	};

    	if (/*dateTimeDictionary*/ ctx[7] !== void 0) {
    		searchdetails_props.dateTimeDictionary = /*dateTimeDictionary*/ ctx[7];
    	}

    	searchdetails = new SearchDetails({
    			props: searchdetails_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind$2(searchdetails, 'dateTimeDictionary', searchdetails_dateTimeDictionary_binding));

    	const block = {
    		c: function create() {
    			create_component(tableview.$$.fragment);
    			t = space();
    			create_component(searchdetails.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(tableview, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(searchdetails, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const tableview_changes = {};

    			if (!updating_selectedFirebaseGPSData && dirty[0] & /*selectedFirebaseGPSData*/ 65536) {
    				updating_selectedFirebaseGPSData = true;
    				tableview_changes.selectedFirebaseGPSData = /*selectedFirebaseGPSData*/ ctx[16];
    				add_flush_callback(() => updating_selectedFirebaseGPSData = false);
    			}

    			tableview.$set(tableview_changes);
    			const searchdetails_changes = {};

    			if (!updating_dateTimeDictionary && dirty[0] & /*dateTimeDictionary*/ 128) {
    				updating_dateTimeDictionary = true;
    				searchdetails_changes.dateTimeDictionary = /*dateTimeDictionary*/ ctx[7];
    				add_flush_callback(() => updating_dateTimeDictionary = false);
    			}

    			searchdetails.$set(searchdetails_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(tableview.$$.fragment, local);
    			transition_in(searchdetails.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(tableview.$$.fragment, local);
    			transition_out(searchdetails.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(tableview, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(searchdetails, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4.name,
    		type: "if",
    		source: "(408:31) ",
    		ctx
    	});

    	return block;
    }

    // (406:2) {#if selectedMenu === 0}
    function create_if_block_3(ctx) {
    	let profile;
    	let updating_user;
    	let current;

    	function profile_user_binding(value) {
    		/*profile_user_binding*/ ctx[39](value);
    	}

    	let profile_props = { signOut: /*signOut*/ ctx[1] };

    	if (/*user*/ ctx[0] !== void 0) {
    		profile_props.user = /*user*/ ctx[0];
    	}

    	profile = new Profile({ props: profile_props, $$inline: true });
    	binding_callbacks.push(() => bind$2(profile, 'user', profile_user_binding));

    	const block = {
    		c: function create() {
    			create_component(profile.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(profile, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const profile_changes = {};
    			if (dirty[0] & /*signOut*/ 2) profile_changes.signOut = /*signOut*/ ctx[1];

    			if (!updating_user && dirty[0] & /*user*/ 1) {
    				updating_user = true;
    				profile_changes.user = /*user*/ ctx[0];
    				add_flush_callback(() => updating_user = false);
    			}

    			profile.$set(profile_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(profile.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(profile.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(profile, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3.name,
    		type: "if",
    		source: "(406:2) {#if selectedMenu === 0}",
    		ctx
    	});

    	return block;
    }

    // (423:2) {#if isLoading === true}
    function create_if_block_2(ctx) {
    	let maploadingspinner;
    	let current;
    	maploadingspinner = new MapLoadingSpinner({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(maploadingspinner.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(maploadingspinner, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(maploadingspinner.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(maploadingspinner.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(maploadingspinner, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2.name,
    		type: "if",
    		source: "(423:2) {#if isLoading === true}",
    		ctx
    	});

    	return block;
    }

    // (426:2) {#if isError === true}
    function create_if_block_1(ctx) {
    	let maperror;
    	let current;
    	maperror = new MapError({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(maperror.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(maperror, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(maperror.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(maperror.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(maperror, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1.name,
    		type: "if",
    		source: "(426:2) {#if isError === true}",
    		ctx
    	});

    	return block;
    }

    // (441:1) {:else}
    function create_else_block$1(ctx) {
    	let div2;
    	let section;
    	let div1;
    	let p;
    	let t1;
    	let div0;

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			section = element("section");
    			div1 = element("div");
    			p = element("p");
    			p.textContent = "Recordings:";
    			t1 = space();
    			div0 = element("div");
    			div0.textContent = "No Recordings Found";
    			attr_dev(p, "class", "font-bold my-1");
    			add_location(p, file$1, 444, 5, 14300);
    			attr_dev(div0, "class", "alert alert-red my-1");
    			attr_dev(div0, "role", "alert");
    			add_location(div0, file$1, 445, 5, 14347);
    			attr_dev(div1, "class", "p-4");
    			add_location(div1, file$1, 443, 4, 14277);
    			attr_dev(section, "class", "card h-fit scale-in-center");
    			add_location(section, file$1, 442, 3, 14228);
    			attr_dev(div2, "class", "col-span-1 md:col-span-3");
    			add_location(div2, file$1, 441, 2, 14186);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, section);
    			append_dev(section, div1);
    			append_dev(div1, p);
    			append_dev(div1, t1);
    			append_dev(div1, div0);
    		},
    		p: noop$2,
    		i: noop$2,
    		o: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$1.name,
    		type: "else",
    		source: "(441:1) {:else}",
    		ctx
    	});

    	return block;
    }

    // (437:1) {#if files.length}
    function create_if_block$2(ctx) {
    	let div;
    	let recordingstable;
    	let updating_files;
    	let current;

    	function recordingstable_files_binding(value) {
    		/*recordingstable_files_binding*/ ctx[47](value);
    	}

    	let recordingstable_props = {
    		openModel: /*openModel*/ ctx[21],
    		deleteDriveFile: /*deleteDriveFile*/ ctx[26],
    		startMachineLearning: /*startMachineLearning*/ ctx[27],
    		fetchGPSDataForFile: /*fetchGPSDataForFile*/ ctx[23]
    	};

    	if (/*files*/ ctx[15] !== void 0) {
    		recordingstable_props.files = /*files*/ ctx[15];
    	}

    	recordingstable = new RecordingsTable({
    			props: recordingstable_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind$2(recordingstable, 'files', recordingstable_files_binding));

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(recordingstable.$$.fragment);
    			attr_dev(div, "class", "col-span-1 md:col-span-12");
    			add_location(div, file$1, 437, 2, 14017);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(recordingstable, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const recordingstable_changes = {};

    			if (!updating_files && dirty[0] & /*files*/ 32768) {
    				updating_files = true;
    				recordingstable_changes.files = /*files*/ ctx[15];
    				add_flush_callback(() => updating_files = false);
    			}

    			recordingstable.$set(recordingstable_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(recordingstable.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(recordingstable.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(recordingstable);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$2.name,
    		type: "if",
    		source: "(437:1) {#if files.length}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$2(ctx) {
    	let t0;
    	let pageheader0;
    	let t1;
    	let attentionbar0;
    	let t2;
    	let menubar;
    	let updating_selectedMenu;
    	let updating_menuComponents;
    	let t3;
    	let main;
    	let div2;
    	let map;
    	let updating_cityDetails;
    	let updating_gpsData;
    	let updating_isReadyForStyleSwitching;
    	let updating_layerList;
    	let updating_mapStyle;
    	let updating_pointOfInterest;
    	let updating_selectedMenu_1;
    	let t4;
    	let div1;
    	let div0;
    	let layers;
    	let updating_layerList_1;
    	let t5;
    	let current_block_type_index;
    	let if_block1;
    	let t6;
    	let mapstyleselector;
    	let updating_mapStyle_1;
    	let updating_isReadyForStyleSwitching_1;
    	let t7;
    	let t8;
    	let t9;
    	let pageheader1;
    	let t10;
    	let attentionbar1;
    	let t11;
    	let recordingsmenubar;
    	let updating_functionComponents;
    	let t12;
    	let section;
    	let current_block_type_index_1;
    	let if_block4;
    	let t13;
    	let footer;
    	let current;
    	let if_block0 = /*isModalOpen*/ ctx[2] && create_if_block_6(ctx);

    	pageheader0 = new Navbar({
    			props: {
    				title: "Dashboard Camera Viewer",
    				color: "bg-dark",
    				zHeight: "z-10"
    			},
    			$$inline: true
    		});

    	attentionbar0 = new AttentionBar({
    			props: {
    				message: "Dashcam Viewer shows all of your trips data. It displays your\ncar's driving metrics on the screen as your video plays."
    			},
    			$$inline: true
    		});

    	function menubar_selectedMenu_binding(value) {
    		/*menubar_selectedMenu_binding*/ ctx[29](value);
    	}

    	function menubar_menuComponents_binding(value) {
    		/*menubar_menuComponents_binding*/ ctx[30](value);
    	}

    	let menubar_props = {};

    	if (/*selectedMenu*/ ctx[11] !== void 0) {
    		menubar_props.selectedMenu = /*selectedMenu*/ ctx[11];
    	}

    	if (/*menuComponents*/ ctx[10] !== void 0) {
    		menubar_props.menuComponents = /*menuComponents*/ ctx[10];
    	}

    	menubar = new MenuBar({ props: menubar_props, $$inline: true });
    	binding_callbacks.push(() => bind$2(menubar, 'selectedMenu', menubar_selectedMenu_binding));
    	binding_callbacks.push(() => bind$2(menubar, 'menuComponents', menubar_menuComponents_binding));

    	function map_cityDetails_binding(value) {
    		/*map_cityDetails_binding*/ ctx[31](value);
    	}

    	function map_gpsData_binding(value) {
    		/*map_gpsData_binding*/ ctx[32](value);
    	}

    	function map_isReadyForStyleSwitching_binding(value) {
    		/*map_isReadyForStyleSwitching_binding*/ ctx[33](value);
    	}

    	function map_layerList_binding(value) {
    		/*map_layerList_binding*/ ctx[34](value);
    	}

    	function map_mapStyle_binding(value) {
    		/*map_mapStyle_binding*/ ctx[35](value);
    	}

    	function map_pointOfInterest_binding(value) {
    		/*map_pointOfInterest_binding*/ ctx[36](value);
    	}

    	function map_selectedMenu_binding(value) {
    		/*map_selectedMenu_binding*/ ctx[37](value);
    	}

    	let map_props = {};

    	if (/*cityDetails*/ ctx[9] !== void 0) {
    		map_props.cityDetails = /*cityDetails*/ ctx[9];
    	}

    	if (/*gpsData*/ ctx[14] !== void 0) {
    		map_props.gpsData = /*gpsData*/ ctx[14];
    	}

    	if (/*isReadyForStyleSwitching*/ ctx[4] !== void 0) {
    		map_props.isReadyForStyleSwitching = /*isReadyForStyleSwitching*/ ctx[4];
    	}

    	if (/*layerList*/ ctx[6] !== void 0) {
    		map_props.layerList = /*layerList*/ ctx[6];
    	}

    	if (/*mapStyle*/ ctx[8] !== void 0) {
    		map_props.mapStyle = /*mapStyle*/ ctx[8];
    	}

    	if (/*pointOfInterest*/ ctx[5] !== void 0) {
    		map_props.pointOfInterest = /*pointOfInterest*/ ctx[5];
    	}

    	if (/*selectedMenu*/ ctx[11] !== void 0) {
    		map_props.selectedMenu = /*selectedMenu*/ ctx[11];
    	}

    	map = new Map$1({ props: map_props, $$inline: true });
    	binding_callbacks.push(() => bind$2(map, 'cityDetails', map_cityDetails_binding));
    	binding_callbacks.push(() => bind$2(map, 'gpsData', map_gpsData_binding));
    	binding_callbacks.push(() => bind$2(map, 'isReadyForStyleSwitching', map_isReadyForStyleSwitching_binding));
    	binding_callbacks.push(() => bind$2(map, 'layerList', map_layerList_binding));
    	binding_callbacks.push(() => bind$2(map, 'mapStyle', map_mapStyle_binding));
    	binding_callbacks.push(() => bind$2(map, 'pointOfInterest', map_pointOfInterest_binding));
    	binding_callbacks.push(() => bind$2(map, 'selectedMenu', map_selectedMenu_binding));

    	function layers_layerList_binding(value) {
    		/*layers_layerList_binding*/ ctx[38](value);
    	}

    	let layers_props = {};

    	if (/*layerList*/ ctx[6] !== void 0) {
    		layers_props.layerList = /*layerList*/ ctx[6];
    	}

    	layers = new Layers({ props: layers_props, $$inline: true });
    	binding_callbacks.push(() => bind$2(layers, 'layerList', layers_layerList_binding));
    	const if_block_creators = [create_if_block_3, create_if_block_4, create_if_block_5];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*selectedMenu*/ ctx[11] === 0) return 0;
    		if (/*selectedMenu*/ ctx[11] === 1) return 1;
    		if (/*selectedMenu*/ ctx[11] === 2) return 2;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type(ctx))) {
    		if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	function mapstyleselector_mapStyle_binding(value) {
    		/*mapstyleselector_mapStyle_binding*/ ctx[44](value);
    	}

    	function mapstyleselector_isReadyForStyleSwitching_binding(value) {
    		/*mapstyleselector_isReadyForStyleSwitching_binding*/ ctx[45](value);
    	}

    	let mapstyleselector_props = {};

    	if (/*mapStyle*/ ctx[8] !== void 0) {
    		mapstyleselector_props.mapStyle = /*mapStyle*/ ctx[8];
    	}

    	if (/*isReadyForStyleSwitching*/ ctx[4] !== void 0) {
    		mapstyleselector_props.isReadyForStyleSwitching = /*isReadyForStyleSwitching*/ ctx[4];
    	}

    	mapstyleselector = new MapStyleSelector({
    			props: mapstyleselector_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind$2(mapstyleselector, 'mapStyle', mapstyleselector_mapStyle_binding));
    	binding_callbacks.push(() => bind$2(mapstyleselector, 'isReadyForStyleSwitching', mapstyleselector_isReadyForStyleSwitching_binding));
    	let if_block2 = /*isLoading*/ ctx[12] === true && create_if_block_2(ctx);
    	let if_block3 = /*isError*/ ctx[13] === true && create_if_block_1(ctx);

    	pageheader1 = new Navbar({
    			props: {
    				title: "Recordings",
    				color: "bg-dark",
    				zHeight: "z-10"
    			},
    			$$inline: true
    		});

    	attentionbar1 = new AttentionBar({
    			props: {
    				message: "Load, view, and sort all Google Drive Recordings. Use Pagination to sort between videos."
    			},
    			$$inline: true
    		});

    	function recordingsmenubar_functionComponents_binding(value) {
    		/*recordingsmenubar_functionComponents_binding*/ ctx[46](value);
    	}

    	let recordingsmenubar_props = {};

    	if (/*functionComponents*/ ctx[19] !== void 0) {
    		recordingsmenubar_props.functionComponents = /*functionComponents*/ ctx[19];
    	}

    	recordingsmenubar = new RecordingsMenuBar({
    			props: recordingsmenubar_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind$2(recordingsmenubar, 'functionComponents', recordingsmenubar_functionComponents_binding));
    	const if_block_creators_1 = [create_if_block$2, create_else_block$1];
    	const if_blocks_1 = [];

    	function select_block_type_1(ctx, dirty) {
    		if (/*files*/ ctx[15].length) return 0;
    		return 1;
    	}

    	current_block_type_index_1 = select_block_type_1(ctx);
    	if_block4 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
    	footer = new Footer({ $$inline: true });

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t0 = space();
    			create_component(pageheader0.$$.fragment);
    			t1 = space();
    			create_component(attentionbar0.$$.fragment);
    			t2 = space();
    			create_component(menubar.$$.fragment);
    			t3 = space();
    			main = element("main");
    			div2 = element("div");
    			create_component(map.$$.fragment);
    			t4 = space();
    			div1 = element("div");
    			div0 = element("div");
    			create_component(layers.$$.fragment);
    			t5 = space();
    			if (if_block1) if_block1.c();
    			t6 = space();
    			create_component(mapstyleselector.$$.fragment);
    			t7 = space();
    			if (if_block2) if_block2.c();
    			t8 = space();
    			if (if_block3) if_block3.c();
    			t9 = space();
    			create_component(pageheader1.$$.fragment);
    			t10 = space();
    			create_component(attentionbar1.$$.fragment);
    			t11 = space();
    			create_component(recordingsmenubar.$$.fragment);
    			t12 = space();
    			section = element("section");
    			if_block4.c();
    			t13 = space();
    			create_component(footer.$$.fragment);
    			attr_dev(div0, "class", `flex flex-col gap-4`);
    			add_location(div0, file$1, 401, 3, 12707);
    			attr_dev(div1, "class", "absolute top-2 left-2 flex flex-row gap-4 z-100");
    			add_location(div1, file$1, 400, 2, 12642);
    			attr_dev(div2, "class", "col-span-1 md:col-span-12 row-span-6 relative");
    			add_location(div2, file$1, 396, 1, 12439);
    			attr_dev(main, "class", "flex-1 grid-cols-1 gap-4 lg:grid-cols-12");
    			add_location(main, file$1, 395, 0, 12382);
    			attr_dev(section, "class", "grid grid-cols-1 gap-4 lg:grid-cols-12 my-4 px-4");
    			add_location(section, file$1, 435, 0, 13928);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(pageheader0, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(attentionbar0, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(menubar, target, anchor);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, main, anchor);
    			append_dev(main, div2);
    			mount_component(map, div2, null);
    			append_dev(div2, t4);
    			append_dev(div2, div1);
    			append_dev(div1, div0);
    			mount_component(layers, div0, null);
    			append_dev(div0, t5);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(div0, null);
    			}

    			append_dev(div1, t6);
    			mount_component(mapstyleselector, div1, null);
    			append_dev(div2, t7);
    			if (if_block2) if_block2.m(div2, null);
    			append_dev(div2, t8);
    			if (if_block3) if_block3.m(div2, null);
    			insert_dev(target, t9, anchor);
    			mount_component(pageheader1, target, anchor);
    			insert_dev(target, t10, anchor);
    			mount_component(attentionbar1, target, anchor);
    			insert_dev(target, t11, anchor);
    			mount_component(recordingsmenubar, target, anchor);
    			insert_dev(target, t12, anchor);
    			insert_dev(target, section, anchor);
    			if_blocks_1[current_block_type_index_1].m(section, null);
    			insert_dev(target, t13, anchor);
    			mount_component(footer, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*isModalOpen*/ ctx[2]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty[0] & /*isModalOpen*/ 4) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_6(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(t0.parentNode, t0);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			const menubar_changes = {};

    			if (!updating_selectedMenu && dirty[0] & /*selectedMenu*/ 2048) {
    				updating_selectedMenu = true;
    				menubar_changes.selectedMenu = /*selectedMenu*/ ctx[11];
    				add_flush_callback(() => updating_selectedMenu = false);
    			}

    			if (!updating_menuComponents && dirty[0] & /*menuComponents*/ 1024) {
    				updating_menuComponents = true;
    				menubar_changes.menuComponents = /*menuComponents*/ ctx[10];
    				add_flush_callback(() => updating_menuComponents = false);
    			}

    			menubar.$set(menubar_changes);
    			const map_changes = {};

    			if (!updating_cityDetails && dirty[0] & /*cityDetails*/ 512) {
    				updating_cityDetails = true;
    				map_changes.cityDetails = /*cityDetails*/ ctx[9];
    				add_flush_callback(() => updating_cityDetails = false);
    			}

    			if (!updating_gpsData && dirty[0] & /*gpsData*/ 16384) {
    				updating_gpsData = true;
    				map_changes.gpsData = /*gpsData*/ ctx[14];
    				add_flush_callback(() => updating_gpsData = false);
    			}

    			if (!updating_isReadyForStyleSwitching && dirty[0] & /*isReadyForStyleSwitching*/ 16) {
    				updating_isReadyForStyleSwitching = true;
    				map_changes.isReadyForStyleSwitching = /*isReadyForStyleSwitching*/ ctx[4];
    				add_flush_callback(() => updating_isReadyForStyleSwitching = false);
    			}

    			if (!updating_layerList && dirty[0] & /*layerList*/ 64) {
    				updating_layerList = true;
    				map_changes.layerList = /*layerList*/ ctx[6];
    				add_flush_callback(() => updating_layerList = false);
    			}

    			if (!updating_mapStyle && dirty[0] & /*mapStyle*/ 256) {
    				updating_mapStyle = true;
    				map_changes.mapStyle = /*mapStyle*/ ctx[8];
    				add_flush_callback(() => updating_mapStyle = false);
    			}

    			if (!updating_pointOfInterest && dirty[0] & /*pointOfInterest*/ 32) {
    				updating_pointOfInterest = true;
    				map_changes.pointOfInterest = /*pointOfInterest*/ ctx[5];
    				add_flush_callback(() => updating_pointOfInterest = false);
    			}

    			if (!updating_selectedMenu_1 && dirty[0] & /*selectedMenu*/ 2048) {
    				updating_selectedMenu_1 = true;
    				map_changes.selectedMenu = /*selectedMenu*/ ctx[11];
    				add_flush_callback(() => updating_selectedMenu_1 = false);
    			}

    			map.$set(map_changes);
    			const layers_changes = {};

    			if (!updating_layerList_1 && dirty[0] & /*layerList*/ 64) {
    				updating_layerList_1 = true;
    				layers_changes.layerList = /*layerList*/ ctx[6];
    				add_flush_callback(() => updating_layerList_1 = false);
    			}

    			layers.$set(layers_changes);
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block1) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block1 = if_blocks[current_block_type_index];

    					if (!if_block1) {
    						if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block1.c();
    					} else {
    						if_block1.p(ctx, dirty);
    					}

    					transition_in(if_block1, 1);
    					if_block1.m(div0, null);
    				} else {
    					if_block1 = null;
    				}
    			}

    			const mapstyleselector_changes = {};

    			if (!updating_mapStyle_1 && dirty[0] & /*mapStyle*/ 256) {
    				updating_mapStyle_1 = true;
    				mapstyleselector_changes.mapStyle = /*mapStyle*/ ctx[8];
    				add_flush_callback(() => updating_mapStyle_1 = false);
    			}

    			if (!updating_isReadyForStyleSwitching_1 && dirty[0] & /*isReadyForStyleSwitching*/ 16) {
    				updating_isReadyForStyleSwitching_1 = true;
    				mapstyleselector_changes.isReadyForStyleSwitching = /*isReadyForStyleSwitching*/ ctx[4];
    				add_flush_callback(() => updating_isReadyForStyleSwitching_1 = false);
    			}

    			mapstyleselector.$set(mapstyleselector_changes);

    			if (/*isLoading*/ ctx[12] === true) {
    				if (if_block2) {
    					if (dirty[0] & /*isLoading*/ 4096) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block_2(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(div2, t8);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}

    			if (/*isError*/ ctx[13] === true) {
    				if (if_block3) {
    					if (dirty[0] & /*isError*/ 8192) {
    						transition_in(if_block3, 1);
    					}
    				} else {
    					if_block3 = create_if_block_1(ctx);
    					if_block3.c();
    					transition_in(if_block3, 1);
    					if_block3.m(div2, null);
    				}
    			} else if (if_block3) {
    				group_outros();

    				transition_out(if_block3, 1, 1, () => {
    					if_block3 = null;
    				});

    				check_outros();
    			}

    			const recordingsmenubar_changes = {};

    			if (!updating_functionComponents && dirty[0] & /*functionComponents*/ 524288) {
    				updating_functionComponents = true;
    				recordingsmenubar_changes.functionComponents = /*functionComponents*/ ctx[19];
    				add_flush_callback(() => updating_functionComponents = false);
    			}

    			recordingsmenubar.$set(recordingsmenubar_changes);
    			let previous_block_index_1 = current_block_type_index_1;
    			current_block_type_index_1 = select_block_type_1(ctx);

    			if (current_block_type_index_1 === previous_block_index_1) {
    				if_blocks_1[current_block_type_index_1].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks_1[previous_block_index_1], 1, 1, () => {
    					if_blocks_1[previous_block_index_1] = null;
    				});

    				check_outros();
    				if_block4 = if_blocks_1[current_block_type_index_1];

    				if (!if_block4) {
    					if_block4 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
    					if_block4.c();
    				} else {
    					if_block4.p(ctx, dirty);
    				}

    				transition_in(if_block4, 1);
    				if_block4.m(section, null);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(pageheader0.$$.fragment, local);
    			transition_in(attentionbar0.$$.fragment, local);
    			transition_in(menubar.$$.fragment, local);
    			transition_in(map.$$.fragment, local);
    			transition_in(layers.$$.fragment, local);
    			transition_in(if_block1);
    			transition_in(mapstyleselector.$$.fragment, local);
    			transition_in(if_block2);
    			transition_in(if_block3);
    			transition_in(pageheader1.$$.fragment, local);
    			transition_in(attentionbar1.$$.fragment, local);
    			transition_in(recordingsmenubar.$$.fragment, local);
    			transition_in(if_block4);
    			transition_in(footer.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(pageheader0.$$.fragment, local);
    			transition_out(attentionbar0.$$.fragment, local);
    			transition_out(menubar.$$.fragment, local);
    			transition_out(map.$$.fragment, local);
    			transition_out(layers.$$.fragment, local);
    			transition_out(if_block1);
    			transition_out(mapstyleselector.$$.fragment, local);
    			transition_out(if_block2);
    			transition_out(if_block3);
    			transition_out(pageheader1.$$.fragment, local);
    			transition_out(attentionbar1.$$.fragment, local);
    			transition_out(recordingsmenubar.$$.fragment, local);
    			transition_out(if_block4);
    			transition_out(footer.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(pageheader0, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(attentionbar0, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(menubar, detaching);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(main);
    			destroy_component(map);
    			destroy_component(layers);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d();
    			}

    			destroy_component(mapstyleselector);
    			if (if_block2) if_block2.d();
    			if (if_block3) if_block3.d();
    			if (detaching) detach_dev(t9);
    			destroy_component(pageheader1, detaching);
    			if (detaching) detach_dev(t10);
    			destroy_component(attentionbar1, detaching);
    			if (detaching) detach_dev(t11);
    			destroy_component(recordingsmenubar, detaching);
    			if (detaching) detach_dev(t12);
    			if (detaching) detach_dev(section);
    			if_blocks_1[current_block_type_index_1].d();
    			if (detaching) detach_dev(t13);
    			destroy_component(footer, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$2.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function setSessionStorageWithExpiry$1(key, value) {
    	const now = new Date();
    	const item = { value, expiry: now.getTime() + 3600000 };
    	localStorage.setItem(key, JSON.stringify(item));
    }

    function getSessionStorageWithExpiry$1(key) {
    	const itemStr = localStorage.getItem(key);

    	if (!itemStr) {
    		return null;
    	}

    	const item = JSON.parse(itemStr);
    	const now = new Date();

    	if (now.getTime() > item.expiry) {
    		localStorage.removeItem(key);
    		return null;
    	}

    	return item.value;
    }

    function setLocalStorageWithExpiry(key, data) {
    	const now = new Date();

    	const item = {
    		value: data,
    		expiry: now.getTime() + 3600000
    	};

    	localStorage.setItem(key, JSON.stringify(item));
    }

    function getLocalStorageWithExpiry(key) {
    	const itemStr = localStorage.getItem(key);

    	if (!itemStr) {
    		return [];
    	}

    	const item = JSON.parse(itemStr);
    	const now = new Date();

    	if (now.getTime() > item.expiry) {
    		localStorage.removeItem(key);
    		return [];
    	}

    	return item.value;
    }

    function goTop() {
    	document.body.scrollIntoView();
    }

    function instance$2($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('HomePage', slots, []);
    	let { user } = $$props;
    	let { signOut } = $$props;
    	let isModalOpen = false;

    	let modalPayload = {
    		title: "",
    		message: "",
    		successFunction: null,
    		successBtnMessage: "",
    		element: null,
    		cancelBtnMessage: "",
    		cancelFunction: null
    	};

    	let isReadyForStyleSwitching = false;
    	let pointOfInterest = null;
    	let layerList = [];

    	let dateTimeDictionary = {
    		startDateTime: "2015-06-23T00:00",
    		endDateTime: "2022-12-23T00:00"
    	};

    	let mapStyle = "satellite-streets-v11";

    	let cityDetails = {
    		id: 0,
    		center: [-122.4194, 37.773972],
    		zoom: 11,
    		pitch: 0,
    		bearing: -17.6
    	};

    	let menuComponents = [
    		{ id: 0, title: "Profile", icon: "fa-user" },
    		{
    			id: 1,
    			title: "Firebase",
    			icon: "fa-database"
    		},
    		{
    			id: 2,
    			title: "Video Player",
    			icon: "fa-video"
    		}
    	];

    	let selectedMenu = menuComponents[0].id;
    	let isLoading = false;
    	let isError = false;
    	let gpsData = [];
    	let accessTokenValue = getSessionStorageWithExpiry$1("AccessToken");
    	let files = getLocalStorageWithExpiry("GoogleFiles");
    	let selectedFirebaseGPSData = getLocalStorageWithExpiry("FirebaseData");
    	let selectedVideoFile = getSessionStorageWithExpiry$1("VideoFile");
    	let selectedGPSData = getLocalStorageWithExpiry('SelectedTrip');

    	const updateMapCenter = coordinates => {
    		$$invalidate(9, cityDetails = {
    			id: 0,
    			center: coordinates,
    			zoom: 15,
    			pitch: 0,
    			bearing: -17.6
    		});
    	};

    	const fetchFirebaseData = async () => {
    		$$invalidate(12, isLoading = true);
    		$$invalidate(13, isError = false);
    		const response = await fetchDataFromFirebase(user, dateTimeDictionary);

    		if (response.status === 200) {
    			if (response.data.length) {
    				$$invalidate(14, gpsData = gpsJsonToGeojson(response.data));
    				$$invalidate(16, selectedFirebaseGPSData = gpsData);
    				updateMapCenter(gpsData[0].features[0].geometry.coordinates);
    				setLocalStorageWithExpiry("FirebaseData", selectedFirebaseGPSData);
    				console.log("Successfully loaded Firebase Data");
    			} else {
    				console.log("No GPS data found");
    			}
    		} else {
    			console.log(response.message);
    			$$invalidate(13, isError = true);
    		}

    		$$invalidate(12, isLoading = false);
    	};

    	const closeModal = () => {
    		$$invalidate(3, modalPayload = {
    			title: "",
    			message: "",
    			successFunction: null,
    			successBtnMessage: "",
    			element: null,
    			cancelBtnMessage: "",
    			cancelFunction: null
    		});

    		$$invalidate(2, isModalOpen = false);
    	};

    	const openModel = (title = "Title", message = "Message", successBtnMessage = "Okay", successFunction = null, element = null, cancelBtnMessage = "Cancel", cancelFunction = closeModal) => {
    		$$invalidate(3, modalPayload = {
    			title,
    			message,
    			successBtnMessage,
    			successFunction,
    			element,
    			cancelBtnMessage,
    			cancelFunction
    		});

    		$$invalidate(2, isModalOpen = true);
    	};

    	const deleteFirebaseElement = async documentId => {
    		const response = await deleteDocumentFromFirebase(user, documentId);

    		if (response.status === 200) {
    			let tempGPSData = selectedFirebaseGPSData;
    			tempGPSData = tempGPSData.filter(obj => obj.dataId !== documentId);
    			$$invalidate(14, gpsData = tempGPSData);
    			$$invalidate(16, selectedFirebaseGPSData = gpsData);
    			updateMapCenter(gpsData[0].features[0].geometry.coordinates);
    			console.log("Successfully Deleted GPS Data");
    		} else {
    			console.log(response);
    			$$invalidate(13, isError = true);
    		}
    	};

    	const verifyAccessToken = async () => {
    		const tempAccessToken = getSessionStorageWithExpiry$1("AccessToken");

    		if (tempAccessToken === null) {
    			accessTokenValue = await googleSignIn();
    			setSessionStorageWithExpiry$1("AccessToken", accessTokenValue);
    		}
    	};

    	const getDriveFiles = async () => {
    		await verifyAccessToken();
    		const response = await getDashcamVideos(accessTokenValue);

    		if (response.status === 200) {
    			if (response.data.files.length) {
    				$$invalidate(15, files = response.data.files);
    				setLocalStorageWithExpiry("GoogleFiles", response.data.files);
    				console.log("Found Dashcam Files");
    			} else {
    				console.log("No Dashcam Files found");
    			}
    		} else {
    			console.log(response.message);
    		}
    	};

    	const fetchGPSDataForFile = async (videoFile, saveToFirebase = false) => {
    		$$invalidate(12, isLoading = true);
    		$$invalidate(13, isError = false);

    		//* Check permissions
    		let fetchNewFiles = false;

    		let coordHasPermissions = false;
    		let videoHasPermissions = videoFile.permissionIds.includes("anyoneWithLink");
    		const coordFile = getGoogleDriveCoordFile(videoFile, files);

    		if (coordFile) {
    			coordHasPermissions = coordFile.permissionIds.includes("anyoneWithLink");

    			if (!coordHasPermissions) {
    				const verifyResponse = await verifyAndAddPermissions(accessTokenValue, coordFile.id);

    				if (verifyResponse.status === 200) {
    					coordHasPermissions = true;
    					fetchNewFiles = true;
    				}
    			}
    		} else {
    			console.log("Unable to set permissions for coordinates file");
    		}

    		if (!videoHasPermissions) {
    			const verifyResponse = await verifyAndAddPermissions(accessTokenValue, videoFile.id);

    			if (verifyResponse.status === 200) {
    				videoHasPermissions = true;
    				fetchNewFiles = true;
    			}
    		}

    		if (fetchNewFiles) {
    			await getDriveFiles();
    		}

    		if (videoHasPermissions || coordHasPermissions) {
    			if (coordFile) {
    				let response = {};

    				if (saveToFirebase) {
    					response = await fetchAndSaveGPSDataFromGoogleDrive(user, coordFile);
    				} else {
    					response = await fetchGPSDataFromGoogleDrive(user, coordFile);
    				}

    				if (response.status === 200) {
    					$$invalidate(14, gpsData = gpsJsonToGeojson([response.data]));
    					updateMapCenter(gpsData[0].features[0].geometry.coordinates);
    					$$invalidate(18, selectedGPSData = [gpsData[0]]);
    				} else {
    					$$invalidate(13, isError = true);
    					console.log(response);
    				}
    			} else {
    				$$invalidate(14, gpsData = []);
    				$$invalidate(18, selectedGPSData = []);
    			}

    			$$invalidate(17, selectedVideoFile = videoFile);
    			$$invalidate(11, selectedMenu = 2);
    			setSessionStorageWithExpiry$1('VideoFile', selectedVideoFile);
    			setLocalStorageWithExpiry('SelectedTrip', selectedGPSData);
    			goTop();
    		}

    		$$invalidate(12, isLoading = false);
    	};

    	const checkAndSetFiles = () => {
    		if (!files.length) {
    			$$invalidate(15, files = getDriveFiles());
    		}
    	};

    	checkAndSetFiles();

    	const setGPSDataWithSelectedData = tempAllData => {
    		$$invalidate(14, gpsData = tempAllData);
    		updateMapCenter(tempAllData[0].features[0].geometry.coordinates);
    	};

    	const focusOnSelectedGPSData = tempSelectedGPSData => {
    		updateMapCenter(tempSelectedGPSData.features[0].geometry.coordinates);
    	};

    	const deleteDriveFile = async videoFile => {
    		await verifyAccessToken();
    		let tempList = files;
    		const coordFile = getGoogleDriveCoordFile(videoFile, files);

    		if (coordFile) {
    			const response = await deleteGoogleDriveFile(accessTokenValue, coordFile.id);

    			if (response.status === 204) {
    				tempList = tempList.filter(item => item.id !== coordFile.id);
    				console.log("Successfully Deleted Google Drive Coordinates File");
    			} else {
    				console.log("Cannot delete Google Drive Coordinates File");
    			}
    		}

    		const response = await deleteGoogleDriveFile(accessTokenValue, videoFile.id);

    		if (response.status === 204) {
    			tempList = tempList.filter(item => item.id !== videoFile.id);
    			$$invalidate(15, files = tempList);
    			setLocalStorageWithExpiry("GoogleFiles", tempList);

    			if (selectedVideoFile) {
    				if (selectedVideoFile.id == videoFile.id) {
    					$$invalidate(17, selectedVideoFile = null);
    				}
    			}

    			console.log("Successfully Deleted Google Drive Video File");
    		} else {
    			console.log("Cannot delete Google Drive Video File");
    		}
    	};

    	const startMachineLearning = async videoFile => {
    		const coordFile = getGoogleDriveCoordFile(videoFile, files);

    		if (coordFile) {
    			console.log("Processing Dashcam Video. This will take some time, please wait");
    			const response = await processWithMachineLearning(user, videoFile, coordFile);

    			if (response.status === 200) {
    				console.log("Succesfully Processed Video");
    			} else {
    				console.log(response.message);
    			}
    		} else {
    			console.log("Coordinates File does not exist");
    		}
    	};

    	//* Sort the videos and reset the initial video list
    	const sortBySizeASC = () => {
    		const tempList = files;
    		const sortedArray = sortBySizeSmallToLarge(tempList);
    		$$invalidate(15, files = sortedArray);
    	};

    	//* Sort the videos and reset the initial video list
    	const sortBySizeDSC = () => {
    		const tempList = files;
    		const sortedArray = sortBySizeLargeToSmall(tempList);
    		$$invalidate(15, files = sortedArray);
    	};

    	//* Sort the videos and reset the initial video list
    	const sortByTimeASC = () => {
    		const tempList = files;
    		const sortedArray = sortByTimeOldestToRecent(tempList);
    		$$invalidate(15, files = sortedArray);
    	};

    	//* Sort the videos and reset the initial video list
    	const sortByTimeDSC = () => {
    		const tempList = files;
    		const sortedArray = sortByTimeRecentToOldest(tempList);
    		$$invalidate(15, files = sortedArray);
    	};

    	//* To reset the video list, use the sortByTimeRecentToOldest function
    	const resetVideoList = () => {
    		const tempList = files;
    		const sortedArray = sortByTimeRecentToOldest(tempList);
    		$$invalidate(15, files = sortedArray);
    	};

    	let functionComponents = [
    		{
    			id: 0,
    			title: "Fetch Google Drive Data",
    			icon: "fa-brands fa-google-drive",
    			function: getDriveFiles
    		},
    		{
    			id: 1,
    			title: "Sort by Size ASC",
    			icon: "fa-solid fa-filter",
    			function: sortBySizeASC
    		},
    		{
    			id: 2,
    			title: "Sort by Size DSC",
    			icon: "fa-solid fa-filter",
    			function: sortBySizeDSC
    		},
    		{
    			id: 3,
    			title: "Sort by Time ASC",
    			icon: "fa-solid fa-filter",
    			function: sortByTimeASC
    		},
    		{
    			id: 4,
    			title: "Sort by Time DSC",
    			icon: "fa-solid fa-filter",
    			function: sortByTimeDSC
    		},
    		{
    			id: 5,
    			title: "Reset Video List",
    			icon: "fa-solid fa-clock-rotate-left",
    			function: resetVideoList
    		}
    	];

    	const writable_props = ['user', 'signOut'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<HomePage> was created with unknown prop '${key}'`);
    	});

    	function modalcard_modalPayload_binding(value) {
    		modalPayload = value;
    		$$invalidate(3, modalPayload);
    	}

    	function menubar_selectedMenu_binding(value) {
    		selectedMenu = value;
    		$$invalidate(11, selectedMenu);
    	}

    	function menubar_menuComponents_binding(value) {
    		menuComponents = value;
    		$$invalidate(10, menuComponents);
    	}

    	function map_cityDetails_binding(value) {
    		cityDetails = value;
    		$$invalidate(9, cityDetails);
    	}

    	function map_gpsData_binding(value) {
    		gpsData = value;
    		$$invalidate(14, gpsData);
    	}

    	function map_isReadyForStyleSwitching_binding(value) {
    		isReadyForStyleSwitching = value;
    		$$invalidate(4, isReadyForStyleSwitching);
    	}

    	function map_layerList_binding(value) {
    		layerList = value;
    		$$invalidate(6, layerList);
    	}

    	function map_mapStyle_binding(value) {
    		mapStyle = value;
    		$$invalidate(8, mapStyle);
    	}

    	function map_pointOfInterest_binding(value) {
    		pointOfInterest = value;
    		$$invalidate(5, pointOfInterest);
    	}

    	function map_selectedMenu_binding(value) {
    		selectedMenu = value;
    		$$invalidate(11, selectedMenu);
    	}

    	function layers_layerList_binding(value) {
    		layerList = value;
    		$$invalidate(6, layerList);
    	}

    	function profile_user_binding(value) {
    		user = value;
    		$$invalidate(0, user);
    	}

    	function tableview_selectedFirebaseGPSData_binding(value) {
    		selectedFirebaseGPSData = value;
    		$$invalidate(16, selectedFirebaseGPSData);
    	}

    	function searchdetails_dateTimeDictionary_binding(value) {
    		dateTimeDictionary = value;
    		$$invalidate(7, dateTimeDictionary);
    	}

    	function video_selectedVideoFile_binding(value) {
    		selectedVideoFile = value;
    		$$invalidate(17, selectedVideoFile);
    	}

    	function speedchart_selectedGPSData_binding(value) {
    		selectedGPSData = value;
    		$$invalidate(18, selectedGPSData);
    	}

    	function mapstyleselector_mapStyle_binding(value) {
    		mapStyle = value;
    		$$invalidate(8, mapStyle);
    	}

    	function mapstyleselector_isReadyForStyleSwitching_binding(value) {
    		isReadyForStyleSwitching = value;
    		$$invalidate(4, isReadyForStyleSwitching);
    	}

    	function recordingsmenubar_functionComponents_binding(value) {
    		functionComponents = value;
    		$$invalidate(19, functionComponents);
    	}

    	function recordingstable_files_binding(value) {
    		files = value;
    		$$invalidate(15, files);
    	}

    	$$self.$$set = $$props => {
    		if ('user' in $$props) $$invalidate(0, user = $$props.user);
    		if ('signOut' in $$props) $$invalidate(1, signOut = $$props.signOut);
    	};

    	$$self.$capture_state = () => ({
    		Footer,
    		Map: Map$1,
    		SearchDetails,
    		Layers,
    		MapStyleSelector,
    		fetchDataFromFirebase,
    		deleteDocumentFromFirebase,
    		gpsJsonToGeojson,
    		googleSignIn,
    		Profile,
    		getGoogleDriveCoordFile,
    		processWithMachineLearning,
    		fetchGPSDataFromGoogleDrive,
    		fetchAndSaveGPSDataFromGoogleDrive,
    		PageHeader: Navbar,
    		AttentionBar,
    		MenuBar,
    		Video,
    		SpeedChart,
    		TableView,
    		ModalCard,
    		MapLoadingSpinner,
    		MapError,
    		getDashcamVideos,
    		deleteGoogleDriveFile,
    		verifyAndAddPermissions,
    		getGoogleDriveFile,
    		sortBySizeSmallToLarge,
    		sortBySizeLargeToSmall,
    		sortByTimeRecentToOldest,
    		sortByTimeOldestToRecent,
    		RecordingsMenuBar,
    		RecordingsTable,
    		user,
    		signOut,
    		isModalOpen,
    		modalPayload,
    		isReadyForStyleSwitching,
    		pointOfInterest,
    		layerList,
    		dateTimeDictionary,
    		mapStyle,
    		cityDetails,
    		menuComponents,
    		selectedMenu,
    		isLoading,
    		isError,
    		setSessionStorageWithExpiry: setSessionStorageWithExpiry$1,
    		getSessionStorageWithExpiry: getSessionStorageWithExpiry$1,
    		setLocalStorageWithExpiry,
    		getLocalStorageWithExpiry,
    		gpsData,
    		accessTokenValue,
    		files,
    		selectedFirebaseGPSData,
    		selectedVideoFile,
    		selectedGPSData,
    		updateMapCenter,
    		fetchFirebaseData,
    		closeModal,
    		openModel,
    		deleteFirebaseElement,
    		verifyAccessToken,
    		goTop,
    		getDriveFiles,
    		fetchGPSDataForFile,
    		checkAndSetFiles,
    		setGPSDataWithSelectedData,
    		focusOnSelectedGPSData,
    		deleteDriveFile,
    		startMachineLearning,
    		sortBySizeASC,
    		sortBySizeDSC,
    		sortByTimeASC,
    		sortByTimeDSC,
    		resetVideoList,
    		functionComponents
    	});

    	$$self.$inject_state = $$props => {
    		if ('user' in $$props) $$invalidate(0, user = $$props.user);
    		if ('signOut' in $$props) $$invalidate(1, signOut = $$props.signOut);
    		if ('isModalOpen' in $$props) $$invalidate(2, isModalOpen = $$props.isModalOpen);
    		if ('modalPayload' in $$props) $$invalidate(3, modalPayload = $$props.modalPayload);
    		if ('isReadyForStyleSwitching' in $$props) $$invalidate(4, isReadyForStyleSwitching = $$props.isReadyForStyleSwitching);
    		if ('pointOfInterest' in $$props) $$invalidate(5, pointOfInterest = $$props.pointOfInterest);
    		if ('layerList' in $$props) $$invalidate(6, layerList = $$props.layerList);
    		if ('dateTimeDictionary' in $$props) $$invalidate(7, dateTimeDictionary = $$props.dateTimeDictionary);
    		if ('mapStyle' in $$props) $$invalidate(8, mapStyle = $$props.mapStyle);
    		if ('cityDetails' in $$props) $$invalidate(9, cityDetails = $$props.cityDetails);
    		if ('menuComponents' in $$props) $$invalidate(10, menuComponents = $$props.menuComponents);
    		if ('selectedMenu' in $$props) $$invalidate(11, selectedMenu = $$props.selectedMenu);
    		if ('isLoading' in $$props) $$invalidate(12, isLoading = $$props.isLoading);
    		if ('isError' in $$props) $$invalidate(13, isError = $$props.isError);
    		if ('gpsData' in $$props) $$invalidate(14, gpsData = $$props.gpsData);
    		if ('accessTokenValue' in $$props) accessTokenValue = $$props.accessTokenValue;
    		if ('files' in $$props) $$invalidate(15, files = $$props.files);
    		if ('selectedFirebaseGPSData' in $$props) $$invalidate(16, selectedFirebaseGPSData = $$props.selectedFirebaseGPSData);
    		if ('selectedVideoFile' in $$props) $$invalidate(17, selectedVideoFile = $$props.selectedVideoFile);
    		if ('selectedGPSData' in $$props) $$invalidate(18, selectedGPSData = $$props.selectedGPSData);
    		if ('functionComponents' in $$props) $$invalidate(19, functionComponents = $$props.functionComponents);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		user,
    		signOut,
    		isModalOpen,
    		modalPayload,
    		isReadyForStyleSwitching,
    		pointOfInterest,
    		layerList,
    		dateTimeDictionary,
    		mapStyle,
    		cityDetails,
    		menuComponents,
    		selectedMenu,
    		isLoading,
    		isError,
    		gpsData,
    		files,
    		selectedFirebaseGPSData,
    		selectedVideoFile,
    		selectedGPSData,
    		functionComponents,
    		fetchFirebaseData,
    		openModel,
    		deleteFirebaseElement,
    		fetchGPSDataForFile,
    		setGPSDataWithSelectedData,
    		focusOnSelectedGPSData,
    		deleteDriveFile,
    		startMachineLearning,
    		modalcard_modalPayload_binding,
    		menubar_selectedMenu_binding,
    		menubar_menuComponents_binding,
    		map_cityDetails_binding,
    		map_gpsData_binding,
    		map_isReadyForStyleSwitching_binding,
    		map_layerList_binding,
    		map_mapStyle_binding,
    		map_pointOfInterest_binding,
    		map_selectedMenu_binding,
    		layers_layerList_binding,
    		profile_user_binding,
    		tableview_selectedFirebaseGPSData_binding,
    		searchdetails_dateTimeDictionary_binding,
    		video_selectedVideoFile_binding,
    		speedchart_selectedGPSData_binding,
    		mapstyleselector_mapStyle_binding,
    		mapstyleselector_isReadyForStyleSwitching_binding,
    		recordingsmenubar_functionComponents_binding,
    		recordingstable_files_binding
    	];
    }

    class HomePage extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$2, create_fragment$2, safe_not_equal, { user: 0, signOut: 1 }, null, [-1, -1]);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "HomePage",
    			options,
    			id: create_fragment$2.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*user*/ ctx[0] === undefined && !('user' in props)) {
    			console_1.warn("<HomePage> was created without expected prop 'user'");
    		}

    		if (/*signOut*/ ctx[1] === undefined && !('signOut' in props)) {
    			console_1.warn("<HomePage> was created without expected prop 'signOut'");
    		}
    	}

    	get user() {
    		throw new Error("<HomePage>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set user(value) {
    		throw new Error("<HomePage>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get signOut() {
    		throw new Error("<HomePage>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set signOut(value) {
    		throw new Error("<HomePage>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    function isFunction(value) {
        return typeof value === 'function';
    }

    function createErrorClass(createImpl) {
        var _super = function (instance) {
            Error.call(instance);
            instance.stack = new Error().stack;
        };
        var ctorFunc = createImpl(_super);
        ctorFunc.prototype = Object.create(Error.prototype);
        ctorFunc.prototype.constructor = ctorFunc;
        return ctorFunc;
    }

    var UnsubscriptionError = createErrorClass(function (_super) {
        return function UnsubscriptionErrorImpl(errors) {
            _super(this);
            this.message = errors
                ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function (err, i) { return i + 1 + ") " + err.toString(); }).join('\n  ')
                : '';
            this.name = 'UnsubscriptionError';
            this.errors = errors;
        };
    });

    function arrRemove(arr, item) {
        if (arr) {
            var index = arr.indexOf(item);
            0 <= index && arr.splice(index, 1);
        }
    }

    var Subscription = (function () {
        function Subscription(initialTeardown) {
            this.initialTeardown = initialTeardown;
            this.closed = false;
            this._parentage = null;
            this._finalizers = null;
        }
        Subscription.prototype.unsubscribe = function () {
            var e_1, _a, e_2, _b;
            var errors;
            if (!this.closed) {
                this.closed = true;
                var _parentage = this._parentage;
                if (_parentage) {
                    this._parentage = null;
                    if (Array.isArray(_parentage)) {
                        try {
                            for (var _parentage_1 = __values(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {
                                var parent_1 = _parentage_1_1.value;
                                parent_1.remove(this);
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (_parentage_1_1 && !_parentage_1_1.done && (_a = _parentage_1.return)) _a.call(_parentage_1);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                    }
                    else {
                        _parentage.remove(this);
                    }
                }
                var initialFinalizer = this.initialTeardown;
                if (isFunction(initialFinalizer)) {
                    try {
                        initialFinalizer();
                    }
                    catch (e) {
                        errors = e instanceof UnsubscriptionError ? e.errors : [e];
                    }
                }
                var _finalizers = this._finalizers;
                if (_finalizers) {
                    this._finalizers = null;
                    try {
                        for (var _finalizers_1 = __values(_finalizers), _finalizers_1_1 = _finalizers_1.next(); !_finalizers_1_1.done; _finalizers_1_1 = _finalizers_1.next()) {
                            var finalizer = _finalizers_1_1.value;
                            try {
                                execFinalizer(finalizer);
                            }
                            catch (err) {
                                errors = errors !== null && errors !== void 0 ? errors : [];
                                if (err instanceof UnsubscriptionError) {
                                    errors = __spreadArray(__spreadArray([], __read(errors)), __read(err.errors));
                                }
                                else {
                                    errors.push(err);
                                }
                            }
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_finalizers_1_1 && !_finalizers_1_1.done && (_b = _finalizers_1.return)) _b.call(_finalizers_1);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
                if (errors) {
                    throw new UnsubscriptionError(errors);
                }
            }
        };
        Subscription.prototype.add = function (teardown) {
            var _a;
            if (teardown && teardown !== this) {
                if (this.closed) {
                    execFinalizer(teardown);
                }
                else {
                    if (teardown instanceof Subscription) {
                        if (teardown.closed || teardown._hasParent(this)) {
                            return;
                        }
                        teardown._addParent(this);
                    }
                    (this._finalizers = (_a = this._finalizers) !== null && _a !== void 0 ? _a : []).push(teardown);
                }
            }
        };
        Subscription.prototype._hasParent = function (parent) {
            var _parentage = this._parentage;
            return _parentage === parent || (Array.isArray(_parentage) && _parentage.includes(parent));
        };
        Subscription.prototype._addParent = function (parent) {
            var _parentage = this._parentage;
            this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;
        };
        Subscription.prototype._removeParent = function (parent) {
            var _parentage = this._parentage;
            if (_parentage === parent) {
                this._parentage = null;
            }
            else if (Array.isArray(_parentage)) {
                arrRemove(_parentage, parent);
            }
        };
        Subscription.prototype.remove = function (teardown) {
            var _finalizers = this._finalizers;
            _finalizers && arrRemove(_finalizers, teardown);
            if (teardown instanceof Subscription) {
                teardown._removeParent(this);
            }
        };
        Subscription.EMPTY = (function () {
            var empty = new Subscription();
            empty.closed = true;
            return empty;
        })();
        return Subscription;
    }());
    Subscription.EMPTY;
    function isSubscription(value) {
        return (value instanceof Subscription ||
            (value && 'closed' in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe)));
    }
    function execFinalizer(finalizer) {
        if (isFunction(finalizer)) {
            finalizer();
        }
        else {
            finalizer.unsubscribe();
        }
    }

    var config = {
        onUnhandledError: null,
        onStoppedNotification: null,
        Promise: undefined,
        useDeprecatedSynchronousErrorHandling: false,
        useDeprecatedNextContext: false,
    };

    var timeoutProvider = {
        setTimeout: function (handler, timeout) {
            var args = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args[_i - 2] = arguments[_i];
            }
            var delegate = timeoutProvider.delegate;
            if (delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) {
                return delegate.setTimeout.apply(delegate, __spreadArray([handler, timeout], __read(args)));
            }
            return setTimeout.apply(void 0, __spreadArray([handler, timeout], __read(args)));
        },
        clearTimeout: function (handle) {
            var delegate = timeoutProvider.delegate;
            return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);
        },
        delegate: undefined,
    };

    function reportUnhandledError(err) {
        timeoutProvider.setTimeout(function () {
            {
                throw err;
            }
        });
    }

    function noop() { }

    function errorContext(cb) {
        {
            cb();
        }
    }

    var Subscriber = (function (_super) {
        __extends(Subscriber, _super);
        function Subscriber(destination) {
            var _this = _super.call(this) || this;
            _this.isStopped = false;
            if (destination) {
                _this.destination = destination;
                if (isSubscription(destination)) {
                    destination.add(_this);
                }
            }
            else {
                _this.destination = EMPTY_OBSERVER;
            }
            return _this;
        }
        Subscriber.create = function (next, error, complete) {
            return new SafeSubscriber(next, error, complete);
        };
        Subscriber.prototype.next = function (value) {
            if (this.isStopped) ;
            else {
                this._next(value);
            }
        };
        Subscriber.prototype.error = function (err) {
            if (this.isStopped) ;
            else {
                this.isStopped = true;
                this._error(err);
            }
        };
        Subscriber.prototype.complete = function () {
            if (this.isStopped) ;
            else {
                this.isStopped = true;
                this._complete();
            }
        };
        Subscriber.prototype.unsubscribe = function () {
            if (!this.closed) {
                this.isStopped = true;
                _super.prototype.unsubscribe.call(this);
                this.destination = null;
            }
        };
        Subscriber.prototype._next = function (value) {
            this.destination.next(value);
        };
        Subscriber.prototype._error = function (err) {
            try {
                this.destination.error(err);
            }
            finally {
                this.unsubscribe();
            }
        };
        Subscriber.prototype._complete = function () {
            try {
                this.destination.complete();
            }
            finally {
                this.unsubscribe();
            }
        };
        return Subscriber;
    }(Subscription));
    var _bind = Function.prototype.bind;
    function bind(fn, thisArg) {
        return _bind.call(fn, thisArg);
    }
    var ConsumerObserver = (function () {
        function ConsumerObserver(partialObserver) {
            this.partialObserver = partialObserver;
        }
        ConsumerObserver.prototype.next = function (value) {
            var partialObserver = this.partialObserver;
            if (partialObserver.next) {
                try {
                    partialObserver.next(value);
                }
                catch (error) {
                    handleUnhandledError(error);
                }
            }
        };
        ConsumerObserver.prototype.error = function (err) {
            var partialObserver = this.partialObserver;
            if (partialObserver.error) {
                try {
                    partialObserver.error(err);
                }
                catch (error) {
                    handleUnhandledError(error);
                }
            }
            else {
                handleUnhandledError(err);
            }
        };
        ConsumerObserver.prototype.complete = function () {
            var partialObserver = this.partialObserver;
            if (partialObserver.complete) {
                try {
                    partialObserver.complete();
                }
                catch (error) {
                    handleUnhandledError(error);
                }
            }
        };
        return ConsumerObserver;
    }());
    var SafeSubscriber = (function (_super) {
        __extends(SafeSubscriber, _super);
        function SafeSubscriber(observerOrNext, error, complete) {
            var _this = _super.call(this) || this;
            var partialObserver;
            if (isFunction(observerOrNext) || !observerOrNext) {
                partialObserver = {
                    next: (observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : undefined),
                    error: error !== null && error !== void 0 ? error : undefined,
                    complete: complete !== null && complete !== void 0 ? complete : undefined,
                };
            }
            else {
                var context_1;
                if (_this && config.useDeprecatedNextContext) {
                    context_1 = Object.create(observerOrNext);
                    context_1.unsubscribe = function () { return _this.unsubscribe(); };
                    partialObserver = {
                        next: observerOrNext.next && bind(observerOrNext.next, context_1),
                        error: observerOrNext.error && bind(observerOrNext.error, context_1),
                        complete: observerOrNext.complete && bind(observerOrNext.complete, context_1),
                    };
                }
                else {
                    partialObserver = observerOrNext;
                }
            }
            _this.destination = new ConsumerObserver(partialObserver);
            return _this;
        }
        return SafeSubscriber;
    }(Subscriber));
    function handleUnhandledError(error) {
        {
            reportUnhandledError(error);
        }
    }
    function defaultErrorHandler(err) {
        throw err;
    }
    var EMPTY_OBSERVER = {
        closed: true,
        next: noop,
        error: defaultErrorHandler,
        complete: noop,
    };

    var observable = (function () { return (typeof Symbol === 'function' && Symbol.observable) || '@@observable'; })();

    function identity(x) {
        return x;
    }

    function pipeFromArray(fns) {
        if (fns.length === 0) {
            return identity;
        }
        if (fns.length === 1) {
            return fns[0];
        }
        return function piped(input) {
            return fns.reduce(function (prev, fn) { return fn(prev); }, input);
        };
    }

    var Observable = (function () {
        function Observable(subscribe) {
            if (subscribe) {
                this._subscribe = subscribe;
            }
        }
        Observable.prototype.lift = function (operator) {
            var observable = new Observable();
            observable.source = this;
            observable.operator = operator;
            return observable;
        };
        Observable.prototype.subscribe = function (observerOrNext, error, complete) {
            var _this = this;
            var subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);
            errorContext(function () {
                var _a = _this, operator = _a.operator, source = _a.source;
                subscriber.add(operator
                    ?
                        operator.call(subscriber, source)
                    : source
                        ?
                            _this._subscribe(subscriber)
                        :
                            _this._trySubscribe(subscriber));
            });
            return subscriber;
        };
        Observable.prototype._trySubscribe = function (sink) {
            try {
                return this._subscribe(sink);
            }
            catch (err) {
                sink.error(err);
            }
        };
        Observable.prototype.forEach = function (next, promiseCtor) {
            var _this = this;
            promiseCtor = getPromiseCtor(promiseCtor);
            return new promiseCtor(function (resolve, reject) {
                var subscriber = new SafeSubscriber({
                    next: function (value) {
                        try {
                            next(value);
                        }
                        catch (err) {
                            reject(err);
                            subscriber.unsubscribe();
                        }
                    },
                    error: reject,
                    complete: resolve,
                });
                _this.subscribe(subscriber);
            });
        };
        Observable.prototype._subscribe = function (subscriber) {
            var _a;
            return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);
        };
        Observable.prototype[observable] = function () {
            return this;
        };
        Observable.prototype.pipe = function () {
            var operations = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                operations[_i] = arguments[_i];
            }
            return pipeFromArray(operations)(this);
        };
        Observable.prototype.toPromise = function (promiseCtor) {
            var _this = this;
            promiseCtor = getPromiseCtor(promiseCtor);
            return new promiseCtor(function (resolve, reject) {
                var value;
                _this.subscribe(function (x) { return (value = x); }, function (err) { return reject(err); }, function () { return resolve(value); });
            });
        };
        Observable.create = function (subscribe) {
            return new Observable(subscribe);
        };
        return Observable;
    }());
    function getPromiseCtor(promiseCtor) {
        var _a;
        return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config.Promise) !== null && _a !== void 0 ? _a : Promise;
    }
    function isObserver(value) {
        return value && isFunction(value.next) && isFunction(value.error) && isFunction(value.complete);
    }
    function isSubscriber(value) {
        return (value && value instanceof Subscriber) || (isObserver(value) && isSubscription(value));
    }

    function hasLift(source) {
        return isFunction(source === null || source === void 0 ? void 0 : source.lift);
    }
    function operate(init) {
        return function (source) {
            if (hasLift(source)) {
                return source.lift(function (liftedSource) {
                    try {
                        return init(liftedSource, this);
                    }
                    catch (err) {
                        this.error(err);
                    }
                });
            }
            throw new TypeError('Unable to lift unknown Observable type');
        };
    }

    function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {
        return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);
    }
    var OperatorSubscriber = (function (_super) {
        __extends(OperatorSubscriber, _super);
        function OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {
            var _this = _super.call(this, destination) || this;
            _this.onFinalize = onFinalize;
            _this.shouldUnsubscribe = shouldUnsubscribe;
            _this._next = onNext
                ? function (value) {
                    try {
                        onNext(value);
                    }
                    catch (err) {
                        destination.error(err);
                    }
                }
                : _super.prototype._next;
            _this._error = onError
                ? function (err) {
                    try {
                        onError(err);
                    }
                    catch (err) {
                        destination.error(err);
                    }
                    finally {
                        this.unsubscribe();
                    }
                }
                : _super.prototype._error;
            _this._complete = onComplete
                ? function () {
                    try {
                        onComplete();
                    }
                    catch (err) {
                        destination.error(err);
                    }
                    finally {
                        this.unsubscribe();
                    }
                }
                : _super.prototype._complete;
            return _this;
        }
        OperatorSubscriber.prototype.unsubscribe = function () {
            var _a;
            if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {
                var closed_1 = this.closed;
                _super.prototype.unsubscribe.call(this);
                !closed_1 && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));
            }
        };
        return OperatorSubscriber;
    }(Subscriber));

    function filter(predicate, thisArg) {
        return operate(function (source, subscriber) {
            var index = 0;
            source.subscribe(createOperatorSubscriber(subscriber, function (value) { return predicate.call(thisArg, value, index++) && subscriber.next(value); }));
        });
    }

    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Create an observable of authentication state. The observer is only
     * triggered on sign-in or sign-out.
     * @param auth firebase.auth.Auth
     */
    function authState(auth) {
        return new Observable(function (subscriber) {
            var unsubscribe = onAuthStateChanged(auth, subscriber.next.bind(subscriber), subscriber.error.bind(subscriber), subscriber.complete.bind(subscriber));
            return { unsubscribe: unsubscribe };
        });
    }

    /* src/pages/LoginPage.svelte generated by Svelte v3.49.0 */

    const file = "src/pages/LoginPage.svelte";

    // (31:3) {#if showTerms}
    function create_if_block$1(ctx) {
    	let hr;
    	let t0;
    	let p;

    	const block = {
    		c: function create() {
    			hr = element("hr");
    			t0 = space();
    			p = element("p");
    			p.textContent = "The GPS videos collected through the dashcam are saved in each users Google Drive Account. Users who accept the machine learning terms and conditions are also allowed to process their videos\n\t\t\t\t\tand use the online dashcam managment tool.";
    			attr_dev(hr, "class", "my-2");
    			add_location(hr, file, 31, 4, 1009);
    			add_location(p, file, 32, 4, 1033);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, hr, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, p, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(hr);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$1.name,
    		type: "if",
    		source: "(31:3) {#if showTerms}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1(ctx) {
    	let section1;
    	let section0;
    	let div0;
    	let img;
    	let img_src_value;
    	let t0;
    	let p0;
    	let t2;
    	let p1;
    	let t4;
    	let button0;
    	let i;
    	let t5;
    	let t6;
    	let div1;
    	let button1;
    	let t8;
    	let mounted;
    	let dispose;
    	let if_block = /*showTerms*/ ctx[1] && create_if_block$1(ctx);

    	const block = {
    		c: function create() {
    			section1 = element("section");
    			section0 = element("section");
    			div0 = element("div");
    			img = element("img");
    			t0 = space();
    			p0 = element("p");
    			p0.textContent = "Sign In";
    			t2 = space();
    			p1 = element("p");
    			p1.textContent = "Use your Google Account";
    			t4 = space();
    			button0 = element("button");
    			i = element("i");
    			t5 = text(" Signin with Google");
    			t6 = space();
    			div1 = element("div");
    			button1 = element("button");
    			button1.textContent = "Why do I need a Google Account?";
    			t8 = space();
    			if (if_block) if_block.c();
    			if (!src_url_equal(img.src, img_src_value = 'images/LogoBlue.svg')) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "onerror", "https://i.picsum.photos/id/870/200/300.jpg?blur=2&grayscale&hmac=ujRymp644uYVjdKJM7kyLDSsrqNSMVRPnGU99cKl6Vs");
    			attr_dev(img, "alt", "Dashcam");
    			attr_dev(img, "class", "h-64 w-auto object-cover rounded-lg m-auto");
    			add_location(img, file, 14, 3, 345);
    			attr_dev(div0, "class", "items-center justify-center text-align-center my-4");
    			add_location(div0, file, 12, 2, 276);
    			attr_dev(p0, "class", "text-bold text-2xl mt-4");
    			add_location(p0, file, 23, 2, 595);
    			attr_dev(p1, "class", "text-center my-2");
    			add_location(p1, file, 24, 2, 644);
    			attr_dev(i, "class", "fa-brands fa-google");
    			add_location(i, file, 25, 61, 761);
    			attr_dev(button0, "class", "card-btn btn-primary my-4");
    			add_location(button0, file, 25, 2, 702);
    			attr_dev(button1, "class", "text-center hover:underline");
    			add_location(button1, file, 28, 3, 877);
    			attr_dev(div1, "class", "items-center justify-center mt-4");
    			add_location(div1, file, 27, 2, 827);
    			attr_dev(section0, "class", "h-fit card rounded-lg shadow-xl p-4 text-sm w-96 text-center");
    			add_location(section0, file, 10, 1, 194);
    			attr_dev(section1, "class", "py-4 px-4 flex h-screen items-center justify-center");
    			add_location(section1, file, 9, 0, 123);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section1, anchor);
    			append_dev(section1, section0);
    			append_dev(section0, div0);
    			append_dev(div0, img);
    			append_dev(section0, t0);
    			append_dev(section0, p0);
    			append_dev(section0, t2);
    			append_dev(section0, p1);
    			append_dev(section0, t4);
    			append_dev(section0, button0);
    			append_dev(button0, i);
    			append_dev(button0, t5);
    			append_dev(section0, t6);
    			append_dev(section0, div1);
    			append_dev(div1, button1);
    			append_dev(div1, t8);
    			if (if_block) if_block.m(div1, null);

    			if (!mounted) {
    				dispose = [
    					listen_dev(
    						button0,
    						"click",
    						function () {
    							if (is_function(/*login*/ ctx[0])) /*login*/ ctx[0].apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					),
    					listen_dev(button1, "click", /*toggleTerms*/ ctx[2], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;

    			if (/*showTerms*/ ctx[1]) {
    				if (if_block) ; else {
    					if_block = create_if_block$1(ctx);
    					if_block.c();
    					if_block.m(div1, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop$2,
    		o: noop$2,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section1);
    			if (if_block) if_block.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('LoginPage', slots, []);
    	let { login } = $$props;
    	let showTerms = false;

    	const toggleTerms = () => {
    		$$invalidate(1, showTerms = !showTerms);
    	};

    	const writable_props = ['login'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<LoginPage> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('login' in $$props) $$invalidate(0, login = $$props.login);
    	};

    	$$self.$capture_state = () => ({ login, showTerms, toggleTerms });

    	$$self.$inject_state = $$props => {
    		if ('login' in $$props) $$invalidate(0, login = $$props.login);
    		if ('showTerms' in $$props) $$invalidate(1, showTerms = $$props.showTerms);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [login, showTerms, toggleTerms];
    }

    class LoginPage extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1, create_fragment$1, safe_not_equal, { login: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "LoginPage",
    			options,
    			id: create_fragment$1.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*login*/ ctx[0] === undefined && !('login' in props)) {
    			console.warn("<LoginPage> was created without expected prop 'login'");
    		}
    	}

    	get login() {
    		throw new Error("<LoginPage>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set login(value) {
    		throw new Error("<LoginPage>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/App.svelte generated by Svelte v3.49.0 */

    // (61:0) {:else}
    function create_else_block(ctx) {
    	let loginpage;
    	let current;

    	loginpage = new LoginPage({
    			props: { login: /*login*/ ctx[2] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(loginpage.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(loginpage, target, anchor);
    			current = true;
    		},
    		p: noop$2,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(loginpage.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(loginpage.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(loginpage, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block.name,
    		type: "else",
    		source: "(61:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (59:0) {#if user && accessTokenValue}
    function create_if_block(ctx) {
    	let homepage;
    	let current;

    	homepage = new HomePage({
    			props: {
    				user: /*user*/ ctx[0],
    				signOut: /*signOut*/ ctx[3]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(homepage.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(homepage, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const homepage_changes = {};
    			if (dirty & /*user*/ 1) homepage_changes.user = /*user*/ ctx[0];
    			homepage.$set(homepage_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(homepage.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(homepage.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(homepage, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(59:0) {#if user && accessTokenValue}",
    		ctx
    	});

    	return block;
    }

    function create_fragment(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block, create_else_block];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*user*/ ctx[0] && /*accessTokenValue*/ ctx[1]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function setSessionStorageWithExpiry(key, value) {
    	const now = new Date();
    	const item = { value, expiry: now.getTime() + 3600000 };
    	localStorage.setItem(key, JSON.stringify(item));
    }

    function getSessionStorageWithExpiry(key) {
    	const itemStr = localStorage.getItem(key);

    	if (!itemStr) {
    		return null;
    	}

    	const item = JSON.parse(itemStr);
    	const now = new Date();

    	if (now.getTime() > item.expiry) {
    		localStorage.removeItem(key);
    		return null;
    	}

    	return item.value;
    }

    function instance($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('App', slots, []);
    	let user = null;
    	let unsubscribeUser;
    	const loggedIn$ = authState(auth).pipe(filter(user => !!user));
    	let accessTokenValue = getSessionStorageWithExpiry('AccessToken');

    	onMount(() => {
    		if (loggedIn$) {
    			unsubscribeUser = authState(auth).subscribe(u => $$invalidate(0, user = u));
    		}
    	});

    	const login = async () => {
    		const tempAccessTokenValue = await googleSignIn();
    		setSessionStorageWithExpiry("AccessToken", tempAccessTokenValue);
    		$$invalidate(1, accessTokenValue = tempAccessTokenValue);
    	};

    	const signOut = () => {
    		auth.signOut();
    		$$invalidate(0, user = null);
    	};

    	onDestroy(() => {
    		unsubscribeAccessToken;
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<App> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		HomePage,
    		auth,
    		googleSignIn,
    		authState,
    		onDestroy,
    		LoginPage,
    		filter,
    		onMount,
    		user,
    		unsubscribeUser,
    		loggedIn$,
    		setSessionStorageWithExpiry,
    		getSessionStorageWithExpiry,
    		accessTokenValue,
    		login,
    		signOut
    	});

    	$$self.$inject_state = $$props => {
    		if ('user' in $$props) $$invalidate(0, user = $$props.user);
    		if ('unsubscribeUser' in $$props) unsubscribeUser = $$props.unsubscribeUser;
    		if ('accessTokenValue' in $$props) $$invalidate(1, accessTokenValue = $$props.accessTokenValue);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [user, accessTokenValue, login, signOut];
    }

    class App extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance, create_fragment, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "App",
    			options,
    			id: create_fragment.name
    		});
    	}
    }

    const app = new App({
      target: document.body,

    });

    return app;

})();
//# sourceMappingURL=bundle.js.map
